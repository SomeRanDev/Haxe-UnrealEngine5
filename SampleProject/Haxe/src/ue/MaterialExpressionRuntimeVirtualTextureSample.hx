// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMaterialExpressionRuntimeVirtualTextureSample")
@:include("Materials/MaterialExpressionRuntimeVirtualTextureSample.h")
@:structAccess
extern class MaterialExpressionRuntimeVirtualTextureSample extends MaterialExpression {
	public var Coordinates: ExpressionInput;
	public var WorldPosition: ExpressionInput;
	public var MipValue: ExpressionInput;
	public var VirtualTexture: cpp.Star<RuntimeVirtualTexture>;
	public var MaterialType: ERuntimeVirtualTextureMaterialType;
	public var bSinglePhysicalSpace: Bool;
	public var bAdaptive: Bool;
	public var MipValueMode: TEnumAsByte<ERuntimeVirtualTextureMipValueMode>;
	public var TextureAddressMode: TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstMaterialExpressionRuntimeVirtualTextureSample(MaterialExpressionRuntimeVirtualTextureSample) from MaterialExpressionRuntimeVirtualTextureSample {
	public extern var Coordinates(get, never): ExpressionInput;
	public inline extern function get_Coordinates(): ExpressionInput return this.Coordinates;
	public extern var WorldPosition(get, never): ExpressionInput;
	public inline extern function get_WorldPosition(): ExpressionInput return this.WorldPosition;
	public extern var MipValue(get, never): ExpressionInput;
	public inline extern function get_MipValue(): ExpressionInput return this.MipValue;
	public extern var VirtualTexture(get, never): cpp.Star<RuntimeVirtualTexture.ConstRuntimeVirtualTexture>;
	public inline extern function get_VirtualTexture(): cpp.Star<RuntimeVirtualTexture.ConstRuntimeVirtualTexture> return this.VirtualTexture;
	public extern var MaterialType(get, never): ERuntimeVirtualTextureMaterialType;
	public inline extern function get_MaterialType(): ERuntimeVirtualTextureMaterialType return this.MaterialType;
	public extern var bSinglePhysicalSpace(get, never): Bool;
	public inline extern function get_bSinglePhysicalSpace(): Bool return this.bSinglePhysicalSpace;
	public extern var bAdaptive(get, never): Bool;
	public inline extern function get_bAdaptive(): Bool return this.bAdaptive;
	public extern var MipValueMode(get, never): TEnumAsByte<ERuntimeVirtualTextureMipValueMode>;
	public inline extern function get_MipValueMode(): TEnumAsByte<ERuntimeVirtualTextureMipValueMode> return this.MipValueMode;
	public extern var TextureAddressMode(get, never): TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode>;
	public inline extern function get_TextureAddressMode(): TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode> return this.TextureAddressMode;
}

@:forward
@:nativeGen
@:native("MaterialExpressionRuntimeVirtualTextureSample*")
abstract MaterialExpressionRuntimeVirtualTextureSamplePtr(cpp.Star<MaterialExpressionRuntimeVirtualTextureSample>) from cpp.Star<MaterialExpressionRuntimeVirtualTextureSample> to cpp.Star<MaterialExpressionRuntimeVirtualTextureSample>{
	@:from
	public static extern inline function fromValue(v: MaterialExpressionRuntimeVirtualTextureSample): MaterialExpressionRuntimeVirtualTextureSamplePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MaterialExpressionRuntimeVirtualTextureSample {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}