// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeBaseNodeContainer")
@:include("Nodes/InterchangeBaseNodeContainer.h")
@:valueType
extern class InterchangeBaseNodeContainer extends Object {
	private var Nodes: TMap<FString, ucpp.Ptr<InterchangeBaseNode>>;

	public function SetNodeParentUid(NodeUniqueID: FString, NewParentNodeUid: FString): Bool;
	public function SaveToFile(Filename: FString): Void;
	public function ResetChildrenCache(): Void;
	public function LoadFromFile(Filename: FString): Void;
	public function IsNodeUidValid(NodeUniqueID: FString): Bool;
	public function GetRoots(RootNodes: ucpp.Ref<TArray<FString>>): Void;
	public function GetNodes(ClassNode: ucpp.Ptr<Class>, OutNodes: ucpp.Ref<TArray<FString>>): Void;
	public function GetNodeChildrenUids(NodeUniqueID: FString): TArray<FString>;
	public function GetNodeChildrenCount(NodeUniqueID: FString): ucpp.num.Int32;
	public function GetNodeChildren(NodeUniqueID: FString, ChildIndex: ucpp.num.Int32): ucpp.Ptr<InterchangeBaseNode>;
	public function GetNode(NodeUniqueID: FString): ucpp.Ptr<InterchangeBaseNode.ConstInterchangeBaseNode>;
	public function GetFactoryNode(NodeUniqueID: FString): ucpp.Ptr<InterchangeFactoryBaseNode>;
	public function ComputeChildrenCache(): Void;
	public function AddNode(Node: ucpp.Ptr<InterchangeBaseNode>): FString;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(IsNodeUidValid, GetRoots, GetNodes, GetNodeChildrenUids, GetNodeChildrenCount, GetNode, GetFactoryNode)
@:nativeGen
abstract ConstInterchangeBaseNodeContainer(InterchangeBaseNodeContainer) from InterchangeBaseNodeContainer {
}

@:forward
@:nativeGen
@:native("InterchangeBaseNodeContainer*")
abstract InterchangeBaseNodeContainerPtr(ucpp.Ptr<InterchangeBaseNodeContainer>) from ucpp.Ptr<InterchangeBaseNodeContainer> to ucpp.Ptr<InterchangeBaseNodeContainer>{
	@:from
	public static extern inline function fromValue(v: InterchangeBaseNodeContainer): InterchangeBaseNodeContainerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeBaseNodeContainer {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}