// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAIPerceptionComponent")
@:include("Perception/AIPerceptionComponent.h")
@:valueType
extern class AIPerceptionComp extends ActorComp {
	@:protected public var SensesConfig: TArray<ucpp.Ptr<AISenseConfig>>;
	@:protected public var DominantSense: TSubclassOf<AISense>;
	@:protected public var AIOwner: ucpp.Ptr<AIController>;
	public var OnPerceptionUpdated: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ucpp.Ptr<Actor>>>) -> Void>;
	public var OnTargetPerceptionForgotten: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Actor>) -> Void>;
	public var OnTargetPerceptionUpdated: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Actor>, AIStimulus) -> Void>;
	public var OnTargetPerceptionInfoUpdated: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<ActorPerceptionUpdateInfo>) -> Void>;

	public function SetSenseEnabled(SenseClass: TSubclassOf<AISense>, bEnable: Bool): Void;
	public function RequestStimuliListenerUpdate(): Void;
	public function OnOwnerEndPlay(Actor: ucpp.Ptr<Actor>, EndPlayReason: TEnumAsByte<EEndPlayReason>): Void;
	public function GetPerceivedHostileActorsBySense(SenseToUse: TSubclassOf<AISense.ConstAISense>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function GetPerceivedHostileActors(OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function GetPerceivedActors(SenseToUse: TSubclassOf<AISense>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function GetKnownPerceivedActors(SenseToUse: TSubclassOf<AISense>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function GetCurrentlyPerceivedActors(SenseToUse: TSubclassOf<AISense>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function GetActorsPerception(Actor: ucpp.Ptr<Actor>, Info: ucpp.Ref<ActorPerceptionBlueprintInfo>): Bool;
	public function ForgetAll(): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetPerceivedHostileActorsBySense, GetPerceivedHostileActors, GetPerceivedActors, GetKnownPerceivedActors, GetCurrentlyPerceivedActors)
@:nativeGen
abstract ConstAIPerceptionComp(AIPerceptionComp) from AIPerceptionComp {
	public extern var OnPerceptionUpdated(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ucpp.Ptr<Actor.ConstActor>>>) -> Void>;
	public inline extern function get_OnPerceptionUpdated(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ucpp.Ptr<Actor.ConstActor>>>) -> Void> return this.OnPerceptionUpdated;
	public extern var OnTargetPerceptionForgotten(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnTargetPerceptionForgotten(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Actor.ConstActor>) -> Void> return this.OnTargetPerceptionForgotten;
	public extern var OnTargetPerceptionUpdated(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Actor.ConstActor>, AIStimulus) -> Void>;
	public inline extern function get_OnTargetPerceptionUpdated(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Actor.ConstActor>, AIStimulus) -> Void> return this.OnTargetPerceptionUpdated;
	public extern var OnTargetPerceptionInfoUpdated(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<ActorPerceptionUpdateInfo>) -> Void>;
	public inline extern function get_OnTargetPerceptionInfoUpdated(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<ActorPerceptionUpdateInfo>) -> Void> return this.OnTargetPerceptionInfoUpdated;
}

@:forward
@:nativeGen
@:native("AIPerceptionComp*")
abstract AIPerceptionCompPtr(ucpp.Ptr<AIPerceptionComp>) from ucpp.Ptr<AIPerceptionComp> to ucpp.Ptr<AIPerceptionComp>{
	@:from
	public static extern inline function fromValue(v: AIPerceptionComp): AIPerceptionCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AIPerceptionComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}