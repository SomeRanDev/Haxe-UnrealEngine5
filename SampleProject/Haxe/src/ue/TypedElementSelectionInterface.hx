// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTypedElementSelectionInterface")
@:valueType
extern class TypedElementSelectionInterface extends Interface {
	public function SelectElement(InElementHandle: ucpp.Ref<ScriptTypedElementHandle>, InSelectionSet: ScriptTypedElementListProxy, InSelectionOptions: ucpp.Ref<TypedElementSelectionOptions>): Bool;
	public function IsElementSelected(InElementHandle: ucpp.Ref<ScriptTypedElementHandle>, InSelectionSet: ScriptTypedElementListProxy, InSelectionOptions: ucpp.Ref<TypedElementIsSelectedOptions>): Bool;
	public function GetSelectionElement(InElementHandle: ucpp.Ref<ScriptTypedElementHandle>, InCurrentSelection: ScriptTypedElementListProxy, InSelectionMethod: ETypedElementSelectionMethod): ScriptTypedElementHandle;
	public function DeselectElement(InElementHandle: ucpp.Ref<ScriptTypedElementHandle>, InSelectionSet: ScriptTypedElementListProxy, InSelectionOptions: ucpp.Ref<TypedElementSelectionOptions>): Bool;
	public function CanSelectElement(InElementHandle: ucpp.Ref<ScriptTypedElementHandle>, InSelectionOptions: ucpp.Ref<TypedElementSelectionOptions>): Bool;
	public function CanDeselectElement(InElementHandle: ucpp.Ref<ScriptTypedElementHandle>, InSelectionOptions: ucpp.Ref<TypedElementSelectionOptions>): Bool;
	public function AllowSelectionModifiers(InElementHandle: ucpp.Ref<ScriptTypedElementHandle>, InSelectionSet: ScriptTypedElementListProxy): Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstTypedElementSelectionInterface(TypedElementSelectionInterface) from TypedElementSelectionInterface {
}

@:forward
@:nativeGen
@:native("TypedElementSelectionInterface*")
abstract TypedElementSelectionInterfacePtr(ucpp.Ptr<TypedElementSelectionInterface>) from ucpp.Ptr<TypedElementSelectionInterface> to ucpp.Ptr<TypedElementSelectionInterface>{
	@:from
	public static extern inline function fromValue(v: TypedElementSelectionInterface): TypedElementSelectionInterfacePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TypedElementSelectionInterface {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}