// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy")
@:include("ARGeoTrackingSupport.h")
@:valueType
extern class CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy extends ARBaseAsyncTaskBlueprintProxy {
	public var OnSuccess: HaxeMulticastSparseDelegateProperty<(Bool, FString) -> Void>;
	public var OnFailed: HaxeMulticastSparseDelegateProperty<(Bool, FString) -> Void>;

	public function GeoTrackingAvailabilityDelegate__DelegateSignature(bIsAvailable: Bool, Error: FString): Void;
	public function CheckGeoTrackingAvailabilityAtLocation(WorldContextObject: ucpp.Ptr<Object>, Longitude: ucpp.num.Float32, Latitude: ucpp.num.Float32): ucpp.Ptr<CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy>;
	public function CheckGeoTrackingAvailability(WorldContextObject: ucpp.Ptr<Object>): ucpp.Ptr<CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy(CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy) from CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy {
	public extern var OnSuccess(get, never): HaxeMulticastSparseDelegateProperty<(Bool, FString) -> Void>;
	public inline extern function get_OnSuccess(): HaxeMulticastSparseDelegateProperty<(Bool, FString) -> Void> return this.OnSuccess;
	public extern var OnFailed(get, never): HaxeMulticastSparseDelegateProperty<(Bool, FString) -> Void>;
	public inline extern function get_OnFailed(): HaxeMulticastSparseDelegateProperty<(Bool, FString) -> Void> return this.OnFailed;
}

@:forward
@:nativeGen
@:native("CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy*")
abstract CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxyPtr(ucpp.Ptr<CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy>) from ucpp.Ptr<CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy> to ucpp.Ptr<CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy>{
	@:from
	public static extern inline function fromValue(v: CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxyPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}