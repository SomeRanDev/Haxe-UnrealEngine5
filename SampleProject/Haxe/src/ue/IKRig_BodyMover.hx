// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UIKRig_BodyMover")
@:include("Solvers/IKRig_BodyMover.h")
@:valueType
extern class IKRig_BodyMover extends IKRigSolver {
	public var RootBone: FName;
	public var PositionAlpha: ucpp.num.Float32;
	public var PositionPositiveX: ucpp.num.Float32;
	public var PositionNegativeX: ucpp.num.Float32;
	public var PositionPositiveY: ucpp.num.Float32;
	public var PositionNegativeY: ucpp.num.Float32;
	public var PositionPositiveZ: ucpp.num.Float32;
	public var PositionNegativeZ: ucpp.num.Float32;
	public var RotationAlpha: ucpp.num.Float32;
	public var RotateXAlpha: ucpp.num.Float32;
	public var RotateYAlpha: ucpp.num.Float32;
	public var RotateZAlpha: ucpp.num.Float32;
	public var Effectors: TArray<ucpp.Ptr<IKRig_BodyMoverEffector>>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstIKRig_BodyMover(IKRig_BodyMover) from IKRig_BodyMover {
	public extern var RootBone(get, never): FName;
	public inline extern function get_RootBone(): FName return this.RootBone;
	public extern var PositionAlpha(get, never): ucpp.num.Float32;
	public inline extern function get_PositionAlpha(): ucpp.num.Float32 return this.PositionAlpha;
	public extern var PositionPositiveX(get, never): ucpp.num.Float32;
	public inline extern function get_PositionPositiveX(): ucpp.num.Float32 return this.PositionPositiveX;
	public extern var PositionNegativeX(get, never): ucpp.num.Float32;
	public inline extern function get_PositionNegativeX(): ucpp.num.Float32 return this.PositionNegativeX;
	public extern var PositionPositiveY(get, never): ucpp.num.Float32;
	public inline extern function get_PositionPositiveY(): ucpp.num.Float32 return this.PositionPositiveY;
	public extern var PositionNegativeY(get, never): ucpp.num.Float32;
	public inline extern function get_PositionNegativeY(): ucpp.num.Float32 return this.PositionNegativeY;
	public extern var PositionPositiveZ(get, never): ucpp.num.Float32;
	public inline extern function get_PositionPositiveZ(): ucpp.num.Float32 return this.PositionPositiveZ;
	public extern var PositionNegativeZ(get, never): ucpp.num.Float32;
	public inline extern function get_PositionNegativeZ(): ucpp.num.Float32 return this.PositionNegativeZ;
	public extern var RotationAlpha(get, never): ucpp.num.Float32;
	public inline extern function get_RotationAlpha(): ucpp.num.Float32 return this.RotationAlpha;
	public extern var RotateXAlpha(get, never): ucpp.num.Float32;
	public inline extern function get_RotateXAlpha(): ucpp.num.Float32 return this.RotateXAlpha;
	public extern var RotateYAlpha(get, never): ucpp.num.Float32;
	public inline extern function get_RotateYAlpha(): ucpp.num.Float32 return this.RotateYAlpha;
	public extern var RotateZAlpha(get, never): ucpp.num.Float32;
	public inline extern function get_RotateZAlpha(): ucpp.num.Float32 return this.RotateZAlpha;
	public extern var Effectors(get, never): TArray<ucpp.Ptr<IKRig_BodyMoverEffector.ConstIKRig_BodyMoverEffector>>;
	public inline extern function get_Effectors(): TArray<ucpp.Ptr<IKRig_BodyMoverEffector.ConstIKRig_BodyMoverEffector>> return this.Effectors;
}

@:forward
@:nativeGen
@:native("IKRig_BodyMover*")
abstract IKRig_BodyMoverPtr(ucpp.Ptr<IKRig_BodyMover>) from ucpp.Ptr<IKRig_BodyMover> to ucpp.Ptr<IKRig_BodyMover>{
	@:from
	public static extern inline function fromValue(v: IKRig_BodyMover): IKRig_BodyMoverPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): IKRig_BodyMover {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}