// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USequencePlayerLibrary")
@:include("SequencePlayerLibrary.h")
@:valueType
extern class SequencePlayerLibrary extends BlueprintFunctionLibrary {
	public function SetStartPosition(SequencePlayer: ucpp.Ref<SequencePlayerReference>, StartPosition: ucpp.num.Float32): SequencePlayerReference;
	public function SetSequenceWithInertialBlending(UpdateContext: ucpp.Ref<AnimUpdateContext>, SequencePlayer: ucpp.Ref<SequencePlayerReference>, Sequence: ucpp.Ptr<AnimSequenceBase>, BlendTime: ucpp.num.Float32): SequencePlayerReference;
	public function SetSequence(SequencePlayer: ucpp.Ref<SequencePlayerReference>, Sequence: ucpp.Ptr<AnimSequenceBase>): SequencePlayerReference;
	public function SetPlayRate(SequencePlayer: ucpp.Ref<SequencePlayerReference>, PlayRate: ucpp.num.Float32): SequencePlayerReference;
	public function SetAccumulatedTime(SequencePlayer: ucpp.Ref<SequencePlayerReference>, Time: ucpp.num.Float32): SequencePlayerReference;
	public function GetStartPosition(SequencePlayer: ucpp.Ref<SequencePlayerReference>): ucpp.num.Float32;
	public function GetSequencePure(SequencePlayer: ucpp.Ref<SequencePlayerReference>): ucpp.Ptr<AnimSequenceBase>;
	public function GetSequence(SequencePlayer: ucpp.Ref<SequencePlayerReference>, SequenceBase: ucpp.Ref<ucpp.Ptr<AnimSequenceBase>>): SequencePlayerReference;
	public function GetPlayRate(SequencePlayer: ucpp.Ref<SequencePlayerReference>): ucpp.num.Float32;
	public function GetLoopAnimation(SequencePlayer: ucpp.Ref<SequencePlayerReference>): Bool;
	public function GetAccumulatedTime(SequencePlayer: ucpp.Ref<SequencePlayerReference>): ucpp.num.Float32;
	public function ConvertToSequencePlayerPure(Node: ucpp.Ref<AnimNodeReference>, SequencePlayer: ucpp.Ref<SequencePlayerReference>, Result: ucpp.Ref<Bool>): Void;
	public function ConvertToSequencePlayer(Node: ucpp.Ref<AnimNodeReference>, Result: ucpp.Ref<EAnimNodeReferenceConversionResult>): SequencePlayerReference;
	public function ComputePlayRateFromDuration(SequencePlayer: ucpp.Ref<SequencePlayerReference>, Duration: ucpp.num.Float32): ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstSequencePlayerLibrary(SequencePlayerLibrary) from SequencePlayerLibrary {
}

@:forward
@:nativeGen
@:native("SequencePlayerLibrary*")
abstract SequencePlayerLibraryPtr(ucpp.Ptr<SequencePlayerLibrary>) from ucpp.Ptr<SequencePlayerLibrary> to ucpp.Ptr<SequencePlayerLibrary>{
	@:from
	public static extern inline function fromValue(v: SequencePlayerLibrary): SequencePlayerLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SequencePlayerLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}