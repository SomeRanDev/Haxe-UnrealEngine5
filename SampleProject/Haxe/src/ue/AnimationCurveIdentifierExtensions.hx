// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimationCurveIdentifierExtensions")
@:include("Animation/AnimData/CurveIdentifier.h")
@:structAccess
extern class AnimationCurveIdentifierExtensions extends BlueprintFunctionLibrary {
	public function IsValid(Identifier: cpp.Reference<AnimationCurveIdentifier>): cpp.Reference<Bool>;
	public function GetType(Identifier: cpp.Reference<AnimationCurveIdentifier>): cpp.Reference<ERawCurveTrackTypes>;
	public function GetTransformChildCurveIdentifier(InOutIdentifier: cpp.Reference<AnimationCurveIdentifier>, Channel: ETransformCurveChannel, Axis: EVectorCurveChannel): cpp.Reference<Bool>;
	public function GetName(Identifier: cpp.Reference<AnimationCurveIdentifier>): cpp.Reference<FName>;
	public function GetCurveIdentifiers(InSkeleton: cpp.Star<Skeleton>, CurveType: ERawCurveTrackTypes): cpp.Reference<TArray<AnimationCurveIdentifier>>;
	public function GetCurveIdentifier(InSkeleton: cpp.Star<Skeleton>, Name: FName, CurveType: ERawCurveTrackTypes): cpp.Reference<AnimationCurveIdentifier>;
	public function FindCurveIdentifier(InSkeleton: cpp.Star<Skeleton.ConstSkeleton>, Name: FName, CurveType: ERawCurveTrackTypes): cpp.Reference<AnimationCurveIdentifier>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAnimationCurveIdentifierExtensions(AnimationCurveIdentifierExtensions) from AnimationCurveIdentifierExtensions {
}

@:forward
@:nativeGen
@:native("AnimationCurveIdentifierExtensions*")
abstract AnimationCurveIdentifierExtensionsPtr(cpp.Star<AnimationCurveIdentifierExtensions>) from cpp.Star<AnimationCurveIdentifierExtensions> to cpp.Star<AnimationCurveIdentifierExtensions>{
	@:from
	public static extern inline function fromValue(v: AnimationCurveIdentifierExtensions): AnimationCurveIdentifierExtensionsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimationCurveIdentifierExtensions {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}