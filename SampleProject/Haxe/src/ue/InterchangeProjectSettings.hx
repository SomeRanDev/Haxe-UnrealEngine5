// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeProjectSettings")
@:include("InterchangeProjectSettings.h")
@:valueType
extern class InterchangeProjectSettings extends DeveloperSettings {
	public var ContentImportSettings: InterchangeContentImportSettings;
	public var SceneImportSettings: InterchangeImportSettings;
	public var FilePickerClass: TSoftClassPtr<Class>;
	public var bStaticMeshUseSmoothEdgesIfSmoothingInformationIsMissing: Bool;
	public var GenericPipelineClass: TSoftClassPtr<Class>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstInterchangeProjectSettings(InterchangeProjectSettings) from InterchangeProjectSettings {
	public extern var ContentImportSettings(get, never): InterchangeContentImportSettings;
	public inline extern function get_ContentImportSettings(): InterchangeContentImportSettings return this.ContentImportSettings;
	public extern var SceneImportSettings(get, never): InterchangeImportSettings;
	public inline extern function get_SceneImportSettings(): InterchangeImportSettings return this.SceneImportSettings;
	public extern var FilePickerClass(get, never): TSoftClassPtr<Class.ConstClass>;
	public inline extern function get_FilePickerClass(): TSoftClassPtr<Class.ConstClass> return this.FilePickerClass;
	public extern var bStaticMeshUseSmoothEdgesIfSmoothingInformationIsMissing(get, never): Bool;
	public inline extern function get_bStaticMeshUseSmoothEdgesIfSmoothingInformationIsMissing(): Bool return this.bStaticMeshUseSmoothEdgesIfSmoothingInformationIsMissing;
	public extern var GenericPipelineClass(get, never): TSoftClassPtr<Class.ConstClass>;
	public inline extern function get_GenericPipelineClass(): TSoftClassPtr<Class.ConstClass> return this.GenericPipelineClass;
}

@:forward
@:nativeGen
@:native("InterchangeProjectSettings*")
abstract InterchangeProjectSettingsPtr(ucpp.Ptr<InterchangeProjectSettings>) from ucpp.Ptr<InterchangeProjectSettings> to ucpp.Ptr<InterchangeProjectSettings>{
	@:from
	public static extern inline function fromValue(v: InterchangeProjectSettings): InterchangeProjectSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeProjectSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}