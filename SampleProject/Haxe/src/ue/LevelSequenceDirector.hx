// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ULevelSequenceDirector")
@:include("LevelSequenceDirector.h")
@:valueType
extern class LevelSequenceDirector extends Object {
	public var Player: ucpp.Ptr<LevelSequencePlayer>;
	public var SubSequenceID: ucpp.num.Int32;
	public var MovieScenePlayerIndex: ucpp.num.Int32;

	public function OnCreated(): Void;
	public function GetSequence(): ucpp.Ptr<MovieSceneSequence>;
	public function GetRootSequenceTime(): QualifiedFrameTime;
	public function GetMasterSequenceTime(): QualifiedFrameTime;
	public function GetCurrentTime(): QualifiedFrameTime;
	public function GetBoundObjects(ObjectBinding: MovieSceneObjectBindingID): TArray<ucpp.Ptr<Object>>;
	public function GetBoundObject(ObjectBinding: MovieSceneObjectBindingID): ucpp.Ptr<Object>;
	public function GetBoundActors(ObjectBinding: MovieSceneObjectBindingID): TArray<ucpp.Ptr<Actor>>;
	public function GetBoundActor(ObjectBinding: MovieSceneObjectBindingID): ucpp.Ptr<Actor>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetRootSequenceTime, GetMasterSequenceTime, GetCurrentTime)
@:nativeGen
abstract ConstLevelSequenceDirector(LevelSequenceDirector) from LevelSequenceDirector {
	public extern var Player(get, never): ucpp.Ptr<LevelSequencePlayer.ConstLevelSequencePlayer>;
	public inline extern function get_Player(): ucpp.Ptr<LevelSequencePlayer.ConstLevelSequencePlayer> return this.Player;
	public extern var SubSequenceID(get, never): ucpp.num.Int32;
	public inline extern function get_SubSequenceID(): ucpp.num.Int32 return this.SubSequenceID;
	public extern var MovieScenePlayerIndex(get, never): ucpp.num.Int32;
	public inline extern function get_MovieScenePlayerIndex(): ucpp.num.Int32 return this.MovieScenePlayerIndex;
}

@:forward
@:nativeGen
@:native("LevelSequenceDirector*")
abstract LevelSequenceDirectorPtr(ucpp.Ptr<LevelSequenceDirector>) from ucpp.Ptr<LevelSequenceDirector> to ucpp.Ptr<LevelSequenceDirector>{
	@:from
	public static extern inline function fromValue(v: LevelSequenceDirector): LevelSequenceDirectorPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): LevelSequenceDirector {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}