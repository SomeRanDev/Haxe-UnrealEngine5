// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimInstance")
@:include("Animation/AnimInstance.h")
@:valueType
extern class AnimInstance extends Object {
	public var CurrentSkeleton: ucpp.Ptr<Skeleton>;
	public var RootMotionMode: TEnumAsByte<ERootMotionMode>;
	public var bUseMultiThreadedAnimationUpdate: Bool;
	public var bUsingCopyPoseFromMesh: Bool;
	public var bReceiveNotifiesFromLinkedInstances: Bool;
	public var bPropagateNotifiesToLinkedInstances: Bool;
	public var bUseMainInstanceMontageEvaluationData: Bool;
	private var bQueueMontageEvents: Bool;
	public var OnMontageBlendingOut: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage>, Bool) -> Void>;
	public var OnMontageStarted: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage>) -> Void>;
	public var OnMontageEnded: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage>, Bool) -> Void>;
	public var OnAllMontageInstancesEnded: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var NotifyQueue: AnimNotifyQueue;
	public var ActiveAnimNotifyState: TArray<AnimNotifyEvent>;
	public var ActiveAnimNotifyEventReference: TArray<AnimNotifyEventReference>;

	public function WasAnimNotifyTriggeredInStateMachine(MachineIndex: ucpp.num.Int32, AnimNotifyType: TSubclassOf<AnimNotify>): Bool;
	public function WasAnimNotifyTriggeredInSourceState(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32, AnimNotifyType: TSubclassOf<AnimNotify>): Bool;
	public function WasAnimNotifyTriggeredInAnyState(AnimNotifyType: TSubclassOf<AnimNotify>): Bool;
	public function WasAnimNotifyStateActiveInStateMachine(MachineIndex: ucpp.num.Int32, AnimNotifyStateType: TSubclassOf<AnimNotifyState>): Bool;
	public function WasAnimNotifyStateActiveInSourceState(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32, AnimNotifyStateType: TSubclassOf<AnimNotifyState>): Bool;
	public function WasAnimNotifyStateActiveInAnyState(AnimNotifyStateType: TSubclassOf<AnimNotifyState>): Bool;
	public function WasAnimNotifyNameTriggeredInStateMachine(MachineIndex: ucpp.num.Int32, NotifyName: FName): Bool;
	public function WasAnimNotifyNameTriggeredInSourceState(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32, NotifyName: FName): Bool;
	public function WasAnimNotifyNameTriggeredInAnyState(NotifyName: FName): Bool;
	public function UnlockAIResources(bUnlockMovement: Bool, UnlockAILogic: Bool): Void;
	public function UnlinkAnimClassLayers(InClass: TSubclassOf<AnimInstance>): Void;
	public function TryGetPawnOwner(): ucpp.Ptr<Pawn>;
	public function StopSlotAnimation(InBlendOutTime: ucpp.num.Float32, SlotNodeName: FName): Void;
	public function SnapshotPose(Snapshot: ucpp.Ref<PoseSnapshot>): Void;
	public function SetUseMainInstanceMontageEvaluationData(bSet: Bool): Void;
	public function SetRootMotionMode(Value: TEnumAsByte<ERootMotionMode>): Void;
	public function SetReceiveNotifiesFromLinkedInstances(bSet: Bool): Void;
	public function SetPropagateNotifiesToLinkedInstances(bSet: Bool): Void;
	public function SetMorphTarget(MorphTargetName: FName, Value: ucpp.num.Float32): Void;
	public function SavePoseSnapshot(SnapshotName: FName): Void;
	public function ResetDynamics(InTeleportType: ETeleportType): Void;
	public function RequestTransitionEvent(EventName: FName, RequestTimeout: ucpp.num.Float64, QueueMode: ETransitionRequestQueueMode, OverwriteMode: ETransitionRequestOverwriteMode): Bool;
	public function RequestSlotGroupInertialization(InSlotGroupName: FName, Duration: ucpp.num.Float32, BlendProfile: ucpp.Ptr<BlendProfile.ConstBlendProfile>): Void;
	public function RemovePoseSnapshot(SnapshotName: FName): Void;
	public function QueryTransitionEvent(MachineIndex: ucpp.num.Int32, TransitionIndex: ucpp.num.Int32, EventName: FName): Bool;
	public function QueryAndMarkTransitionEvent(MachineIndex: ucpp.num.Int32, TransitionIndex: ucpp.num.Int32, EventName: FName): Bool;
	public function PlaySlotAnimationAsDynamicMontage_WithBlendSettings(Asset: ucpp.Ptr<AnimSequenceBase>, SlotNodeName: FName, BlendInSettings: ucpp.Ref<MontageBlendSettings>, BlendOutSettings: ucpp.Ref<MontageBlendSettings>, InPlayRate: ucpp.num.Float32, LoopCount: ucpp.num.Int32, BlendOutTriggerTime: ucpp.num.Float32, InTimeToStartMontageAt: ucpp.num.Float32): ucpp.Ptr<AnimMontage>;
	public function PlaySlotAnimationAsDynamicMontage_WithBlendArgs(Asset: ucpp.Ptr<AnimSequenceBase>, SlotNodeName: FName, BlendIn: ucpp.Ref<AlphaBlendArgs>, BlendOut: ucpp.Ref<AlphaBlendArgs>, InPlayRate: ucpp.num.Float32, LoopCount: ucpp.num.Int32, BlendOutTriggerTime: ucpp.num.Float32, InTimeToStartMontageAt: ucpp.num.Float32): ucpp.Ptr<AnimMontage>;
	public function PlaySlotAnimationAsDynamicMontage(Asset: ucpp.Ptr<AnimSequenceBase>, SlotNodeName: FName, BlendInTime: ucpp.num.Float32, BlendOutTime: ucpp.num.Float32, InPlayRate: ucpp.num.Float32, LoopCount: ucpp.num.Int32, BlendOutTriggerTime: ucpp.num.Float32, InTimeToStartMontageAt: ucpp.num.Float32): ucpp.Ptr<AnimMontage>;
	public function MontageSync_StopFollowing(MontageFollower: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function MontageSync_Follow(MontageFollower: ucpp.Ptr<AnimMontage.ConstAnimMontage>, OtherAnimInstance: ucpp.Ptr<AnimInstance.ConstAnimInstance>, MontageLeader: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_StopWithBlendSettings(BlendOutSettings: ucpp.Ref<MontageBlendSettings>, Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_StopWithBlendOut(BlendOut: ucpp.Ref<AlphaBlendArgs>, Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_StopGroupByName(InBlendOutTime: ucpp.num.Float32, GroupName: FName): Void;
	public function Montage_Stop(InBlendOutTime: ucpp.num.Float32, Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_SetPosition(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>, NewPosition: ucpp.num.Float32): Void;
	public function Montage_SetPlayRate(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>, NewPlayRate: ucpp.num.Float32): Void;
	public function Montage_SetNextSection(SectionNameToChange: FName, NextSection: FName, Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_Resume(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_PlayWithBlendSettings(MontageToPlay: ucpp.Ptr<AnimMontage>, BlendInSettings: ucpp.Ref<MontageBlendSettings>, InPlayRate: ucpp.num.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: ucpp.num.Float32, bStopAllMontages: Bool): ucpp.num.Float32;
	public function Montage_PlayWithBlendIn(MontageToPlay: ucpp.Ptr<AnimMontage>, BlendIn: ucpp.Ref<AlphaBlendArgs>, InPlayRate: ucpp.num.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: ucpp.num.Float32, bStopAllMontages: Bool): ucpp.num.Float32;
	public function Montage_Play(MontageToPlay: ucpp.Ptr<AnimMontage>, InPlayRate: ucpp.num.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: ucpp.num.Float32, bStopAllMontages: Bool): ucpp.num.Float32;
	public function Montage_Pause(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_JumpToSectionsEnd(SectionName: FName, Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_JumpToSection(SectionName: FName, Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_IsPlaying(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Bool;
	public function Montage_IsActive(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Bool;
	public function Montage_GetPosition(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): ucpp.num.Float32;
	public function Montage_GetPlayRate(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): ucpp.num.Float32;
	public function Montage_GetIsStopped(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): Bool;
	public function Montage_GetEffectivePlayRate(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): ucpp.num.Float32;
	public function Montage_GetCurrentSection(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): FName;
	public function Montage_GetBlendTime(Montage: ucpp.Ptr<AnimMontage.ConstAnimMontage>): ucpp.num.Float32;
	public function LockAIResources(bLockMovement: Bool, LockAILogic: Bool): Void;
	public function LinkAnimGraphByTag(InTag: FName, InClass: TSubclassOf<AnimInstance>): Void;
	public function LinkAnimClassLayers(InClass: TSubclassOf<AnimInstance>): Void;
	public function IsUsingMainInstanceMontageEvaluationData(): Bool;
	public function IsSyncGroupBetweenMarkers(InSyncGroupName: FName, PreviousMarker: FName, NextMarker: FName, bRespectMarkerOrder: Bool): Bool;
	public function IsPlayingSlotAnimation(Asset: ucpp.Ptr<AnimSequenceBase.ConstAnimSequenceBase>, SlotNodeName: FName): Bool;
	public function IsAnyMontagePlaying(): Bool;
	public function HasMarkerBeenHitThisFrame(SyncGroup: FName, MarkerName: FName): Bool;
	public function GetTimeToClosestMarker(SyncGroup: FName, MarkerName: FName, OutMarkerTime: ucpp.Ref<ucpp.num.Float32>): Bool;
	public function GetSyncGroupPosition(InSyncGroupName: FName): MarkerSyncAnimPosition;
	public function GetRelevantAnimTimeRemainingFraction(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetRelevantAnimTimeRemaining(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetRelevantAnimTimeFraction(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetRelevantAnimTime(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetRelevantAnimLength(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetReceiveNotifiesFromLinkedInstances(): Bool;
	public function GetPropagateNotifiesToLinkedInstances(): Bool;
	public function GetOwningComponent(): ucpp.Ptr<SkeletalMeshComp>;
	public function GetOwningActor(): ucpp.Ptr<Actor>;
	public function GetLinkedAnimLayerInstancesByGroup(InGroup: FName, OutLinkedInstances: ucpp.Ref<TArray<ucpp.Ptr<AnimInstance>>>): Void;
	public function GetLinkedAnimLayerInstanceByGroupAndClass(InGroup: FName, InClass: TSubclassOf<AnimInstance>): ucpp.Ptr<AnimInstance>;
	public function GetLinkedAnimLayerInstanceByGroup(InGroup: FName): ucpp.Ptr<AnimInstance>;
	public function GetLinkedAnimLayerInstanceByClass(InClass: TSubclassOf<AnimInstance>): ucpp.Ptr<AnimInstance>;
	public function GetLinkedAnimGraphInstancesByTag(InTag: FName, OutLinkedInstances: ucpp.Ref<TArray<ucpp.Ptr<AnimInstance>>>): Void;
	public function GetLinkedAnimGraphInstanceByTag(InTag: FName): ucpp.Ptr<AnimInstance>;
	public function GetInstanceTransitionTimeElapsedFraction(MachineIndex: ucpp.num.Int32, TransitionIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceTransitionTimeElapsed(MachineIndex: ucpp.num.Int32, TransitionIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceTransitionCrossfadeDuration(MachineIndex: ucpp.num.Int32, TransitionIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceStateWeight(MachineIndex: ucpp.num.Int32, StateIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceMachineWeight(MachineIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceCurrentStateElapsedTime(MachineIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceAssetPlayerTimeFromEndFraction(AssetPlayerIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceAssetPlayerTimeFromEnd(AssetPlayerIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceAssetPlayerTimeFraction(AssetPlayerIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceAssetPlayerTime(AssetPlayerIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetInstanceAssetPlayerLength(AssetPlayerIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetDeltaSeconds(): ucpp.num.Float32;
	public function GetCurveValueWithDefault(CurveName: FName, DefaultValue: ucpp.num.Float32, OutValue: ucpp.Ref<ucpp.num.Float32>): Bool;
	public function GetCurveValue(CurveName: FName): ucpp.num.Float32;
	public function GetCurrentStateName(MachineIndex: ucpp.num.Int32): FName;
	public function GetCurrentActiveMontage(): ucpp.Ptr<AnimMontage>;
	public function GetAllCurveNames(OutNames: ucpp.Ref<TArray<FName>>): Void;
	public function GetActiveCurveNames(CurveType: EAnimCurveType, OutNames: ucpp.Ref<TArray<FName>>): Void;
	public function ClearTransitionEvents(EventName: FName): Void;
	public function ClearMorphTargets(): Void;
	public function ClearAllTransitionEvents(): Void;
	public function CalculateDirection(Velocity: ucpp.Ref<Vector>, BaseRotation: ucpp.Ref<Rotator>): ucpp.num.Float32;
	public function BlueprintUpdateAnimation(DeltaTimeX: ucpp.num.Float32): Void;
	public function BlueprintThreadSafeUpdateAnimation(DeltaTime: ucpp.num.Float32): Void;
	public function BlueprintPostEvaluateAnimation(): Void;
	public function BlueprintLinkedAnimationLayersInitialized(): Void;
	public function BlueprintInitializeAnimation(): Void;
	public function BlueprintBeginPlay(): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	TryGetPawnOwner, Montage_IsPlaying, Montage_IsActive, Montage_GetPosition, Montage_GetPlayRate,
	Montage_GetIsStopped, Montage_GetEffectivePlayRate, Montage_GetCurrentSection, Montage_GetBlendTime, IsUsingMainInstanceMontageEvaluationData,
	IsSyncGroupBetweenMarkers, IsPlayingSlotAnimation, IsAnyMontagePlaying, HasMarkerBeenHitThisFrame, GetTimeToClosestMarker,
	GetSyncGroupPosition, GetReceiveNotifiesFromLinkedInstances, GetPropagateNotifiesToLinkedInstances, GetOwningComponent, GetOwningActor,
	GetLinkedAnimLayerInstancesByGroup, GetLinkedAnimLayerInstanceByGroupAndClass, GetLinkedAnimLayerInstanceByGroup, GetLinkedAnimLayerInstanceByClass, GetLinkedAnimGraphInstancesByTag,
	GetLinkedAnimGraphInstanceByTag, GetDeltaSeconds, GetCurveValue, GetCurrentActiveMontage, GetAllCurveNames,
	GetActiveCurveNames, CalculateDirection
)
@:nativeGen
abstract ConstAnimInstance(AnimInstance) from AnimInstance {
	public extern var CurrentSkeleton(get, never): ucpp.Ptr<Skeleton.ConstSkeleton>;
	public inline extern function get_CurrentSkeleton(): ucpp.Ptr<Skeleton.ConstSkeleton> return this.CurrentSkeleton;
	public extern var RootMotionMode(get, never): TEnumAsByte<ERootMotionMode>;
	public inline extern function get_RootMotionMode(): TEnumAsByte<ERootMotionMode> return this.RootMotionMode;
	public extern var bUseMultiThreadedAnimationUpdate(get, never): Bool;
	public inline extern function get_bUseMultiThreadedAnimationUpdate(): Bool return this.bUseMultiThreadedAnimationUpdate;
	public extern var bUsingCopyPoseFromMesh(get, never): Bool;
	public inline extern function get_bUsingCopyPoseFromMesh(): Bool return this.bUsingCopyPoseFromMesh;
	public extern var bReceiveNotifiesFromLinkedInstances(get, never): Bool;
	public inline extern function get_bReceiveNotifiesFromLinkedInstances(): Bool return this.bReceiveNotifiesFromLinkedInstances;
	public extern var bPropagateNotifiesToLinkedInstances(get, never): Bool;
	public inline extern function get_bPropagateNotifiesToLinkedInstances(): Bool return this.bPropagateNotifiesToLinkedInstances;
	public extern var bUseMainInstanceMontageEvaluationData(get, never): Bool;
	public inline extern function get_bUseMainInstanceMontageEvaluationData(): Bool return this.bUseMainInstanceMontageEvaluationData;
	public extern var OnMontageBlendingOut(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage.ConstAnimMontage>, Bool) -> Void>;
	public inline extern function get_OnMontageBlendingOut(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage.ConstAnimMontage>, Bool) -> Void> return this.OnMontageBlendingOut;
	public extern var OnMontageStarted(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage.ConstAnimMontage>) -> Void>;
	public inline extern function get_OnMontageStarted(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage.ConstAnimMontage>) -> Void> return this.OnMontageStarted;
	public extern var OnMontageEnded(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage.ConstAnimMontage>, Bool) -> Void>;
	public inline extern function get_OnMontageEnded(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<AnimMontage.ConstAnimMontage>, Bool) -> Void> return this.OnMontageEnded;
	public extern var OnAllMontageInstancesEnded(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnAllMontageInstancesEnded(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnAllMontageInstancesEnded;
	public extern var NotifyQueue(get, never): AnimNotifyQueue;
	public inline extern function get_NotifyQueue(): AnimNotifyQueue return this.NotifyQueue;
	public extern var ActiveAnimNotifyState(get, never): TArray<AnimNotifyEvent>;
	public inline extern function get_ActiveAnimNotifyState(): TArray<AnimNotifyEvent> return this.ActiveAnimNotifyState;
	public extern var ActiveAnimNotifyEventReference(get, never): TArray<AnimNotifyEventReference>;
	public inline extern function get_ActiveAnimNotifyEventReference(): TArray<AnimNotifyEventReference> return this.ActiveAnimNotifyEventReference;
}

@:forward
@:nativeGen
@:native("AnimInstance*")
abstract AnimInstancePtr(ucpp.Ptr<AnimInstance>) from ucpp.Ptr<AnimInstance> to ucpp.Ptr<AnimInstance>{
	@:from
	public static extern inline function fromValue(v: AnimInstance): AnimInstancePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimInstance {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}