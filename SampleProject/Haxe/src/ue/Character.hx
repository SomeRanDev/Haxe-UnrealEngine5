// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ACharacter")
@:include("GameFramework/Character.h")
@:structAccess
extern class Character extends Pawn {
	public var Mesh: cpp.Star<SkeletalMeshComp>;
	public var CharacterMovement: cpp.Star<CharacterMovementComp>;
	public var CapsuleComponent: cpp.Star<CapsuleComp>;
	public var ArrowComponent: cpp.Star<ArrowComp>;
	public var BasedMovement: BasedMovementInfo;
	public var ReplicatedBasedMovement: BasedMovementInfo;
	public var AnimRootMotionTranslationScale: cpp.Float32;
	public var BaseTranslationOffset: Vector;
	public var BaseRotationOffset: Quat;
	public var ReplicatedServerLastTransformUpdateTimeStamp: cpp.Float32;
	public var ReplayLastTransformUpdateTimeStamp: cpp.Float32;
	public var ReplicatedMovementMode: cpp.UInt8;
	public var bInBaseReplication: Bool;
	public var CrouchedEyeHeight: cpp.Float32;
	public var bIsCrouched: Bool;
	public var bProxyIsJumpForceApplied: Bool;
	public var bPressedJump: Bool;
	public var bClientUpdating: Bool;
	public var bClientWasFalling: Bool;
	public var bClientResimulateRootMotion: Bool;
	public var bClientResimulateRootMotionSources: Bool;
	public var bSimGravityDisabled: Bool;
	public var bClientCheckEncroachmentOnNetUpdate: Bool;
	public var bServerMoveIgnoreRootMotion: Bool;
	public var bWasJumping: Bool;
	public var JumpKeyHoldTime: cpp.Float32;
	public var JumpForceTimeRemaining: cpp.Float32;
	public var ProxyJumpForceStartedTime: cpp.Float32;
	public var JumpMaxHoldTime: cpp.Float32;
	public var JumpMaxCount: cpp.Int32;
	public var JumpCurrentCount: cpp.Int32;
	public var JumpCurrentCountPreJump: cpp.Int32;
	public var OnReachedJumpApex: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var MovementModeChangedDelegate: HaxeMulticastSparseDelegateProperty<(cpp.Star<Character>, EMovementMode, cpp.UInt8) -> Void>;
	public var OnCharacterMovementUpdated: HaxeMulticastSparseDelegateProperty<(cpp.Float32, Vector, Vector) -> Void>;
	public var SavedRootMotion: RootMotionSourceGroup;
	public var ClientRootMotionParams: RootMotionMovementParams;
	public var RootMotionRepMoves: TArray<SimulatedRootMotionReplicatedMove>;
	public var RepRootMotion: RepRootMotionMontage;

	public function UnCrouch(bClientSimulation: Bool): Void;
	public function StopJumping(): Void;
	public function StopAnimMontage(AnimMontage: cpp.Star<AnimMontage>): Void;
	public function ServerMovePacked(PackedBits: cpp.Reference<CharacterServerMovePackedBits>): Void;
	public function ServerMoveOld(OldTimeStamp: cpp.Float32, OldAccel: Vector_NetQuantize10, OldMoveFlags: cpp.UInt8): Void;
	public function ServerMoveNoBase(TimeStamp: cpp.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, CompressedMoveFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementMode: cpp.UInt8): Void;
	public function ServerMoveDualNoBase(TimeStamp0: cpp.Float32, InAccel0: Vector_NetQuantize10, PendingFlags: cpp.UInt8, View0: cpp.UInt32, TimeStamp: cpp.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementMode: cpp.UInt8): Void;
	public function ServerMoveDualHybridRootMotion(TimeStamp0: cpp.Float32, InAccel0: Vector_NetQuantize10, PendingFlags: cpp.UInt8, View0: cpp.UInt32, TimeStamp: cpp.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementBase: cpp.Star<PrimitiveComp>, ClientBaseBoneName: FName, ClientMovementMode: cpp.UInt8): Void;
	public function ServerMoveDual(TimeStamp0: cpp.Float32, InAccel0: Vector_NetQuantize10, PendingFlags: cpp.UInt8, View0: cpp.UInt32, TimeStamp: cpp.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementBase: cpp.Star<PrimitiveComp>, ClientBaseBoneName: FName, ClientMovementMode: cpp.UInt8): Void;
	public function ServerMove(TimeStamp: cpp.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, CompressedMoveFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementBase: cpp.Star<PrimitiveComp>, ClientBaseBoneName: FName, ClientMovementMode: cpp.UInt8): Void;
	public function RootMotionDebugClientPrintOnScreen(InString: FString): Void;
	public function PlayAnimMontage(AnimMontage: cpp.Star<AnimMontage>, InPlayRate: cpp.Float32, StartSectionName: FName): cpp.Reference<cpp.Float32>;
	public function OnWalkingOffLedge(PreviousFloorImpactNormal: cpp.Reference<Vector>, PreviousFloorContactNormal: cpp.Reference<Vector>, PreviousLocation: cpp.Reference<Vector>, TimeDelta: cpp.Float32): Void;
	public function OnRep_RootMotion(): Void;
	public function OnRep_ReplicatedBasedMovement(): Void;
	public function OnRep_ReplayLastTransformUpdateTimeStamp(): Void;
	public function OnRep_IsCrouched(): Void;
	public function OnLaunched(LaunchVelocity: Vector, bXYOverride: Bool, bZOverride: Bool): Void;
	public function OnLanded(Hit: cpp.Reference<HitResult>): Void;
	public function OnJumped(): Void;
	public function LaunchCharacter(LaunchVelocity: Vector, bXYOverride: Bool, bZOverride: Bool): Void;
	public function K2_UpdateCustomMovement(DeltaTime: cpp.Float32): Void;
	public function K2_OnStartCrouch(HalfHeightAdjust: cpp.Float32, ScaledHalfHeightAdjust: cpp.Float32): Void;
	public function K2_OnMovementModeChanged(PrevMovementMode: EMovementMode, NewMovementMode: EMovementMode, PrevCustomMode: cpp.UInt8, NewCustomMode: cpp.UInt8): Void;
	public function K2_OnEndCrouch(HalfHeightAdjust: cpp.Float32, ScaledHalfHeightAdjust: cpp.Float32): Void;
	public function Jump(): Void;
	public function IsPlayingRootMotion(): cpp.Reference<Bool>;
	public function IsPlayingNetworkedRootMotionMontage(): cpp.Reference<Bool>;
	public function IsJumpProvidingForce(): cpp.Reference<Bool>;
	public function HasAnyRootMotion(): cpp.Reference<Bool>;
	public function GetCurrentMontage(): cpp.Reference<cpp.Star<AnimMontage>>;
	public function GetBaseTranslationOffset(): cpp.Reference<Vector>;
	public function GetBaseRotationOffsetRotator(): cpp.Reference<Rotator>;
	public function GetAnimRootMotionTranslationScale(): cpp.Reference<cpp.Float32>;
	public function Crouch(bClientSimulation: Bool): Void;
	public function ClientVeryShortAdjustPosition(TimeStamp: cpp.Float32, NewLoc: Vector, NewBase: cpp.Star<PrimitiveComp>, NewBaseBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: cpp.UInt8): Void;
	public function ClientMoveResponsePacked(PackedBits: cpp.Reference<CharacterMoveResponsePackedBits>): Void;
	public function ClientCheatWalk(): Void;
	public function ClientCheatGhost(): Void;
	public function ClientCheatFly(): Void;
	public function ClientAdjustRootMotionSourcePosition(TimeStamp: cpp.Float32, ServerRootMotion: RootMotionSourceGroup, bHasAnimRootMotion: Bool, ServerMontageTrackPosition: cpp.Float32, ServerLoc: Vector, ServerRotation: Vector_NetQuantizeNormal, ServerVelZ: cpp.Float32, ServerBase: cpp.Star<PrimitiveComp>, ServerBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: cpp.UInt8): Void;
	public function ClientAdjustRootMotionPosition(TimeStamp: cpp.Float32, ServerMontageTrackPosition: cpp.Float32, ServerLoc: Vector, ServerRotation: Vector_NetQuantizeNormal, ServerVelZ: cpp.Float32, ServerBase: cpp.Star<PrimitiveComp>, ServerBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: cpp.UInt8): Void;
	public function ClientAdjustPosition(TimeStamp: cpp.Float32, NewLoc: Vector, NewVel: Vector, NewBase: cpp.Star<PrimitiveComp>, NewBaseBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: cpp.UInt8): Void;
	public function ClientAckGoodMove(TimeStamp: cpp.Float32): Void;
	public function CanJumpInternal(): cpp.Reference<Bool>;
	public function CanJump(): cpp.Reference<Bool>;
	public function CanCrouch(): cpp.Reference<Bool>;
	public function CacheInitialMeshOffset(MeshRelativeLocation: Vector, MeshRelativeRotation: Rotator): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsPlayingRootMotion, IsPlayingNetworkedRootMotionMontage, IsJumpProvidingForce, HasAnyRootMotion, GetCurrentMontage,
	GetBaseTranslationOffset, GetBaseRotationOffsetRotator, GetAnimRootMotionTranslationScale, CanJumpInternal, CanJump,
	CanCrouch
)
@:nativeGen
abstract ConstCharacter(Character) from Character {
	public extern var Mesh(get, never): cpp.Star<SkeletalMeshComp.ConstSkeletalMeshComp>;
	public inline extern function get_Mesh(): cpp.Star<SkeletalMeshComp.ConstSkeletalMeshComp> return this.Mesh;
	public extern var CharacterMovement(get, never): cpp.Star<CharacterMovementComp.ConstCharacterMovementComp>;
	public inline extern function get_CharacterMovement(): cpp.Star<CharacterMovementComp.ConstCharacterMovementComp> return this.CharacterMovement;
	public extern var CapsuleComponent(get, never): cpp.Star<CapsuleComp.ConstCapsuleComp>;
	public inline extern function get_CapsuleComponent(): cpp.Star<CapsuleComp.ConstCapsuleComp> return this.CapsuleComponent;
	public extern var ArrowComponent(get, never): cpp.Star<ArrowComp.ConstArrowComp>;
	public inline extern function get_ArrowComponent(): cpp.Star<ArrowComp.ConstArrowComp> return this.ArrowComponent;
	public extern var BasedMovement(get, never): BasedMovementInfo;
	public inline extern function get_BasedMovement(): BasedMovementInfo return this.BasedMovement;
	public extern var ReplicatedBasedMovement(get, never): BasedMovementInfo;
	public inline extern function get_ReplicatedBasedMovement(): BasedMovementInfo return this.ReplicatedBasedMovement;
	public extern var AnimRootMotionTranslationScale(get, never): cpp.Float32;
	public inline extern function get_AnimRootMotionTranslationScale(): cpp.Float32 return this.AnimRootMotionTranslationScale;
	public extern var BaseTranslationOffset(get, never): Vector;
	public inline extern function get_BaseTranslationOffset(): Vector return this.BaseTranslationOffset;
	public extern var BaseRotationOffset(get, never): Quat;
	public inline extern function get_BaseRotationOffset(): Quat return this.BaseRotationOffset;
	public extern var ReplicatedServerLastTransformUpdateTimeStamp(get, never): cpp.Float32;
	public inline extern function get_ReplicatedServerLastTransformUpdateTimeStamp(): cpp.Float32 return this.ReplicatedServerLastTransformUpdateTimeStamp;
	public extern var ReplayLastTransformUpdateTimeStamp(get, never): cpp.Float32;
	public inline extern function get_ReplayLastTransformUpdateTimeStamp(): cpp.Float32 return this.ReplayLastTransformUpdateTimeStamp;
	public extern var ReplicatedMovementMode(get, never): cpp.UInt8;
	public inline extern function get_ReplicatedMovementMode(): cpp.UInt8 return this.ReplicatedMovementMode;
	public extern var bInBaseReplication(get, never): Bool;
	public inline extern function get_bInBaseReplication(): Bool return this.bInBaseReplication;
	public extern var CrouchedEyeHeight(get, never): cpp.Float32;
	public inline extern function get_CrouchedEyeHeight(): cpp.Float32 return this.CrouchedEyeHeight;
	public extern var bIsCrouched(get, never): Bool;
	public inline extern function get_bIsCrouched(): Bool return this.bIsCrouched;
	public extern var bProxyIsJumpForceApplied(get, never): Bool;
	public inline extern function get_bProxyIsJumpForceApplied(): Bool return this.bProxyIsJumpForceApplied;
	public extern var bPressedJump(get, never): Bool;
	public inline extern function get_bPressedJump(): Bool return this.bPressedJump;
	public extern var bClientUpdating(get, never): Bool;
	public inline extern function get_bClientUpdating(): Bool return this.bClientUpdating;
	public extern var bClientWasFalling(get, never): Bool;
	public inline extern function get_bClientWasFalling(): Bool return this.bClientWasFalling;
	public extern var bClientResimulateRootMotion(get, never): Bool;
	public inline extern function get_bClientResimulateRootMotion(): Bool return this.bClientResimulateRootMotion;
	public extern var bClientResimulateRootMotionSources(get, never): Bool;
	public inline extern function get_bClientResimulateRootMotionSources(): Bool return this.bClientResimulateRootMotionSources;
	public extern var bSimGravityDisabled(get, never): Bool;
	public inline extern function get_bSimGravityDisabled(): Bool return this.bSimGravityDisabled;
	public extern var bClientCheckEncroachmentOnNetUpdate(get, never): Bool;
	public inline extern function get_bClientCheckEncroachmentOnNetUpdate(): Bool return this.bClientCheckEncroachmentOnNetUpdate;
	public extern var bServerMoveIgnoreRootMotion(get, never): Bool;
	public inline extern function get_bServerMoveIgnoreRootMotion(): Bool return this.bServerMoveIgnoreRootMotion;
	public extern var bWasJumping(get, never): Bool;
	public inline extern function get_bWasJumping(): Bool return this.bWasJumping;
	public extern var JumpKeyHoldTime(get, never): cpp.Float32;
	public inline extern function get_JumpKeyHoldTime(): cpp.Float32 return this.JumpKeyHoldTime;
	public extern var JumpForceTimeRemaining(get, never): cpp.Float32;
	public inline extern function get_JumpForceTimeRemaining(): cpp.Float32 return this.JumpForceTimeRemaining;
	public extern var ProxyJumpForceStartedTime(get, never): cpp.Float32;
	public inline extern function get_ProxyJumpForceStartedTime(): cpp.Float32 return this.ProxyJumpForceStartedTime;
	public extern var JumpMaxHoldTime(get, never): cpp.Float32;
	public inline extern function get_JumpMaxHoldTime(): cpp.Float32 return this.JumpMaxHoldTime;
	public extern var JumpMaxCount(get, never): cpp.Int32;
	public inline extern function get_JumpMaxCount(): cpp.Int32 return this.JumpMaxCount;
	public extern var JumpCurrentCount(get, never): cpp.Int32;
	public inline extern function get_JumpCurrentCount(): cpp.Int32 return this.JumpCurrentCount;
	public extern var JumpCurrentCountPreJump(get, never): cpp.Int32;
	public inline extern function get_JumpCurrentCountPreJump(): cpp.Int32 return this.JumpCurrentCountPreJump;
	public extern var OnReachedJumpApex(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnReachedJumpApex(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnReachedJumpApex;
	public extern var MovementModeChangedDelegate(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Character.ConstCharacter>, EMovementMode, cpp.UInt8) -> Void>;
	public inline extern function get_MovementModeChangedDelegate(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Character.ConstCharacter>, EMovementMode, cpp.UInt8) -> Void> return this.MovementModeChangedDelegate;
	public extern var OnCharacterMovementUpdated(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Float32, Vector, Vector) -> Void>;
	public inline extern function get_OnCharacterMovementUpdated(): HaxeMulticastSparseDelegateProperty<(cpp.Float32, Vector, Vector) -> Void> return this.OnCharacterMovementUpdated;
	public extern var SavedRootMotion(get, never): RootMotionSourceGroup;
	public inline extern function get_SavedRootMotion(): RootMotionSourceGroup return this.SavedRootMotion;
	public extern var ClientRootMotionParams(get, never): RootMotionMovementParams;
	public inline extern function get_ClientRootMotionParams(): RootMotionMovementParams return this.ClientRootMotionParams;
	public extern var RootMotionRepMoves(get, never): TArray<SimulatedRootMotionReplicatedMove>;
	public inline extern function get_RootMotionRepMoves(): TArray<SimulatedRootMotionReplicatedMove> return this.RootMotionRepMoves;
	public extern var RepRootMotion(get, never): RepRootMotionMontage;
	public inline extern function get_RepRootMotion(): RepRootMotionMontage return this.RepRootMotion;
}

@:forward
@:nativeGen
@:native("Character*")
abstract CharacterPtr(cpp.Star<Character>) from cpp.Star<Character> to cpp.Star<Character>{
	@:from
	public static extern inline function fromValue(v: Character): CharacterPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Character {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}