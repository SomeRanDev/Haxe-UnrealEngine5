// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UControlRig")
@:include("ControlRig.h")
@:structAccess
extern class ControlRig extends Object {
	public var ExecutionType: ERigExecutionType;
	public var VMRuntimeSettings: RigVMRuntimeSettings;
	private var ControlCustomizations: TMap<RigElementKey, RigControlElementCustomization>;
	private var VM: cpp.Star<RigVM>;
	private var DynamicHierarchy: cpp.Star<RigHierarchy>;
	private var ShapeLibraries: TArray<TSoftObjectPtr<ControlRigShapeLibrary>>;
	private var DrawContainer: ControlRigDrawContainer;
	private var DataSourceRegistry: cpp.Star<AnimationDataSourceRegistry>;
	private var EventQueue: TArray<FName>;
	private var Influences: RigInfluenceMapPerEvent;
	public function GetInteractionRig(): cpp.Star<ControlRig>;
	public function SetInteractionRig(input: cpp.Star<ControlRig>): Void;
	public function GetInteractionRigClass(): TSubclassOf<ControlRig>;
	public function SetInteractionRigClass(input: TSubclassOf<ControlRig>): Void;
	@:protected public var AssetUserData: TArray<cpp.Star<AssetUserData>>;

	public function SupportsEvent(InEventName: cpp.Reference<FName>): Bool;
	public function SetVariableFromString(InVariableName: cpp.Reference<FName>, InValue: FString): Bool;
	public function SetFramesPerSecond(InFramesPerSecond: cpp.Float32): Void;
	public function SetDeltaTime(InDeltaTime: cpp.Float32): Void;
	public function SetAbsoluteTime(InAbsoluteTime: cpp.Float32, InSetDeltaTimeZero: Bool): Void;
	public function SetAbsoluteAndDeltaTime(InAbsoluteTime: cpp.Float32, InDeltaTime: cpp.Float32): Void;
	public function SelectControl(InControlName: cpp.Reference<FName>, bSelect: Bool): Void;
	public function RequestSetup(): Void;
	public function RequestInit(): Void;
	public function IsControlSelected(InControlName: cpp.Reference<FName>): Bool;
	public function GetVM(): cpp.Star<RigVM>;
	public function GetVariableType(InVariableName: cpp.Reference<FName>): FName;
	public function GetVariableAsString(InVariableName: cpp.Reference<FName>): FString;
	public function GetSupportedEvents(): TArray<FName>;
	public function GetScriptAccessibleVariables(): TArray<FName>;
	public function GetHierarchy(): cpp.Star<RigHierarchy>;
	public function GetCurrentFramesPerSecond(): cpp.Float32;
	public function GetAbsoluteTime(): cpp.Float32;
	public function FindControlRigs(Outer: cpp.Star<Object>, OptionalClass: TSubclassOf<ControlRig>): TArray<cpp.Star<ControlRig>>;
	public function Execute(State: EControlRigState, InEventName: cpp.Reference<FName>): Void;
	public function CurrentControlSelection(): TArray<FName>;
	public function ClearControlSelection(): Bool;
	public function CanExecute(): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	SupportsEvent, IsControlSelected, GetVariableType, GetVariableAsString, GetSupportedEvents,
	GetScriptAccessibleVariables, GetCurrentFramesPerSecond, GetAbsoluteTime, CurrentControlSelection, CanExecute
)
@:nativeGen
abstract ConstControlRig(ControlRig) from ControlRig {
	public extern var ExecutionType(get, never): ERigExecutionType;
	public inline extern function get_ExecutionType(): ERigExecutionType return this.ExecutionType;
	public extern var VMRuntimeSettings(get, never): RigVMRuntimeSettings;
	public inline extern function get_VMRuntimeSettings(): RigVMRuntimeSettings return this.VMRuntimeSettings;
}

@:forward
@:nativeGen
@:native("ControlRig*")
abstract ControlRigPtr(cpp.Star<ControlRig>) from cpp.Star<ControlRig> to cpp.Star<ControlRig>{
	@:from
	public static extern inline function fromValue(v: ControlRig): ControlRigPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ControlRig {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}