// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USkeletalMesh")
@:include("Engine/SkeletalMesh.h")
extern class USkeletalMesh extends UStreamableRenderAsset {
	public var MeshEditorDataObject: TObjectPtr<USkeletalMeshEditorData>;
	public var Skeleton: TObjectPtr<USkeleton>;
	public var ImportedBounds: FBoxSphereBounds;
	public var ExtendedBounds: FBoxSphereBounds;
	public var PositiveBoundsExtension: FVector;
	public var NegativeBoundsExtension: FVector;
	public var Materials: TArray<FSkeletalMaterial>;
	public var SkelMirrorTable: TArray<FBoneMirrorInfo>;
	public var LODInfo: TArray<FSkeletalMeshLODInfo>;
	public var MinLod: FPerPlatformInt;
	public var DisableBelowMinLodStripping: FPerPlatformBool;
	public var bOverrideLODStreamingSettings: Bool;
	public var bSupportLODStreaming: FPerPlatformBool;
	public var MaxNumStreamedLODs: FPerPlatformInt;
	public var MaxNumOptionalLODs: FPerPlatformInt;
	public var LODSettings: TObjectPtr<USkeletalMeshLODSettings>;
	public var DefaultAnimatingRig: TSoftObjectPtr<UObject>;
	public var SkelMirrorAxis: EAxis;
	public var SkelMirrorFlipAxis: EAxis;
	public var bUseFullPrecisionUVs_DEPRECATED: Bool;
	public var bUseHighPrecisionTangentBasis_DEPRECATED: Bool;
	public var bHasBeenSimplified: Bool;
	public var bHasVertexColors: Bool;
	public var bEnablePerPolyCollision: Bool;
	public var VertexColorGuid: FGuid;
	public var BodySetup: TObjectPtr<UBodySetup>;
	public var PhysicsAsset: TObjectPtr<UPhysicsAsset>;
	public var ShadowPhysicsAsset: TObjectPtr<UPhysicsAsset>;
	public var NodeMappingData: TArray<TObjectPtr<UNodeMappingContainer>>;
	public var AssetImportData: TObjectPtr<UAssetImportData>;
	public var SourceFilePath_DEPRECATED: FString;
	public var SourceFileTimestamp_DEPRECATED: FString;
	public var ThumbnailInfo: TObjectPtr<UThumbnailInfo>;
	public var bHasCustomDefaultEditorCamera: Bool;
	public var DefaultEditorCameraLocation: FVector;
	public var DefaultEditorCameraRotation: FRotator;
	public var DefaultEditorCameraLookAt: FVector;
	public var DefaultEditorCameraOrthoZoom: cpp.Float32;
	public var PreviewAttachedAssetContainer: FPreviewAssetAttachContainer;
	public var bSupportRayTracing: Bool;
	public var RayTracingMinLOD: cpp.Int32;
	public var ClothLODBiasMode: EClothLODBiasMode;
	public var MorphTargets: TArray<TObjectPtr<UMorphTarget>>;
	public var FloorOffset: cpp.Float32;
	public var RetargetBasePose: TArray<FTransform>;
	public var ClothingAssets_DEPRECATED: TArray<FClothingAssetData_Legacy>;
	public var PostProcessAnimBlueprint: TSubclassOf<UAnimInstance>;
	public var MeshClothingAssets: TArray<TObjectPtr<UClothingAssetBase>>;
	public var SamplingInfo: FSkeletalMeshSamplingInfo;
	public var AssetUserData: TArray<TObjectPtr<UAssetUserData>>;
	public var Sockets: TArray<TObjectPtr<USkeletalMeshSocket>>;
	public var SkinWeightProfiles: TArray<FSkinWeightProfileInfo>;

	public function SetSkeleton(InSkeleton: cpp.Star<USkeleton>): Void;
	public function SetMorphTargets(InMorphTargets: TArray<cpp.Star<UMorphTarget>>): Void;
	public function SetMeshClothingAssets(InMeshClothingAssets: TArray<cpp.Star<UClothingAssetBase>>): Void;
	public function SetMaterials(InMaterials: TArray<FSkeletalMaterial>): Void;
	public function SetLODSettings(InLODSettings: cpp.Star<USkeletalMeshLODSettings>): Void;
	public function SetDefaultAnimatingRig(InAnimatingRig: TSoftObjectPtr<UObject>): Void;
	public function NumSockets(): cpp.Int32;
	public function K2_GetAllMorphTargetNames(): TArray<FString>;
	public function IsSectionUsingCloth(InSectionIndex: cpp.Int32, bCheckCorrespondingSections: Bool): Bool;
	public function GetSocketByIndex(Index: cpp.Int32): cpp.Star<USkeletalMeshSocket>;
	public function GetSkeleton(): cpp.Star<USkeleton>;
	public function GetShadowPhysicsAsset(): cpp.Star<UPhysicsAsset>;
	public function GetPhysicsAsset(): cpp.Star<UPhysicsAsset>;
	public function GetNodeMappingData(): TArray<cpp.Star<UNodeMappingContainer>>;
	public function GetNodeMappingContainer(SourceAsset: cpp.Star<UBlueprint>): cpp.Star<UNodeMappingContainer>;
	public function GetMorphTargets(): TArray<cpp.Star<UMorphTarget>>;
	public function GetMeshClothingAssets(): TArray<cpp.Star<UClothingAssetBase>>;
	public function GetMaterials(): TArray<FSkeletalMaterial>;
	public function GetLODSettings(): cpp.Star<USkeletalMeshLODSettings>;
	public function GetImportedBounds(): FBoxSphereBounds;
	public function GetDefaultAnimatingRig(): TSoftObjectPtr<UObject>;
	public function GetBounds(): FBoxSphereBounds;
	public function FindSocketInfo(InSocketName: FName, OutTransform: FTransform, OutBoneIndex: cpp.Reference<cpp.Int32>, OutIndex: cpp.Reference<cpp.Int32>): cpp.Star<USkeletalMeshSocket>;
	public function FindSocketAndIndex(InSocketName: FName, OutIndex: cpp.Reference<cpp.Int32>): cpp.Star<USkeletalMeshSocket>;
	public function FindSocket(InSocketName: FName): cpp.Star<USkeletalMeshSocket>;
}
