// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPhysicsCollisionHandler")
@:include("PhysicsEngine/PhysicsCollisionHandler.h")
@:structAccess
extern class PhysicsCollisionHandler extends Object {
	public var ImpactThreshold: cpp.Float32;
	public var ImpactReFireDelay: cpp.Float32;
	public var DefaultImpactSound: cpp.Star<SoundBase>;
	public var LastImpactSoundTime: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstPhysicsCollisionHandler(PhysicsCollisionHandler) from PhysicsCollisionHandler {
	public extern var ImpactThreshold(get, never): cpp.Float32;
	public inline extern function get_ImpactThreshold(): cpp.Float32 return this.ImpactThreshold;
	public extern var ImpactReFireDelay(get, never): cpp.Float32;
	public inline extern function get_ImpactReFireDelay(): cpp.Float32 return this.ImpactReFireDelay;
	public extern var DefaultImpactSound(get, never): cpp.Star<SoundBase.ConstSoundBase>;
	public inline extern function get_DefaultImpactSound(): cpp.Star<SoundBase.ConstSoundBase> return this.DefaultImpactSound;
	public extern var LastImpactSoundTime(get, never): cpp.Float32;
	public inline extern function get_LastImpactSoundTime(): cpp.Float32 return this.LastImpactSoundTime;
}

@:forward
@:nativeGen
@:native("PhysicsCollisionHandler*")
abstract PhysicsCollisionHandlerPtr(cpp.Star<PhysicsCollisionHandler>) from cpp.Star<PhysicsCollisionHandler> to cpp.Star<PhysicsCollisionHandler>{
	@:from
	public static extern inline function fromValue(v: PhysicsCollisionHandler): PhysicsCollisionHandlerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PhysicsCollisionHandler {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}