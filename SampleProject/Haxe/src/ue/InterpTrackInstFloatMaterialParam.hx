// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterpTrackInstFloatMaterialParam")
@:include("Matinee/InterpTrackInstFloatMaterialParam.h")
@:structAccess
extern class InterpTrackInstFloatMaterialParam extends InterpTrackInst {
	public var MaterialInstances: TArray<cpp.Star<MaterialInstanceDynamic>>;
	public var ResetFloats: TArray<cpp.Float32>;
	public var PrimitiveMaterialRefs: TArray<PrimitiveMaterialRef>;
	public var InstancedTrack: cpp.Star<InterpTrackFloatMaterialParam>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstInterpTrackInstFloatMaterialParam(InterpTrackInstFloatMaterialParam) from InterpTrackInstFloatMaterialParam {
	public extern var MaterialInstances(get, never): TArray<cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>>;
	public inline extern function get_MaterialInstances(): TArray<cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>> return this.MaterialInstances;
	public extern var ResetFloats(get, never): TArray<cpp.Float32>;
	public inline extern function get_ResetFloats(): TArray<cpp.Float32> return this.ResetFloats;
	public extern var PrimitiveMaterialRefs(get, never): TArray<PrimitiveMaterialRef>;
	public inline extern function get_PrimitiveMaterialRefs(): TArray<PrimitiveMaterialRef> return this.PrimitiveMaterialRefs;
	public extern var InstancedTrack(get, never): cpp.Star<InterpTrackFloatMaterialParam.ConstInterpTrackFloatMaterialParam>;
	public inline extern function get_InstancedTrack(): cpp.Star<InterpTrackFloatMaterialParam.ConstInterpTrackFloatMaterialParam> return this.InstancedTrack;
}

@:forward
@:nativeGen
@:native("InterpTrackInstFloatMaterialParam*")
abstract InterpTrackInstFloatMaterialParamPtr(cpp.Star<InterpTrackInstFloatMaterialParam>) from cpp.Star<InterpTrackInstFloatMaterialParam> to cpp.Star<InterpTrackInstFloatMaterialParam>{
	@:from
	public static extern inline function fromValue(v: InterpTrackInstFloatMaterialParam): InterpTrackInstFloatMaterialParamPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterpTrackInstFloatMaterialParam {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}