// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimInstance")
@:include("Animation/AnimInstance.h")
extern class UAnimInstance extends UObject {
	public var CurrentSkeleton: TObjectPtr<USkeleton>;
	public var RootMotionMode: ERootMotionMode;
	public var bUseMultiThreadedAnimationUpdate: Bool;
	public var bUsingCopyPoseFromMesh: Bool;
	public var bReceiveNotifiesFromLinkedInstances: Bool;
	public var bPropagateNotifiesToLinkedInstances: Bool;
	public var bUseMainInstanceMontageEvaluationData: Bool;
	public var bQueueMontageEvents: Bool;
	public var OnMontageBlendingOut: HaxeMulticastSparseDelegateProperty<(cpp.Star<UAnimMontage>, Bool) -> Void>;
	public var OnMontageStarted: HaxeMulticastSparseDelegateProperty<(cpp.Star<UAnimMontage>) -> Void>;
	public var OnMontageEnded: HaxeMulticastSparseDelegateProperty<(cpp.Star<UAnimMontage>, Bool) -> Void>;
	public var OnAllMontageInstancesEnded: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var PostCompileValidationClassName: FSoftClassPath;
	public var NotifyQueue: FAnimNotifyQueue;
	public var ActiveAnimNotifyState: TArray<FAnimNotifyEvent>;
	public var ActiveAnimNotifyEventReference: TArray<FAnimNotifyEventReference>;

	public function WasAnimNotifyTriggeredInStateMachine(MachineIndex: cpp.Int32, AnimNotifyType: TSubclassOf<UAnimNotify>): Bool;
	public function WasAnimNotifyTriggeredInSourceState(MachineIndex: cpp.Int32, StateIndex: cpp.Int32, AnimNotifyType: TSubclassOf<UAnimNotify>): Bool;
	public function WasAnimNotifyTriggeredInAnyState(AnimNotifyType: TSubclassOf<UAnimNotify>): Bool;
	public function WasAnimNotifyStateActiveInStateMachine(MachineIndex: cpp.Int32, AnimNotifyStateType: TSubclassOf<UAnimNotifyState>): Bool;
	public function WasAnimNotifyStateActiveInSourceState(MachineIndex: cpp.Int32, StateIndex: cpp.Int32, AnimNotifyStateType: TSubclassOf<UAnimNotifyState>): Bool;
	public function WasAnimNotifyStateActiveInAnyState(AnimNotifyStateType: TSubclassOf<UAnimNotifyState>): Bool;
	public function WasAnimNotifyNameTriggeredInStateMachine(MachineIndex: cpp.Int32, NotifyName: FName): Bool;
	public function WasAnimNotifyNameTriggeredInSourceState(MachineIndex: cpp.Int32, StateIndex: cpp.Int32, NotifyName: FName): Bool;
	public function WasAnimNotifyNameTriggeredInAnyState(NotifyName: FName): Bool;
	public function UnlockAIResources(bUnlockMovement: Bool, UnlockAILogic: Bool): Void;
	public function UnlinkAnimClassLayers(InClass: TSubclassOf<UAnimInstance>): Void;
	public function TryGetPawnOwner(): cpp.Star<APawn>;
	public function StopSlotAnimation(InBlendOutTime: cpp.Float32, SlotNodeName: FName): Void;
	public function SnapshotPose(Snapshot: FPoseSnapshot): Void;
	public function SetUseMainInstanceMontageEvaluationData(bSet: Bool): Void;
	public function SetRootMotionMode(Value: ERootMotionMode): Void;
	public function SetReceiveNotifiesFromLinkedInstances(bSet: Bool): Void;
	public function SetPropagateNotifiesToLinkedInstances(bSet: Bool): Void;
	public function SetMorphTarget(MorphTargetName: FName, Value: cpp.Float32): Void;
	public function SavePoseSnapshot(SnapshotName: FName): Void;
	public function ResetDynamics(InTeleportType: ETeleportType): Void;
	public function RequestSlotGroupInertialization(InSlotGroupName: FName, Duration: cpp.Float32): Void;
	public function RemovePoseSnapshot(SnapshotName: FName): Void;
	public function PlaySlotAnimationAsDynamicMontage_WithBlendSettings(Asset: cpp.Star<UAnimSequenceBase>, SlotNodeName: FName, BlendInSettings: FMontageBlendSettings, BlendOutSettings: FMontageBlendSettings, InPlayRate: cpp.Float32, LoopCount: cpp.Int32, BlendOutTriggerTime: cpp.Float32, InTimeToStartMontageAt: cpp.Float32): cpp.Star<UAnimMontage>;
	public function PlaySlotAnimationAsDynamicMontage_WithBlendArgs(Asset: cpp.Star<UAnimSequenceBase>, SlotNodeName: FName, BlendIn: FAlphaBlendArgs, BlendOut: FAlphaBlendArgs, InPlayRate: cpp.Float32, LoopCount: cpp.Int32, BlendOutTriggerTime: cpp.Float32, InTimeToStartMontageAt: cpp.Float32): cpp.Star<UAnimMontage>;
	public function PlaySlotAnimationAsDynamicMontage(Asset: cpp.Star<UAnimSequenceBase>, SlotNodeName: FName, BlendInTime: cpp.Float32, BlendOutTime: cpp.Float32, InPlayRate: cpp.Float32, LoopCount: cpp.Int32, BlendOutTriggerTime: cpp.Float32, InTimeToStartMontageAt: cpp.Float32): cpp.Star<UAnimMontage>;
	public function MontageSync_StopFollowing(MontageFollower: cpp.Star<UAnimMontage>): Void;
	public function MontageSync_Follow(MontageFollower: cpp.Star<UAnimMontage>, OtherAnimInstance: cpp.Star<UAnimInstance>, MontageLeader: cpp.Star<UAnimMontage>): Void;
	public function Montage_StopWithBlendSettings(BlendOutSettings: FMontageBlendSettings, Montage: cpp.Star<UAnimMontage>): Void;
	public function Montage_StopWithBlendOut(BlendOut: FAlphaBlendArgs, Montage: cpp.Star<UAnimMontage>): Void;
	public function Montage_StopGroupByName(InBlendOutTime: cpp.Float32, GroupName: FName): Void;
	public function Montage_Stop(InBlendOutTime: cpp.Float32, Montage: cpp.Star<UAnimMontage>): Void;
	public function Montage_SetPosition(Montage: cpp.Star<UAnimMontage>, NewPosition: cpp.Float32): Void;
	public function Montage_SetPlayRate(Montage: cpp.Star<UAnimMontage>, NewPlayRate: cpp.Float32): Void;
	public function Montage_SetNextSection(SectionNameToChange: FName, NextSection: FName, Montage: cpp.Star<UAnimMontage>): Void;
	public function Montage_Resume(Montage: cpp.Star<UAnimMontage>): Void;
	public function Montage_PlayWithBlendSettings(MontageToPlay: cpp.Star<UAnimMontage>, BlendInSettings: FMontageBlendSettings, InPlayRate: cpp.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: cpp.Float32, bStopAllMontages: Bool): cpp.Float32;
	public function Montage_PlayWithBlendIn(MontageToPlay: cpp.Star<UAnimMontage>, BlendIn: FAlphaBlendArgs, InPlayRate: cpp.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: cpp.Float32, bStopAllMontages: Bool): cpp.Float32;
	public function Montage_Play(MontageToPlay: cpp.Star<UAnimMontage>, InPlayRate: cpp.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: cpp.Float32, bStopAllMontages: Bool): cpp.Float32;
	public function Montage_Pause(Montage: cpp.Star<UAnimMontage>): Void;
	public function Montage_JumpToSectionsEnd(SectionName: FName, Montage: cpp.Star<UAnimMontage>): Void;
	public function Montage_JumpToSection(SectionName: FName, Montage: cpp.Star<UAnimMontage>): Void;
	public function Montage_IsPlaying(Montage: cpp.Star<UAnimMontage>): Bool;
	public function Montage_IsActive(Montage: cpp.Star<UAnimMontage>): Bool;
	public function Montage_GetPosition(Montage: cpp.Star<UAnimMontage>): cpp.Float32;
	public function Montage_GetPlayRate(Montage: cpp.Star<UAnimMontage>): cpp.Float32;
	public function Montage_GetIsStopped(Montage: cpp.Star<UAnimMontage>): Bool;
	public function Montage_GetCurrentSection(Montage: cpp.Star<UAnimMontage>): FName;
	public function Montage_GetBlendTime(Montage: cpp.Star<UAnimMontage>): cpp.Float32;
	public function LockAIResources(bLockMovement: Bool, LockAILogic: Bool): Void;
	public function LinkAnimGraphByTag(InTag: FName, InClass: TSubclassOf<UAnimInstance>): Void;
	public function LinkAnimClassLayers(InClass: TSubclassOf<UAnimInstance>): Void;
	public function IsUsingMainInstanceMontageEvaluationData(): Bool;
	public function IsSyncGroupBetweenMarkers(InSyncGroupName: FName, PreviousMarker: FName, NextMarker: FName, bRespectMarkerOrder: Bool): Bool;
	public function IsPlayingSlotAnimation(Asset: cpp.Star<UAnimSequenceBase>, SlotNodeName: FName): Bool;
	public function IsAnyMontagePlaying(): Bool;
	public function HasMarkerBeenHitThisFrame(SyncGroup: FName, MarkerName: FName): Bool;
	public function GetTimeToClosestMarker(SyncGroup: FName, MarkerName: FName, OutMarkerTime: cpp.Reference<cpp.Float32>): Bool;
	public function GetSyncGroupPosition(InSyncGroupName: FName): FMarkerSyncAnimPosition;
	public function GetRelevantAnimTimeRemainingFraction(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Float32;
	public function GetRelevantAnimTimeRemaining(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Float32;
	public function GetRelevantAnimTimeFraction(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Float32;
	public function GetRelevantAnimTime(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Float32;
	public function GetRelevantAnimLength(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Float32;
	public function GetReceiveNotifiesFromLinkedInstances(): Bool;
	public function GetPropagateNotifiesToLinkedInstances(): Bool;
	public function GetOwningComponent(): cpp.Star<USkeletalMeshComponent>;
	public function GetOwningActor(): cpp.Star<AActor>;
	public function GetLinkedAnimLayerInstancesByGroup(InGroup: FName, OutLinkedInstances: TArray<cpp.Star<UAnimInstance>>): Void;
	public function GetLinkedAnimLayerInstanceByGroupAndClass(InGroup: FName, InClass: TSubclassOf<UAnimInstance>): cpp.Star<UAnimInstance>;
	public function GetLinkedAnimLayerInstanceByGroup(InGroup: FName): cpp.Star<UAnimInstance>;
	public function GetLinkedAnimLayerInstanceByClass(InClass: TSubclassOf<UAnimInstance>): cpp.Star<UAnimInstance>;
	public function GetLinkedAnimGraphInstancesByTag(InTag: FName, OutLinkedInstances: TArray<cpp.Star<UAnimInstance>>): Void;
	public function GetLinkedAnimGraphInstanceByTag(InTag: FName): cpp.Star<UAnimInstance>;
	public function GetInstanceTransitionTimeElapsedFraction(MachineIndex: cpp.Int32, TransitionIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceTransitionTimeElapsed(MachineIndex: cpp.Int32, TransitionIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceTransitionCrossfadeDuration(MachineIndex: cpp.Int32, TransitionIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceStateWeight(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceMachineWeight(MachineIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceCurrentStateElapsedTime(MachineIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceAssetPlayerTimeFromEndFraction(AssetPlayerIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceAssetPlayerTimeFromEnd(AssetPlayerIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceAssetPlayerTimeFraction(AssetPlayerIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceAssetPlayerTime(AssetPlayerIndex: cpp.Int32): cpp.Float32;
	public function GetInstanceAssetPlayerLength(AssetPlayerIndex: cpp.Int32): cpp.Float32;
	public function GetDeltaSeconds(): cpp.Float32;
	public function GetCurveValue(CurveName: FName): cpp.Float32;
	public function GetCurrentStateName(MachineIndex: cpp.Int32): FName;
	public function GetCurrentActiveMontage(): cpp.Star<UAnimMontage>;
	public function GetAllCurveNames(OutNames: TArray<FName>): Void;
	public function GetActiveCurveNames(CurveType: EAnimCurveType, OutNames: TArray<FName>): Void;
	public function ClearMorphTargets(): Void;
	public function CalculateDirection(Velocity: FVector, BaseRotation: FRotator): cpp.Float32;
	public function BlueprintUpdateAnimation(DeltaTimeX: cpp.Float32): Void;
	public function BlueprintThreadSafeUpdateAnimation(DeltaTime: cpp.Float32): Void;
	public function BlueprintPostEvaluateAnimation(): Void;
	public function BlueprintLinkedAnimationLayersInitialized(): Void;
	public function BlueprintInitializeAnimation(): Void;
	public function BlueprintBeginPlay(): Void;
}
