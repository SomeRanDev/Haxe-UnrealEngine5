// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCheatManager")
@:include("GameFramework/CheatManager.h")
extern class UCheatManager extends UObject {
	public var DebugCameraControllerRef: TObjectPtr<ADebugCameraController>;
	public var DebugCameraControllerClass: TSubclassOf<ADebugCameraController>;
	public var CheatManagerExtensions: TArray<TObjectPtr<UCheatManagerExtension>>;

	public function Walk(): Void;
	public function ViewSelf(): Void;
	public function ViewPlayer(S: FString): Void;
	public function ViewClass(DesiredClass: TSubclassOf<AActor>): Void;
	public function ViewActor(ActorName: FName): Void;
	public function UpdateSafeArea(): Void;
	public function ToggleServerStatReplicatorUpdateStatNet(): Void;
	public function ToggleServerStatReplicatorClientOverwrite(): Void;
	public function ToggleDebugCamera(): Void;
	public function ToggleAILogging(): Void;
	public function TestCollisionDistance(): Void;
	public function Teleport(): Void;
	public function Summon(ClassName: FString): Void;
	public function StreamLevelOut(PackageName: FName): Void;
	public function StreamLevelIn(PackageName: FName): Void;
	public function SpawnServerStatReplicator(): Void;
	public function Slomo(NewTimeDilation: cpp.Float32): Void;
	public function SetWorldOrigin(): Void;
	public function SetMouseSensitivityToDefault(): Void;
	public function ServerToggleAILogging(): Void;
	public function ReceiveInitCheatManager(): Void;
	public function ReceiveEndPlay(): Void;
	public function PlayersOnly(): Void;
	public function OnPlayerEndPlayed(Player: cpp.Star<AActor>, EndPlayReason: EEndPlayReason): Void;
	public function OnlyLoadLevel(PackageName: FName): Void;
	public function LogLoc(): Void;
	public function InvertMouse(): Void;
	public function God(): Void;
	public function Ghost(): Void;
	public function GetPlayerController(): cpp.Star<APlayerController>;
	public function FreezeFrame(Delay: cpp.Float32): Void;
	public function Fly(): Void;
	public function FlushLog(): Void;
	public function EnableDebugCamera(): Void;
	public function DumpVoiceMutingState(): Void;
	public function DumpPartyState(): Void;
	public function DumpOnlineSessionState(): Void;
	public function DumpChatState(): Void;
	public function DisableDebugCamera(): Void;
	public function DestroyTarget(): Void;
	public function DestroyServerStatReplicator(): Void;
	public function DestroyPawns(aClass: TSubclassOf<APawn>): Void;
	public function DestroyAllPawnsExceptTarget(): Void;
	public function DestroyAll(aClass: TSubclassOf<AActor>): Void;
	public function DebugCapsuleSweepSize(HalfHeight: cpp.Float32, Radius: cpp.Float32): Void;
	public function DebugCapsuleSweepPawn(): Void;
	public function DebugCapsuleSweepComplex(bTraceComplex: Bool): Void;
	public function DebugCapsuleSweepClear(): Void;
	public function DebugCapsuleSweepChannel(Channel: ECollisionChannel): Void;
	public function DebugCapsuleSweepCapture(): Void;
	public function DebugCapsuleSweep(): Void;
	public function DamageTarget(DamageAmount: cpp.Float32): Void;
	public function CheatScript(ScriptName: FString): Void;
	public function ChangeSize(F: cpp.Float32): Void;
	public function BugItStringCreator(ViewLocation: FVector, ViewRotation: FRotator, GoString: cpp.Reference<FString>, LocString: cpp.Reference<FString>): Void;
	public function BugItGo(X: cpp.Float32, Y: cpp.Float32, Z: cpp.Float32, Pitch: cpp.Float32, Yaw: cpp.Float32, Roll: cpp.Float32): Void;
	public function BugIt(ScreenShotDescription: FString): Void;
}
