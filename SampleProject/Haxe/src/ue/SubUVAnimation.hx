// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USubUVAnimation")
@:include("Particles/SubUVAnimation.h")
@:valueType
extern class SubUVAnimation extends Object {
	public var SubUVTexture: ucpp.Ptr<Texture2D>;
	public var SubImages_Horizontal: ucpp.num.Int32;
	public var SubImages_Vertical: ucpp.num.Int32;
	public var BoundingMode: TEnumAsByte<ESubUVBoundingVertexCount>;
	public var OpacitySourceMode: TEnumAsByte<EOpacitySourceMode>;
	public var AlphaThreshold: ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstSubUVAnimation(SubUVAnimation) from SubUVAnimation {
	public extern var SubUVTexture(get, never): ucpp.Ptr<Texture2D.ConstTexture2D>;
	public inline extern function get_SubUVTexture(): ucpp.Ptr<Texture2D.ConstTexture2D> return this.SubUVTexture;
	public extern var SubImages_Horizontal(get, never): ucpp.num.Int32;
	public inline extern function get_SubImages_Horizontal(): ucpp.num.Int32 return this.SubImages_Horizontal;
	public extern var SubImages_Vertical(get, never): ucpp.num.Int32;
	public inline extern function get_SubImages_Vertical(): ucpp.num.Int32 return this.SubImages_Vertical;
	public extern var BoundingMode(get, never): TEnumAsByte<ESubUVBoundingVertexCount>;
	public inline extern function get_BoundingMode(): TEnumAsByte<ESubUVBoundingVertexCount> return this.BoundingMode;
	public extern var OpacitySourceMode(get, never): TEnumAsByte<EOpacitySourceMode>;
	public inline extern function get_OpacitySourceMode(): TEnumAsByte<EOpacitySourceMode> return this.OpacitySourceMode;
	public extern var AlphaThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_AlphaThreshold(): ucpp.num.Float32 return this.AlphaThreshold;
}

@:forward
@:nativeGen
@:native("SubUVAnimation*")
abstract SubUVAnimationPtr(ucpp.Ptr<SubUVAnimation>) from ucpp.Ptr<SubUVAnimation> to ucpp.Ptr<SubUVAnimation>{
	@:from
	public static extern inline function fromValue(v: SubUVAnimation): SubUVAnimationPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SubUVAnimation {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}