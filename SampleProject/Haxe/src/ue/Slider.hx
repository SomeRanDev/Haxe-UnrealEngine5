// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USlider")
@:include("Components/Slider.h")
@:valueType
extern class Slider extends Widget {
	public function GetValue(): ucpp.num.Float32;
	public function SetValue(input: ucpp.num.Float32): Void;
	public var ValueDelegate: HaxeDelegateProperty<() -> Void>;
	public var MinValue: ucpp.num.Float32;
	public var MaxValue: ucpp.num.Float32;
	public var WidgetStyle: SliderStyle;
	public var Orientation: TEnumAsByte<EOrientation>;
	public var SliderBarColor: LinearColor;
	public var SliderHandleColor: LinearColor;
	public var IndentHandle: Bool;
	public var Locked: Bool;
	public var MouseUsesStep: Bool;
	public var RequiresControllerLock: Bool;
	public var StepSize: ucpp.num.Float32;
	public var IsFocusable: Bool;
	public var OnMouseCaptureBegin: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnMouseCaptureEnd: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnControllerCaptureBegin: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnControllerCaptureEnd: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnValueChanged: HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void>;

	public function SetStepSize(InValue: ucpp.num.Float32): Void;
	public function SetSliderHandleColor(InValue: LinearColor): Void;
	public function SetSliderBarColor(InValue: LinearColor): Void;
	public function SetMinValue(InValue: ucpp.num.Float32): Void;
	public function SetMaxValue(InValue: ucpp.num.Float32): Void;
	public function SetLocked(InValue: Bool): Void;
	public function SetIndentHandle(InValue: Bool): Void;
	public function GetNormalizedValue(): ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetNormalizedValue)
@:nativeGen
abstract ConstSlider(Slider) from Slider {
	public extern var ValueDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ValueDelegate(): HaxeDelegateProperty<() -> Void> return this.ValueDelegate;
	public extern var MinValue(get, never): ucpp.num.Float32;
	public inline extern function get_MinValue(): ucpp.num.Float32 return this.MinValue;
	public extern var MaxValue(get, never): ucpp.num.Float32;
	public inline extern function get_MaxValue(): ucpp.num.Float32 return this.MaxValue;
	public extern var WidgetStyle(get, never): SliderStyle;
	public inline extern function get_WidgetStyle(): SliderStyle return this.WidgetStyle;
	public extern var Orientation(get, never): TEnumAsByte<EOrientation>;
	public inline extern function get_Orientation(): TEnumAsByte<EOrientation> return this.Orientation;
	public extern var SliderBarColor(get, never): LinearColor;
	public inline extern function get_SliderBarColor(): LinearColor return this.SliderBarColor;
	public extern var SliderHandleColor(get, never): LinearColor;
	public inline extern function get_SliderHandleColor(): LinearColor return this.SliderHandleColor;
	public extern var IndentHandle(get, never): Bool;
	public inline extern function get_IndentHandle(): Bool return this.IndentHandle;
	public extern var Locked(get, never): Bool;
	public inline extern function get_Locked(): Bool return this.Locked;
	public extern var MouseUsesStep(get, never): Bool;
	public inline extern function get_MouseUsesStep(): Bool return this.MouseUsesStep;
	public extern var RequiresControllerLock(get, never): Bool;
	public inline extern function get_RequiresControllerLock(): Bool return this.RequiresControllerLock;
	public extern var StepSize(get, never): ucpp.num.Float32;
	public inline extern function get_StepSize(): ucpp.num.Float32 return this.StepSize;
	public extern var IsFocusable(get, never): Bool;
	public inline extern function get_IsFocusable(): Bool return this.IsFocusable;
	public extern var OnMouseCaptureBegin(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnMouseCaptureBegin(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnMouseCaptureBegin;
	public extern var OnMouseCaptureEnd(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnMouseCaptureEnd(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnMouseCaptureEnd;
	public extern var OnControllerCaptureBegin(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnControllerCaptureBegin(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnControllerCaptureBegin;
	public extern var OnControllerCaptureEnd(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnControllerCaptureEnd(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnControllerCaptureEnd;
	public extern var OnValueChanged(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void>;
	public inline extern function get_OnValueChanged(): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void> return this.OnValueChanged;
}

@:forward
@:nativeGen
@:native("Slider*")
abstract SliderPtr(ucpp.Ptr<Slider>) from ucpp.Ptr<Slider> to ucpp.Ptr<Slider>{
	@:from
	public static extern inline function fromValue(v: Slider): SliderPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Slider {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}