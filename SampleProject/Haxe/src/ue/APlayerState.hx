// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("APlayerState")
@:include("GameFramework/PlayerState.h")
extern class APlayerState extends AInfo {
	public var Score: cpp.Float32;
	public var PlayerId: cpp.Int32;
	public var CompressedPing: cpp.UInt8;
	public var bShouldUpdateReplicatedPing: Bool;
	public var bIsSpectator: Bool;
	public var bOnlySpectator: Bool;
	public var bIsABot: Bool;
	public var bIsInactive: Bool;
	public var bFromPreviousLevel: Bool;
	public var StartTime: cpp.Int32;
	public var EngineMessageClass: TSubclassOf<ULocalMessage>;
	public var SavedNetworkAddress: FString;
	public var UniqueId: FUniqueNetIdRepl;
	public var OnPawnSet: HaxeMulticastSparseDelegateProperty<(cpp.Star<APlayerState>, cpp.Star<APawn>, cpp.Star<APawn>) -> Void>;
	public var PawnPrivate: TObjectPtr<APawn>;
	public var PlayerNamePrivate: FString;

	public function ReceiveOverrideWith(OldPlayerState: cpp.Star<APlayerState>): Void;
	public function ReceiveCopyProperties(NewPlayerState: cpp.Star<APlayerState>): Void;
	public function OnRep_UniqueId(): Void;
	public function OnRep_Score(): Void;
	public function OnRep_PlayerName(): Void;
	public function OnRep_PlayerId(): Void;
	public function OnRep_bIsInactive(): Void;
	public function OnPawnPrivateDestroyed(InActor: cpp.Star<AActor>): Void;
	public function IsOnlyASpectator(): Bool;
	public function GetPlayerName(): FString;
	public function GetPlayerController(): cpp.Star<APlayerController>;
	public function GetPingInMilliseconds(): cpp.Float32;
	public function GetPawn(): cpp.Star<APawn>;
	public function BP_GetUniqueId(): FUniqueNetIdRepl;
}
