// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UDatasmithScene")
@:include("DatasmithScene.h")
@:structAccess
extern class DatasmithScene extends Object {
	public var AssetImportData: cpp.Star<DatasmithSceneImportData>;
	public var BulkDataVersion: cpp.Int32;
	public var StaticMeshes: TMap<FName, TSoftObjectPtr<StaticMesh>>;
	public var Textures: TMap<FName, TSoftObjectPtr<Texture>>;
	public var MaterialFunctions: TMap<FName, TSoftObjectPtr<MaterialFunction>>;
	public var Materials: TMap<FName, TSoftObjectPtr<MaterialInterface>>;
	public var LevelSequences: TMap<FName, TSoftObjectPtr<LevelSequence>>;
	public var LevelVariantSets: TMap<FName, TSoftObjectPtr<LevelVariantSets>>;
	public var AssetUserData: TArray<cpp.Star<AssetUserData>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstDatasmithScene(DatasmithScene) from DatasmithScene {
	public extern var AssetImportData(get, never): cpp.Star<DatasmithSceneImportData.ConstDatasmithSceneImportData>;
	public inline extern function get_AssetImportData(): cpp.Star<DatasmithSceneImportData.ConstDatasmithSceneImportData> return this.AssetImportData;
	public extern var BulkDataVersion(get, never): cpp.Int32;
	public inline extern function get_BulkDataVersion(): cpp.Int32 return this.BulkDataVersion;
	public extern var StaticMeshes(get, never): TMap<FName, TSoftObjectPtr<StaticMesh.ConstStaticMesh>>;
	public inline extern function get_StaticMeshes(): TMap<FName, TSoftObjectPtr<StaticMesh.ConstStaticMesh>> return this.StaticMeshes;
	public extern var Textures(get, never): TMap<FName, TSoftObjectPtr<Texture.ConstTexture>>;
	public inline extern function get_Textures(): TMap<FName, TSoftObjectPtr<Texture.ConstTexture>> return this.Textures;
	public extern var MaterialFunctions(get, never): TMap<FName, TSoftObjectPtr<MaterialFunction.ConstMaterialFunction>>;
	public inline extern function get_MaterialFunctions(): TMap<FName, TSoftObjectPtr<MaterialFunction.ConstMaterialFunction>> return this.MaterialFunctions;
	public extern var Materials(get, never): TMap<FName, TSoftObjectPtr<MaterialInterface.ConstMaterialInterface>>;
	public inline extern function get_Materials(): TMap<FName, TSoftObjectPtr<MaterialInterface.ConstMaterialInterface>> return this.Materials;
	public extern var LevelSequences(get, never): TMap<FName, TSoftObjectPtr<LevelSequence.ConstLevelSequence>>;
	public inline extern function get_LevelSequences(): TMap<FName, TSoftObjectPtr<LevelSequence.ConstLevelSequence>> return this.LevelSequences;
	public extern var LevelVariantSets(get, never): TMap<FName, TSoftObjectPtr<LevelVariantSets.ConstLevelVariantSets>>;
	public inline extern function get_LevelVariantSets(): TMap<FName, TSoftObjectPtr<LevelVariantSets.ConstLevelVariantSets>> return this.LevelVariantSets;
	public extern var AssetUserData(get, never): TArray<cpp.Star<AssetUserData.ConstAssetUserData>>;
	public inline extern function get_AssetUserData(): TArray<cpp.Star<AssetUserData.ConstAssetUserData>> return this.AssetUserData;
}

@:forward
@:nativeGen
@:native("DatasmithScene*")
abstract DatasmithScenePtr(cpp.Star<DatasmithScene>) from cpp.Star<DatasmithScene> to cpp.Star<DatasmithScene>{
	@:from
	public static extern inline function fromValue(v: DatasmithScene): DatasmithScenePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): DatasmithScene {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}