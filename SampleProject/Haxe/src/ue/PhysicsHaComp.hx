// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPhysicsHandleComponent")
@:include("PhysicsEngine/PhysicsHandleComponent.h")
extern class PhysicsHaComp extends ActorCompComp {
	public var GrabbedComponent: cpp.Star<PrimitiveComp>;
	public var bSoftAngularConstraint: Bool;
	public var bSoftLinearConstraint: Bool;
	public var bInterpolateTarget: Bool;
	public var LinearDamping: cpp.Float32;
	public var LinearStiffness: cpp.Float32;
	public var AngularDamping: cpp.Float32;
	public var AngularStiffness: cpp.Float32;
	public var InterpolationSpeed: cpp.Float32;

	public function SetTargetRotation(NewRotation: FRotator): Void;
	public function SetTargetLocationAndRotation(NewLocation: FVector, NewRotation: FRotator): Void;
	public function SetTargetLocation(NewLocation: FVector): Void;
	public function SetLinearStiffness(NewLinearStiffness: cpp.Float32): Void;
	public function SetLinearDamping(NewLinearDamping: cpp.Float32): Void;
	public function SetInterpolationSpeed(NewInterpolationSpeed: cpp.Float32): Void;
	public function SetAngularStiffness(NewAngularStiffness: cpp.Float32): Void;
	public function SetAngularDamping(NewAngularDamping: cpp.Float32): Void;
	public function ReleaseComponent(): Void;
	public function GrabComponentAtLocationWithRotation(Component: cpp.Star<PrimitiveComp>, InBoneName: FName, Location: FVector, Rotation: FRotator): Void;
	public function GrabComponentAtLocation(Component: cpp.Star<PrimitiveComp>, InBoneName: FName, GrabLocation: FVector): Void;
	public function GrabComponent(Component: cpp.Star<PrimitiveComp>, InBoneName: FName, GrabLocation: FVector, bConstrainRotation: Bool): Void;
	public function GetTargetLocationAndRotation(TargetLocation: cpp.Reference<FVector>, TargetRotation: cpp.Reference<FRotator>): Void;
	public function GetGrabbedComponent(): cpp.Reference<cpp.Star<PrimitiveComp>>;
}

@:forward(GetTargetLocationAndRotation, GetGrabbedComponent)
abstract ConstPhysicsHaComp(PhysicsHaComp) from PhysicsHaComp {
}