// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AController")
@:include("GameFramework/Controller.h")
extern class AController extends AActor {
	public var PlayerState: TObjectPtr<APlayerState>;
	public var OnInstigatedAnyDamage: HaxeMulticastSparseDelegateProperty<(cpp.Float32, cpp.Star<UDamageType>, cpp.Star<AActor>, cpp.Star<AActor>) -> Void>;
	public var OnPossessedPawnChanged: HaxeMulticastSparseDelegateProperty<(cpp.Star<APawn>, cpp.Star<APawn>) -> Void>;
	public var StateName: FName;
	public var Pawn: TObjectPtr<APawn>;
	public var Character: TObjectPtr<ACharacter>;
	public var TransformComponent: TObjectPtr<USceneComponent>;
	public var ControlRotation: FRotator;
	public var bAttachToPawn: Bool;

	public function UnPossess(): Void;
	public function StopMovement(): Void;
	public function SetInitialLocationAndRotation(NewLocation: FVector, NewRotation: FRotator): Void;
	public function SetIgnoreMoveInput(bNewMoveInput: Bool): Void;
	public function SetIgnoreLookInput(bNewLookInput: Bool): Void;
	public function SetControlRotation(NewRotation: FRotator): Void;
	public function ResetIgnoreMoveInput(): Void;
	public function ResetIgnoreLookInput(): Void;
	public function ResetIgnoreInputFlags(): Void;
	public function ReceiveUnPossess(UnpossessedPawn: cpp.Star<APawn>): Void;
	public function ReceivePossess(PossessedPawn: cpp.Star<APawn>): Void;
	public function ReceiveInstigatedAnyDamage(Damage: cpp.Float32, DamageType: cpp.Star<UDamageType>, DamagedActor: cpp.Star<AActor>, DamageCauser: cpp.Star<AActor>): Void;
	public function Possess(InPawn: cpp.Star<APawn>): Void;
	public function OnRep_PlayerState(): Void;
	public function OnRep_Pawn(): Void;
	public function LineOfSightTo(Other: cpp.Star<AActor>, ViewPoint: FVector, bAlternateChecks: Bool): Bool;
	public function K2_GetPawn(): cpp.Star<APawn>;
	public function IsPlayerController(): Bool;
	public function IsMoveInputIgnored(): Bool;
	public function IsLookInputIgnored(): Bool;
	public function IsLocalPlayerController(): Bool;
	public function IsLocalController(): Bool;
	public function GetViewTarget(): cpp.Star<AActor>;
	public function GetPlayerViewPoint(Location: FVector, Rotation: FRotator): Void;
	public function GetDesiredRotation(): FRotator;
	public function GetControlRotation(): FRotator;
	public function ClientSetRotation(NewRotation: FRotator, bResetCamera: Bool): Void;
	public function ClientSetLocation(NewLocation: FVector, NewRotation: FRotator): Void;
}
