// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEnvQueryManager")
@:include("EnvironmentQuery/EnvQueryManager.h")
@:structAccess
extern class EnvQueryManager extends AISubsystem {
	@:protected public var InstanceCache: TArray<EnvQueryInstanceCache>;
	@:protected public var LocalContexts: TArray<cpp.Star<EnvQueryContext>>;
	@:protected public var GCShieldedWrappers: TArray<cpp.Star<EnvQueryInstanceBlueprintWrapper>>;
	@:protected public var MaxAllowedTestingTime: cpp.Float32;
	@:protected public var bTestQueriesUsingBreadth: Bool;
	@:protected public var QueryCountWarningThreshold: cpp.Int32;
	@:protected public var QueryCountWarningInterval: cpp.Float64;
	@:protected public var ExecutionTimeWarningSeconds: cpp.Float64;
	@:protected public var HandlingResultTimeWarningSeconds: cpp.Float64;
	@:protected public var GenerationTimeWarningSeconds: cpp.Float64;

	public function RunEQSQuery(WorldContextObject: cpp.Star<Object>, QueryTemplate: cpp.Star<EnvQuery>, Querier: cpp.Star<Object>, RunMode: TEnumAsByte<EEnvQueryRunMode>, WrapperClass: TSubclassOf<EnvQueryInstanceBlueprintWrapper>): cpp.Star<EnvQueryInstanceBlueprintWrapper>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstEnvQueryManager(EnvQueryManager) from EnvQueryManager {
}

@:forward
@:nativeGen
@:native("EnvQueryManager*")
abstract EnvQueryManagerPtr(cpp.Star<EnvQueryManager>) from cpp.Star<EnvQueryManager> to cpp.Star<EnvQueryManager>{
	@:from
	public static extern inline function fromValue(v: EnvQueryManager): EnvQueryManagerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EnvQueryManager {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}