// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPawnMovementComponent")
@:include("GameFramework/PawnMovementComponent.h")
@:structAccess
extern class PawnMovementComp extends NavMovementComp {
	public var PawnOwner: cpp.Star<Pawn>;

	public function IsMoveInputIgnored(): cpp.Reference<Bool>;
	public function GetPendingInputVector(): cpp.Reference<Vector>;
	public function GetPawnOwner(): cpp.Reference<cpp.Star<Pawn>>;
	public function GetLastInputVector(): cpp.Reference<Vector>;
	public function ConsumeInputVector(): cpp.Reference<Vector>;
	public function AddInputVector(WorldVector: Vector, bForce: Bool): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsMoveInputIgnored, GetPendingInputVector, GetPawnOwner, GetLastInputVector)
@:nativeGen
abstract ConstPawnMovementComp(PawnMovementComp) from PawnMovementComp {
	public extern var PawnOwner(get, never): cpp.Star<Pawn.ConstPawn>;
	public inline extern function get_PawnOwner(): cpp.Star<Pawn.ConstPawn> return this.PawnOwner;
}

@:forward
@:nativeGen
@:native("PawnMovementComp*")
abstract PawnMovementCompPtr(cpp.Star<PawnMovementComp>) from cpp.Star<PawnMovementComp> to cpp.Star<PawnMovementComp>{
	@:from
	public static extern inline function fromValue(v: PawnMovementComp): PawnMovementCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PawnMovementComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}