// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UConstantQNRT")
@:include("ConstantQNRT.h")
@:structAccess
extern class ConstantQNRT extends AudioSynesthesiaNRT {
	public var Settings: cpp.Star<ConstantQNRTSettings>;

	public function GetNormalizedChannelConstantQAtTime(InSeconds: cpp.Float32, InChannel: cpp.Int32, OutConstantQ: cpp.Reference<TArray<cpp.Float32>>): Void;
	public function GetChannelConstantQAtTime(InSeconds: cpp.Float32, InChannel: cpp.Int32, OutConstantQ: cpp.Reference<TArray<cpp.Float32>>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetNormalizedChannelConstantQAtTime, GetChannelConstantQAtTime)
@:nativeGen
abstract ConstConstantQNRT(ConstantQNRT) from ConstantQNRT {
	public extern var Settings(get, never): cpp.Star<ConstantQNRTSettings.ConstConstantQNRTSettings>;
	public inline extern function get_Settings(): cpp.Star<ConstantQNRTSettings.ConstConstantQNRTSettings> return this.Settings;
}

@:forward
@:nativeGen
@:native("ConstantQNRT*")
abstract ConstantQNRTPtr(cpp.Star<ConstantQNRT>) from cpp.Star<ConstantQNRT> to cpp.Star<ConstantQNRT>{
	@:from
	public static extern inline function fromValue(v: ConstantQNRT): ConstantQNRTPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ConstantQNRT {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}