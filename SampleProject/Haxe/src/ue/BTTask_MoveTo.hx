// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBTTask_MoveTo")
@:include("BehaviorTree/Tasks/BTTask_MoveTo.h")
@:valueType
extern class BTTask_MoveTo extends BTTask_BlackboardBase {
	public var AcceptableRadius: ucpp.num.Float32;
	public var FilterClass: TSubclassOf<NavigationQueryFilter>;
	public var ObservedBlackboardValueTolerance: ucpp.num.Float32;
	public var bObserveBlackboardValue: Bool;
	public var bAllowStrafe: Bool;
	public var bAllowPartialPath: Bool;
	public var bTrackMovingGoal: Bool;
	public var bProjectGoalLocation: Bool;
	public var bReachTestIncludesAgentRadius: Bool;
	public var bReachTestIncludesGoalRadius: Bool;
	public var bStopOnOverlap: Bool;
	public var bStopOnOverlapNeedsUpdate: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstBTTask_MoveTo(BTTask_MoveTo) from BTTask_MoveTo {
	public extern var AcceptableRadius(get, never): ucpp.num.Float32;
	public inline extern function get_AcceptableRadius(): ucpp.num.Float32 return this.AcceptableRadius;
	public extern var FilterClass(get, never): TSubclassOf<NavigationQueryFilter.ConstNavigationQueryFilter>;
	public inline extern function get_FilterClass(): TSubclassOf<NavigationQueryFilter.ConstNavigationQueryFilter> return this.FilterClass;
	public extern var ObservedBlackboardValueTolerance(get, never): ucpp.num.Float32;
	public inline extern function get_ObservedBlackboardValueTolerance(): ucpp.num.Float32 return this.ObservedBlackboardValueTolerance;
	public extern var bObserveBlackboardValue(get, never): Bool;
	public inline extern function get_bObserveBlackboardValue(): Bool return this.bObserveBlackboardValue;
	public extern var bAllowStrafe(get, never): Bool;
	public inline extern function get_bAllowStrafe(): Bool return this.bAllowStrafe;
	public extern var bAllowPartialPath(get, never): Bool;
	public inline extern function get_bAllowPartialPath(): Bool return this.bAllowPartialPath;
	public extern var bTrackMovingGoal(get, never): Bool;
	public inline extern function get_bTrackMovingGoal(): Bool return this.bTrackMovingGoal;
	public extern var bProjectGoalLocation(get, never): Bool;
	public inline extern function get_bProjectGoalLocation(): Bool return this.bProjectGoalLocation;
	public extern var bReachTestIncludesAgentRadius(get, never): Bool;
	public inline extern function get_bReachTestIncludesAgentRadius(): Bool return this.bReachTestIncludesAgentRadius;
	public extern var bReachTestIncludesGoalRadius(get, never): Bool;
	public inline extern function get_bReachTestIncludesGoalRadius(): Bool return this.bReachTestIncludesGoalRadius;
	public extern var bStopOnOverlap(get, never): Bool;
	public inline extern function get_bStopOnOverlap(): Bool return this.bStopOnOverlap;
	public extern var bStopOnOverlapNeedsUpdate(get, never): Bool;
	public inline extern function get_bStopOnOverlapNeedsUpdate(): Bool return this.bStopOnOverlapNeedsUpdate;
}

@:forward
@:nativeGen
@:native("BTTask_MoveTo*")
abstract BTTask_MoveToPtr(ucpp.Ptr<BTTask_MoveTo>) from ucpp.Ptr<BTTask_MoveTo> to ucpp.Ptr<BTTask_MoveTo>{
	@:from
	public static extern inline function fromValue(v: BTTask_MoveTo): BTTask_MoveToPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): BTTask_MoveTo {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}