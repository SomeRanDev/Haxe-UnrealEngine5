// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetSystemLibrary")
@:include("Kismet/KismetSystemLibrary.h")
extern class KismetSystemLibrary extends BlueprintFunctionLibrary {
	public function UnregisterForRemoteNotifications(): Void;
	public function UnloadPrimaryAssetList(PrimaryAssetIdList: cpp.Reference<TArray<PrimaryAssetId>>): Void;
	public function UnloadPrimaryAsset(PrimaryAssetId: PrimaryAssetId): Void;
	public function TransactObject(Object: cpp.Star<Object>): Void;
	public function StackTrace(): Void;
	public function SphereTraceSingleForObjects(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function SphereTraceSingleByProfile(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function SphereTraceSingle(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function SphereTraceMultiForObjects(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function SphereTraceMultiByProfile(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function SphereTraceMulti(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function SphereOverlapComponents(WorldContextObject: cpp.Star<Object.ConstObject>, SpherePos: Vector, SphereRadius: cpp.Float32, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, ComponentClassFilter: cpp.Star<Class>, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, OutComponents: cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>): cpp.Reference<Bool>;
	public function SphereOverlapActors(WorldContextObject: cpp.Star<Object.ConstObject>, SpherePos: Vector, SphereRadius: cpp.Float32, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, ActorClassFilter: cpp.Star<Class>, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, OutActors: cpp.Reference<TArray<cpp.Star<Actor>>>): cpp.Reference<Bool>;
	public function SnapshotObject(Object: cpp.Star<Object>): Void;
	public function ShowPlatformSpecificLeaderboardScreen(CategoryName: FString): Void;
	public function ShowPlatformSpecificAchievementsScreen(SpecificPlayer: cpp.Star<PlayerController.ConstPlayerController>): Void;
	public function ShowInterstitialAd(): Void;
	public function ShowAdBanner(AdIdIndex: cpp.Int32, bShowOnBottomOfScreen: Bool): Void;
	public function SetWindowTitle(Title: cpp.Reference<FText>): Void;
	public function SetVolumeButtonsHandledBySystem(bEnabled: Bool): Void;
	public function SetVectorPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<Vector>): Void;
	public function SetVector3fPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<Vector3f>): Void;
	public function SetUserActivity(UserActivity: cpp.Reference<UserActivity>): Void;
	public function SetTransformPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<Transform>): Void;
	public function SetTextPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<FText>): Void;
	public function SetSuppressViewportTransitionMessage(WorldContextObject: cpp.Star<Object.ConstObject>, bState: Bool): Void;
	public function SetStructurePropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<GenericStruct>): Void;
	public function SetStringPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: FString): Void;
	public function SetSoftObjectPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<TSoftObjectPtr<Object.ConstObject>>): Void;
	public function SetSoftClassPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<TSoftClassPtr<Class.ConstClass>>): Void;
	public function SetRotatorPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<Rotator>): Void;
	public function SetObjectPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Star<Object>): Void;
	public function SetNamePropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<FName>): Void;
	public function SetLinearColorPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<LinearColor>): Void;
	public function SetIntPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Int32): Void;
	public function SetInterfacePropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<Interface.ConstInterface>): Void;
	public function SetInt64PropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Int64): Void;
	public function SetGamepadsBlockDeviceFeedback(bBlock: Bool): Void;
	public function SetFieldPathPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<TFieldPath<FField>>): Void;
	public function SetEditorProperty(Object: cpp.Star<Object>, PropertyName: FName, PropertyValue: cpp.Reference<cpp.Int32>, ChangeNotifyMode: EPropertyAccessChangeNotifyMode): cpp.Reference<Bool>;
	public function SetDoublePropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Float64): Void;
	public function SetColorPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<Color>): Void;
	public function SetCollisionProfileNameProperty(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.Reference<CollisionProfileName>): Void;
	public function SetClassPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: TSubclassOf<Object>): Void;
	public function SetBytePropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: cpp.UInt8): Void;
	public function SetBoolPropertyByName(Object: cpp.Star<Object>, PropertyName: FName, Value: Bool): Void;
	public function RetriggerableDelay(WorldContextObject: cpp.Star<Object.ConstObject>, Duration: cpp.Float32, LatentInfo: LatentActionInfo): Void;
	public function ResetGamepadAssignmentToController(ControllerId: cpp.Int32): Void;
	public function ResetGamepadAssignments(): Void;
	public function RegisterForRemoteNotifications(): Void;
	public function QuitGame(WorldContextObject: cpp.Star<Object.ConstObject>, SpecificPlayer: cpp.Star<PlayerController>, QuitPreference: EQuitPreference, bIgnorePlatformRestrictions: Bool): Void;
	public function QuitEditor(): Void;
	public function PrintWarning(InString: FString): Void;
	public function PrintText(WorldContextObject: cpp.Star<Object.ConstObject>, InText: FText, bPrintToScreen: Bool, bPrintToLog: Bool, TextColor: LinearColor, Duration: cpp.Float32, Key: FName): Void;
	public function PrintString(WorldContextObject: cpp.Star<Object.ConstObject>, InString: FString, bPrintToScreen: Bool, bPrintToLog: Bool, TextColor: LinearColor, Duration: cpp.Float32, Key: FName): Void;
	public function ParseParamValue(InString: FString, InParam: FString, OutValue: cpp.Reference<FString>): cpp.Reference<Bool>;
	public function ParseParam(InString: FString, InParam: FString): cpp.Reference<Bool>;
	public function ParseCommandLine(InCmdLine: FString, OutTokens: cpp.Reference<TArray<FString>>, OutSwitches: cpp.Reference<TArray<FString>>, OutParams: cpp.Reference<TMap<FString, FString>>): Void;
	public function OnAssetLoaded__DelegateSignature(Loaded: cpp.Star<Object>): Void;
	public function OnAssetClassLoaded__DelegateSignature(Loaded: TSubclassOf<Object>): Void;
	public function NotEqual_SoftObjectReference(A: cpp.Reference<TSoftObjectPtr<Object.ConstObject>>, B: cpp.Reference<TSoftObjectPtr<Object.ConstObject>>): cpp.Reference<Bool>;
	public function NotEqual_SoftClassReference(A: cpp.Reference<TSoftClassPtr<Class.ConstClass>>, B: cpp.Reference<TSoftClassPtr<Class.ConstClass>>): cpp.Reference<Bool>;
	public function NotEqual_PrimaryAssetType(A: PrimaryAssetType, B: PrimaryAssetType): cpp.Reference<Bool>;
	public function NotEqual_PrimaryAssetId(A: PrimaryAssetId, B: PrimaryAssetId): cpp.Reference<Bool>;
	public function NormalizeFilename(InFilename: FString): cpp.Reference<FString>;
	public function MoveComponentTo(Component: cpp.Star<SceneComp>, TargetRelativeLocation: Vector, TargetRelativeRotation: Rotator, bEaseOut: Bool, bEaseIn: Bool, OverTime: cpp.Float32, bForceShortestRotationPath: Bool, MoveAction: EMoveComponentAction, LatentInfo: LatentActionInfo): Void;
	public function MakeSoftObjectPath(PathString: FString): cpp.Reference<SoftObjectPath>;
	public function MakeSoftClassPath(PathString: FString): cpp.Reference<SoftClassPath>;
	public function MakeLiteralText(Value: FText): cpp.Reference<FText>;
	public function MakeLiteralString(Value: FString): cpp.Reference<FString>;
	public function MakeLiteralName(Value: FName): cpp.Reference<FName>;
	public function MakeLiteralInt64(Value: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function MakeLiteralInt(Value: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function MakeLiteralFloat(Value: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function MakeLiteralDouble(Value: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function MakeLiteralByte(Value: cpp.UInt8): cpp.Reference<cpp.UInt8>;
	public function MakeLiteralBool(Value: Bool): cpp.Reference<Bool>;
	public function LogString(InString: FString, bPrintToLog: Bool): Void;
	public function LoadInterstitialAd(AdIdIndex: cpp.Int32): Void;
	public function LoadClassAsset_Blocking(AssetClass: TSoftClassPtr<Class>): cpp.Reference<cpp.Star<Class>>;
	public function LoadAssetClass(WorldContextObject: cpp.Star<Object.ConstObject>, AssetClass: TSoftClassPtr<Class>, OnLoaded: HaxeDelegateProperty<(TSubclassOf<Object>) -> Void>, LatentInfo: LatentActionInfo): Void;
	public function LoadAsset_Blocking(Asset: TSoftObjectPtr<Object>): cpp.Reference<cpp.Star<Object>>;
	public function LoadAsset(WorldContextObject: cpp.Star<Object.ConstObject>, Asset: TSoftObjectPtr<Object>, OnLoaded: HaxeDelegateProperty<(cpp.Star<Object>) -> Void>, LatentInfo: LatentActionInfo): Void;
	public function LineTraceSingleForObjects(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function LineTraceSingleByProfile(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function LineTraceSingle(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function LineTraceMultiForObjects(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function LineTraceMultiByProfile(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function LineTraceMulti(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function LaunchURL(URL: FString): Void;
	public function K2_UnPauseTimerHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: TimerHandle): Void;
	public function K2_UnPauseTimerDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function K2_UnPauseTimer(Object: cpp.Star<Object>, FunctionName: FString): Void;
	public function K2_TimerExistsHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: TimerHandle): cpp.Reference<Bool>;
	public function K2_TimerExistsDelegate(Delegate: HaxeDelegateProperty<() -> Void>): cpp.Reference<Bool>;
	public function K2_TimerExists(Object: cpp.Star<Object>, FunctionName: FString): cpp.Reference<Bool>;
	public function K2_SetTimerForNextTickDelegate(Delegate: HaxeDelegateProperty<() -> Void>): cpp.Reference<TimerHandle>;
	public function K2_SetTimerForNextTick(Object: cpp.Star<Object>, FunctionName: FString): cpp.Reference<TimerHandle>;
	public function K2_SetTimerDelegate(Delegate: HaxeDelegateProperty<() -> Void>, Time: cpp.Float32, bLooping: Bool, InitialStartDelay: cpp.Float32, InitialStartDelayVariance: cpp.Float32): cpp.Reference<TimerHandle>;
	public function K2_SetTimer(Object: cpp.Star<Object>, FunctionName: FString, Time: cpp.Float32, bLooping: Bool, InitialStartDelay: cpp.Float32, InitialStartDelayVariance: cpp.Float32): cpp.Reference<TimerHandle>;
	public function K2_PauseTimerHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: TimerHandle): Void;
	public function K2_PauseTimerDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function K2_PauseTimer(Object: cpp.Star<Object>, FunctionName: FString): Void;
	public function K2_IsValidTimerHandle(Handle: TimerHandle): cpp.Reference<Bool>;
	public function K2_IsTimerPausedHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: TimerHandle): cpp.Reference<Bool>;
	public function K2_IsTimerPausedDelegate(Delegate: HaxeDelegateProperty<() -> Void>): cpp.Reference<Bool>;
	public function K2_IsTimerPaused(Object: cpp.Star<Object>, FunctionName: FString): cpp.Reference<Bool>;
	public function K2_IsTimerActiveHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: TimerHandle): cpp.Reference<Bool>;
	public function K2_IsTimerActiveDelegate(Delegate: HaxeDelegateProperty<() -> Void>): cpp.Reference<Bool>;
	public function K2_IsTimerActive(Object: cpp.Star<Object>, FunctionName: FString): cpp.Reference<Bool>;
	public function K2_InvalidateTimerHandle(Handle: cpp.Reference<TimerHandle>): cpp.Reference<TimerHandle>;
	public function K2_GetTimerRemainingTimeHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: TimerHandle): cpp.Reference<cpp.Float32>;
	public function K2_GetTimerRemainingTimeDelegate(Delegate: HaxeDelegateProperty<() -> Void>): cpp.Reference<cpp.Float32>;
	public function K2_GetTimerRemainingTime(Object: cpp.Star<Object>, FunctionName: FString): cpp.Reference<cpp.Float32>;
	public function K2_GetTimerElapsedTimeHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: TimerHandle): cpp.Reference<cpp.Float32>;
	public function K2_GetTimerElapsedTimeDelegate(Delegate: HaxeDelegateProperty<() -> Void>): cpp.Reference<cpp.Float32>;
	public function K2_GetTimerElapsedTime(Object: cpp.Star<Object>, FunctionName: FString): cpp.Reference<cpp.Float32>;
	public function K2_ClearTimerHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: TimerHandle): Void;
	public function K2_ClearTimerDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function K2_ClearTimer(Object: cpp.Star<Object>, FunctionName: FString): Void;
	public function K2_ClearAndInvalidateTimerHandle(WorldContextObject: cpp.Star<Object.ConstObject>, Handle: cpp.Reference<TimerHandle>): Void;
	public function IsValidSoftObjectReference(SoftObjectReference: cpp.Reference<TSoftObjectPtr<Object.ConstObject>>): cpp.Reference<Bool>;
	public function IsValidSoftClassReference(SoftClassReference: cpp.Reference<TSoftClassPtr<Class.ConstClass>>): cpp.Reference<Bool>;
	public function IsValidPrimaryAssetType(PrimaryAssetType: PrimaryAssetType): cpp.Reference<Bool>;
	public function IsValidPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): cpp.Reference<Bool>;
	public function IsValidClass(Class: cpp.Star<Class>): cpp.Reference<Bool>;
	public function IsValid(Object: cpp.Star<Object.ConstObject>): cpp.Reference<Bool>;
	public function IsUnattended(): cpp.Reference<Bool>;
	public function IsStandalone(WorldContextObject: cpp.Star<Object.ConstObject>): cpp.Reference<Bool>;
	public function IsSplitScreen(WorldContextObject: cpp.Star<Object.ConstObject>): cpp.Reference<Bool>;
	public function IsServer(WorldContextObject: cpp.Star<Object.ConstObject>): cpp.Reference<Bool>;
	public function IsScreensaverEnabled(): cpp.Reference<Bool>;
	public function IsPackagedForDistribution(): cpp.Reference<Bool>;
	public function IsLoggedIn(SpecificPlayer: cpp.Star<PlayerController.ConstPlayerController>): cpp.Reference<Bool>;
	public function IsInterstitialAdRequested(): cpp.Reference<Bool>;
	public function IsInterstitialAdAvailable(): cpp.Reference<Bool>;
	public function IsDedicatedServer(WorldContextObject: cpp.Star<Object.ConstObject>): cpp.Reference<Bool>;
	public function IsControllerAssignedToGamepad(ControllerId: cpp.Int32): cpp.Reference<Bool>;
	public function HideAdBanner(): Void;
	public function HasMultipleLocalPlayers(WorldContextObject: cpp.Star<Object.ConstObject>): cpp.Reference<Bool>;
	public function GetVolumeButtonsHandledBySystem(): cpp.Reference<Bool>;
	public function GetUniqueDeviceId(): cpp.Reference<FString>;
	public function GetSystemPath(Object: cpp.Star<Object.ConstObject>): cpp.Reference<FString>;
	public function GetSupportedFullscreenResolutions(Resolutions: cpp.Reference<TArray<IntPoint>>): cpp.Reference<Bool>;
	public function GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): cpp.Reference<TSoftObjectPtr<Object>>;
	public function GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): cpp.Reference<TSoftClassPtr<Class>>;
	public function GetRenderingMaterialQualityLevel(): cpp.Reference<cpp.Int32>;
	public function GetRenderingDetailMode(): cpp.Reference<cpp.Int32>;
	public function GetProjectSavedDirectory(): cpp.Reference<FString>;
	public function GetProjectDirectory(): cpp.Reference<FString>;
	public function GetProjectContentDirectory(): cpp.Reference<FString>;
	public function GetPrimaryAssetsWithBundleState(RequiredBundles: cpp.Reference<TArray<FName>>, ExcludedBundles: cpp.Reference<TArray<FName>>, ValidTypes: cpp.Reference<TArray<PrimaryAssetType>>, bForceCurrentState: Bool, OutPrimaryAssetIdList: cpp.Reference<TArray<PrimaryAssetId>>): Void;
	public function GetPrimaryAssetIdList(PrimaryAssetType: PrimaryAssetType, OutPrimaryAssetIdList: cpp.Reference<TArray<PrimaryAssetId>>): Void;
	public function GetPrimaryAssetIdFromSoftObjectReference(SoftObjectReference: TSoftObjectPtr<Object>): cpp.Reference<PrimaryAssetId>;
	public function GetPrimaryAssetIdFromSoftClassReference(SoftClassReference: TSoftClassPtr<Class>): cpp.Reference<PrimaryAssetId>;
	public function GetPrimaryAssetIdFromObject(Object: cpp.Star<Object>): cpp.Reference<PrimaryAssetId>;
	public function GetPrimaryAssetIdFromClass(Class: TSubclassOf<Object>): cpp.Reference<PrimaryAssetId>;
	public function GetPreferredLanguages(): cpp.Reference<TArray<FString>>;
	public function GetPlatformUserName(): cpp.Reference<FString>;
	public function GetPlatformUserDir(): cpp.Reference<FString>;
	public function GetPathName(Object: cpp.Star<Object.ConstObject>): cpp.Reference<FString>;
	public function GetOuterObject(Object: cpp.Star<Object.ConstObject>): cpp.Reference<cpp.Star<Object>>;
	public function GetObjectName(Object: cpp.Star<Object.ConstObject>): cpp.Reference<FString>;
	public function GetObjectFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): cpp.Reference<cpp.Star<Object>>;
	public function GetMinYResolutionForUI(): cpp.Reference<cpp.Int32>;
	public function GetMinYResolutionFor3DView(): cpp.Reference<cpp.Int32>;
	public function GetLocalCurrencySymbol(): cpp.Reference<FString>;
	public function GetLocalCurrencyCode(): cpp.Reference<FString>;
	public function GetGameTimeInSeconds(WorldContextObject: cpp.Star<Object.ConstObject>): cpp.Reference<cpp.Float32>;
	public function GetGamepadControllerName(ControllerId: cpp.Int32): cpp.Reference<FString>;
	public function GetGamepadButtonGlyph(ButtonKey: FString, ControllerIndex: cpp.Int32): cpp.Reference<cpp.Star<Texture2D>>;
	public function GetGameName(): cpp.Reference<FString>;
	public function GetGameBundleId(): cpp.Reference<FString>;
	public function GetFrameCount(): cpp.Reference<cpp.Int64>;
	public function GetEngineVersion(): cpp.Reference<FString>;
	public function GetEditorProperty(Object: cpp.Star<Object>, PropertyName: FName, PropertyValue: cpp.Reference<cpp.Int32>): cpp.Reference<Bool>;
	public function GetDisplayName(Object: cpp.Star<Object.ConstObject>): cpp.Reference<FString>;
	public function GetDeviceId(): cpp.Reference<FString>;
	public function GetDefaultLocale(): cpp.Reference<FString>;
	public function GetDefaultLanguage(): cpp.Reference<FString>;
	public function GetCurrentBundleState(PrimaryAssetId: PrimaryAssetId, bForceCurrentState: Bool, OutBundles: cpp.Reference<TArray<FName>>): cpp.Reference<Bool>;
	public function GetConvenientWindowedResolutions(Resolutions: cpp.Reference<TArray<IntPoint>>): cpp.Reference<Bool>;
	public function GetConsoleVariableIntValue(VariableName: FString): cpp.Reference<cpp.Int32>;
	public function GetConsoleVariableFloatValue(VariableName: FString): cpp.Reference<cpp.Float32>;
	public function GetConsoleVariableBoolValue(VariableName: FString): cpp.Reference<Bool>;
	public function GetComponentBounds(Component: cpp.Star<SceneComp.ConstSceneComp>, Origin: cpp.Reference<Vector>, BoxExtent: cpp.Reference<Vector>, SphereRadius: cpp.Reference<cpp.Float32>): Void;
	public function GetCommandLine(): cpp.Reference<FString>;
	public function GetClassFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): cpp.Reference<TSubclassOf<Object>>;
	public function GetClassDisplayName(Class: cpp.Star<Class>): cpp.Reference<FString>;
	public function GetBuildVersion(): cpp.Reference<FString>;
	public function GetBuildConfiguration(): cpp.Reference<FString>;
	public function GetAdIDCount(): cpp.Reference<cpp.Int32>;
	public function GetActorListFromComponentList(ComponentList: cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>, ActorClassFilter: cpp.Star<Class>, OutActorList: cpp.Reference<TArray<cpp.Star<Actor>>>): Void;
	public function GetActorBounds(Actor: cpp.Star<Actor.ConstActor>, Origin: cpp.Reference<Vector>, BoxExtent: cpp.Reference<Vector>): Void;
	public function ForceCloseAdBanner(): Void;
	public function FlushPersistentDebugLines(WorldContextObject: cpp.Star<Object.ConstObject>): Void;
	public function FlushDebugStrings(WorldContextObject: cpp.Star<Object.ConstObject>): Void;
	public function ExecuteConsoleCommand(WorldContextObject: cpp.Star<Object.ConstObject>, Command: FString, SpecificPlayer: cpp.Star<PlayerController>): Void;
	public function EqualEqual_SoftObjectReference(A: cpp.Reference<TSoftObjectPtr<Object.ConstObject>>, B: cpp.Reference<TSoftObjectPtr<Object.ConstObject>>): cpp.Reference<Bool>;
	public function EqualEqual_SoftClassReference(A: cpp.Reference<TSoftClassPtr<Class.ConstClass>>, B: cpp.Reference<TSoftClassPtr<Class.ConstClass>>): cpp.Reference<Bool>;
	public function EqualEqual_PrimaryAssetType(A: PrimaryAssetType, B: PrimaryAssetType): cpp.Reference<Bool>;
	public function EqualEqual_PrimaryAssetId(A: PrimaryAssetId, B: PrimaryAssetId): cpp.Reference<Bool>;
	public function EndTransaction(): cpp.Reference<cpp.Int32>;
	public function DrawDebugString(WorldContextObject: cpp.Star<Object.ConstObject>, TextLocation: Vector, Text: FString, TestBaseActor: cpp.Star<Actor>, TextColor: LinearColor, Duration: cpp.Float32): Void;
	public function DrawDebugSphere(WorldContextObject: cpp.Star<Object.ConstObject>, Center: Vector, Radius: cpp.Float32, Segments: cpp.Int32, LineColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugPoint(WorldContextObject: cpp.Star<Object.ConstObject>, Position: Vector, Size: cpp.Float32, PointColor: LinearColor, Duration: cpp.Float32): Void;
	public function DrawDebugPlane(WorldContextObject: cpp.Star<Object.ConstObject>, PlaneCoordinates: cpp.Reference<Plane>, Location: Vector, Size: cpp.Float32, PlaneColor: LinearColor, Duration: cpp.Float32): Void;
	public function DrawDebugLine(WorldContextObject: cpp.Star<Object.ConstObject>, LineStart: Vector, LineEnd: Vector, LineColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugFrustum(WorldContextObject: cpp.Star<Object.ConstObject>, FrustumTransform: cpp.Reference<Transform>, FrustumColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugFloatHistoryTransform(WorldContextObject: cpp.Star<Object.ConstObject>, FloatHistory: cpp.Reference<DebugFloatHistory>, DrawTransform: cpp.Reference<Transform>, DrawSize: Vector2D, DrawColor: LinearColor, Duration: cpp.Float32): Void;
	public function DrawDebugFloatHistoryLocation(WorldContextObject: cpp.Star<Object.ConstObject>, FloatHistory: cpp.Reference<DebugFloatHistory>, DrawLocation: Vector, DrawSize: Vector2D, DrawColor: LinearColor, Duration: cpp.Float32): Void;
	public function DrawDebugCylinder(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, Segments: cpp.Int32, LineColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugCoordinateSystem(WorldContextObject: cpp.Star<Object.ConstObject>, AxisLoc: Vector, AxisRot: Rotator, Scale: cpp.Float32, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugConeInDegrees(WorldContextObject: cpp.Star<Object.ConstObject>, Origin: Vector, Direction: Vector, Length: cpp.Float32, AngleWidth: cpp.Float32, AngleHeight: cpp.Float32, NumSides: cpp.Int32, LineColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugCone(WorldContextObject: cpp.Star<Object.ConstObject>, Origin: Vector, Direction: Vector, Length: cpp.Float32, AngleWidth: cpp.Float32, AngleHeight: cpp.Float32, NumSides: cpp.Int32, LineColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugCircle(WorldContextObject: cpp.Star<Object.ConstObject>, Center: Vector, Radius: cpp.Float32, NumSegments: cpp.Int32, LineColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32, YAxis: Vector, ZAxis: Vector, bDrawAxis: Bool): Void;
	public function DrawDebugCapsule(WorldContextObject: cpp.Star<Object.ConstObject>, Center: Vector, HalfHeight: cpp.Float32, Radius: cpp.Float32, Rotation: Rotator, LineColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugCamera(CameraActor: cpp.Star<CameraActor.ConstCameraActor>, CameraColor: LinearColor, Duration: cpp.Float32): Void;
	public function DrawDebugBox(WorldContextObject: cpp.Star<Object.ConstObject>, Center: Vector, Extent: Vector, LineColor: LinearColor, Rotation: Rotator, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DrawDebugArrow(WorldContextObject: cpp.Star<Object.ConstObject>, LineStart: Vector, LineEnd: Vector, ArrowSize: cpp.Float32, LineColor: LinearColor, Duration: cpp.Float32, Thickness: cpp.Float32): Void;
	public function DoesImplementInterface(TestObject: cpp.Star<Object.ConstObject>, Interface: TSubclassOf<Interface>): cpp.Reference<Bool>;
	public function DelayUntilNextTick(WorldContextObject: cpp.Star<Object.ConstObject>, LatentInfo: LatentActionInfo): Void;
	public function Delay(WorldContextObject: cpp.Star<Object.ConstObject>, Duration: cpp.Float32, LatentInfo: LatentActionInfo): Void;
	public function CreateCopyForUndoBuffer(ObjectToModify: cpp.Star<Object>): Void;
	public function ConvertToRelativePath(Filename: FString): cpp.Reference<FString>;
	public function ConvertToAbsolutePath(Filename: FString): cpp.Reference<FString>;
	public function Conv_SoftObjPathToSoftObjRef(SoftObjectPath: cpp.Reference<SoftObjectPath>): cpp.Reference<TSoftObjectPtr<Object>>;
	public function Conv_SoftObjectReferenceToString(SoftObjectReference: cpp.Reference<TSoftObjectPtr<Object.ConstObject>>): cpp.Reference<FString>;
	public function Conv_SoftObjectReferenceToObject(SoftObject: cpp.Reference<TSoftObjectPtr<Object.ConstObject>>): cpp.Reference<cpp.Star<Object>>;
	public function Conv_SoftClassReferenceToString(SoftClassReference: cpp.Reference<TSoftClassPtr<Class.ConstClass>>): cpp.Reference<FString>;
	public function Conv_SoftClassReferenceToClass(SoftClass: cpp.Reference<TSoftClassPtr<Class.ConstClass>>): cpp.Reference<TSubclassOf<Object>>;
	public function Conv_SoftClassPathToSoftClassRef(SoftClassPath: cpp.Reference<SoftClassPath>): cpp.Reference<TSoftClassPtr<Class>>;
	public function Conv_PrimaryAssetTypeToString(PrimaryAssetType: PrimaryAssetType): cpp.Reference<FString>;
	public function Conv_PrimaryAssetIdToString(PrimaryAssetId: PrimaryAssetId): cpp.Reference<FString>;
	public function Conv_ObjectToSoftObjectReference(Object: cpp.Star<Object>): cpp.Reference<TSoftObjectPtr<Object>>;
	public function Conv_ObjectToClass(Object: cpp.Star<Object>, Class: TSubclassOf<Object>): cpp.Reference<cpp.Star<Class>>;
	public function Conv_InterfaceToObject(Interface: cpp.Reference<Interface.ConstInterface>): cpp.Reference<cpp.Star<Object>>;
	public function Conv_ClassToSoftClassReference(Class: cpp.Reference<TSubclassOf<Object.ConstObject>>): cpp.Reference<TSoftClassPtr<Class>>;
	public function ControlScreensaver(bAllowScreenSaver: Bool): Void;
	public function ComponentOverlapComponents(Component: cpp.Star<PrimitiveComp>, ComponentTransform: cpp.Reference<Transform>, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, ComponentClassFilter: cpp.Star<Class>, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, OutComponents: cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>): cpp.Reference<Bool>;
	public function ComponentOverlapActors(Component: cpp.Star<PrimitiveComp>, ComponentTransform: cpp.Reference<Transform>, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, ActorClassFilter: cpp.Star<Class>, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, OutActors: cpp.Reference<TArray<cpp.Star<Actor>>>): cpp.Reference<Bool>;
	public function CollectGarbage(): Void;
	public function CapsuleTraceSingleForObjects(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, HalfHeight: cpp.Float32, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function CapsuleTraceSingleByProfile(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, HalfHeight: cpp.Float32, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function CapsuleTraceSingle(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, HalfHeight: cpp.Float32, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function CapsuleTraceMultiForObjects(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, HalfHeight: cpp.Float32, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function CapsuleTraceMultiByProfile(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, HalfHeight: cpp.Float32, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function CapsuleTraceMulti(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, Radius: cpp.Float32, HalfHeight: cpp.Float32, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function CapsuleOverlapComponents(WorldContextObject: cpp.Star<Object.ConstObject>, CapsulePos: Vector, Radius: cpp.Float32, HalfHeight: cpp.Float32, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, ComponentClassFilter: cpp.Star<Class>, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, OutComponents: cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>): cpp.Reference<Bool>;
	public function CapsuleOverlapActors(WorldContextObject: cpp.Star<Object.ConstObject>, CapsulePos: Vector, Radius: cpp.Float32, HalfHeight: cpp.Float32, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, ActorClassFilter: cpp.Star<Class>, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, OutActors: cpp.Reference<TArray<cpp.Star<Actor>>>): cpp.Reference<Bool>;
	public function CanLaunchURL(URL: FString): cpp.Reference<Bool>;
	public function CancelTransaction(Index: cpp.Int32): Void;
	public function BreakSoftObjectPath(InSoftObjectPath: SoftObjectPath, PathString: cpp.Reference<FString>): Void;
	public function BreakSoftClassPath(InSoftClassPath: SoftClassPath, PathString: cpp.Reference<FString>): Void;
	public function BoxTraceSingleForObjects(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function BoxTraceSingleByProfile(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function BoxTraceSingle(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHit: cpp.Reference<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function BoxTraceMultiForObjects(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function BoxTraceMultiByProfile(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function BoxTraceMulti(WorldContextObject: cpp.Star<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, DrawDebugType: EDrawDebugTrace, OutHits: cpp.Reference<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: cpp.Float32): cpp.Reference<Bool>;
	public function BoxOverlapComponents(WorldContextObject: cpp.Star<Object.ConstObject>, BoxPos: Vector, Extent: Vector, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, ComponentClassFilter: cpp.Star<Class>, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, OutComponents: cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>): cpp.Reference<Bool>;
	public function BoxOverlapActors(WorldContextObject: cpp.Star<Object.ConstObject>, BoxPos: Vector, BoxExtent: Vector, ObjectTypes: cpp.Reference<TArray<EObjectTypeQuery>>, ActorClassFilter: cpp.Star<Class>, ActorsToIgnore: cpp.Reference<TArray<cpp.Star<Actor>>>, OutActors: cpp.Reference<TArray<cpp.Star<Actor>>>): cpp.Reference<Bool>;
	public function BeginTransaction(Context: FString, Description: FText, PrimaryObject: cpp.Star<Object>): cpp.Reference<cpp.Int32>;
	public function AddFloatHistorySample(Value: cpp.Float32, FloatHistory: cpp.Reference<DebugFloatHistory>): cpp.Reference<DebugFloatHistory>;
}

@:forward()
@:nativeGen
abstract ConstKismetSystemLibrary(KismetSystemLibrary) from KismetSystemLibrary {
}