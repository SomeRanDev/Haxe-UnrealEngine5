// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetSystemLibrary")
@:include("Kismet/KismetSystemLibrary.h")
@:valueType
extern class KismetSystemLibrary extends BlueprintFunctionLibrary {
	public function UnregisterForRemoteNotifications(): Void;
	public function UnloadPrimaryAssetList(PrimaryAssetIdList: ucpp.Ref<TArray<PrimaryAssetId>>): Void;
	public function UnloadPrimaryAsset(PrimaryAssetId: PrimaryAssetId): Void;
	public function TransactObject(Object: ucpp.Ptr<Object>): Void;
	public function StackTrace(): Void;
	public function SphereTraceSingleForObjects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function SphereTraceSingleByProfile(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function SphereTraceSingle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function SphereTraceMultiForObjects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function SphereTraceMultiByProfile(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function SphereTraceMulti(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function SphereOverlapComponents(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SpherePos: Vector, SphereRadius: ucpp.num.Float32, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, ComponentClassFilter: ucpp.Ptr<Class>, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, OutComponents: ucpp.Ref<TArray<ucpp.Ptr<PrimitiveComp>>>): Bool;
	public function SphereOverlapActors(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SpherePos: Vector, SphereRadius: ucpp.num.Float32, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, ActorClassFilter: ucpp.Ptr<Class>, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Bool;
	public function SnapshotObject(Object: ucpp.Ptr<Object>): Void;
	public function ShowPlatformSpecificLeaderboardScreen(CategoryName: FString): Void;
	public function ShowPlatformSpecificAchievementsScreen(SpecificPlayer: ucpp.Ptr<PlayerController.ConstPlayerController>): Void;
	public function ShowInterstitialAd(): Void;
	public function ShowAdBanner(AdIdIndex: ucpp.num.Int32, bShowOnBottomOfScreen: Bool): Void;
	public function SetWindowTitle(Title: ucpp.Ref<FText>): Void;
	public function SetVolumeButtonsHandledBySystem(bEnabled: Bool): Void;
	public function SetVectorPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<Vector>): Void;
	public function SetVector3fPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<Vector3f>): Void;
	public function SetUserActivity(UserActivity: ucpp.Ref<UserActivity>): Void;
	public function SetTransformPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<Transform>): Void;
	public function SetTextPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<FText>): Void;
	public function SetSuppressViewportTransitionMessage(WorldContextObject: ucpp.Ptr<Object.ConstObject>, bState: Bool): Void;
	public function SetStructurePropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<GenericStruct>): Void;
	public function SetStringPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: FString): Void;
	public function SetSoftObjectPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<TSoftObjectPtr<Object.ConstObject>>): Void;
	public function SetSoftClassPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<TSoftClassPtr<Class.ConstClass>>): Void;
	public function SetRotatorPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<Rotator>): Void;
	public function SetObjectPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ptr<Object>): Void;
	public function SetNamePropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<FName>): Void;
	public function SetLinearColorPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<LinearColor>): Void;
	public function SetIntPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.num.Int32): Void;
	public function SetInterfacePropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<Interface.ConstInterface>): Void;
	public function SetInt64PropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.num.Int64): Void;
	public function SetGamepadsBlockDeviceFeedback(bBlock: Bool): Void;
	public function SetFieldPathPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<TFieldPath<FField>>): Void;
	public function SetEditorProperty(Object: ucpp.Ptr<Object>, PropertyName: FName, PropertyValue: ucpp.Ref<ucpp.num.Int32>, ChangeNotifyMode: EPropertyAccessChangeNotifyMode): Bool;
	public function SetDoublePropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.num.Float64): Void;
	public function SetColorPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<Color>): Void;
	public function SetCollisionProfileNameProperty(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<CollisionProfileName>): Void;
	public function SetClassPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: TSubclassOf<Object>): Void;
	public function SetBytePropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.num.UInt8): Void;
	public function SetBoolPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: Bool): Void;
	public function RetriggerableDelay(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Duration: ucpp.num.Float32, LatentInfo: LatentActionInfo): Void;
	public function ResetGamepadAssignmentToController(ControllerId: ucpp.num.Int32): Void;
	public function ResetGamepadAssignments(): Void;
	public function RegisterForRemoteNotifications(): Void;
	public function QuitGame(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SpecificPlayer: ucpp.Ptr<PlayerController>, QuitPreference: TEnumAsByte<EQuitPreference>, bIgnorePlatformRestrictions: Bool): Void;
	public function QuitEditor(): Void;
	public function PrintWarning(InString: FString): Void;
	public function PrintText(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InText: FText, bPrintToScreen: Bool, bPrintToLog: Bool, TextColor: LinearColor, Duration: ucpp.num.Float32, Key: FName): Void;
	public function PrintString(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InString: FString, bPrintToScreen: Bool, bPrintToLog: Bool, TextColor: LinearColor, Duration: ucpp.num.Float32, Key: FName): Void;
	public function ParseParamValue(InString: FString, InParam: FString, OutValue: ucpp.Ref<FString>): Bool;
	public function ParseParam(InString: FString, InParam: FString): Bool;
	public function ParseCommandLine(InCmdLine: FString, OutTokens: ucpp.Ref<TArray<FString>>, OutSwitches: ucpp.Ref<TArray<FString>>, OutParams: ucpp.Ref<TMap<FString, FString>>): Void;
	public function OnAssetLoaded__DelegateSignature(Loaded: ucpp.Ptr<Object>): Void;
	public function OnAssetClassLoaded__DelegateSignature(Loaded: TSubclassOf<Object>): Void;
	public function NotEqual_SoftObjectReference(A: ucpp.Ref<TSoftObjectPtr<Object.ConstObject>>, B: ucpp.Ref<TSoftObjectPtr<Object.ConstObject>>): Bool;
	public function NotEqual_SoftClassReference(A: ucpp.Ref<TSoftClassPtr<Class.ConstClass>>, B: ucpp.Ref<TSoftClassPtr<Class.ConstClass>>): Bool;
	public function NotEqual_PrimaryAssetType(A: PrimaryAssetType, B: PrimaryAssetType): Bool;
	public function NotEqual_PrimaryAssetId(A: PrimaryAssetId, B: PrimaryAssetId): Bool;
	public function NormalizeFilename(InFilename: FString): FString;
	public function MoveComponentTo(Component: ucpp.Ptr<SceneComp>, TargetRelativeLocation: Vector, TargetRelativeRotation: Rotator, bEaseOut: Bool, bEaseIn: Bool, OverTime: ucpp.num.Float32, bForceShortestRotationPath: Bool, MoveAction: TEnumAsByte<EMoveComponentAction>, LatentInfo: LatentActionInfo): Void;
	public function MakeTopLevelAssetPath(PackageName: FString, AssetName: FString): TopLevelAssetPath;
	public function MakeSoftObjectPath(PathString: FString): SoftObjectPath;
	public function MakeSoftClassPath(PathString: FString): SoftClassPath;
	public function MakeLiteralText(Value: FText): FText;
	public function MakeLiteralString(Value: FString): FString;
	public function MakeLiteralName(Value: FName): FName;
	public function MakeLiteralInt64(Value: ucpp.num.Int64): ucpp.num.Int64;
	public function MakeLiteralInt(Value: ucpp.num.Int32): ucpp.num.Int32;
	public function MakeLiteralDouble(Value: ucpp.num.Float64): ucpp.num.Float64;
	public function MakeLiteralByte(Value: ucpp.num.UInt8): ucpp.num.UInt8;
	public function MakeLiteralBool(Value: Bool): Bool;
	public function MakeARFilter(PackageNames: ucpp.Ref<TArray<FName>>, PackagePaths: ucpp.Ref<TArray<FName>>, SoftObjectPaths: ucpp.Ref<TArray<SoftObjectPath>>, ClassPaths: ucpp.Ref<TArray<TopLevelAssetPath>>, RecursiveClassPathsExclusionSet: ucpp.Ref<TSet<TopLevelAssetPath>>, ClassNames: ucpp.Ref<TArray<FName>>, RecursiveClassesExclusionSet: ucpp.Ref<TSet<FName>>, bRecursivePaths: Bool, bRecursiveClasses: Bool, bIncludeOnlyOnDiskAssets: Bool): ARFilter;
	public function LogString(InString: FString, bPrintToLog: Bool): Void;
	public function LoadInterstitialAd(AdIdIndex: ucpp.num.Int32): Void;
	public function LoadClassAsset_Blocking(AssetClass: TSoftClassPtr<Class>): ucpp.Ptr<Class>;
	public function LoadAssetClass(WorldContextObject: ucpp.Ptr<Object.ConstObject>, AssetClass: TSoftClassPtr<Class>, OnLoaded: HaxeDelegateProperty<(TSubclassOf<Object>) -> Void>, LatentInfo: LatentActionInfo): Void;
	public function LoadAsset_Blocking(Asset: TSoftObjectPtr<Object>): ucpp.Ptr<Object>;
	public function LoadAsset(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Asset: TSoftObjectPtr<Object>, OnLoaded: HaxeDelegateProperty<(ucpp.Ptr<Object>) -> Void>, LatentInfo: LatentActionInfo): Void;
	public function LineTraceSingleForObjects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function LineTraceSingleByProfile(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function LineTraceSingle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function LineTraceMultiForObjects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function LineTraceMultiByProfile(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function LineTraceMulti(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function LaunchURL(URL: FString): Void;
	public function K2_UnPauseTimerHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: TimerHandle): Void;
	public function K2_UnPauseTimerDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function K2_UnPauseTimer(Object: ucpp.Ptr<Object>, FunctionName: FString): Void;
	public function K2_TimerExistsHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: TimerHandle): Bool;
	public function K2_TimerExistsDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Bool;
	public function K2_TimerExists(Object: ucpp.Ptr<Object>, FunctionName: FString): Bool;
	public function K2_SetTimerForNextTickDelegate(Delegate: HaxeDelegateProperty<() -> Void>): TimerHandle;
	public function K2_SetTimerForNextTick(Object: ucpp.Ptr<Object>, FunctionName: FString): TimerHandle;
	public function K2_SetTimerDelegate(Delegate: HaxeDelegateProperty<() -> Void>, Time: ucpp.num.Float32, bLooping: Bool, InitialStartDelay: ucpp.num.Float32, InitialStartDelayVariance: ucpp.num.Float32): TimerHandle;
	public function K2_SetTimer(Object: ucpp.Ptr<Object>, FunctionName: FString, Time: ucpp.num.Float32, bLooping: Bool, InitialStartDelay: ucpp.num.Float32, InitialStartDelayVariance: ucpp.num.Float32): TimerHandle;
	public function K2_PauseTimerHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: TimerHandle): Void;
	public function K2_PauseTimerDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function K2_PauseTimer(Object: ucpp.Ptr<Object>, FunctionName: FString): Void;
	public function K2_IsValidTimerHandle(Handle: TimerHandle): Bool;
	public function K2_IsTimerPausedHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: TimerHandle): Bool;
	public function K2_IsTimerPausedDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Bool;
	public function K2_IsTimerPaused(Object: ucpp.Ptr<Object>, FunctionName: FString): Bool;
	public function K2_IsTimerActiveHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: TimerHandle): Bool;
	public function K2_IsTimerActiveDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Bool;
	public function K2_IsTimerActive(Object: ucpp.Ptr<Object>, FunctionName: FString): Bool;
	public function K2_InvalidateTimerHandle(Handle: ucpp.Ref<TimerHandle>): TimerHandle;
	public function K2_GetTimerRemainingTimeHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: TimerHandle): ucpp.num.Float32;
	public function K2_GetTimerRemainingTimeDelegate(Delegate: HaxeDelegateProperty<() -> Void>): ucpp.num.Float32;
	public function K2_GetTimerRemainingTime(Object: ucpp.Ptr<Object>, FunctionName: FString): ucpp.num.Float32;
	public function K2_GetTimerElapsedTimeHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: TimerHandle): ucpp.num.Float32;
	public function K2_GetTimerElapsedTimeDelegate(Delegate: HaxeDelegateProperty<() -> Void>): ucpp.num.Float32;
	public function K2_GetTimerElapsedTime(Object: ucpp.Ptr<Object>, FunctionName: FString): ucpp.num.Float32;
	public function K2_ClearTimerHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: TimerHandle): Void;
	public function K2_ClearTimerDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function K2_ClearTimer(Object: ucpp.Ptr<Object>, FunctionName: FString): Void;
	public function K2_ClearAndInvalidateTimerHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Handle: ucpp.Ref<TimerHandle>): Void;
	public function IsValidSoftObjectReference(SoftObjectReference: ucpp.Ref<TSoftObjectPtr<Object.ConstObject>>): Bool;
	public function IsValidSoftClassReference(SoftClassReference: ucpp.Ref<TSoftClassPtr<Class.ConstClass>>): Bool;
	public function IsValidPrimaryAssetType(PrimaryAssetType: PrimaryAssetType): Bool;
	public function IsValidPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): Bool;
	public function IsValidClass(Class: ucpp.Ptr<Class>): Bool;
	public function IsValid(Object: ucpp.Ptr<Object.ConstObject>): Bool;
	public function IsUnattended(): Bool;
	public function IsStandalone(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Bool;
	public function IsSplitScreen(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Bool;
	public function IsServer(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Bool;
	public function IsScreensaverEnabled(): Bool;
	public function IsPackagedForDistribution(): Bool;
	public function IsLoggedIn(SpecificPlayer: ucpp.Ptr<PlayerController.ConstPlayerController>): Bool;
	public function IsInterstitialAdRequested(): Bool;
	public function IsInterstitialAdAvailable(): Bool;
	public function IsDedicatedServer(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Bool;
	public function IsControllerAssignedToGamepad(ControllerId: ucpp.num.Int32): Bool;
	public function HideAdBanner(): Void;
	public function HasMultipleLocalPlayers(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Bool;
	public function GetVolumeButtonsHandledBySystem(): Bool;
	public function GetUniqueDeviceId(): FString;
	public function GetSystemPath(Object: ucpp.Ptr<Object.ConstObject>): FString;
	public function GetSupportedFullscreenResolutions(Resolutions: ucpp.Ref<TArray<IntPoint>>): Bool;
	public function GetSoftObjectReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): TSoftObjectPtr<Object>;
	public function GetSoftObjectPath(Object: ucpp.Ptr<Object.ConstObject>): SoftObjectPath;
	public function GetSoftClassReferenceFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): TSoftClassPtr<Class>;
	public function GetSoftClassPath(Class: ucpp.Ptr<Class>): SoftClassPath;
	public function GetRenderingMaterialQualityLevel(): ucpp.num.Int32;
	public function GetRenderingDetailMode(): ucpp.num.Int32;
	public function GetProjectSavedDirectory(): FString;
	public function GetProjectDirectory(): FString;
	public function GetProjectContentDirectory(): FString;
	public function GetPrimaryAssetsWithBundleState(RequiredBundles: ucpp.Ref<TArray<FName>>, ExcludedBundles: ucpp.Ref<TArray<FName>>, ValidTypes: ucpp.Ref<TArray<PrimaryAssetType>>, bForceCurrentState: Bool, OutPrimaryAssetIdList: ucpp.Ref<TArray<PrimaryAssetId>>): Void;
	public function GetPrimaryAssetIdList(PrimaryAssetType: PrimaryAssetType, OutPrimaryAssetIdList: ucpp.Ref<TArray<PrimaryAssetId>>): Void;
	public function GetPrimaryAssetIdFromSoftObjectReference(SoftObjectReference: TSoftObjectPtr<Object>): PrimaryAssetId;
	public function GetPrimaryAssetIdFromSoftClassReference(SoftClassReference: TSoftClassPtr<Class>): PrimaryAssetId;
	public function GetPrimaryAssetIdFromObject(Object: ucpp.Ptr<Object>): PrimaryAssetId;
	public function GetPrimaryAssetIdFromClass(Class: TSubclassOf<Object>): PrimaryAssetId;
	public function GetPreferredLanguages(): TArray<FString>;
	public function GetPlatformUserName(): FString;
	public function GetPlatformUserDir(): FString;
	public function GetPathName(Object: ucpp.Ptr<Object.ConstObject>): FString;
	public function GetOuterObject(Object: ucpp.Ptr<Object.ConstObject>): ucpp.Ptr<Object>;
	public function GetObjectName(Object: ucpp.Ptr<Object.ConstObject>): FString;
	public function GetObjectFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): ucpp.Ptr<Object>;
	public function GetMinYResolutionForUI(): ucpp.num.Int32;
	public function GetMinYResolutionFor3DView(): ucpp.num.Int32;
	public function GetLocalCurrencySymbol(): FString;
	public function GetLocalCurrencyCode(): FString;
	public function GetGameTimeInSeconds(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float64;
	public function GetGamepadControllerName(ControllerId: ucpp.num.Int32): FString;
	public function GetGamepadButtonGlyph(ButtonKey: FString, ControllerIndex: ucpp.num.Int32): ucpp.Ptr<Texture2D>;
	public function GetGameName(): FString;
	public function GetGameBundleId(): FString;
	public function GetFrameCount(): ucpp.num.Int64;
	public function GetEngineVersion(): FString;
	public function GetEditorProperty(Object: ucpp.Ptr<Object>, PropertyName: FName, PropertyValue: ucpp.Ref<ucpp.num.Int32>): Bool;
	public function GetDisplayName(Object: ucpp.Ptr<Object.ConstObject>): FString;
	public function GetDeviceId(): FString;
	public function GetDefaultLocale(): FString;
	public function GetDefaultLanguage(): FString;
	public function GetCurrentBundleState(PrimaryAssetId: PrimaryAssetId, bForceCurrentState: Bool, OutBundles: ucpp.Ref<TArray<FName>>): Bool;
	public function GetConvenientWindowedResolutions(Resolutions: ucpp.Ref<TArray<IntPoint>>): Bool;
	public function GetConsoleVariableStringValue(VariableName: FString): FString;
	public function GetConsoleVariableIntValue(VariableName: FString): ucpp.num.Int32;
	public function GetConsoleVariableFloatValue(VariableName: FString): ucpp.num.Float32;
	public function GetConsoleVariableBoolValue(VariableName: FString): Bool;
	public function GetComponentBounds(Component: ucpp.Ptr<SceneComp.ConstSceneComp>, Origin: ucpp.Ref<Vector>, BoxExtent: ucpp.Ref<Vector>, SphereRadius: ucpp.Ref<ucpp.num.Float32>): Void;
	public function GetCommandLine(): FString;
	public function GetClassFromPrimaryAssetId(PrimaryAssetId: PrimaryAssetId): TSubclassOf<Object>;
	public function GetClassDisplayName(Class: ucpp.Ptr<Class>): FString;
	public function GetBuildVersion(): FString;
	public function GetBuildConfiguration(): FString;
	public function GetAdIDCount(): ucpp.num.Int32;
	public function GetActorListFromComponentList(ComponentList: ucpp.Ref<TArray<ucpp.Ptr<PrimitiveComp>>>, ActorClassFilter: ucpp.Ptr<Class>, OutActorList: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function GetActorBounds(Actor: ucpp.Ptr<Actor.ConstActor>, Origin: ucpp.Ref<Vector>, BoxExtent: ucpp.Ref<Vector>): Void;
	public function ForceCloseAdBanner(): Void;
	public function FlushPersistentDebugLines(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Void;
	public function FlushDebugStrings(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Void;
	public function ExecuteConsoleCommand(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Command: FString, SpecificPlayer: ucpp.Ptr<PlayerController>): Void;
	public function EqualEqual_SoftObjectReference(A: ucpp.Ref<TSoftObjectPtr<Object.ConstObject>>, B: ucpp.Ref<TSoftObjectPtr<Object.ConstObject>>): Bool;
	public function EqualEqual_SoftClassReference(A: ucpp.Ref<TSoftClassPtr<Class.ConstClass>>, B: ucpp.Ref<TSoftClassPtr<Class.ConstClass>>): Bool;
	public function EqualEqual_PrimaryAssetType(A: PrimaryAssetType, B: PrimaryAssetType): Bool;
	public function EqualEqual_PrimaryAssetId(A: PrimaryAssetId, B: PrimaryAssetId): Bool;
	public function EndTransaction(): ucpp.num.Int32;
	public function DrawDebugString(WorldContextObject: ucpp.Ptr<Object.ConstObject>, TextLocation: Vector, Text: FString, TestBaseActor: ucpp.Ptr<Actor>, TextColor: LinearColor, Duration: ucpp.num.Float32): Void;
	public function DrawDebugSphere(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Center: Vector, Radius: ucpp.num.Float32, Segments: ucpp.num.Int32, LineColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugPoint(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Position: Vector, Size: ucpp.num.Float32, PointColor: LinearColor, Duration: ucpp.num.Float32): Void;
	public function DrawDebugPlane(WorldContextObject: ucpp.Ptr<Object.ConstObject>, PlaneCoordinates: ucpp.Ref<Plane>, Location: Vector, Size: ucpp.num.Float32, PlaneColor: LinearColor, Duration: ucpp.num.Float32): Void;
	public function DrawDebugLine(WorldContextObject: ucpp.Ptr<Object.ConstObject>, LineStart: Vector, LineEnd: Vector, LineColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugFrustum(WorldContextObject: ucpp.Ptr<Object.ConstObject>, FrustumTransform: ucpp.Ref<Transform>, FrustumColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugFloatHistoryTransform(WorldContextObject: ucpp.Ptr<Object.ConstObject>, FloatHistory: ucpp.Ref<DebugFloatHistory>, DrawTransform: ucpp.Ref<Transform>, DrawSize: Vector2D, DrawColor: LinearColor, Duration: ucpp.num.Float32): Void;
	public function DrawDebugFloatHistoryLocation(WorldContextObject: ucpp.Ptr<Object.ConstObject>, FloatHistory: ucpp.Ref<DebugFloatHistory>, DrawLocation: Vector, DrawSize: Vector2D, DrawColor: LinearColor, Duration: ucpp.num.Float32): Void;
	public function DrawDebugCylinder(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, Segments: ucpp.num.Int32, LineColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugCoordinateSystem(WorldContextObject: ucpp.Ptr<Object.ConstObject>, AxisLoc: Vector, AxisRot: Rotator, Scale: ucpp.num.Float32, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugConeInDegrees(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Origin: Vector, Direction: Vector, Length: ucpp.num.Float32, AngleWidth: ucpp.num.Float32, AngleHeight: ucpp.num.Float32, NumSides: ucpp.num.Int32, LineColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugCone(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Origin: Vector, Direction: Vector, Length: ucpp.num.Float32, AngleWidth: ucpp.num.Float32, AngleHeight: ucpp.num.Float32, NumSides: ucpp.num.Int32, LineColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugCircle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Center: Vector, Radius: ucpp.num.Float32, NumSegments: ucpp.num.Int32, LineColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32, YAxis: Vector, ZAxis: Vector, bDrawAxis: Bool): Void;
	public function DrawDebugCapsule(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Center: Vector, HalfHeight: ucpp.num.Float32, Radius: ucpp.num.Float32, Rotation: Rotator, LineColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugCamera(CameraActor: ucpp.Ptr<CameraActor.ConstCameraActor>, CameraColor: LinearColor, Duration: ucpp.num.Float32): Void;
	public function DrawDebugBox(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Center: Vector, Extent: Vector, LineColor: LinearColor, Rotation: Rotator, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DrawDebugArrow(WorldContextObject: ucpp.Ptr<Object.ConstObject>, LineStart: Vector, LineEnd: Vector, ArrowSize: ucpp.num.Float32, LineColor: LinearColor, Duration: ucpp.num.Float32, Thickness: ucpp.num.Float32): Void;
	public function DoesImplementInterface(TestObject: ucpp.Ptr<Object.ConstObject>, Interface: TSubclassOf<Interface>): Bool;
	public function DelayUntilNextTick(WorldContextObject: ucpp.Ptr<Object.ConstObject>, LatentInfo: LatentActionInfo): Void;
	public function Delay(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Duration: ucpp.num.Float32, LatentInfo: LatentActionInfo): Void;
	public function CreateCopyForUndoBuffer(ObjectToModify: ucpp.Ptr<Object>): Void;
	public function ConvertToRelativePath(Filename: FString): FString;
	public function ConvertToAbsolutePath(Filename: FString): FString;
	public function Conv_SoftObjRefToSoftObjPath(SoftObjectReference: TSoftObjectPtr<Object>): SoftObjectPath;
	public function Conv_SoftObjRefToSoftClassPath(SoftClassReference: TSoftClassPtr<Class>): SoftClassPath;
	public function Conv_SoftObjPathToSoftObjRef(SoftObjectPath: ucpp.Ref<SoftObjectPath>): TSoftObjectPtr<Object>;
	public function Conv_SoftObjectReferenceToString(SoftObjectReference: ucpp.Ref<TSoftObjectPtr<Object.ConstObject>>): FString;
	public function Conv_SoftObjectReferenceToObject(SoftObject: ucpp.Ref<TSoftObjectPtr<Object.ConstObject>>): ucpp.Ptr<Object>;
	public function Conv_SoftClassReferenceToString(SoftClassReference: ucpp.Ref<TSoftClassPtr<Class.ConstClass>>): FString;
	public function Conv_SoftClassReferenceToClass(SoftClass: ucpp.Ref<TSoftClassPtr<Class.ConstClass>>): TSubclassOf<Object>;
	public function Conv_SoftClassPathToSoftClassRef(SoftClassPath: ucpp.Ref<SoftClassPath>): TSoftClassPtr<Class>;
	public function Conv_PrimaryAssetTypeToString(PrimaryAssetType: PrimaryAssetType): FString;
	public function Conv_PrimaryAssetIdToString(PrimaryAssetId: PrimaryAssetId): FString;
	public function Conv_ObjectToSoftObjectReference(Object: ucpp.Ptr<Object>): TSoftObjectPtr<Object>;
	public function Conv_ObjectToClass(Object: ucpp.Ptr<Object>, Class: TSubclassOf<Object>): ucpp.Ptr<Class>;
	public function Conv_InterfaceToObject(Interface: ucpp.Ref<Interface.ConstInterface>): ucpp.Ptr<Object>;
	public function Conv_ClassToSoftClassReference(Class: ucpp.Ref<TSubclassOf<Object.ConstObject>>): TSoftClassPtr<Class>;
	public function ControlScreensaver(bAllowScreenSaver: Bool): Void;
	public function ComponentOverlapComponents(Component: ucpp.Ptr<PrimitiveComp>, ComponentTransform: ucpp.Ref<Transform>, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, ComponentClassFilter: ucpp.Ptr<Class>, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, OutComponents: ucpp.Ref<TArray<ucpp.Ptr<PrimitiveComp>>>): Bool;
	public function ComponentOverlapActors(Component: ucpp.Ptr<PrimitiveComp>, ComponentTransform: ucpp.Ref<Transform>, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, ActorClassFilter: ucpp.Ptr<Class>, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Bool;
	public function CollectGarbage(): Void;
	public function CapsuleTraceSingleForObjects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, HalfHeight: ucpp.num.Float32, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function CapsuleTraceSingleByProfile(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, HalfHeight: ucpp.num.Float32, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function CapsuleTraceSingle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, HalfHeight: ucpp.num.Float32, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function CapsuleTraceMultiForObjects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, HalfHeight: ucpp.num.Float32, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function CapsuleTraceMultiByProfile(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, HalfHeight: ucpp.num.Float32, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function CapsuleTraceMulti(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, Radius: ucpp.num.Float32, HalfHeight: ucpp.num.Float32, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function CapsuleOverlapComponents(WorldContextObject: ucpp.Ptr<Object.ConstObject>, CapsulePos: Vector, Radius: ucpp.num.Float32, HalfHeight: ucpp.num.Float32, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, ComponentClassFilter: ucpp.Ptr<Class>, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, OutComponents: ucpp.Ref<TArray<ucpp.Ptr<PrimitiveComp>>>): Bool;
	public function CapsuleOverlapActors(WorldContextObject: ucpp.Ptr<Object.ConstObject>, CapsulePos: Vector, Radius: ucpp.num.Float32, HalfHeight: ucpp.num.Float32, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, ActorClassFilter: ucpp.Ptr<Class>, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Bool;
	public function CanLaunchURL(URL: FString): Bool;
	public function CancelTransaction(Index: ucpp.num.Int32): Void;
	public function BreakTopLevelAssetPath(TopLevelAssetPath: ucpp.Ref<TopLevelAssetPath>, PathString: ucpp.Ref<FString>): Void;
	public function BreakSoftObjectPath(InSoftObjectPath: SoftObjectPath, PathString: ucpp.Ref<FString>): Void;
	public function BreakSoftClassPath(InSoftClassPath: SoftClassPath, PathString: ucpp.Ref<FString>): Void;
	public function BreakARFilter(InARFilter: ARFilter, PackageNames: ucpp.Ref<TArray<FName>>, PackagePaths: ucpp.Ref<TArray<FName>>, SoftObjectPaths: ucpp.Ref<TArray<SoftObjectPath>>, ClassPaths: ucpp.Ref<TArray<TopLevelAssetPath>>, RecursiveClassPathsExclusionSet: ucpp.Ref<TSet<TopLevelAssetPath>>, ClassNames: ucpp.Ref<TArray<FName>>, RecursiveClassesExclusionSet: ucpp.Ref<TSet<FName>>, bRecursivePaths: ucpp.Ref<Bool>, bRecursiveClasses: ucpp.Ref<Bool>, bIncludeOnlyOnDiskAssets: ucpp.Ref<Bool>): Void;
	public function BoxTraceSingleForObjects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function BoxTraceSingleByProfile(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function BoxTraceSingle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHit: ucpp.Ref<HitResult>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function BoxTraceMultiForObjects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function BoxTraceMultiByProfile(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, ProfileName: FName, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function BoxTraceMulti(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Start: Vector, End: Vector, HalfSize: Vector, Orientation: Rotator, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DrawDebugType: TEnumAsByte<EDrawDebugTrace>, OutHits: ucpp.Ref<TArray<HitResult>>, bIgnoreSelf: Bool, TraceColor: LinearColor, TraceHitColor: LinearColor, DrawTime: ucpp.num.Float32): Bool;
	public function BoxOverlapComponents(WorldContextObject: ucpp.Ptr<Object.ConstObject>, BoxPos: Vector, Extent: Vector, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, ComponentClassFilter: ucpp.Ptr<Class>, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, OutComponents: ucpp.Ref<TArray<ucpp.Ptr<PrimitiveComp>>>): Bool;
	public function BoxOverlapActors(WorldContextObject: ucpp.Ptr<Object.ConstObject>, BoxPos: Vector, BoxExtent: Vector, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, ActorClassFilter: ucpp.Ptr<Class>, ActorsToIgnore: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Bool;
	public function BeginTransaction(Context: FString, Description: FText, PrimaryObject: ucpp.Ptr<Object>): ucpp.num.Int32;
	public function AddFloatHistorySample(Value: ucpp.num.Float32, FloatHistory: ucpp.Ref<DebugFloatHistory>): DebugFloatHistory;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstKismetSystemLibrary(KismetSystemLibrary) from KismetSystemLibrary {
}

@:forward
@:nativeGen
@:native("KismetSystemLibrary*")
abstract KismetSystemLibraryPtr(ucpp.Ptr<KismetSystemLibrary>) from ucpp.Ptr<KismetSystemLibrary> to ucpp.Ptr<KismetSystemLibrary>{
	@:from
	public static extern inline function fromValue(v: KismetSystemLibrary): KismetSystemLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): KismetSystemLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}