// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UNavLinkCustomComponent")
@:include("NavLinkCustomComponent.h")
@:structAccess
extern class NavLinkCustomComp extends NavRelevantComp {
	public var NavLinkUserId: cpp.UInt32;
	public var EnabledAreaClass: TSubclassOf<NavArea>;
	public var DisabledAreaClass: TSubclassOf<NavArea>;
	public var SupportedAgents: NavAgentSelector;
	public var LinkRelativeStart: Vector;
	public var LinkRelativeEnd: Vector;
	public var LinkDirection: ENavLinkDirection;
	public var bLinkEnabled: Bool;
	public var bNotifyWhenEnabled: Bool;
	public var bNotifyWhenDisabled: Bool;
	public var bCreateBoxObstacle: Bool;
	public var ObstacleOffset: Vector;
	public var ObstacleExtent: Vector;
	public var ObstacleAreaClass: TSubclassOf<NavArea>;
	public var BroadcastRadius: cpp.Float32;
	public var BroadcastInterval: cpp.Float32;
	public var BroadcastChannel: ECollisionChannel;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstNavLinkCustomComp(NavLinkCustomComp) from NavLinkCustomComp {
	public extern var NavLinkUserId(get, never): cpp.UInt32;
	public inline extern function get_NavLinkUserId(): cpp.UInt32 return this.NavLinkUserId;
	public extern var EnabledAreaClass(get, never): TSubclassOf<NavArea.ConstNavArea>;
	public inline extern function get_EnabledAreaClass(): TSubclassOf<NavArea.ConstNavArea> return this.EnabledAreaClass;
	public extern var DisabledAreaClass(get, never): TSubclassOf<NavArea.ConstNavArea>;
	public inline extern function get_DisabledAreaClass(): TSubclassOf<NavArea.ConstNavArea> return this.DisabledAreaClass;
	public extern var SupportedAgents(get, never): NavAgentSelector;
	public inline extern function get_SupportedAgents(): NavAgentSelector return this.SupportedAgents;
	public extern var LinkRelativeStart(get, never): Vector;
	public inline extern function get_LinkRelativeStart(): Vector return this.LinkRelativeStart;
	public extern var LinkRelativeEnd(get, never): Vector;
	public inline extern function get_LinkRelativeEnd(): Vector return this.LinkRelativeEnd;
	public extern var LinkDirection(get, never): ENavLinkDirection;
	public inline extern function get_LinkDirection(): ENavLinkDirection return this.LinkDirection;
	public extern var bLinkEnabled(get, never): Bool;
	public inline extern function get_bLinkEnabled(): Bool return this.bLinkEnabled;
	public extern var bNotifyWhenEnabled(get, never): Bool;
	public inline extern function get_bNotifyWhenEnabled(): Bool return this.bNotifyWhenEnabled;
	public extern var bNotifyWhenDisabled(get, never): Bool;
	public inline extern function get_bNotifyWhenDisabled(): Bool return this.bNotifyWhenDisabled;
	public extern var bCreateBoxObstacle(get, never): Bool;
	public inline extern function get_bCreateBoxObstacle(): Bool return this.bCreateBoxObstacle;
	public extern var ObstacleOffset(get, never): Vector;
	public inline extern function get_ObstacleOffset(): Vector return this.ObstacleOffset;
	public extern var ObstacleExtent(get, never): Vector;
	public inline extern function get_ObstacleExtent(): Vector return this.ObstacleExtent;
	public extern var ObstacleAreaClass(get, never): TSubclassOf<NavArea.ConstNavArea>;
	public inline extern function get_ObstacleAreaClass(): TSubclassOf<NavArea.ConstNavArea> return this.ObstacleAreaClass;
	public extern var BroadcastRadius(get, never): cpp.Float32;
	public inline extern function get_BroadcastRadius(): cpp.Float32 return this.BroadcastRadius;
	public extern var BroadcastInterval(get, never): cpp.Float32;
	public inline extern function get_BroadcastInterval(): cpp.Float32 return this.BroadcastInterval;
	public extern var BroadcastChannel(get, never): ECollisionChannel;
	public inline extern function get_BroadcastChannel(): ECollisionChannel return this.BroadcastChannel;
}

@:forward
@:nativeGen
@:native("NavLinkCustomComp*")
abstract NavLinkCustomCompPtr(cpp.Star<NavLinkCustomComp>) from cpp.Star<NavLinkCustomComp> to cpp.Star<NavLinkCustomComp>{
	@:from
	public static extern inline function fromValue(v: NavLinkCustomComp): NavLinkCustomCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): NavLinkCustomComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}