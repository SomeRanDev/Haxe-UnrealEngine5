// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovementComponent")
@:include("GameFramework/MovementComponent.h")
@:structAccess
extern class MovementComp extends ActorComp {
	public var UpdatedComponent: cpp.Star<SceneComp>;
	public var UpdatedPrimitive: cpp.Star<PrimitiveComp>;
	public var Velocity: Vector;
	@:protected public var PlaneConstraintNormal: Vector;
	@:protected public var PlaneConstraintOrigin: Vector;
	public var bUpdateOnlyIfRendered: Bool;
	public var bAutoUpdateTickRegistration: Bool;
	public var bTickBeforeOwner: Bool;
	public var bAutoRegisterUpdatedComponent: Bool;
	public var bConstrainToPlane: Bool;
	public var bSnapToPlaneAtStart: Bool;
	public var bAutoRegisterPhysicsVolumeUpdates: Bool;
	public var bComponentShouldUpdatePhysicsVolume: Bool;
	private var PlaneConstraintAxisSetting: EPlaneConstraintAxisSetting;

	public function StopMovementImmediately(): Void;
	public function SnapUpdatedComponentToPlane(): Void;
	public function SetUpdatedComponent(NewUpdatedComponent: cpp.Star<SceneComp>): Void;
	public function SetPlaneConstraintOrigin(PlaneOrigin: Vector): Void;
	public function SetPlaneConstraintNormal(PlaneNormal: Vector): Void;
	public function SetPlaneConstraintFromVectors(Forward: Vector, Up: Vector): Void;
	public function SetPlaneConstraintEnabled(bEnabled: Bool): Void;
	public function SetPlaneConstraintAxisSetting(NewAxisSetting: EPlaneConstraintAxisSetting): Void;
	public function PhysicsVolumeChanged(NewVolume: cpp.Star<PhysicsVolume>): Void;
	public function K2_MoveUpdatedComponent(Delta: Vector, NewRotation: Rotator, OutHit: cpp.Reference<HitResult>, bSweep: Bool, bTeleport: Bool): Bool;
	public function IsExceedingMaxSpeed(MaxSpeed: cpp.Float32): Bool;
	public function GetPlaneConstraintOrigin(): Vector;
	public function GetPlaneConstraintNormal(): Vector;
	public function GetPlaneConstraintAxisSetting(): EPlaneConstraintAxisSetting;
	public function GetPhysicsVolume(): cpp.Star<PhysicsVolume>;
	public function GetMaxSpeed(): cpp.Float32;
	public function GetGravityZ(): cpp.Float32;
	public function ConstrainNormalToPlane(Normal: Vector): Vector;
	public function ConstrainLocationToPlane(Location: Vector): Vector;
	public function ConstrainDirectionToPlane(Direction: Vector): Vector;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsExceedingMaxSpeed, GetPlaneConstraintOrigin, GetPlaneConstraintNormal, GetPlaneConstraintAxisSetting, GetPhysicsVolume,
	GetMaxSpeed, GetGravityZ, ConstrainNormalToPlane, ConstrainLocationToPlane, ConstrainDirectionToPlane
)
@:nativeGen
abstract ConstMovementComp(MovementComp) from MovementComp {
	public extern var UpdatedComponent(get, never): cpp.Star<SceneComp.ConstSceneComp>;
	public inline extern function get_UpdatedComponent(): cpp.Star<SceneComp.ConstSceneComp> return this.UpdatedComponent;
	public extern var UpdatedPrimitive(get, never): cpp.Star<PrimitiveComp.ConstPrimitiveComp>;
	public inline extern function get_UpdatedPrimitive(): cpp.Star<PrimitiveComp.ConstPrimitiveComp> return this.UpdatedPrimitive;
	public extern var Velocity(get, never): Vector;
	public inline extern function get_Velocity(): Vector return this.Velocity;
	public extern var bUpdateOnlyIfRendered(get, never): Bool;
	public inline extern function get_bUpdateOnlyIfRendered(): Bool return this.bUpdateOnlyIfRendered;
	public extern var bAutoUpdateTickRegistration(get, never): Bool;
	public inline extern function get_bAutoUpdateTickRegistration(): Bool return this.bAutoUpdateTickRegistration;
	public extern var bTickBeforeOwner(get, never): Bool;
	public inline extern function get_bTickBeforeOwner(): Bool return this.bTickBeforeOwner;
	public extern var bAutoRegisterUpdatedComponent(get, never): Bool;
	public inline extern function get_bAutoRegisterUpdatedComponent(): Bool return this.bAutoRegisterUpdatedComponent;
	public extern var bConstrainToPlane(get, never): Bool;
	public inline extern function get_bConstrainToPlane(): Bool return this.bConstrainToPlane;
	public extern var bSnapToPlaneAtStart(get, never): Bool;
	public inline extern function get_bSnapToPlaneAtStart(): Bool return this.bSnapToPlaneAtStart;
	public extern var bAutoRegisterPhysicsVolumeUpdates(get, never): Bool;
	public inline extern function get_bAutoRegisterPhysicsVolumeUpdates(): Bool return this.bAutoRegisterPhysicsVolumeUpdates;
	public extern var bComponentShouldUpdatePhysicsVolume(get, never): Bool;
	public inline extern function get_bComponentShouldUpdatePhysicsVolume(): Bool return this.bComponentShouldUpdatePhysicsVolume;
}

@:forward
@:nativeGen
@:native("MovementComp*")
abstract MovementCompPtr(cpp.Star<MovementComp>) from cpp.Star<MovementComp> to cpp.Star<MovementComp>{
	@:from
	public static extern inline function fromValue(v: MovementComp): MovementCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MovementComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}