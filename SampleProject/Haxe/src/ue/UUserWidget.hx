// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UUserWidget")
@:include("Blueprint/UserWidget.h")
extern class UUserWidget extends UWidget {
	public var ColorAndOpacity: FLinearColor;
	public var ColorAndOpacityDelegate: HaxeDelegateProperty<() -> Void>;
	public var ForegroundColor: FSlateColor;
	public var ForegroundColorDelegate: HaxeDelegateProperty<() -> Void>;
	public var OnVisibilityChanged: HaxeMulticastSparseDelegateProperty<(ESlateVisibility) -> Void>;
	public var Padding: FMargin;
	public var ActiveSequencePlayers: TArray<TObjectPtr<UUMGSequencePlayer>>;
	public var AnimationTickManager: TObjectPtr<UUMGSequenceTickManager>;
	public var StoppedSequencePlayers: TArray<TObjectPtr<UUMGSequencePlayer>>;
	public var NamedSlotBindings: TArray<FNamedSlotBinding>;
	public var WidgetTree: TObjectPtr<UWidgetTree>;
	public var DesignTimeSize: FVector2D;
	public var DesignSizeMode: EDesignPreviewSizeMode;
	public var PaletteCategory: FText;
	public var PreviewBackground: TObjectPtr<UTexture2D>;
	public var Priority: cpp.Int32;
	public var bSupportsKeyboardFocus_DEPRECATED: Bool;
	public var bIsFocusable: Bool;
	public var bStopAction: Bool;
	public var bHasScriptImplementedTick: Bool;
	public var bHasScriptImplementedPaint: Bool;
	public var TickFrequency: EWidgetTickFrequency;
	public var InputComponent: TObjectPtr<UInputComponent>;
	public var AnimationCallbacks: TArray<FAnimationEventBinding>;

	public function UnregisterInputComponent(): Void;
	public function UnbindFromAnimationStarted(Animation: cpp.Star<UWidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function UnbindFromAnimationFinished(Animation: cpp.Star<UWidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function UnbindAllFromAnimationStarted(Animation: cpp.Star<UWidgetAnimation>): Void;
	public function UnbindAllFromAnimationFinished(Animation: cpp.Star<UWidgetAnimation>): Void;
	public function Tick(MyGeometry: FGeometry, InDeltaTime: cpp.Float32): Void;
	public function StopListeningForInputAction(ActionName: FName, EventType: EInputEvent): Void;
	public function StopListeningForAllInputActions(): Void;
	public function StopAnimationsAndLatentActions(): Void;
	public function StopAnimation(InAnimation: cpp.Star<UWidgetAnimation>): Void;
	public function StopAllAnimations(): Void;
	public function SetPositionInViewport(Position: FVector2D, bRemoveDPIScale: Bool): Void;
	public function SetPlaybackSpeed(InAnimation: cpp.Star<UWidgetAnimation>, PlaybackSpeed: cpp.Float32): Void;
	public function SetPadding(InPadding: FMargin): Void;
	public function SetOwningPlayer(LocalPlayerController: cpp.Star<APlayerController>): Void;
	public function SetNumLoopsToPlay(InAnimation: cpp.Star<UWidgetAnimation>, NumLoopsToPlay: cpp.Int32): Void;
	public function SetInputActionPriority(NewPriority: cpp.Int32): Void;
	public function SetInputActionBlocking(bShouldBlock: Bool): Void;
	public function SetForegroundColor(InForegroundColor: FSlateColor): Void;
	public function SetDesiredSizeInViewport(Size: FVector2D): Void;
	public function SetColorAndOpacity(InColorAndOpacity: FLinearColor): Void;
	public function SetAnimationCurrentTime(InAnimation: cpp.Star<UWidgetAnimation>, InTime: cpp.Float32): Void;
	public function SetAnchorsInViewport(Anchors: FAnchors): Void;
	public function SetAlignmentInViewport(Alignment: FVector2D): Void;
	public function ReverseAnimation(InAnimation: cpp.Star<UWidgetAnimation>): Void;
	public function RemoveFromViewport(): Void;
	public function RegisterInputComponent(): Void;
	public function PreConstruct(IsDesignTime: Bool): Void;
	public function PlaySound(SoundToPlay: cpp.Star<USoundBase>): Void;
	public function PlayAnimationTimeRange(InAnimation: cpp.Star<UWidgetAnimation>, StartAtTime: cpp.Float32, EndAtTime: cpp.Float32, NumLoopsToPlay: cpp.Int32, PlayMode: EUMGSequencePlayMode, PlaybackSpeed: cpp.Float32, bRestoreState: Bool): cpp.Star<UUMGSequencePlayer>;
	public function PlayAnimationReverse(InAnimation: cpp.Star<UWidgetAnimation>, PlaybackSpeed: cpp.Float32, bRestoreState: Bool): cpp.Star<UUMGSequencePlayer>;
	public function PlayAnimationForward(InAnimation: cpp.Star<UWidgetAnimation>, PlaybackSpeed: cpp.Float32, bRestoreState: Bool): cpp.Star<UUMGSequencePlayer>;
	public function PlayAnimation(InAnimation: cpp.Star<UWidgetAnimation>, StartAtTime: cpp.Float32, NumLoopsToPlay: cpp.Int32, PlayMode: EUMGSequencePlayMode, PlaybackSpeed: cpp.Float32, bRestoreState: Bool): cpp.Star<UUMGSequencePlayer>;
	public function PauseAnimation(InAnimation: cpp.Star<UWidgetAnimation>): cpp.Float32;
	public function OnTouchStarted(MyGeometry: FGeometry, InTouchEvent: FPointerEvent): FEventReply;
	public function OnTouchMoved(MyGeometry: FGeometry, InTouchEvent: FPointerEvent): FEventReply;
	public function OnTouchGesture(MyGeometry: FGeometry, GestureEvent: FPointerEvent): FEventReply;
	public function OnTouchForceChanged(MyGeometry: FGeometry, InTouchEvent: FPointerEvent): FEventReply;
	public function OnTouchEnded(MyGeometry: FGeometry, InTouchEvent: FPointerEvent): FEventReply;
	public function OnRemovedFromFocusPath(InFocusEvent: FFocusEvent): Void;
	public function OnPreviewMouseButtonDown(MyGeometry: FGeometry, MouseEvent: FPointerEvent): FEventReply;
	public function OnPreviewKeyDown(MyGeometry: FGeometry, InKeyEvent: FKeyEvent): FEventReply;
	public function OnPaint(Context: FPaintContext): Void;
	public function OnMouseWheel(MyGeometry: FGeometry, MouseEvent: FPointerEvent): FEventReply;
	public function OnMouseMove(MyGeometry: FGeometry, MouseEvent: FPointerEvent): FEventReply;
	public function OnMouseLeave(MouseEvent: FPointerEvent): Void;
	public function OnMouseEnter(MyGeometry: FGeometry, MouseEvent: FPointerEvent): Void;
	public function OnMouseCaptureLost(): Void;
	public function OnMouseButtonUp(MyGeometry: FGeometry, MouseEvent: FPointerEvent): FEventReply;
	public function OnMouseButtonDown(MyGeometry: FGeometry, MouseEvent: FPointerEvent): FEventReply;
	public function OnMouseButtonDoubleClick(InMyGeometry: FGeometry, InMouseEvent: FPointerEvent): FEventReply;
	public function OnMotionDetected(MyGeometry: FGeometry, InMotionEvent: FMotionEvent): FEventReply;
	public function OnKeyUp(MyGeometry: FGeometry, InKeyEvent: FKeyEvent): FEventReply;
	public function OnKeyDown(MyGeometry: FGeometry, InKeyEvent: FKeyEvent): FEventReply;
	public function OnKeyChar(MyGeometry: FGeometry, InCharacterEvent: FCharacterEvent): FEventReply;
	public function OnInitialized(): Void;
	public function OnFocusReceived(MyGeometry: FGeometry, InFocusEvent: FFocusEvent): FEventReply;
	public function OnFocusLost(InFocusEvent: FFocusEvent): Void;
	public function OnDrop(MyGeometry: FGeometry, PointerEvent: FPointerEvent, Operation: cpp.Star<UDragDropOperation>): Bool;
	public function OnDragOver(MyGeometry: FGeometry, PointerEvent: FPointerEvent, Operation: cpp.Star<UDragDropOperation>): Bool;
	public function OnDragLeave(PointerEvent: FPointerEvent, Operation: cpp.Star<UDragDropOperation>): Void;
	public function OnDragEnter(MyGeometry: FGeometry, PointerEvent: FPointerEvent, Operation: cpp.Star<UDragDropOperation>): Void;
	public function OnDragDetected(MyGeometry: FGeometry, PointerEvent: FPointerEvent, Operation: cpp.Reference<cpp.Star<UDragDropOperation>>): Void;
	public function OnDragCancelled(PointerEvent: FPointerEvent, Operation: cpp.Star<UDragDropOperation>): Void;
	public function OnAnimationStarted(Animation: cpp.Star<UWidgetAnimation>): Void;
	public function OnAnimationFinished(Animation: cpp.Star<UWidgetAnimation>): Void;
	public function OnAnalogValueChanged(MyGeometry: FGeometry, InAnalogInputEvent: FAnalogInputEvent): FEventReply;
	public function OnAddedToFocusPath(InFocusEvent: FFocusEvent): Void;
	public function ListenForInputAction(ActionName: FName, EventType: EInputEvent, bConsume: Bool, Callback: HaxeDelegateProperty<() -> Void>): Void;
	public function IsPlayingAnimation(): Bool;
	public function IsListeningForInputAction(ActionName: FName): Bool;
	public function IsInViewport(): Bool;
	public function IsInteractable(): Bool;
	public function IsAnyAnimationPlaying(): Bool;
	public function IsAnimationPlayingForward(InAnimation: cpp.Star<UWidgetAnimation>): Bool;
	public function IsAnimationPlaying(InAnimation: cpp.Star<UWidgetAnimation>): Bool;
	public function GetOwningPlayerPawn(): cpp.Star<APawn>;
	public function GetOwningPlayerCameraManager(): cpp.Star<APlayerCameraManager>;
	public function GetIsVisible(): Bool;
	public function GetAnimationCurrentTime(InAnimation: cpp.Star<UWidgetAnimation>): cpp.Float32;
	public function GetAnchorsInViewport(): FAnchors;
	public function GetAlignmentInViewport(): FVector2D;
	public function FlushAnimations(): Void;
	public function Destruct(): Void;
	public function Construct(): Void;
	public function CancelLatentActions(): Void;
	public function BindToAnimationStarted(Animation: cpp.Star<UWidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function BindToAnimationFinished(Animation: cpp.Star<UWidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function BindToAnimationEvent(Animation: cpp.Star<UWidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>, AnimationEvent: EWidgetAnimationEvent, UserTag: FName): Void;
	public function AddToViewport(ZOrder: cpp.Int32): Void;
	public function AddToPlayerScreen(ZOrder: cpp.Int32): Bool;
}
