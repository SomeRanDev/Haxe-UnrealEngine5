// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UARTrackedGeometry")
@:include("ARTrackable.h")
@:structAccess
extern class ARTrackedGeometry extends Object {
	public var UniqueId: Guid;
	public var LocalToTrackingTransform: Transform;
	public var LocalToAlignedTrackingTransform: Transform;
	public var TrackingState: EARTrackingState;
	public var UnderlyingMesh: cpp.Star<MRMeshComp>;
	public var ObjectClassification: EARObjectClassification;
	public var SpatialMeshUsageFlags: EARSpatialMeshUsageFlags;
	public var LastUpdateFrameNumber: cpp.Int32;
	public var DebugName: FName;

	public function IsTracked(): cpp.Reference<Bool>;
	public function HasSpatialMeshUsageFlag(InFlag: EARSpatialMeshUsageFlags): cpp.Reference<Bool>;
	public function GetUnderlyingMesh(): cpp.Reference<cpp.Star<MRMeshComp>>;
	public function GetTrackingState(): cpp.Reference<EARTrackingState>;
	public function GetObjectClassification(): cpp.Reference<EARObjectClassification>;
	public function GetName(): cpp.Reference<FString>;
	public function GetLocalToWorldTransform(): cpp.Reference<Transform>;
	public function GetLocalToTrackingTransform(): cpp.Reference<Transform>;
	public function GetLastUpdateTimestamp(): cpp.Reference<cpp.Float32>;
	public function GetLastUpdateFrameNumber(): cpp.Reference<cpp.Int32>;
	public function GetDebugName(): cpp.Reference<FName>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsTracked, HasSpatialMeshUsageFlag, GetTrackingState, GetObjectClassification, GetName,
	GetLocalToWorldTransform, GetLocalToTrackingTransform, GetLastUpdateTimestamp, GetLastUpdateFrameNumber, GetDebugName
)
@:nativeGen
abstract ConstARTrackedGeometry(ARTrackedGeometry) from ARTrackedGeometry {
	public extern var UniqueId(get, never): Guid;
	public inline extern function get_UniqueId(): Guid return this.UniqueId;
	public extern var LocalToTrackingTransform(get, never): Transform;
	public inline extern function get_LocalToTrackingTransform(): Transform return this.LocalToTrackingTransform;
	public extern var LocalToAlignedTrackingTransform(get, never): Transform;
	public inline extern function get_LocalToAlignedTrackingTransform(): Transform return this.LocalToAlignedTrackingTransform;
	public extern var TrackingState(get, never): EARTrackingState;
	public inline extern function get_TrackingState(): EARTrackingState return this.TrackingState;
	public extern var UnderlyingMesh(get, never): cpp.Star<MRMeshComp.ConstMRMeshComp>;
	public inline extern function get_UnderlyingMesh(): cpp.Star<MRMeshComp.ConstMRMeshComp> return this.UnderlyingMesh;
	public extern var ObjectClassification(get, never): EARObjectClassification;
	public inline extern function get_ObjectClassification(): EARObjectClassification return this.ObjectClassification;
	public extern var SpatialMeshUsageFlags(get, never): EARSpatialMeshUsageFlags;
	public inline extern function get_SpatialMeshUsageFlags(): EARSpatialMeshUsageFlags return this.SpatialMeshUsageFlags;
	public extern var LastUpdateFrameNumber(get, never): cpp.Int32;
	public inline extern function get_LastUpdateFrameNumber(): cpp.Int32 return this.LastUpdateFrameNumber;
	public extern var DebugName(get, never): FName;
	public inline extern function get_DebugName(): FName return this.DebugName;
}

@:forward
@:nativeGen
@:native("ARTrackedGeometry*")
abstract ARTrackedGeometryPtr(cpp.Star<ARTrackedGeometry>) from cpp.Star<ARTrackedGeometry> to cpp.Star<ARTrackedGeometry>{
	@:from
	public static extern inline function fromValue(v: ARTrackedGeometry): ARTrackedGeometryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ARTrackedGeometry {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}