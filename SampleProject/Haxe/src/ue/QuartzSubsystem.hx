// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UQuartzSubsystem")
@:include("Quartz/QuartzSubsystem.h")
@:valueType
extern class QuartzSubsystem extends TickableWorldSubsystem {
	public function IsQuartzEnabled(): Bool;
	public function IsClockRunning(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockName: FName): Bool;
	public function GetRoundTripMinLatency(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetRoundTripMaxLatency(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetRoundTripAverageLatency(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetHandleForClock(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockName: FName): ucpp.Ptr<QuartzClockHandle>;
	public function GetGameThreadToAudioRenderThreadMinLatency(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetGameThreadToAudioRenderThreadMaxLatency(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetGameThreadToAudioRenderThreadAverageLatency(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetEstimatedClockRunTime(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InClockName: ucpp.Ref<FName>): ucpp.num.Float32;
	public function GetDurationOfQuantizationTypeInSeconds(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockName: FName, QuantizationType: ucpp.Ref<EQuartzCommandQuantization>, Multiplier: ucpp.num.Float32): ucpp.num.Float32;
	public function GetCurrentClockTimestamp(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InClockName: ucpp.Ref<FName>): QuartzTransportTimeStamp;
	public function GetAudioRenderThreadToGameThreadMinLatency(): ucpp.num.Float32;
	public function GetAudioRenderThreadToGameThreadMaxLatency(): ucpp.num.Float32;
	public function GetAudioRenderThreadToGameThreadAverageLatency(): ucpp.num.Float32;
	public function DoesClockExist(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockName: FName): Bool;
	public function DeleteClockByName(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockName: FName): Void;
	public function DeleteClockByHandle(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function CreateNewClock(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockName: FName, InSettings: QuartzClockSettings, bOverrideSettingsIfClockExists: Bool, bUseAudioEngineClockManager: Bool): ucpp.Ptr<QuartzClockHandle>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstQuartzSubsystem(QuartzSubsystem) from QuartzSubsystem {
}

@:forward
@:nativeGen
@:native("QuartzSubsystem*")
abstract QuartzSubsystemPtr(ucpp.Ptr<QuartzSubsystem>) from ucpp.Ptr<QuartzSubsystem> to ucpp.Ptr<QuartzSubsystem>{
	@:from
	public static extern inline function fromValue(v: QuartzSubsystem): QuartzSubsystemPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): QuartzSubsystem {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}