// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMaterialExpressionSmoothStep")
@:include("Materials/MaterialExpressionSmoothStep.h")
@:valueType
extern class MaterialExpressionSmoothStep extends MaterialExpression {
	public var Min: ExpressionInput;
	public var Max: ExpressionInput;
	public var Value: ExpressionInput;
	public var ConstMin: ucpp.num.Float32;
	public var ConstMax: ucpp.num.Float32;
	public var ConstValue: ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstMaterialExpressionSmoothStep(MaterialExpressionSmoothStep) from MaterialExpressionSmoothStep {
	public extern var Min(get, never): ExpressionInput;
	public inline extern function get_Min(): ExpressionInput return this.Min;
	public extern var Max(get, never): ExpressionInput;
	public inline extern function get_Max(): ExpressionInput return this.Max;
	public extern var Value(get, never): ExpressionInput;
	public inline extern function get_Value(): ExpressionInput return this.Value;
	public extern var ConstMin(get, never): ucpp.num.Float32;
	public inline extern function get_ConstMin(): ucpp.num.Float32 return this.ConstMin;
	public extern var ConstMax(get, never): ucpp.num.Float32;
	public inline extern function get_ConstMax(): ucpp.num.Float32 return this.ConstMax;
	public extern var ConstValue(get, never): ucpp.num.Float32;
	public inline extern function get_ConstValue(): ucpp.num.Float32 return this.ConstValue;
}

@:forward
@:nativeGen
@:native("MaterialExpressionSmoothStep*")
abstract MaterialExpressionSmoothStepPtr(ucpp.Ptr<MaterialExpressionSmoothStep>) from ucpp.Ptr<MaterialExpressionSmoothStep> to ucpp.Ptr<MaterialExpressionSmoothStep>{
	@:from
	public static extern inline function fromValue(v: MaterialExpressionSmoothStep): MaterialExpressionSmoothStepPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MaterialExpressionSmoothStep {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}