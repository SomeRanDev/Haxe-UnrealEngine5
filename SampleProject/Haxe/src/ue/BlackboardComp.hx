// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlackboardComponent")
@:include("BehaviorTree/BlackboardComponent.h")
@:valueType
extern class BlackboardComp extends ActorComp {
	@:protected public var BrainComp: ucpp.Ptr<BrainComp>;
	@:protected public var DefaultBlackboardAsset: ucpp.Ptr<BlackboardData>;
	@:protected public var BlackboardAsset: ucpp.Ptr<BlackboardData>;
	@:protected public var KeyInstances: TArray<ucpp.Ptr<BlackboardKeyType>>;

	public function SetValueAsVector(KeyName: ucpp.Ref<FName>, VectorValue: Vector): Void;
	public function SetValueAsString(KeyName: ucpp.Ref<FName>, StringValue: FString): Void;
	public function SetValueAsRotator(KeyName: ucpp.Ref<FName>, VectorValue: Rotator): Void;
	public function SetValueAsObject(KeyName: ucpp.Ref<FName>, ObjectValue: ucpp.Ptr<Object>): Void;
	public function SetValueAsName(KeyName: ucpp.Ref<FName>, NameValue: FName): Void;
	public function SetValueAsInt(KeyName: ucpp.Ref<FName>, IntValue: ucpp.num.Int32): Void;
	public function SetValueAsFloat(KeyName: ucpp.Ref<FName>, FloatValue: ucpp.num.Float32): Void;
	public function SetValueAsEnum(KeyName: ucpp.Ref<FName>, EnumValue: ucpp.num.UInt8): Void;
	public function SetValueAsClass(KeyName: ucpp.Ref<FName>, ClassValue: ucpp.Ptr<Class>): Void;
	public function SetValueAsBool(KeyName: ucpp.Ref<FName>, BoolValue: Bool): Void;
	public function IsVectorValueSet(KeyName: ucpp.Ref<FName>): Bool;
	public function GetValueAsVector(KeyName: ucpp.Ref<FName>): Vector;
	public function GetValueAsString(KeyName: ucpp.Ref<FName>): FString;
	public function GetValueAsRotator(KeyName: ucpp.Ref<FName>): Rotator;
	public function GetValueAsObject(KeyName: ucpp.Ref<FName>): ucpp.Ptr<Object>;
	public function GetValueAsName(KeyName: ucpp.Ref<FName>): FName;
	public function GetValueAsInt(KeyName: ucpp.Ref<FName>): ucpp.num.Int32;
	public function GetValueAsFloat(KeyName: ucpp.Ref<FName>): ucpp.num.Float32;
	public function GetValueAsEnum(KeyName: ucpp.Ref<FName>): ucpp.num.UInt8;
	public function GetValueAsClass(KeyName: ucpp.Ref<FName>): ucpp.Ptr<Class>;
	public function GetValueAsBool(KeyName: ucpp.Ref<FName>): Bool;
	public function GetRotationFromEntry(KeyName: ucpp.Ref<FName>, ResultRotation: ucpp.Ref<Rotator>): Bool;
	public function GetLocationFromEntry(KeyName: ucpp.Ref<FName>, ResultLocation: ucpp.Ref<Vector>): Bool;
	public function ClearValue(KeyName: ucpp.Ref<FName>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	IsVectorValueSet, GetValueAsVector, GetValueAsString, GetValueAsRotator, GetValueAsObject,
	GetValueAsName, GetValueAsInt, GetValueAsFloat, GetValueAsEnum, GetValueAsClass,
	GetValueAsBool, GetRotationFromEntry, GetLocationFromEntry
)
@:nativeGen
abstract ConstBlackboardComp(BlackboardComp) from BlackboardComp {
}

@:forward
@:nativeGen
@:native("BlackboardComp*")
abstract BlackboardCompPtr(ucpp.Ptr<BlackboardComp>) from ucpp.Ptr<BlackboardComp> to ucpp.Ptr<BlackboardComp>{
	@:from
	public static extern inline function fromValue(v: BlackboardComp): BlackboardCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): BlackboardComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}