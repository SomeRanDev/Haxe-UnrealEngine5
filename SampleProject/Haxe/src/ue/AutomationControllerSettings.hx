// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAutomationControllerSettings")
@:include("AutomationControllerSettings.h")
extern class AutomationControllerSettings extends Object {
	public var Groups: TArray<AutomatedTestGroup>;
	public var bSuppressLogErrors: Bool;
	public var bSuppressLogWarnings: Bool;
	public var bElevateLogWarningsToErrors: Bool;
	public var bTreatLogWarningsAsTestErrors: Bool;
	public var CheckTestIntervalSeconds: cpp.Float32;
	public var GameInstanceLostTimerSeconds: cpp.Float32;
	public var TelemetryDirectory: FString;
	public var bResetTelemetryStorageOnNewSession: Bool;
}

@:forward()
@:nativeGen
abstract ConstAutomationControllerSettings(AutomationControllerSettings) from AutomationControllerSettings {
	public extern var Groups(get, never): TArray<AutomatedTestGroup>;
	public inline extern function get_Groups(): TArray<AutomatedTestGroup> return this.Groups;
	public extern var bSuppressLogErrors(get, never): Bool;
	public inline extern function get_bSuppressLogErrors(): Bool return this.bSuppressLogErrors;
	public extern var bSuppressLogWarnings(get, never): Bool;
	public inline extern function get_bSuppressLogWarnings(): Bool return this.bSuppressLogWarnings;
	public extern var bElevateLogWarningsToErrors(get, never): Bool;
	public inline extern function get_bElevateLogWarningsToErrors(): Bool return this.bElevateLogWarningsToErrors;
	public extern var bTreatLogWarningsAsTestErrors(get, never): Bool;
	public inline extern function get_bTreatLogWarningsAsTestErrors(): Bool return this.bTreatLogWarningsAsTestErrors;
	public extern var CheckTestIntervalSeconds(get, never): cpp.Float32;
	public inline extern function get_CheckTestIntervalSeconds(): cpp.Float32 return this.CheckTestIntervalSeconds;
	public extern var GameInstanceLostTimerSeconds(get, never): cpp.Float32;
	public inline extern function get_GameInstanceLostTimerSeconds(): cpp.Float32 return this.GameInstanceLostTimerSeconds;
	public extern var TelemetryDirectory(get, never): FString;
	public inline extern function get_TelemetryDirectory(): FString return this.TelemetryDirectory;
	public extern var bResetTelemetryStorageOnNewSession(get, never): Bool;
	public inline extern function get_bResetTelemetryStorageOnNewSession(): Bool return this.bResetTelemetryStorageOnNewSession;
}