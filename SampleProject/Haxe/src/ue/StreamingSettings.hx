// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UStreamingSettings")
@:include("Engine/CoreSettings.h")
@:valueType
extern class StreamingSettings extends DeveloperSettings {
	@:protected public var AsyncLoadingThreadEnabled: Bool;
	@:protected public var WarnIfTimeLimitExceeded: Bool;
	@:protected public var TimeLimitExceededMultiplier: ucpp.num.Float32;
	@:protected public var TimeLimitExceededMinTime: ucpp.num.Float32;
	@:protected public var MinBulkDataSizeForAsyncLoading: ucpp.num.Int32;
	@:protected public var UseBackgroundLevelStreaming: Bool;
	@:protected public var AsyncLoadingUseFullTimeLimit: Bool;
	@:protected public var AsyncLoadingTimeLimit: ucpp.num.Float32;
	@:protected public var PriorityAsyncLoadingExtraTime: ucpp.num.Float32;
	@:protected public var LevelStreamingActorsUpdateTimeLimit: ucpp.num.Float32;
	@:protected public var PriorityLevelStreamingActorsUpdateExtraTime: ucpp.num.Float32;
	@:protected public var LevelStreamingComponentsRegistrationGranularity: ucpp.num.Int32;
	@:protected public var LevelStreamingAddPrimitiveGranularity: ucpp.num.Int32;
	@:protected public var LevelStreamingUnregisterComponentsTimeLimit: ucpp.num.Float32;
	@:protected public var LevelStreamingComponentsUnregistrationGranularity: ucpp.num.Int32;
	@:protected public var FlushStreamingOnExit: Bool;
	@:protected public var EventDrivenLoaderEnabled: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstStreamingSettings(StreamingSettings) from StreamingSettings {
}

@:forward
@:nativeGen
@:native("StreamingSettings*")
abstract StreamingSettingsPtr(ucpp.Ptr<StreamingSettings>) from ucpp.Ptr<StreamingSettings> to ucpp.Ptr<StreamingSettings>{
	@:from
	public static extern inline function fromValue(v: StreamingSettings): StreamingSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): StreamingSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}