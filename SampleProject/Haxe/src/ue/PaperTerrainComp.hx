// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPaperTerrainComponent")
@:include("PaperTerrainComponent.h")
@:structAccess
extern class PaperTerrainComp extends PrimitiveComp {
	public var TerrainMaterial: cpp.Star<PaperTerrainMaterial>;
	public var bClosedSpline: Bool;
	public var bFilledSpline: Bool;
	public var AssociatedSpline: cpp.Star<PaperTerrainSplineComp>;
	public var RandomSeed: cpp.Int32;
	public var SegmentOverlapAmount: cpp.Float32;
	public var TerrainColor: LinearColor;
	public var ReparamStepsPerSegment: cpp.Int32;
	public var SpriteCollisionDomain: ESpriteCollisionMode;
	public var CollisionThickness: cpp.Float32;
	public var CachedBodySetup: cpp.Star<BodySetup>;

	public function SetTerrainColor(NewColor: LinearColor): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstPaperTerrainComp(PaperTerrainComp) from PaperTerrainComp {
	public extern var TerrainMaterial(get, never): cpp.Star<PaperTerrainMaterial.ConstPaperTerrainMaterial>;
	public inline extern function get_TerrainMaterial(): cpp.Star<PaperTerrainMaterial.ConstPaperTerrainMaterial> return this.TerrainMaterial;
	public extern var bClosedSpline(get, never): Bool;
	public inline extern function get_bClosedSpline(): Bool return this.bClosedSpline;
	public extern var bFilledSpline(get, never): Bool;
	public inline extern function get_bFilledSpline(): Bool return this.bFilledSpline;
	public extern var AssociatedSpline(get, never): cpp.Star<PaperTerrainSplineComp.ConstPaperTerrainSplineComp>;
	public inline extern function get_AssociatedSpline(): cpp.Star<PaperTerrainSplineComp.ConstPaperTerrainSplineComp> return this.AssociatedSpline;
	public extern var RandomSeed(get, never): cpp.Int32;
	public inline extern function get_RandomSeed(): cpp.Int32 return this.RandomSeed;
	public extern var SegmentOverlapAmount(get, never): cpp.Float32;
	public inline extern function get_SegmentOverlapAmount(): cpp.Float32 return this.SegmentOverlapAmount;
	public extern var TerrainColor(get, never): LinearColor;
	public inline extern function get_TerrainColor(): LinearColor return this.TerrainColor;
	public extern var ReparamStepsPerSegment(get, never): cpp.Int32;
	public inline extern function get_ReparamStepsPerSegment(): cpp.Int32 return this.ReparamStepsPerSegment;
	public extern var SpriteCollisionDomain(get, never): ESpriteCollisionMode;
	public inline extern function get_SpriteCollisionDomain(): ESpriteCollisionMode return this.SpriteCollisionDomain;
	public extern var CollisionThickness(get, never): cpp.Float32;
	public inline extern function get_CollisionThickness(): cpp.Float32 return this.CollisionThickness;
	public extern var CachedBodySetup(get, never): cpp.Star<BodySetup.ConstBodySetup>;
	public inline extern function get_CachedBodySetup(): cpp.Star<BodySetup.ConstBodySetup> return this.CachedBodySetup;
}

@:forward
@:nativeGen
@:native("PaperTerrainComp*")
abstract PaperTerrainCompPtr(cpp.Star<PaperTerrainComp>) from cpp.Star<PaperTerrainComp> to cpp.Star<PaperTerrainComp>{
	@:from
	public static extern inline function fromValue(v: PaperTerrainComp): PaperTerrainCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PaperTerrainComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}