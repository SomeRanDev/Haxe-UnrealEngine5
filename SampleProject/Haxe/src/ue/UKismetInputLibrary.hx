// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetInputLibrary")
@:include("Kismet/KismetInputLibrary.h")
extern class UKismetInputLibrary extends UBlueprintFunctionLibrary {

	public function PointerEvent_IsTouchEvent(Input: FPointerEvent): Bool;
	public function PointerEvent_IsMouseButtonDown(Input: FPointerEvent, MouseButton: FKey): Bool;
	public function PointerEvent_GetWheelDelta(Input: FPointerEvent): cpp.Float32;
	public function PointerEvent_GetUserIndex(Input: FPointerEvent): cpp.Int32;
	public function PointerEvent_GetTouchpadIndex(Input: FPointerEvent): cpp.Int32;
	public function PointerEvent_GetScreenSpacePosition(Input: FPointerEvent): FVector2D;
	public function PointerEvent_GetPointerIndex(Input: FPointerEvent): cpp.Int32;
	public function PointerEvent_GetLastScreenSpacePosition(Input: FPointerEvent): FVector2D;
	public function PointerEvent_GetGestureType(Input: FPointerEvent): ESlateGesture;
	public function PointerEvent_GetGestureDelta(Input: FPointerEvent): FVector2D;
	public function PointerEvent_GetEffectingButton(Input: FPointerEvent): FKey;
	public function PointerEvent_GetCursorDelta(Input: FPointerEvent): FVector2D;
	public function Key_IsVectorAxis(Key: FKey): Bool;
	public function Key_IsValid(Key: FKey): Bool;
	public function Key_IsMouseButton(Key: FKey): Bool;
	public function Key_IsModifierKey(Key: FKey): Bool;
	public function Key_IsKeyboardKey(Key: FKey): Bool;
	public function Key_IsGamepadKey(Key: FKey): Bool;
	public function Key_IsDigital(Key: FKey): Bool;
	public function Key_IsButtonAxis(Key: FKey): Bool;
	public function Key_IsAxis3D(Key: FKey): Bool;
	public function Key_IsAxis2D(Key: FKey): Bool;
	public function Key_IsAxis1D(Key: FKey): Bool;
	public function Key_IsAnalog(Key: FKey): Bool;
	public function Key_GetNavigationDirectionFromKey(InKeyEvent: FKeyEvent): EUINavigation;
	public function Key_GetNavigationDirectionFromAnalog(InAnalogEvent: FAnalogInputEvent): EUINavigation;
	public function Key_GetNavigationActionFromKey(InKeyEvent: FKeyEvent): EUINavigationAction;
	public function Key_GetNavigationAction(InKey: FKey): EUINavigationAction;
	public function Key_GetDisplayName(Key: FKey): FText;
	public function InputEvent_IsShiftDown(Input: FInputEvent): Bool;
	public function InputEvent_IsRightShiftDown(Input: FInputEvent): Bool;
	public function InputEvent_IsRightControlDown(Input: FInputEvent): Bool;
	public function InputEvent_IsRightCommandDown(Input: FInputEvent): Bool;
	public function InputEvent_IsRightAltDown(Input: FInputEvent): Bool;
	public function InputEvent_IsRepeat(Input: FInputEvent): Bool;
	public function InputEvent_IsLeftShiftDown(Input: FInputEvent): Bool;
	public function InputEvent_IsLeftControlDown(Input: FInputEvent): Bool;
	public function InputEvent_IsLeftCommandDown(Input: FInputEvent): Bool;
	public function InputEvent_IsLeftAltDown(Input: FInputEvent): Bool;
	public function InputEvent_IsControlDown(Input: FInputEvent): Bool;
	public function InputEvent_IsCommandDown(Input: FInputEvent): Bool;
	public function InputEvent_IsAltDown(Input: FInputEvent): Bool;
	public function InputChord_GetDisplayName(Key: FInputChord): FText;
	public function GetUserIndex(Input: FKeyEvent): cpp.Int32;
	public function GetKey(Input: FKeyEvent): FKey;
	public function GetAnalogValue(Input: FAnalogInputEvent): cpp.Float32;
	public function EqualEqual_KeyKey(A: FKey, B: FKey): Bool;
	public function EqualEqual_InputChordInputChord(A: FInputChord, B: FInputChord): Bool;
	public function CalibrateTilt(): Void;
}
