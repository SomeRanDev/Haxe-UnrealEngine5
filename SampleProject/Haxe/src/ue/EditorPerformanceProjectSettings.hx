// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditorPerformanceProjectSettings")
@:include("Settings/EditorProjectSettings.h")
@:valueType
extern class EditorPerformanceProjectSettings extends DeveloperSettings {
	public var RealtimeScreenPercentageMode: EScreenPercentageMode;
	public var PathTracerScreenPercentageMode: EScreenPercentageMode;
	public var NonRealtimeScreenPercentageMode: EScreenPercentageMode;
	public var ManualScreenPercentage: ucpp.num.Float32;
	public var MinViewportRenderingResolution: ucpp.num.Int32;
	public var MaxViewportRenderingResolution: ucpp.num.Int32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstEditorPerformanceProjectSettings(EditorPerformanceProjectSettings) from EditorPerformanceProjectSettings {
	public extern var RealtimeScreenPercentageMode(get, never): EScreenPercentageMode;
	public inline extern function get_RealtimeScreenPercentageMode(): EScreenPercentageMode return this.RealtimeScreenPercentageMode;
	public extern var PathTracerScreenPercentageMode(get, never): EScreenPercentageMode;
	public inline extern function get_PathTracerScreenPercentageMode(): EScreenPercentageMode return this.PathTracerScreenPercentageMode;
	public extern var NonRealtimeScreenPercentageMode(get, never): EScreenPercentageMode;
	public inline extern function get_NonRealtimeScreenPercentageMode(): EScreenPercentageMode return this.NonRealtimeScreenPercentageMode;
	public extern var ManualScreenPercentage(get, never): ucpp.num.Float32;
	public inline extern function get_ManualScreenPercentage(): ucpp.num.Float32 return this.ManualScreenPercentage;
	public extern var MinViewportRenderingResolution(get, never): ucpp.num.Int32;
	public inline extern function get_MinViewportRenderingResolution(): ucpp.num.Int32 return this.MinViewportRenderingResolution;
	public extern var MaxViewportRenderingResolution(get, never): ucpp.num.Int32;
	public inline extern function get_MaxViewportRenderingResolution(): ucpp.num.Int32 return this.MaxViewportRenderingResolution;
}

@:forward
@:nativeGen
@:native("EditorPerformanceProjectSettings*")
abstract EditorPerformanceProjectSettingsPtr(ucpp.Ptr<EditorPerformanceProjectSettings>) from ucpp.Ptr<EditorPerformanceProjectSettings> to ucpp.Ptr<EditorPerformanceProjectSettings>{
	@:from
	public static extern inline function fromValue(v: EditorPerformanceProjectSettings): EditorPerformanceProjectSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EditorPerformanceProjectSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}