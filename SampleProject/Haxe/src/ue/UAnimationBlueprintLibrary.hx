// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimationBlueprintLibrary")
@:include("AnimationBlueprintLibrary.h")
extern class UAnimationBlueprintLibrary extends UBlueprintFunctionLibrary {

	public function SetRootMotionLockType(AnimationSequence: cpp.Star<UAnimSequence>, RootMotionLockType: ERootMotionRootLock): Void;
	public function SetRootMotionEnabled(AnimationSequence: cpp.Star<UAnimSequence>, bEnabled: Bool): Void;
	public function SetRateScale(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, RateScale: cpp.Float32): Void;
	public function SetIsRootMotionLockForced(AnimationSequence: cpp.Star<UAnimSequence>, bForced: Bool): Void;
	public function SetCurveCompressionSettings(AnimationSequence: cpp.Star<UAnimSequence>, CompressionSettings: cpp.Star<UAnimCurveCompressionSettings>): Void;
	public function SetBoneCompressionSettings(AnimationSequence: cpp.Star<UAnimSequence>, CompressionSettings: cpp.Star<UAnimBoneCompressionSettings>): Void;
	public function SetAnimationInterpolationType(AnimationSequence: cpp.Star<UAnimSequence>, InterpolationType: EAnimInterpolationType): Void;
	public function SetAdditiveBasePoseType(AnimationSequence: cpp.Star<UAnimSequence>, AdditiveBasePoseType: EAdditiveBasePoseType): Void;
	public function SetAdditiveAnimationType(AnimationSequence: cpp.Star<UAnimSequence>, AdditiveAnimationType: EAdditiveAnimationType): Void;
	public function ReplaceAnimNotifyStates(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, OldNotifyClass: TSubclassOf<UAnimNotifyState>, NewNotifyClass: TSubclassOf<UAnimNotifyState>, OnNotifyStateReplaced: HaxeDelegateProperty<(cpp.Star<UAnimNotifyState>, cpp.Star<UAnimNotifyState>) -> Void>): Void;
	public function ReplaceAnimNotifies(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, OldNotifyClass: TSubclassOf<UAnimNotify>, NewNotifyClass: TSubclassOf<UAnimNotify>, OnNotifyReplaced: HaxeDelegateProperty<(cpp.Star<UAnimNotify>, cpp.Star<UAnimNotify>) -> Void>): Void;
	public function RemoveVirtualBones(AnimationSequence: cpp.Star<UAnimSequence>, VirtualBoneNames: TArray<FName>): Void;
	public function RemoveVirtualBone(AnimationSequence: cpp.Star<UAnimSequence>, VirtualBoneName: FName): Void;
	public function RemoveMetaDataOfClass(AnimationAsset: cpp.Star<UAnimationAsset>, MetaDataClass: TSubclassOf<UAnimMetaData>): Void;
	public function RemoveMetaData(AnimationAsset: cpp.Star<UAnimationAsset>, MetaDataObject: cpp.Star<UAnimMetaData>): Void;
	public function RemoveCurve(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, bRemoveNameFromSkeleton: Bool): Void;
	public function RemoveBoneAnimation(AnimationSequence: cpp.Star<UAnimSequence>, BoneName: FName, bIncludeChildren: Bool, bFinalize: Bool): Void;
	public function RemoveAnimationSyncMarkersByTrack(AnimationSequence: cpp.Star<UAnimSequence>, NotifyTrackName: FName): cpp.Int32;
	public function RemoveAnimationSyncMarkersByName(AnimationSequence: cpp.Star<UAnimSequence>, MarkerName: FName): cpp.Int32;
	public function RemoveAnimationNotifyTrack(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyTrackName: FName): Void;
	public function RemoveAnimationNotifyEventsByTrack(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyTrackName: FName): cpp.Int32;
	public function RemoveAnimationNotifyEventsByName(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyName: FName): cpp.Int32;
	public function RemoveAllVirtualBones(AnimationSequence: cpp.Star<UAnimSequence>): Void;
	public function RemoveAllMetaData(AnimationAsset: cpp.Star<UAnimationAsset>): Void;
	public function RemoveAllCurveData(AnimationSequence: cpp.Star<UAnimSequence>): Void;
	public function RemoveAllBoneAnimation(AnimationSequence: cpp.Star<UAnimSequence>): Void;
	public function RemoveAllAnimationSyncMarkers(AnimationSequence: cpp.Star<UAnimSequence>): Void;
	public function RemoveAllAnimationNotifyTracks(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>): Void;
	public function IsValidTime(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, Time: cpp.Float32, IsValid: Bool): Void;
	public function IsValidRawAnimationTrackName(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, TrackName: FName): Bool;
	public function IsValidAnimNotifyTrackName(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyTrackName: FName): Bool;
	public function IsValidAnimationSyncMarkerName(AnimationSequence: cpp.Star<UAnimSequence>, MarkerName: FName): Bool;
	public function IsRootMotionLockForced(AnimationSequence: cpp.Star<UAnimSequence>): Bool;
	public function IsRootMotionEnabled(AnimationSequence: cpp.Star<UAnimSequence>): Bool;
	public function GetVectorKeys(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Times: TArray<cpp.Float32>, Values: TArray<FVector>): Void;
	public function GetUniqueMarkerNames(AnimationSequence: cpp.Star<UAnimSequence>, MarkerNames: TArray<FName>): Void;
	public function GetTransformationKeys(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Times: TArray<cpp.Float32>, Values: TArray<FTransform>): Void;
	public function GetTimeAtFrame(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, Frame: cpp.Int32, Time: cpp.Reference<cpp.Float32>): Void;
	public function GetSequenceLength(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, Length: cpp.Reference<cpp.Float32>): Void;
	public function GetRootMotionLockType(AnimationSequence: cpp.Star<UAnimSequence>, LockType: ERootMotionRootLock): Void;
	public function GetRawTrackScaleData(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, TrackName: FName, ScaleData: TArray<FVector>): Void;
	public function GetRawTrackRotationData(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, TrackName: FName, RotationData: TArray<FQuat>): Void;
	public function GetRawTrackPositionData(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, TrackName: FName, PositionData: TArray<FVector>): Void;
	public function GetRawTrackData(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, TrackName: FName, PositionKeys: TArray<FVector>, RotationKeys: TArray<FQuat>, ScalingKeys: TArray<FVector>): Void;
	public function GetRateScale(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, RateScale: cpp.Reference<cpp.Float32>): Void;
	public function GetNumKeys(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NumKeys: cpp.Reference<cpp.Int32>): Void;
	public function GetNumFrames(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NumFrames: cpp.Reference<cpp.Int32>): Void;
	public function GetNodesOfClass(AnimationBlueprint: cpp.Star<UAnimBlueprint>, NodeClass: TSubclassOf<UAnimGraphNode_Base>, GraphNodes: TArray<cpp.Star<UAnimGraphNode_Base>>, bIncludeChildClasses: Bool): Void;
	public function GetMetaDataOfClass(AnimationAsset: cpp.Star<UAnimationAsset>, MetaDataClass: TSubclassOf<UAnimMetaData>, MetaDataOfClass: TArray<cpp.Star<UAnimMetaData>>): Void;
	public function GetMetaData(AnimationAsset: cpp.Star<UAnimationAsset>, MetaData: TArray<cpp.Star<UAnimMetaData>>): Void;
	public function GetFrameAtTime(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, Time: cpp.Float32, Frame: cpp.Reference<cpp.Int32>): Void;
	public function GetFloatKeys(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Times: TArray<cpp.Float32>, Values: TArray<cpp.Float32>): Void;
	public function GetCurveCompressionSettings(AnimationSequence: cpp.Star<UAnimSequence>, CompressionSettings: cpp.Reference<cpp.Star<UAnimCurveCompressionSettings>>): Void;
	public function GetBonePosesForTime(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, BoneNames: TArray<FName>, Time: cpp.Float32, bExtractRootMotion: Bool, Poses: TArray<FTransform>, PreviewMesh: cpp.Star<USkeletalMesh>): Void;
	public function GetBonePosesForFrame(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, BoneNames: TArray<FName>, Frame: cpp.Int32, bExtractRootMotion: Bool, Poses: TArray<FTransform>, PreviewMesh: cpp.Star<USkeletalMesh>): Void;
	public function GetBonePoseForTime(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, BoneName: FName, Time: cpp.Float32, bExtractRootMotion: Bool, Pose: FTransform): Void;
	public function GetBonePoseForFrame(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, BoneName: FName, Frame: cpp.Int32, bExtractRootMotion: Bool, Pose: FTransform): Void;
	public function GetBoneCompressionSettings(AnimationSequence: cpp.Star<UAnimSequence>, CompressionSettings: cpp.Reference<cpp.Star<UAnimBoneCompressionSettings>>): Void;
	public function GetAnimNotifyEventTriggerTime(NotifyEvent: FAnimNotifyEvent): cpp.Float32;
	public function GetAnimNotifyEventDuration(NotifyEvent: FAnimNotifyEvent): cpp.Float32;
	public function GetAnimationTrackNames(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, TrackNames: TArray<FName>): Void;
	public function GetAnimationSyncMarkersForTrack(AnimationSequence: cpp.Star<UAnimSequence>, NotifyTrackName: FName, Markers: TArray<FAnimSyncMarker>): Void;
	public function GetAnimationSyncMarkers(AnimationSequence: cpp.Star<UAnimSequence>, Markers: TArray<FAnimSyncMarker>): Void;
	public function GetAnimationNotifyTrackNames(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, TrackNames: TArray<FName>): Void;
	public function GetAnimationNotifyEventsForTrack(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyTrackName: FName, Events: TArray<FAnimNotifyEvent>): Void;
	public function GetAnimationNotifyEvents(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyEvents: TArray<FAnimNotifyEvent>): Void;
	public function GetAnimationNotifyEventNames(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, EventNames: TArray<FName>): Void;
	public function GetAnimationInterpolationType(AnimationSequence: cpp.Star<UAnimSequence>, InterpolationType: EAnimInterpolationType): Void;
	public function GetAnimationGraphs(AnimationBlueprint: cpp.Star<UAnimBlueprint>, AnimationGraphs: TArray<cpp.Star<UAnimationGraph>>): Void;
	public function GetAnimationCurveNames(AnimationSequence: cpp.Star<UAnimSequence>, CurveType: ERawCurveTrackTypes, CurveNames: TArray<FName>): Void;
	public function GetAdditiveBasePoseType(AnimationSequence: cpp.Star<UAnimSequence>, AdditiveBasePoseType: EAdditiveBasePoseType): Void;
	public function GetAdditiveAnimationType(AnimationSequence: cpp.Star<UAnimSequence>, AdditiveAnimationType: EAdditiveAnimationType): Void;
	public function FindBonePathToRoot(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, BoneName: FName, BonePath: TArray<FName>): Void;
	public function FinalizeBoneAnimation(AnimationSequence: cpp.Star<UAnimSequence>): Void;
	public function EvaluateRootBoneTimecodeAttributesAtTime(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, EvalTime: cpp.Float32, OutQualifiedFrameTime: FQualifiedFrameTime): Bool;
	public function DoesCurveExist(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, CurveType: ERawCurveTrackTypes): Bool;
	public function DoesBoneNameExist(AnimationSequence: cpp.Star<UAnimSequence>, BoneName: FName, bExists: Bool): Void;
	public function CopyAnimNotifiesFromSequence(SourceAnimationSequenceBase: cpp.Star<UAnimSequenceBase>, DestinationAnimationSequenceBase: cpp.Star<UAnimSequenceBase>, bDeleteExistingNotifies: Bool): Void;
	public function CopyAnimationCurveNamesToSkeleton(OldSkeleton: cpp.Star<USkeleton>, NewSkeleton: cpp.Star<USkeleton>, SequenceBase: cpp.Star<UAnimSequenceBase>, CurveType: ERawCurveTrackTypes): Void;
	public function ContainsMetaDataOfClass(AnimationAsset: cpp.Star<UAnimationAsset>, MetaDataClass: TSubclassOf<UAnimMetaData>): Bool;
	public function AddVirtualBone(AnimationSequence: cpp.Star<UAnimSequence>, SourceBoneName: FName, TargetBoneName: FName, VirtualBoneName: cpp.Reference<FName>): Void;
	public function AddVectorCurveKeys(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Times: TArray<cpp.Float32>, Vectors: TArray<FVector>): Void;
	public function AddVectorCurveKey(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Time: cpp.Float32, Vector: FVector): Void;
	public function AddTransformationCurveKeys(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Times: TArray<cpp.Float32>, Transforms: TArray<FTransform>): Void;
	public function AddTransformationCurveKey(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Time: cpp.Float32, Transform: FTransform): Void;
	public function AddMetaDataObject(AnimationAsset: cpp.Star<UAnimationAsset>, MetaDataObject: cpp.Star<UAnimMetaData>): Void;
	public function AddMetaData(AnimationAsset: cpp.Star<UAnimationAsset>, MetaDataClass: TSubclassOf<UAnimMetaData>, MetaDataInstance: cpp.Reference<cpp.Star<UAnimMetaData>>): Void;
	public function AddFloatCurveKeys(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Times: TArray<cpp.Float32>, Values: TArray<cpp.Float32>): Void;
	public function AddFloatCurveKey(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, Time: cpp.Float32, Value: cpp.Float32): Void;
	public function AddCurve(AnimationSequence: cpp.Star<UAnimSequence>, CurveName: FName, CurveType: ERawCurveTrackTypes, bMetaDataCurve: Bool): Void;
	public function AddAnimationSyncMarker(AnimationSequence: cpp.Star<UAnimSequence>, MarkerName: FName, Time: cpp.Float32, NotifyTrackName: FName): Void;
	public function AddAnimationNotifyTrack(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyTrackName: FName, TrackColor: FLinearColor): Void;
	public function AddAnimationNotifyStateEventObject(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, StartTime: cpp.Float32, Duration: cpp.Float32, NotifyState: cpp.Star<UAnimNotifyState>, NotifyTrackName: FName): Void;
	public function AddAnimationNotifyStateEvent(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyTrackName: FName, StartTime: cpp.Float32, Duration: cpp.Float32, NotifyStateClass: TSubclassOf<UAnimNotifyState>): cpp.Star<UAnimNotifyState>;
	public function AddAnimationNotifyEventObject(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, StartTime: cpp.Float32, Notify: cpp.Star<UAnimNotify>, NotifyTrackName: FName): Void;
	public function AddAnimationNotifyEvent(AnimationSequenceBase: cpp.Star<UAnimSequenceBase>, NotifyTrackName: FName, StartTime: cpp.Float32, NotifyClass: TSubclassOf<UAnimNotify>): cpp.Star<UAnimNotify>;
}
