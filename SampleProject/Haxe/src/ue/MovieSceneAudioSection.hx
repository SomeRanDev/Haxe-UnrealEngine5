// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovieSceneAudioSection")
@:include("Sections/MovieSceneAudioSection.h")
@:structAccess
extern class MovieSceneAudioSection extends MovieSceneSection {
	private var Sound: cpp.Star<SoundBase>;
	private var StartFrameOffset: FrameNumber;
	private var SoundVolume: MovieSceneFloatChannel;
	private var PitchMultiplier: MovieSceneFloatChannel;
	private var Inputs_Float: TMap<FName, MovieSceneFloatChannel>;
	private var Inputs_String: TMap<FName, MovieSceneStringChannel>;
	private var Inputs_Bool: TMap<FName, MovieSceneBoolChannel>;
	private var Inputs_Int: TMap<FName, MovieSceneIntegerChannel>;
	private var Inputs_Trigger: TMap<FName, MovieSceneAudioTriggerChannel>;
	private var AttachActorData: MovieSceneActorReferenceData;
	private var bLooping: Bool;
	private var bSuppressSubtitles: Bool;
	private var bOverrideAttenuation: Bool;
	private var AttenuationSettings: cpp.Star<SoundAttenuation>;
	private var OnQueueSubtitles: HaxeDelegateProperty<(cpp.Reference<TArray<SubtitleCue>>, cpp.Float32) -> Void>;
	private var OnAudioFinished: HaxeMulticastSparseDelegateProperty<() -> Void>;
	private var OnAudioPlaybackPercent: HaxeMulticastSparseDelegateProperty<(cpp.Star<SoundWave.ConstSoundWave>, cpp.Float32) -> Void>;

	public function SetStartOffset(InStartOffset: FrameNumber): Void;
	public function SetSound(InSound: cpp.Star<SoundBase>): Void;
	public function GetStartOffset(): FrameNumber;
	public function GetSound(): cpp.Star<SoundBase>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetStartOffset, GetSound)
@:nativeGen
abstract ConstMovieSceneAudioSection(MovieSceneAudioSection) from MovieSceneAudioSection {
}

@:forward
@:nativeGen
@:native("MovieSceneAudioSection*")
abstract MovieSceneAudioSectionPtr(cpp.Star<MovieSceneAudioSection>) from cpp.Star<MovieSceneAudioSection> to cpp.Star<MovieSceneAudioSection>{
	@:from
	public static extern inline function fromValue(v: MovieSceneAudioSection): MovieSceneAudioSectionPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MovieSceneAudioSection {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}