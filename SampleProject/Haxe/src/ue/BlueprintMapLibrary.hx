// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlueprintMapLibrary")
@:include("Kismet/BlueprintMapLibrary.h")
@:valueType
extern class BlueprintMapLibrary extends BlueprintFunctionLibrary {
	public function SetMapPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>): Void;
	public function Map_Values(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>, Values: ucpp.Ref<TArray<ucpp.num.Int32>>): Void;
	public function Map_Remove(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>, Key: ucpp.Ref<ucpp.num.Int32>): Bool;
	public function Map_Length(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>): ucpp.num.Int32;
	public function Map_Keys(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>, Keys: ucpp.Ref<TArray<ucpp.num.Int32>>): Void;
	public function Map_IsNotEmpty(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>): Bool;
	public function Map_IsEmpty(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>): Bool;
	public function Map_Find(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>, Key: ucpp.Ref<ucpp.num.Int32>, Value: ucpp.Ref<ucpp.num.Int32>): Bool;
	public function Map_Contains(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>, Key: ucpp.Ref<ucpp.num.Int32>): Bool;
	public function Map_Clear(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>): Void;
	public function Map_Add(TargetMap: ucpp.Ref<TMap<ucpp.num.Int32, ucpp.num.Int32>>, Key: ucpp.Ref<ucpp.num.Int32>, Value: ucpp.Ref<ucpp.num.Int32>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstBlueprintMapLibrary(BlueprintMapLibrary) from BlueprintMapLibrary {
}

@:forward
@:nativeGen
@:native("BlueprintMapLibrary*")
abstract BlueprintMapLibraryPtr(ucpp.Ptr<BlueprintMapLibrary>) from ucpp.Ptr<BlueprintMapLibrary> to ucpp.Ptr<BlueprintMapLibrary>{
	@:from
	public static extern inline function fromValue(v: BlueprintMapLibrary): BlueprintMapLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): BlueprintMapLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}