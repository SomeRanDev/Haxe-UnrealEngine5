// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USkeletalMesh")
@:include("Engine/SkeletalMesh.h")
@:structAccess
extern class SkeletalMesh extends StreamableRenderAsset {
	public var MeshEditorDataObject: cpp.Star<SkeletalMeshEditorData>;
	public var Skeleton: cpp.Star<Skeleton>;
	public var ImportedBounds: BoxSphereBounds;
	public var ExtendedBounds: BoxSphereBounds;
	public var PositiveBoundsExtension: Vector;
	public var NegativeBoundsExtension: Vector;
	public var Materials: TArray<SkeletalMaterial>;
	public var SkelMirrorTable: TArray<BoneMirrorInfo>;
	public var LODInfo: TArray<SkeletalMeshLODInfo>;
	public var MinLod: PerPlatformInt;
	public var DisableBelowMinLodStripping: PerPlatformBool;
	public var bOverrideLODStreamingSettings: Bool;
	public var bSupportLODStreaming: PerPlatformBool;
	public var MaxNumStreamedLODs: PerPlatformInt;
	public var MaxNumOptionalLODs: PerPlatformInt;
	public var LODSettings: cpp.Star<SkeletalMeshLODSettings>;
	public var DefaultAnimatingRig: TSoftObjectPtr<Object>;
	public var SkelMirrorAxis: EAxis;
	public var SkelMirrorFlipAxis: EAxis;
	public var bUseFullPrecisionUVs_DEPRECATED: Bool;
	public var bUseHighPrecisionTangentBasis_DEPRECATED: Bool;
	public var bHasBeenSimplified: Bool;
	public var bHasVertexColors: Bool;
	public var bEnablePerPolyCollision: Bool;
	public var VertexColorGuid: Guid;
	public var BodySetup: cpp.Star<BodySetup>;
	public var PhysicsAsset: cpp.Star<PhysicsAsset>;
	public var ShadowPhysicsAsset: cpp.Star<PhysicsAsset>;
	public var NodeMappingData: TArray<cpp.Star<NodeMappingContainer>>;
	public var AssetImportData: cpp.Star<AssetImportData>;
	public var SourceFilePath_DEPRECATED: FString;
	public var SourceFileTimestamp_DEPRECATED: FString;
	public var ThumbnailInfo: cpp.Star<ThumbnailInfo>;
	public var bHasCustomDefaultEditorCamera: Bool;
	public var DefaultEditorCameraLocation: Vector;
	public var DefaultEditorCameraRotation: Rotator;
	public var DefaultEditorCameraLookAt: Vector;
	public var DefaultEditorCameraOrthoZoom: cpp.Float32;
	public var PreviewAttachedAssetContainer: PreviewAssetAttachContainer;
	public var bSupportRayTracing: Bool;
	public var RayTracingMinLOD: cpp.Int32;
	public var ClothLODBiasMode: EClothLODBiasMode;
	public var MorphTargets: TArray<cpp.Star<MorphTarget>>;
	public var FloorOffset: cpp.Float32;
	public var RetargetBasePose: TArray<Transform>;
	public var ClothingAssets_DEPRECATED: TArray<ClothingAssetData_Legacy>;
	public var PostProcessAnimBlueprint: TSubclassOf<AnimInstance>;
	public var MeshClothingAssets: TArray<cpp.Star<ClothingAssetBase>>;
	public var SamplingInfo: SkeletalMeshSamplingInfo;
	public var AssetUserData: TArray<cpp.Star<AssetUserData>>;
	public var Sockets: TArray<cpp.Star<SkeletalMeshSocket>>;
	public var SkinWeightProfiles: TArray<SkinWeightProfileInfo>;

	public function SetSkeleton(InSkeleton: cpp.Star<Skeleton>): Void;
	public function SetMorphTargets(InMorphTargets: cpp.Reference<TArray<cpp.Star<MorphTarget>>>): Void;
	public function SetMeshClothingAssets(InMeshClothingAssets: cpp.Reference<TArray<cpp.Star<ClothingAssetBase>>>): Void;
	public function SetMaterials(InMaterials: cpp.Reference<TArray<SkeletalMaterial>>): Void;
	public function SetLODSettings(InLODSettings: cpp.Star<SkeletalMeshLODSettings>): Void;
	public function SetDefaultAnimatingRig(InAnimatingRig: TSoftObjectPtr<Object>): Void;
	public function NumSockets(): cpp.Reference<cpp.Int32>;
	public function K2_GetAllMorphTargetNames(): cpp.Reference<TArray<FString>>;
	public function IsSectionUsingCloth(InSectionIndex: cpp.Int32, bCheckCorrespondingSections: Bool): cpp.Reference<Bool>;
	public function GetSocketByIndex(Index: cpp.Int32): cpp.Reference<cpp.Star<SkeletalMeshSocket>>;
	public function GetSkeleton(): cpp.Reference<cpp.Star<Skeleton.ConstSkeleton>>;
	public function GetShadowPhysicsAsset(): cpp.Reference<cpp.Star<PhysicsAsset>>;
	public function GetPhysicsAsset(): cpp.Reference<cpp.Star<PhysicsAsset>>;
	public function GetNodeMappingData(): cpp.Reference<TArray<cpp.Star<NodeMappingContainer>>>;
	public function GetNodeMappingContainer(SourceAsset: cpp.Star<Blueprint>): cpp.Reference<cpp.Star<NodeMappingContainer>>;
	public function GetMorphTargets(): cpp.Reference<TArray<cpp.Star<MorphTarget>>>;
	public function GetMeshClothingAssets(): cpp.Reference<TArray<cpp.Star<ClothingAssetBase>>>;
	public function GetMaterials(): cpp.Reference<TArray<SkeletalMaterial>>;
	public function GetLODSettings(): cpp.Reference<cpp.Star<SkeletalMeshLODSettings.ConstSkeletalMeshLODSettings>>;
	public function GetImportedBounds(): cpp.Reference<BoxSphereBounds>;
	public function GetDefaultAnimatingRig(): cpp.Reference<TSoftObjectPtr<Object>>;
	public function GetBounds(): cpp.Reference<BoxSphereBounds>;
	public function FindSocketInfo(InSocketName: FName, OutTransform: cpp.Reference<Transform>, OutBoneIndex: cpp.Reference<cpp.Int32>, OutIndex: cpp.Reference<cpp.Int32>): cpp.Reference<cpp.Star<SkeletalMeshSocket>>;
	public function FindSocketAndIndex(InSocketName: FName, OutIndex: cpp.Reference<cpp.Int32>): cpp.Reference<cpp.Star<SkeletalMeshSocket>>;
	public function FindSocket(InSocketName: FName): cpp.Reference<cpp.Star<SkeletalMeshSocket>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	NumSockets, K2_GetAllMorphTargetNames, IsSectionUsingCloth, GetSocketByIndex, GetSkeleton,
	GetShadowPhysicsAsset, GetPhysicsAsset, GetNodeMappingData, GetNodeMappingContainer, GetMorphTargets,
	GetMeshClothingAssets, GetMaterials, GetLODSettings, GetImportedBounds, GetDefaultAnimatingRig,
	GetBounds, FindSocketInfo, FindSocketAndIndex, FindSocket
)
@:nativeGen
abstract ConstSkeletalMesh(SkeletalMesh) from SkeletalMesh {
	public extern var MeshEditorDataObject(get, never): cpp.Star<SkeletalMeshEditorData.ConstSkeletalMeshEditorData>;
	public inline extern function get_MeshEditorDataObject(): cpp.Star<SkeletalMeshEditorData.ConstSkeletalMeshEditorData> return this.MeshEditorDataObject;
	public extern var Skeleton(get, never): cpp.Star<Skeleton.ConstSkeleton>;
	public inline extern function get_Skeleton(): cpp.Star<Skeleton.ConstSkeleton> return this.Skeleton;
	public extern var ImportedBounds(get, never): BoxSphereBounds;
	public inline extern function get_ImportedBounds(): BoxSphereBounds return this.ImportedBounds;
	public extern var ExtendedBounds(get, never): BoxSphereBounds;
	public inline extern function get_ExtendedBounds(): BoxSphereBounds return this.ExtendedBounds;
	public extern var PositiveBoundsExtension(get, never): Vector;
	public inline extern function get_PositiveBoundsExtension(): Vector return this.PositiveBoundsExtension;
	public extern var NegativeBoundsExtension(get, never): Vector;
	public inline extern function get_NegativeBoundsExtension(): Vector return this.NegativeBoundsExtension;
	public extern var Materials(get, never): TArray<SkeletalMaterial>;
	public inline extern function get_Materials(): TArray<SkeletalMaterial> return this.Materials;
	public extern var SkelMirrorTable(get, never): TArray<BoneMirrorInfo>;
	public inline extern function get_SkelMirrorTable(): TArray<BoneMirrorInfo> return this.SkelMirrorTable;
	public extern var LODInfo(get, never): TArray<SkeletalMeshLODInfo>;
	public inline extern function get_LODInfo(): TArray<SkeletalMeshLODInfo> return this.LODInfo;
	public extern var MinLod(get, never): PerPlatformInt;
	public inline extern function get_MinLod(): PerPlatformInt return this.MinLod;
	public extern var DisableBelowMinLodStripping(get, never): PerPlatformBool;
	public inline extern function get_DisableBelowMinLodStripping(): PerPlatformBool return this.DisableBelowMinLodStripping;
	public extern var bOverrideLODStreamingSettings(get, never): Bool;
	public inline extern function get_bOverrideLODStreamingSettings(): Bool return this.bOverrideLODStreamingSettings;
	public extern var bSupportLODStreaming(get, never): PerPlatformBool;
	public inline extern function get_bSupportLODStreaming(): PerPlatformBool return this.bSupportLODStreaming;
	public extern var MaxNumStreamedLODs(get, never): PerPlatformInt;
	public inline extern function get_MaxNumStreamedLODs(): PerPlatformInt return this.MaxNumStreamedLODs;
	public extern var MaxNumOptionalLODs(get, never): PerPlatformInt;
	public inline extern function get_MaxNumOptionalLODs(): PerPlatformInt return this.MaxNumOptionalLODs;
	public extern var LODSettings(get, never): cpp.Star<SkeletalMeshLODSettings.ConstSkeletalMeshLODSettings>;
	public inline extern function get_LODSettings(): cpp.Star<SkeletalMeshLODSettings.ConstSkeletalMeshLODSettings> return this.LODSettings;
	public extern var DefaultAnimatingRig(get, never): TSoftObjectPtr<Object.ConstObject>;
	public inline extern function get_DefaultAnimatingRig(): TSoftObjectPtr<Object.ConstObject> return this.DefaultAnimatingRig;
	public extern var SkelMirrorAxis(get, never): EAxis;
	public inline extern function get_SkelMirrorAxis(): EAxis return this.SkelMirrorAxis;
	public extern var SkelMirrorFlipAxis(get, never): EAxis;
	public inline extern function get_SkelMirrorFlipAxis(): EAxis return this.SkelMirrorFlipAxis;
	public extern var bUseFullPrecisionUVs_DEPRECATED(get, never): Bool;
	public inline extern function get_bUseFullPrecisionUVs_DEPRECATED(): Bool return this.bUseFullPrecisionUVs_DEPRECATED;
	public extern var bUseHighPrecisionTangentBasis_DEPRECATED(get, never): Bool;
	public inline extern function get_bUseHighPrecisionTangentBasis_DEPRECATED(): Bool return this.bUseHighPrecisionTangentBasis_DEPRECATED;
	public extern var bHasBeenSimplified(get, never): Bool;
	public inline extern function get_bHasBeenSimplified(): Bool return this.bHasBeenSimplified;
	public extern var bHasVertexColors(get, never): Bool;
	public inline extern function get_bHasVertexColors(): Bool return this.bHasVertexColors;
	public extern var bEnablePerPolyCollision(get, never): Bool;
	public inline extern function get_bEnablePerPolyCollision(): Bool return this.bEnablePerPolyCollision;
	public extern var VertexColorGuid(get, never): Guid;
	public inline extern function get_VertexColorGuid(): Guid return this.VertexColorGuid;
	public extern var BodySetup(get, never): cpp.Star<BodySetup.ConstBodySetup>;
	public inline extern function get_BodySetup(): cpp.Star<BodySetup.ConstBodySetup> return this.BodySetup;
	public extern var PhysicsAsset(get, never): cpp.Star<PhysicsAsset.ConstPhysicsAsset>;
	public inline extern function get_PhysicsAsset(): cpp.Star<PhysicsAsset.ConstPhysicsAsset> return this.PhysicsAsset;
	public extern var ShadowPhysicsAsset(get, never): cpp.Star<PhysicsAsset.ConstPhysicsAsset>;
	public inline extern function get_ShadowPhysicsAsset(): cpp.Star<PhysicsAsset.ConstPhysicsAsset> return this.ShadowPhysicsAsset;
	public extern var NodeMappingData(get, never): TArray<cpp.Star<NodeMappingContainer.ConstNodeMappingContainer>>;
	public inline extern function get_NodeMappingData(): TArray<cpp.Star<NodeMappingContainer.ConstNodeMappingContainer>> return this.NodeMappingData;
	public extern var AssetImportData(get, never): cpp.Star<AssetImportData.ConstAssetImportData>;
	public inline extern function get_AssetImportData(): cpp.Star<AssetImportData.ConstAssetImportData> return this.AssetImportData;
	public extern var SourceFilePath_DEPRECATED(get, never): FString;
	public inline extern function get_SourceFilePath_DEPRECATED(): FString return this.SourceFilePath_DEPRECATED;
	public extern var SourceFileTimestamp_DEPRECATED(get, never): FString;
	public inline extern function get_SourceFileTimestamp_DEPRECATED(): FString return this.SourceFileTimestamp_DEPRECATED;
	public extern var ThumbnailInfo(get, never): cpp.Star<ThumbnailInfo.ConstThumbnailInfo>;
	public inline extern function get_ThumbnailInfo(): cpp.Star<ThumbnailInfo.ConstThumbnailInfo> return this.ThumbnailInfo;
	public extern var bHasCustomDefaultEditorCamera(get, never): Bool;
	public inline extern function get_bHasCustomDefaultEditorCamera(): Bool return this.bHasCustomDefaultEditorCamera;
	public extern var DefaultEditorCameraLocation(get, never): Vector;
	public inline extern function get_DefaultEditorCameraLocation(): Vector return this.DefaultEditorCameraLocation;
	public extern var DefaultEditorCameraRotation(get, never): Rotator;
	public inline extern function get_DefaultEditorCameraRotation(): Rotator return this.DefaultEditorCameraRotation;
	public extern var DefaultEditorCameraLookAt(get, never): Vector;
	public inline extern function get_DefaultEditorCameraLookAt(): Vector return this.DefaultEditorCameraLookAt;
	public extern var DefaultEditorCameraOrthoZoom(get, never): cpp.Float32;
	public inline extern function get_DefaultEditorCameraOrthoZoom(): cpp.Float32 return this.DefaultEditorCameraOrthoZoom;
	public extern var PreviewAttachedAssetContainer(get, never): PreviewAssetAttachContainer;
	public inline extern function get_PreviewAttachedAssetContainer(): PreviewAssetAttachContainer return this.PreviewAttachedAssetContainer;
	public extern var bSupportRayTracing(get, never): Bool;
	public inline extern function get_bSupportRayTracing(): Bool return this.bSupportRayTracing;
	public extern var RayTracingMinLOD(get, never): cpp.Int32;
	public inline extern function get_RayTracingMinLOD(): cpp.Int32 return this.RayTracingMinLOD;
	public extern var ClothLODBiasMode(get, never): EClothLODBiasMode;
	public inline extern function get_ClothLODBiasMode(): EClothLODBiasMode return this.ClothLODBiasMode;
	public extern var MorphTargets(get, never): TArray<cpp.Star<MorphTarget.ConstMorphTarget>>;
	public inline extern function get_MorphTargets(): TArray<cpp.Star<MorphTarget.ConstMorphTarget>> return this.MorphTargets;
	public extern var FloorOffset(get, never): cpp.Float32;
	public inline extern function get_FloorOffset(): cpp.Float32 return this.FloorOffset;
	public extern var RetargetBasePose(get, never): TArray<Transform>;
	public inline extern function get_RetargetBasePose(): TArray<Transform> return this.RetargetBasePose;
	public extern var ClothingAssets_DEPRECATED(get, never): TArray<ClothingAssetData_Legacy>;
	public inline extern function get_ClothingAssets_DEPRECATED(): TArray<ClothingAssetData_Legacy> return this.ClothingAssets_DEPRECATED;
	public extern var PostProcessAnimBlueprint(get, never): TSubclassOf<AnimInstance.ConstAnimInstance>;
	public inline extern function get_PostProcessAnimBlueprint(): TSubclassOf<AnimInstance.ConstAnimInstance> return this.PostProcessAnimBlueprint;
	public extern var MeshClothingAssets(get, never): TArray<cpp.Star<ClothingAssetBase.ConstClothingAssetBase>>;
	public inline extern function get_MeshClothingAssets(): TArray<cpp.Star<ClothingAssetBase.ConstClothingAssetBase>> return this.MeshClothingAssets;
	public extern var SamplingInfo(get, never): SkeletalMeshSamplingInfo;
	public inline extern function get_SamplingInfo(): SkeletalMeshSamplingInfo return this.SamplingInfo;
	public extern var AssetUserData(get, never): TArray<cpp.Star<AssetUserData.ConstAssetUserData>>;
	public inline extern function get_AssetUserData(): TArray<cpp.Star<AssetUserData.ConstAssetUserData>> return this.AssetUserData;
	public extern var Sockets(get, never): TArray<cpp.Star<SkeletalMeshSocket.ConstSkeletalMeshSocket>>;
	public inline extern function get_Sockets(): TArray<cpp.Star<SkeletalMeshSocket.ConstSkeletalMeshSocket>> return this.Sockets;
	public extern var SkinWeightProfiles(get, never): TArray<SkinWeightProfileInfo>;
	public inline extern function get_SkinWeightProfiles(): TArray<SkinWeightProfileInfo> return this.SkinWeightProfiles;
}

@:forward
@:nativeGen
@:native("SkeletalMesh*")
abstract SkeletalMeshPtr(cpp.Star<SkeletalMesh>) from cpp.Star<SkeletalMesh> to cpp.Star<SkeletalMesh>{
	@:from
	public static extern inline function fromValue(v: SkeletalMesh): SkeletalMeshPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SkeletalMesh {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}