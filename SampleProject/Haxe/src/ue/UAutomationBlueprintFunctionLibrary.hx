// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAutomationBlueprintFunctionLibrary")
@:include("AutomationBlueprintFunctionLibrary.h")
extern class UAutomationBlueprintFunctionLibrary extends UBlueprintFunctionLibrary {

	public function TakeHighResScreenshot(ResX: cpp.Int32, ResY: cpp.Int32, Filename: FString, Camera: cpp.Star<ACameraActor>, bMaskEnabled: Bool, bCaptureHDR: Bool, ComparisonTolerance: EComparisonTolerance, ComparisonNotes: FString, Delay: cpp.Float32): cpp.Star<UAutomationEditorTask>;
	public function TakeAutomationScreenshotOfUI(WorldContextObject: cpp.Star<UObject>, LatentInfo: FLatentActionInfo, Name: FString, Options: FAutomationScreenshotOptions): Void;
	public function TakeAutomationScreenshotAtCamera(WorldContextObject: cpp.Star<UObject>, LatentInfo: FLatentActionInfo, Camera: cpp.Star<ACameraActor>, NameOverride: FString, Notes: FString, Options: FAutomationScreenshotOptions): Void;
	public function TakeAutomationScreenshot(WorldContextObject: cpp.Star<UObject>, LatentInfo: FLatentActionInfo, Name: FString, Notes: FString, Options: FAutomationScreenshotOptions): Void;
	public function SetTestTelemetryStorage(StorageName: FString): Void;
	public function SetScalabilityQualityToLow(WorldContextObject: cpp.Star<UObject>): Void;
	public function SetScalabilityQualityToEpic(WorldContextObject: cpp.Star<UObject>): Void;
	public function SetScalabilityQualityLevelRelativeToMax(WorldContextObject: cpp.Star<UObject>, Value: cpp.Int32): Void;
	public function GetStatIncMax(StatName: FName): cpp.Float32;
	public function GetStatIncAverage(StatName: FName): cpp.Float32;
	public function GetStatExcMax(StatName: FName): cpp.Float32;
	public function GetStatExcAverage(StatName: FName): cpp.Float32;
	public function GetStatCallCount(StatName: FName): cpp.Float32;
	public function GetDefaultScreenshotOptionsForRendering(Tolerance: EComparisonTolerance, Delay: cpp.Float32): FAutomationScreenshotOptions;
	public function GetDefaultScreenshotOptionsForGameplay(Tolerance: EComparisonTolerance, Delay: cpp.Float32): FAutomationScreenshotOptions;
	public function FinishLoadingBeforeScreenshot(): Void;
	public function EnableStatGroup(WorldContextObject: cpp.Star<UObject>, GroupName: FName): Void;
	public function DisableStatGroup(WorldContextObject: cpp.Star<UObject>, GroupName: FName): Void;
	public function CompareImageAgainstReference(ImageFilePath: FString, ComparisonName: FString, ComparisonTolerance: EComparisonTolerance, ComparisonNotes: FString, WorldContextObject: cpp.Star<UObject>): Bool;
	public function AutomationWaitForLoading(WorldContextObject: cpp.Star<UObject>, LatentInfo: FLatentActionInfo, Options: FAutomationWaitForLoadingOptions): Void;
	public function AreAutomatedTestsRunning(): Bool;
	public function AddTestTelemetryData(DataPoint: FString, Measurement: cpp.Float32, Context: FString): Void;
	public function AddExpectedLogError(ExpectedPatternString: FString, Occurrences: cpp.Int32, ExactMatch: Bool): Void;
}
