// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditableTextBox")
@:include("Components/EditableTextBox.h")
extern class UEditableTextBox extends UWidget {
	public var Text: FText;
	public var TextDelegate: HaxeDelegateProperty<() -> Void>;
	public var WidgetStyle: FEditableTextBoxStyle;
	public var Style_DEPRECATED: TObjectPtr<USlateWidgetStyleAsset>;
	public var HintText: FText;
	public var HintTextDelegate: HaxeDelegateProperty<() -> Void>;
	public var Font_DEPRECATED: FSlateFontInfo;
	public var ForegroundColor_DEPRECATED: FLinearColor;
	public var BackgroundColor_DEPRECATED: FLinearColor;
	public var ReadOnlyForegroundColor_DEPRECATED: FLinearColor;
	public var IsReadOnly: Bool;
	public var IsPassword: Bool;
	public var MinimumDesiredWidth: cpp.Float32;
	public var Padding_DEPRECATED: FMargin;
	public var IsCaretMovedWhenGainFocus: Bool;
	public var SelectAllTextWhenFocused: Bool;
	public var RevertTextOnEscape: Bool;
	public var ClearKeyboardFocusOnCommit: Bool;
	public var SelectAllTextOnCommit: Bool;
	public var AllowContextMenu: Bool;
	public var KeyboardType: EVirtualKeyboardType;
	public var VirtualKeyboardOptions: FVirtualKeyboardOptions;
	public var VirtualKeyboardTrigger: EVirtualKeyboardTrigger;
	public var VirtualKeyboardDismissAction: EVirtualKeyboardDismissAction;
	public var Justification: ETextJustify;
	public var OverflowPolicy: ETextOverflowPolicy;
	public var ShapedTextOptions: FShapedTextOptions;
	public var OnTextChanged: HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>) -> Void>;
	public var OnTextCommitted: HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>, ETextCommit) -> Void>;

	public function SetTextOverflowPolicy(InOverflowPolicy: ETextOverflowPolicy): Void;
	public function SetText(InText: FText): Void;
	public function SetJustification(InJustification: ETextJustify): Void;
	public function SetIsReadOnly(bReadOnly: Bool): Void;
	public function SetIsPassword(bIsPassword: Bool): Void;
	public function SetHintText(InText: FText): Void;
	public function SetForegroundColor(color: FLinearColor): Void;
	public function SetError(InError: FText): Void;
	public function OnEditableTextBoxCommittedEvent__DelegateSignature(Text: cpp.Reference<FText>, CommitMethod: ETextCommit): Void;
	public function OnEditableTextBoxChangedEvent__DelegateSignature(Text: cpp.Reference<FText>): Void;
	public function HasError(): Bool;
	public function GetText(): FText;
	public function ClearError(): Void;
}
