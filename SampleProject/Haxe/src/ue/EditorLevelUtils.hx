// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditorLevelUtils")
@:include("EditorLevelUtils.h")
@:valueType
extern class EditorLevelUtils extends Object {
	public function SetLevelVisibility(Level: ucpp.Ptr<Level>, bShouldBeVisible: Bool, bForceLayersVisible: Bool, ModifyMode: ELevelVisibilityDirtyMode): Void;
	public function SetLevelsVisibility(Levels: ucpp.Ref<TArray<ucpp.Ptr<Level>>>, bShouldBeVisible: ucpp.Ref<TArray<Bool>>, bForceLayersVisible: Bool, ModifyMode: ELevelVisibilityDirtyMode): Void;
	public function MoveSelectedActorsToLevel(DestLevel: ucpp.Ptr<LevelStreaming>, bWarnAboutReferences: Bool): ucpp.num.Int32;
	public function MoveActorsToLevel(ActorsToMove: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, DestStreamingLevel: ucpp.Ptr<LevelStreaming>, bWarnAboutReferences: Bool, bWarnAboutRenaming: Bool): ucpp.num.Int32;
	public function MakeLevelCurrent(InStreamingLevel: ucpp.Ptr<LevelStreaming>): Void;
	public function K2_AddLevelToWorldWithTransform(World: ucpp.Ptr<World>, LevelPackageName: FString, LevelStreamingClass: TSubclassOf<LevelStreaming>, LevelTransform: ucpp.Ref<Transform>): ucpp.Ptr<LevelStreaming>;
	public function K2_AddLevelToWorld(World: ucpp.Ptr<World>, LevelPackageName: FString, LevelStreamingClass: TSubclassOf<LevelStreaming>): ucpp.Ptr<LevelStreaming>;
	public function GetLevels(World: ucpp.Ptr<World>): TArray<ucpp.Ptr<Level>>;
	public function CreateNewStreamingLevel(LevelStreamingClass: TSubclassOf<LevelStreaming>, NewLevelPath: FString, bMoveSelectedActorsIntoNewLevel: Bool): ucpp.Ptr<LevelStreaming>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstEditorLevelUtils(EditorLevelUtils) from EditorLevelUtils {
}

@:forward
@:nativeGen
@:native("EditorLevelUtils*")
abstract EditorLevelUtilsPtr(ucpp.Ptr<EditorLevelUtils>) from ucpp.Ptr<EditorLevelUtils> to ucpp.Ptr<EditorLevelUtils>{
	@:from
	public static extern inline function fromValue(v: EditorLevelUtils): EditorLevelUtilsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EditorLevelUtils {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}