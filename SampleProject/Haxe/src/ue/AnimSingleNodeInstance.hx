// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimSingleNodeInstance")
@:include("Animation/AnimSingleNodeInstance.h")
@:structAccess
extern class AnimSingleNodeInstance extends AnimInstance {
	public var CurrentAsset: cpp.Star<AnimationAsset>;
	public var PostEvaluateAnimEvent: HaxeDelegateProperty<() -> Void>;

	public function StopAnim(): Void;
	public function SetReverse(bInReverse: Bool): Void;
	public function SetPreviewCurveOverride(PoseName: cpp.Reference<FName>, Value: cpp.Float32, bRemoveIfZero: Bool): Void;
	public function SetPositionWithPreviousTime(InPosition: cpp.Float32, InPreviousTime: cpp.Float32, bFireNotifies: Bool): Void;
	public function SetPosition(InPosition: cpp.Float32, bFireNotifies: Bool): Void;
	public function SetPlayRate(InPlayRate: cpp.Float32): Void;
	public function SetPlaying(bIsPlaying: Bool): Void;
	public function SetMirrorDataTable(MirrorDataTable: cpp.Star<MirrorDataTable.ConstMirrorDataTable>): Void;
	public function SetLooping(bIsLooping: Bool): Void;
	public function SetBlendSpacePosition(InPosition: cpp.Reference<Vector>): Void;
	public function SetAnimationAsset(NewAsset: cpp.Star<AnimationAsset>, bIsLooping: Bool, InPlayRate: cpp.Float32): Void;
	public function PlayAnim(bIsLooping: Bool, InPlayRate: cpp.Float32, InStartPosition: cpp.Float32): Void;
	public function GetMirrorDataTable(): cpp.Reference<cpp.Star<MirrorDataTable.ConstMirrorDataTable>>;
	public function GetLength(): cpp.Reference<cpp.Float32>;
	public function GetAnimationAsset(): cpp.Reference<cpp.Star<AnimationAsset>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetAnimationAsset)
@:nativeGen
abstract ConstAnimSingleNodeInstance(AnimSingleNodeInstance) from AnimSingleNodeInstance {
	public extern var CurrentAsset(get, never): cpp.Star<AnimationAsset.ConstAnimationAsset>;
	public inline extern function get_CurrentAsset(): cpp.Star<AnimationAsset.ConstAnimationAsset> return this.CurrentAsset;
	public extern var PostEvaluateAnimEvent(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_PostEvaluateAnimEvent(): HaxeDelegateProperty<() -> Void> return this.PostEvaluateAnimEvent;
}

@:forward
@:nativeGen
@:native("AnimSingleNodeInstance*")
abstract AnimSingleNodeInstancePtr(cpp.Star<AnimSingleNodeInstance>) from cpp.Star<AnimSingleNodeInstance> to cpp.Star<AnimSingleNodeInstance>{
	@:from
	public static extern inline function fromValue(v: AnimSingleNodeInstance): AnimSingleNodeInstancePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimSingleNodeInstance {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}