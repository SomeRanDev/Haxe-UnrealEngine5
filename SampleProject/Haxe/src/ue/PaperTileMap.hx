// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPaperTileMap")
@:include("PaperTileMap.h")
@:structAccess
extern class PaperTileMap extends Object {
	public var MapWidth: cpp.Int32;
	public var MapHeight: cpp.Int32;
	public var TileWidth: cpp.Int32;
	public var TileHeight: cpp.Int32;
	public var PixelsPerUnrealUnit: cpp.Float32;
	public var SeparationPerTileX: cpp.Float32;
	public var SeparationPerTileY: cpp.Float32;
	public var SeparationPerLayer: cpp.Float32;
	public var SelectedTileSet: TSoftObjectPtr<PaperTileSet>;
	public var Material: cpp.Star<MaterialInterface>;
	public var TileLayers: TArray<cpp.Star<PaperTileLayer>>;
	@:protected public var CollisionThickness: cpp.Float32;
	@:protected public var SpriteCollisionDomain: TEnumAsByte<ESpriteCollisionMode>;
	public var ProjectionMode: TEnumAsByte<ETileMapProjectionMode>;
	public var HexSideLength: cpp.Int32;
	public var BodySetup: cpp.Star<BodySetup>;
	public var LayerNameIndex: cpp.Int32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstPaperTileMap(PaperTileMap) from PaperTileMap {
	public extern var MapWidth(get, never): cpp.Int32;
	public inline extern function get_MapWidth(): cpp.Int32 return this.MapWidth;
	public extern var MapHeight(get, never): cpp.Int32;
	public inline extern function get_MapHeight(): cpp.Int32 return this.MapHeight;
	public extern var TileWidth(get, never): cpp.Int32;
	public inline extern function get_TileWidth(): cpp.Int32 return this.TileWidth;
	public extern var TileHeight(get, never): cpp.Int32;
	public inline extern function get_TileHeight(): cpp.Int32 return this.TileHeight;
	public extern var PixelsPerUnrealUnit(get, never): cpp.Float32;
	public inline extern function get_PixelsPerUnrealUnit(): cpp.Float32 return this.PixelsPerUnrealUnit;
	public extern var SeparationPerTileX(get, never): cpp.Float32;
	public inline extern function get_SeparationPerTileX(): cpp.Float32 return this.SeparationPerTileX;
	public extern var SeparationPerTileY(get, never): cpp.Float32;
	public inline extern function get_SeparationPerTileY(): cpp.Float32 return this.SeparationPerTileY;
	public extern var SeparationPerLayer(get, never): cpp.Float32;
	public inline extern function get_SeparationPerLayer(): cpp.Float32 return this.SeparationPerLayer;
	public extern var SelectedTileSet(get, never): TSoftObjectPtr<PaperTileSet.ConstPaperTileSet>;
	public inline extern function get_SelectedTileSet(): TSoftObjectPtr<PaperTileSet.ConstPaperTileSet> return this.SelectedTileSet;
	public extern var Material(get, never): cpp.Star<MaterialInterface.ConstMaterialInterface>;
	public inline extern function get_Material(): cpp.Star<MaterialInterface.ConstMaterialInterface> return this.Material;
	public extern var TileLayers(get, never): TArray<cpp.Star<PaperTileLayer.ConstPaperTileLayer>>;
	public inline extern function get_TileLayers(): TArray<cpp.Star<PaperTileLayer.ConstPaperTileLayer>> return this.TileLayers;
	public extern var ProjectionMode(get, never): TEnumAsByte<ETileMapProjectionMode>;
	public inline extern function get_ProjectionMode(): TEnumAsByte<ETileMapProjectionMode> return this.ProjectionMode;
	public extern var HexSideLength(get, never): cpp.Int32;
	public inline extern function get_HexSideLength(): cpp.Int32 return this.HexSideLength;
	public extern var BodySetup(get, never): cpp.Star<BodySetup.ConstBodySetup>;
	public inline extern function get_BodySetup(): cpp.Star<BodySetup.ConstBodySetup> return this.BodySetup;
	public extern var LayerNameIndex(get, never): cpp.Int32;
	public inline extern function get_LayerNameIndex(): cpp.Int32 return this.LayerNameIndex;
}

@:forward
@:nativeGen
@:native("PaperTileMap*")
abstract PaperTileMapPtr(cpp.Star<PaperTileMap>) from cpp.Star<PaperTileMap> to cpp.Star<PaperTileMap>{
	@:from
	public static extern inline function fromValue(v: PaperTileMap): PaperTileMapPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PaperTileMap {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}