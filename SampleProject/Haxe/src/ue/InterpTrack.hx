// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterpTrack")
@:include("Matinee/InterpTrack.h")
@:structAccess
extern class InterpTrack extends Object {
	public var SubTracks: TArray<cpp.Star<InterpTrack>>;
	public var TrackInstClass: TSubclassOf<InterpTrackInst>;
	public var ActiveCondition: TEnumAsByte<ETrackActiveCondition>;
	public var TrackTitle: FString;
	public var bOnePerGroup: Bool;
	public var bDirGroupOnly: Bool;
	private var bDisableTrack: Bool;
	private var bIsSelected: Bool;
	public var bIsAnimControlTrack: Bool;
	public var bSubTrackOnly: Bool;
	public var bVisible: Bool;
	public var bIsRecording: Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstInterpTrack(InterpTrack) from InterpTrack {
	public extern var SubTracks(get, never): TArray<cpp.Star<InterpTrack.ConstInterpTrack>>;
	public inline extern function get_SubTracks(): TArray<cpp.Star<InterpTrack.ConstInterpTrack>> return this.SubTracks;
	public extern var TrackInstClass(get, never): TSubclassOf<InterpTrackInst.ConstInterpTrackInst>;
	public inline extern function get_TrackInstClass(): TSubclassOf<InterpTrackInst.ConstInterpTrackInst> return this.TrackInstClass;
	public extern var ActiveCondition(get, never): TEnumAsByte<ETrackActiveCondition>;
	public inline extern function get_ActiveCondition(): TEnumAsByte<ETrackActiveCondition> return this.ActiveCondition;
	public extern var TrackTitle(get, never): FString;
	public inline extern function get_TrackTitle(): FString return this.TrackTitle;
	public extern var bOnePerGroup(get, never): Bool;
	public inline extern function get_bOnePerGroup(): Bool return this.bOnePerGroup;
	public extern var bDirGroupOnly(get, never): Bool;
	public inline extern function get_bDirGroupOnly(): Bool return this.bDirGroupOnly;
	public extern var bIsAnimControlTrack(get, never): Bool;
	public inline extern function get_bIsAnimControlTrack(): Bool return this.bIsAnimControlTrack;
	public extern var bSubTrackOnly(get, never): Bool;
	public inline extern function get_bSubTrackOnly(): Bool return this.bSubTrackOnly;
	public extern var bVisible(get, never): Bool;
	public inline extern function get_bVisible(): Bool return this.bVisible;
	public extern var bIsRecording(get, never): Bool;
	public inline extern function get_bIsRecording(): Bool return this.bIsRecording;
}

@:forward
@:nativeGen
@:native("InterpTrack*")
abstract InterpTrackPtr(cpp.Star<InterpTrack>) from cpp.Star<InterpTrack> to cpp.Star<InterpTrack>{
	@:from
	public static extern inline function fromValue(v: InterpTrack): InterpTrackPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterpTrack {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}