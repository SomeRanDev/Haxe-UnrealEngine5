// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AVREditorTeleporter")
@:include("Teleporter/VREditorTeleporter.h")
@:structAccess
extern class VREditorTeleporter extends Actor {
	private var VRMode: cpp.Star<VREditorMode>;
	private var TeleportDirectionMeshComponent: cpp.Star<StaticMeshComp>;
	private var HMDMeshComponent: cpp.Star<StaticMeshComp>;
	private var LeftMotionControllerMeshComponent: cpp.Star<StaticMeshComp>;
	private var RightMotionControllerMeshComponent: cpp.Star<StaticMeshComp>;
	private var TeleportMID: cpp.Star<MaterialInstanceDynamic>;
	private var InteractorTryingTeleport: cpp.Star<ViewportInteractor>;

	public function TeleportDone(): Void;
	private function StopAiming(): Void;
	public function StartTeleport(): Void;
	private function StartAiming(Interactor: cpp.Star<ViewportInteractor>): Void;
	public function Shutdown(): Void;
	public function SetVisibility(bVisible: Bool): Void;
	public function SetColor(Color: cpp.Reference<LinearColor>): Void;
	public function IsTeleporting(): Bool;
	public function IsAiming(): Bool;
	public function Init(InMode: cpp.Star<VREditorMode>): Void;
	public function GetVRMode(): cpp.Star<VREditorMode>;
	public function GetSlideDelta(Interactor: cpp.Star<VREditorInteractor>, Axis: Bool): cpp.Float32;
	private function GetInteractorTryingTeleport(): cpp.Star<ViewportInteractor>;
	private function DoTeleport(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsTeleporting, IsAiming, GetVRMode, GetInteractorTryingTeleport)
@:nativeGen
abstract ConstVREditorTeleporter(VREditorTeleporter) from VREditorTeleporter {
}

@:forward
@:nativeGen
@:native("VREditorTeleporter*")
abstract VREditorTeleporterPtr(cpp.Star<VREditorTeleporter>) from cpp.Star<VREditorTeleporter> to cpp.Star<VREditorTeleporter>{
	@:from
	public static extern inline function fromValue(v: VREditorTeleporter): VREditorTeleporterPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): VREditorTeleporter {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}