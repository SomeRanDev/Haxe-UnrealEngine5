// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimationDataController")
@:valueType
extern class AnimationDataController extends Interface {
	public function UpdateCurveNamesFromSkeleton(Skeleton: ucpp.Ptr<Skeleton.ConstSkeleton>, SupportedCurveType: ERawCurveTrackTypes, bShouldTransact: Bool): Void;
	public function SetTransformCurveKeys(CurveId: ucpp.Ref<AnimationCurveIdentifier>, TransformValues: ucpp.Ref<TArray<Transform>>, TimeKeys: ucpp.Ref<TArray<ucpp.num.Float32>>, bShouldTransact: Bool): Bool;
	public function SetTransformCurveKey(CurveId: ucpp.Ref<AnimationCurveIdentifier>, Time: ucpp.num.Float32, Value: ucpp.Ref<Transform>, bShouldTransact: Bool): Bool;
	public function SetPlayLength(Length: ucpp.num.Float32, bShouldTransact: Bool): Void;
	public function SetNumberOfFrames(NewLengthInFrames: FrameNumber, bShouldTransact: Bool): Void;
	public function SetModel(InModel: AnimationDataModel): Void;
	public function SetFrameRate(FrameRate: FrameRate, bShouldTransact: Bool): Void;
	public function SetCurveKeys(CurveId: ucpp.Ref<AnimationCurveIdentifier>, CurveKeys: ucpp.Ref<TArray<RichCurveKey>>, bShouldTransact: Bool): Bool;
	public function SetCurveKey(CurveId: ucpp.Ref<AnimationCurveIdentifier>, Key: ucpp.Ref<RichCurveKey>, bShouldTransact: Bool): Bool;
	public function SetCurveFlags(CurveId: ucpp.Ref<AnimationCurveIdentifier>, Flags: ucpp.num.Int32, bShouldTransact: Bool): Bool;
	public function SetCurveFlag(CurveId: ucpp.Ref<AnimationCurveIdentifier>, Flag: TEnumAsByte<EAnimAssetCurveFlags>, bState: Bool, bShouldTransact: Bool): Bool;
	public function SetCurveColor(CurveId: ucpp.Ref<AnimationCurveIdentifier>, Color: LinearColor, bShouldTransact: Bool): Bool;
	public function SetBoneTrackKeys(BoneName: FName, PositionalKeys: ucpp.Ref<TArray<Vector>>, RotationalKeys: ucpp.Ref<TArray<Quat>>, ScalingKeys: ucpp.Ref<TArray<Vector>>, bShouldTransact: Bool): Bool;
	public function ScaleCurve(CurveId: ucpp.Ref<AnimationCurveIdentifier>, Origin: ucpp.num.Float32, Factor: ucpp.num.Float32, bShouldTransact: Bool): Bool;
	public function ResizePlayLength(NewLength: ucpp.num.Float32, T0: ucpp.num.Float32, T1: ucpp.num.Float32, bShouldTransact: Bool): Void;
	public function ResizeNumberOfFrames(NewLengthInFrames: FrameNumber, T0: FrameNumber, T1: FrameNumber, bShouldTransact: Bool): Void;
	public function ResizeInFrames(NewLengthInFrames: FrameNumber, T0: FrameNumber, T1: FrameNumber, bShouldTransact: Bool): Void;
	public function Resize(Length: ucpp.num.Float32, T0: ucpp.num.Float32, T1: ucpp.num.Float32, bShouldTransact: Bool): Void;
	public function RenameCurve(CurveToRenameId: ucpp.Ref<AnimationCurveIdentifier>, NewCurveId: ucpp.Ref<AnimationCurveIdentifier>, bShouldTransact: Bool): Bool;
	public function RemoveTransformCurveKey(CurveId: ucpp.Ref<AnimationCurveIdentifier>, Time: ucpp.num.Float32, bShouldTransact: Bool): Bool;
	public function RemoveCurveKey(CurveId: ucpp.Ref<AnimationCurveIdentifier>, Time: ucpp.num.Float32, bShouldTransact: Bool): Bool;
	public function RemoveCurve(CurveId: ucpp.Ref<AnimationCurveIdentifier>, bShouldTransact: Bool): Bool;
	public function RemoveBoneTrack(BoneName: FName, bShouldTransact: Bool): Bool;
	public function RemoveAttributeKey(AttributeIdentifier: ucpp.Ref<AnimationAttributeIdentifier>, Time: ucpp.num.Float32, bShouldTransact: Bool): Bool;
	public function RemoveAttribute(AttributeIdentifier: ucpp.Ref<AnimationAttributeIdentifier>, bShouldTransact: Bool): Bool;
	public function RemoveAllCurvesOfType(SupportedCurveType: ERawCurveTrackTypes, bShouldTransact: Bool): Void;
	public function RemoveAllBoneTracks(bShouldTransact: Bool): Void;
	public function RemoveAllAttributesForBone(BoneName: ucpp.Ref<FName>, bShouldTransact: Bool): ucpp.num.Int32;
	public function RemoveAllAttributes(bShouldTransact: Bool): ucpp.num.Int32;
	public function OpenBracket(InTitle: ucpp.Ref<FText>, bShouldTransact: Bool): Void;
	public function InsertBoneTrack(BoneName: FName, DesiredIndex: ucpp.num.Int32, bShouldTransact: Bool): ucpp.num.Int32;
	public function GetModelInterface(): AnimationDataModel;
	public function FindOrAddCurveNamesOnSkeleton(Skeleton: ucpp.Ptr<Skeleton>, SupportedCurveType: ERawCurveTrackTypes, bShouldTransact: Bool): Void;
	public function DuplicateCurve(CopyCurveId: ucpp.Ref<AnimationCurveIdentifier>, NewCurveId: ucpp.Ref<AnimationCurveIdentifier>, bShouldTransact: Bool): Bool;
	public function DuplicateAttribute(AttributeIdentifier: ucpp.Ref<AnimationAttributeIdentifier>, NewAttributeIdentifier: ucpp.Ref<AnimationAttributeIdentifier>, bShouldTransact: Bool): Bool;
	public function CloseBracket(bShouldTransact: Bool): Void;
	public function AddCurve(CurveId: ucpp.Ref<AnimationCurveIdentifier>, CurveFlags: ucpp.num.Int32, bShouldTransact: Bool): Bool;
	public function AddBoneTrack(BoneName: FName, bShouldTransact: Bool): ucpp.num.Int32;
	public function AddBoneCurve(BoneName: FName, bShouldTransact: Bool): Bool;
	public function AddAttribute(AttributeIdentifier: ucpp.Ref<AnimationAttributeIdentifier>, bShouldTransact: Bool): Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetModelInterface)
@:nativeGen
abstract ConstAnimationDataController(AnimationDataController) from AnimationDataController {
}

@:forward
@:nativeGen
@:native("AnimationDataController*")
abstract AnimationDataControllerPtr(ucpp.Ptr<AnimationDataController>) from ucpp.Ptr<AnimationDataController> to ucpp.Ptr<AnimationDataController>{
	@:from
	public static extern inline function fromValue(v: AnimationDataController): AnimationDataControllerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimationDataController {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}