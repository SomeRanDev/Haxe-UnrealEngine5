// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UDataTableFunctionLibrary")
@:include("Kismet/DataTableFunctionLibrary.h")
@:valueType
extern class DataTableFunctionLibrary extends BlueprintFunctionLibrary {
	public function GetDataTableRowNames(Table: ucpp.Ptr<DataTable>, OutRowNames: ucpp.Ref<TArray<FName>>): Void;
	public function GetDataTableRowFromName(Table: ucpp.Ptr<DataTable>, RowName: FName, OutRow: ucpp.Ref<TableRowBase>): Bool;
	public function GetDataTableColumnAsString(DataTable: ucpp.Ptr<DataTable.ConstDataTable>, PropertyName: FName): TArray<FString>;
	public function FillDataTableFromJSONString(DataTable: ucpp.Ptr<DataTable>, JSONString: FString): Bool;
	public function FillDataTableFromJSONFile(DataTable: ucpp.Ptr<DataTable>, JSONFilePath: FString, ImportRowStruct: ucpp.Ptr<ScriptStruct>): Bool;
	public function FillDataTableFromCSVString(DataTable: ucpp.Ptr<DataTable>, CSVString: FString): Bool;
	public function FillDataTableFromCSVFile(DataTable: ucpp.Ptr<DataTable>, CSVFilePath: FString): Bool;
	public function EvaluateCurveTableRow(CurveTable: ucpp.Ptr<CurveTable>, RowName: FName, InXY: ucpp.num.Float32, OutResult: ucpp.Ref<TEnumAsByte<EEvaluateCurveTableResult>>, OutXY: ucpp.Ref<ucpp.num.Float32>, ContextString: FString): Void;
	public function DoesDataTableRowExist(Table: ucpp.Ptr<DataTable>, RowName: FName): Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstDataTableFunctionLibrary(DataTableFunctionLibrary) from DataTableFunctionLibrary {
}

@:forward
@:nativeGen
@:native("DataTableFunctionLibrary*")
abstract DataTableFunctionLibraryPtr(ucpp.Ptr<DataTableFunctionLibrary>) from ucpp.Ptr<DataTableFunctionLibrary> to ucpp.Ptr<DataTableFunctionLibrary>{
	@:from
	public static extern inline function fromValue(v: DataTableFunctionLibrary): DataTableFunctionLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): DataTableFunctionLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}