// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UDataTableFunctionLibrary")
@:include("Kismet/DataTableFunctionLibrary.h")
@:structAccess
extern class DataTableFunctionLibrary extends BlueprintFunctionLibrary {
	public function GetDataTableRowNames(Table: cpp.Star<DataTable>, OutRowNames: cpp.Reference<TArray<FName>>): Void;
	public function GetDataTableRowFromName(Table: cpp.Star<DataTable>, RowName: FName, OutRow: cpp.Reference<TableRowBase>): cpp.Reference<Bool>;
	public function GetDataTableColumnAsString(DataTable: cpp.Star<DataTable.ConstDataTable>, PropertyName: FName): cpp.Reference<TArray<FString>>;
	public function FillDataTableFromJSONString(DataTable: cpp.Star<DataTable>, JSONString: FString): cpp.Reference<Bool>;
	public function FillDataTableFromJSONFile(DataTable: cpp.Star<DataTable>, JSONFilePath: FString, ImportRowStruct: cpp.Star<ScriptStruct>): cpp.Reference<Bool>;
	public function FillDataTableFromCSVString(DataTable: cpp.Star<DataTable>, CSVString: FString): cpp.Reference<Bool>;
	public function FillDataTableFromCSVFile(DataTable: cpp.Star<DataTable>, CSVFilePath: FString): cpp.Reference<Bool>;
	public function EvaluateCurveTableRow(CurveTable: cpp.Star<CurveTable>, RowName: FName, InXY: cpp.Float32, OutResult: cpp.Reference<EEvaluateCurveTableResult>, OutXY: cpp.Reference<cpp.Float32>, ContextString: FString): Void;
	public function DoesDataTableRowExist(Table: cpp.Star<DataTable>, RowName: FName): cpp.Reference<Bool>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstDataTableFunctionLibrary(DataTableFunctionLibrary) from DataTableFunctionLibrary {
}

@:forward
@:nativeGen
@:native("DataTableFunctionLibrary*")
abstract DataTableFunctionLibraryPtr(cpp.Star<DataTableFunctionLibrary>) from cpp.Star<DataTableFunctionLibrary> to cpp.Star<DataTableFunctionLibrary>{
	@:from
	public static extern inline function fromValue(v: DataTableFunctionLibrary): DataTableFunctionLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): DataTableFunctionLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}