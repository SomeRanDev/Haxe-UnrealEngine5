// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USkeleton")
@:include("Animation/Skeleton.h")
extern class Skeleton extends Object {
	public var BoneTree: TArray<BoneNode>;
	public var RefLocalPoses_DEPRECATED: TArray<Transform>;
	public var VirtualBoneGuid: Guid;
	public var VirtualBones: TArray<VirtualBone>;
	public var CompatibleSkeletons: TArray<TSoftObjectPtr<Skeleton>>;
	public var Sockets: TArray<cpp.Star<SkeletalMeshSocket>>;
	public var SmartNames: SmartNameContainer;
	public var BlendProfiles: TArray<cpp.Star<BlendProfile>>;
	public var SlotGroups: TArray<AnimSlotGroup>;
	public var PreviewSkeletalMesh: TSoftObjectPtr<SkeletalMesh>;
	public var AdditionalPreviewSkeletalMeshes: TSoftObjectPtr<DataAsset>;
	public var RigConfig: RigConfiguration;
	public var AnimationNotifies: TArray<FName>;
	public var PreviewAttachedAssetContainer: PreviewAssetAttachContainer;
	public var AssetUserData: TArray<cpp.Star<AssetUserData>>;

	public function GetBlendProfile(InProfileName: cpp.Reference<FName>): cpp.Reference<cpp.Star<BlendProfile>>;
	public function AddCompatibleSkeleton(SourceSkeleton: cpp.Star<Skeleton.ConstSkeleton>): Void;
}

@:forward()
@:nativeGen
abstract ConstSkeleton(Skeleton) from Skeleton {
	public extern var BoneTree(get, never): TArray<BoneNode>;
	public inline extern function get_BoneTree(): TArray<BoneNode> return this.BoneTree;
	public extern var RefLocalPoses_DEPRECATED(get, never): TArray<Transform>;
	public inline extern function get_RefLocalPoses_DEPRECATED(): TArray<Transform> return this.RefLocalPoses_DEPRECATED;
	public extern var VirtualBoneGuid(get, never): Guid;
	public inline extern function get_VirtualBoneGuid(): Guid return this.VirtualBoneGuid;
	public extern var VirtualBones(get, never): TArray<VirtualBone>;
	public inline extern function get_VirtualBones(): TArray<VirtualBone> return this.VirtualBones;
	public extern var CompatibleSkeletons(get, never): TArray<TSoftObjectPtr<Skeleton.ConstSkeleton>>;
	public inline extern function get_CompatibleSkeletons(): TArray<TSoftObjectPtr<Skeleton.ConstSkeleton>> return this.CompatibleSkeletons;
	public extern var Sockets(get, never): TArray<cpp.Star<SkeletalMeshSocket.ConstSkeletalMeshSocket>>;
	public inline extern function get_Sockets(): TArray<cpp.Star<SkeletalMeshSocket.ConstSkeletalMeshSocket>> return this.Sockets;
	public extern var SmartNames(get, never): SmartNameContainer;
	public inline extern function get_SmartNames(): SmartNameContainer return this.SmartNames;
	public extern var BlendProfiles(get, never): TArray<cpp.Star<BlendProfile.ConstBlendProfile>>;
	public inline extern function get_BlendProfiles(): TArray<cpp.Star<BlendProfile.ConstBlendProfile>> return this.BlendProfiles;
	public extern var SlotGroups(get, never): TArray<AnimSlotGroup>;
	public inline extern function get_SlotGroups(): TArray<AnimSlotGroup> return this.SlotGroups;
	public extern var PreviewSkeletalMesh(get, never): TSoftObjectPtr<SkeletalMesh.ConstSkeletalMesh>;
	public inline extern function get_PreviewSkeletalMesh(): TSoftObjectPtr<SkeletalMesh.ConstSkeletalMesh> return this.PreviewSkeletalMesh;
	public extern var AdditionalPreviewSkeletalMeshes(get, never): TSoftObjectPtr<DataAsset.ConstDataAsset>;
	public inline extern function get_AdditionalPreviewSkeletalMeshes(): TSoftObjectPtr<DataAsset.ConstDataAsset> return this.AdditionalPreviewSkeletalMeshes;
	public extern var RigConfig(get, never): RigConfiguration;
	public inline extern function get_RigConfig(): RigConfiguration return this.RigConfig;
	public extern var AnimationNotifies(get, never): TArray<FName>;
	public inline extern function get_AnimationNotifies(): TArray<FName> return this.AnimationNotifies;
	public extern var PreviewAttachedAssetContainer(get, never): PreviewAssetAttachContainer;
	public inline extern function get_PreviewAttachedAssetContainer(): PreviewAssetAttachContainer return this.PreviewAttachedAssetContainer;
	public extern var AssetUserData(get, never): TArray<cpp.Star<AssetUserData.ConstAssetUserData>>;
	public inline extern function get_AssetUserData(): TArray<cpp.Star<AssetUserData.ConstAssetUserData>> return this.AssetUserData;
}