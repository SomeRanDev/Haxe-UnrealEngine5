// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USoundSubmix")
@:include("Sound/SoundSubmix.h")
extern class USoundSubmix extends USoundSubmixWithParentBase {
	public var bMuteWhenBackgrounded: Bool;
	public var SubmixEffectChain: TArray<TObjectPtr<USoundEffectSubmixPreset>>;
	public var AmbisonicsPluginSettings: TObjectPtr<USoundfieldEncodingSettingsBase>;
	public var EnvelopeFollowerAttackTime: cpp.Int32;
	public var EnvelopeFollowerReleaseTime: cpp.Int32;
	public var OutputVolume: cpp.Float32;
	public var WetLevel: cpp.Float32;
	public var DryLevel: cpp.Float32;
	public var OutputVolumeModulation: FSoundModulationDestinationSettings;
	public var WetLevelModulation: FSoundModulationDestinationSettings;
	public var DryLevelModulation: FSoundModulationDestinationSettings;
	public var AudioLinkSettings: TObjectPtr<UAudioLinkSettingsAbstract>;
	public var OnSubmixRecordedFileDone: HaxeMulticastSparseDelegateProperty<(cpp.Star<USoundWave>) -> Void>;

	public function StopSpectralAnalysis(WorldContextObject: cpp.Star<UObject>): Void;
	public function StopRecordingOutput(WorldContextObject: cpp.Star<UObject>, ExportType: EAudioRecordingExportType, Name: FString, Path: FString, ExistingSoundWaveToOverwrite: cpp.Star<USoundWave>): Void;
	public function StopEnvelopeFollowing(WorldContextObject: cpp.Star<UObject>): Void;
	public function StartSpectralAnalysis(WorldContextObject: cpp.Star<UObject>, FFTSize: EFFTSize, InterpolationMethod: EFFTPeakInterpolationMethod, WindowType: EFFTWindowType, HopSize: cpp.Float32, SpectrumType: EAudioSpectrumType): Void;
	public function StartRecordingOutput(WorldContextObject: cpp.Star<UObject>, ExpectedDuration: cpp.Float32): Void;
	public function StartEnvelopeFollowing(WorldContextObject: cpp.Star<UObject>): Void;
	public function SetSubmixWetLevel(WorldContextObject: cpp.Star<UObject>, InWetLevel: cpp.Float32): Void;
	public function SetSubmixOutputVolume(WorldContextObject: cpp.Star<UObject>, InOutputVolume: cpp.Float32): Void;
	public function SetSubmixDryLevel(WorldContextObject: cpp.Star<UObject>, InDryLevel: cpp.Float32): Void;
	public function RemoveSpectralAnalysisDelegate(WorldContextObject: cpp.Star<UObject>, OnSubmixSpectralAnalysisBP: HaxeDelegateProperty<(TArray<cpp.Float32>) -> Void>): Void;
	public function AddSpectralAnalysisDelegate(WorldContextObject: cpp.Star<UObject>, InBandSettings: TArray<FSoundSubmixSpectralAnalysisBandSettings>, OnSubmixSpectralAnalysisBP: HaxeDelegateProperty<(TArray<cpp.Float32>) -> Void>, UpdateRate: cpp.Float32, DecibelNoiseFloor: cpp.Float32, bDoNormalize: Bool, bDoAutoRange: Bool, AutoRangeAttackTime: cpp.Float32, AutoRangeReleaseTime: cpp.Float32): Void;
	public function AddEnvelopeFollowerDelegate(WorldContextObject: cpp.Star<UObject>, OnSubmixEnvelopeBP: HaxeDelegateProperty<(TArray<cpp.Float32>) -> Void>): Void;
}
