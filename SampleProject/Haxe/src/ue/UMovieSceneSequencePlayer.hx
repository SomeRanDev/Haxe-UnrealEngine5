// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovieSceneSequencePlayer")
@:include("MovieSceneSequencePlayer.h")
extern class UMovieSceneSequencePlayer extends UObject {
	public var OnPlay: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnPlayReverse: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnStop: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnPause: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnFinished: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var Status: EMovieScenePlayerStatus;
	public var bReversePlayback: Bool;
	public var Sequence: TObjectPtr<UMovieSceneSequence>;
	public var StartTime: FFrameNumber;
	public var DurationFrames: cpp.Int32;
	public var DurationSubFrames: cpp.Float32;
	public var CurrentNumLoops: cpp.Int32;
	public var PlaybackSettings: FMovieSceneSequencePlaybackSettings;
	public var RootTemplateInstance: FMovieSceneRootEvaluationTemplateInstance;
	public var NetSyncProps: FMovieSceneSequenceReplProperties;
	public var PlaybackClient: UMovieScenePlaybackClient;
	public var TickManager: TObjectPtr<UMovieSceneSequenceTickManager>;

	public function StopAtCurrentTime(): Void;
	public function Stop(): Void;
	public function SetTimeRange(StartTime: cpp.Float32, Duration: cpp.Float32): Void;
	public function SetPlayRate(PlayRate: cpp.Float32): Void;
	public function SetPlaybackPosition(PlaybackParams: FMovieSceneSequencePlaybackParams): Void;
	public function SetFrameRate(FrameRate: FFrameRate): Void;
	public function SetFrameRange(StartFrame: cpp.Int32, Duration: cpp.Int32, SubFrames: cpp.Float32): Void;
	public function SetDisableCameraCuts(bInDisableCameraCuts: Bool): Void;
	public function ScrubToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function ScrubToMarkedFrame(InLabel: FString): Bool;
	public function ScrubToFrame(NewPosition: FFrameTime): Void;
	public function Scrub(): Void;
	public function RPC_OnStopEvent(StoppedTime: FFrameTime): Void;
	public function RPC_OnFinishPlaybackEvent(StoppedTime: FFrameTime): Void;
	public function RPC_ExplicitServerUpdateEvent(Method: EUpdatePositionMethod, RelevantTime: FFrameTime): Void;
	public function RestoreState(): Void;
	public function PlayToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function PlayToMarkedFrame(InLabel: FString): Bool;
	public function PlayToFrame(NewPosition: FFrameTime): Void;
	public function PlayTo(PlaybackParams: FMovieSceneSequencePlaybackParams, PlayToParams: FMovieSceneSequencePlayToParams): Void;
	public function PlayReverse(): Void;
	public function PlayLooping(NumLoops: cpp.Int32): Void;
	public function Play(): Void;
	public function Pause(): Void;
	public function JumpToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function JumpToMarkedFrame(InLabel: FString): Bool;
	public function JumpToFrame(NewPosition: FFrameTime): Void;
	public function IsReversed(): Bool;
	public function IsPlaying(): Bool;
	public function IsPaused(): Bool;
	public function GoToEndAndStop(): Void;
	public function GetStartTime(): FQualifiedFrameTime;
	public function GetSequenceName(bAddClientInfo: Bool): FString;
	public function GetSequence(): cpp.Star<UMovieSceneSequence>;
	public function GetPlayRate(): cpp.Float32;
	public function GetObjectBindings(InObject: cpp.Star<UObject>): TArray<FMovieSceneObjectBindingID>;
	public function GetFrameRate(): FFrameRate;
	public function GetFrameDuration(): cpp.Int32;
	public function GetEndTime(): FQualifiedFrameTime;
	public function GetDuration(): FQualifiedFrameTime;
	public function GetDisableCameraCuts(): Bool;
	public function GetCurrentTime(): FQualifiedFrameTime;
	public function GetBoundObjects(ObjectBinding: FMovieSceneObjectBindingID): TArray<cpp.Star<UObject>>;
	public function ChangePlaybackDirection(): Void;
}
