// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimPoseExtensions")
@:include("AnimPose.h")
@:valueType
extern class AnimPoseExtensions extends BlueprintFunctionLibrary {
	public function SetBonePose(Pose: ucpp.Ref<AnimPose>, Transform: Transform, BoneName: FName, Space: EAnimPoseSpaces): Void;
	public function IsValid(Pose: ucpp.Ref<AnimPose>): Bool;
	public function GetRelativeTransform(Pose: ucpp.Ref<AnimPose>, FromBoneName: FName, ToBoneName: FName, Space: EAnimPoseSpaces): Transform;
	public function GetRelativeToRefPoseTransform(Pose: ucpp.Ref<AnimPose>, BoneName: FName, Space: EAnimPoseSpaces): Transform;
	public function GetRefPoseRelativeTransform(Pose: ucpp.Ref<AnimPose>, FromBoneName: FName, ToBoneName: FName, Space: EAnimPoseSpaces): Transform;
	public function GetReferencePose(Skeleton: ucpp.Ptr<Skeleton>, OutPose: ucpp.Ref<AnimPose>): Void;
	public function GetRefBonePose(Pose: ucpp.Ref<AnimPose>, BoneName: FName, Space: EAnimPoseSpaces): Transform;
	public function GetCurveWeight(Pose: ucpp.Ref<AnimPose>, CurveName: ucpp.Ref<FName>): ucpp.num.Float32;
	public function GetCurveNames(Pose: ucpp.Ref<AnimPose>, Curves: ucpp.Ref<TArray<FName>>): Void;
	public function GetBonePose(Pose: ucpp.Ref<AnimPose>, BoneName: FName, Space: EAnimPoseSpaces): Transform;
	public function GetBoneNames(Pose: ucpp.Ref<AnimPose>, Bones: ucpp.Ref<TArray<FName>>): Void;
	public function GetAnimPoseAtTime(AnimationSequenceBase: ucpp.Ptr<AnimSequenceBase.ConstAnimSequenceBase>, Time: ucpp.num.Float64, EvaluationOptions: AnimPoseEvaluationOptions, Pose: ucpp.Ref<AnimPose>): Void;
	public function GetAnimPoseAtFrame(AnimationSequenceBase: ucpp.Ptr<AnimSequenceBase.ConstAnimSequenceBase>, FrameIndex: ucpp.num.Int32, EvaluationOptions: AnimPoseEvaluationOptions, Pose: ucpp.Ref<AnimPose>): Void;
	public function EvaluateAnimationBlueprintWithInputPose(InputPose: ucpp.Ref<AnimPose>, TargetSkeletalMesh: ucpp.Ptr<SkeletalMesh>, AnimationBlueprint: ucpp.Ptr<AnimBlueprint>, OutPose: ucpp.Ref<AnimPose>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstAnimPoseExtensions(AnimPoseExtensions) from AnimPoseExtensions {
}

@:forward
@:nativeGen
@:native("AnimPoseExtensions*")
abstract AnimPoseExtensionsPtr(ucpp.Ptr<AnimPoseExtensions>) from ucpp.Ptr<AnimPoseExtensions> to ucpp.Ptr<AnimPoseExtensions>{
	@:from
	public static extern inline function fromValue(v: AnimPoseExtensions): AnimPoseExtensionsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimPoseExtensions {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}