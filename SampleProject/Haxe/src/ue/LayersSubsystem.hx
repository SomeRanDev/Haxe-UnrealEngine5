// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ULayersSubsystem")
@:include("Layers/LayersSubsystem.h")
@:structAccess
extern class LayersSubsystem extends EditorSubsystem {
	public function UpdateAllViewVisibility(LayerThatChanged: cpp.Reference<FName>): Void;
	public function UpdateAllActorsVisibility(bNotifySelectionChange: Bool, bRedrawViewports: Bool): Bool;
	public function UpdateActorVisibility(Actor: cpp.Star<Actor>, bOutSelectionChanged: cpp.Reference<Bool>, bOutActorModified: cpp.Reference<Bool>, bNotifySelectionChange: Bool, bRedrawViewports: Bool): Bool;
	public function UpdateActorAllViewsVisibility(Actor: cpp.Star<Actor>): Void;
	public function TryGetLayer(LayerName: cpp.Reference<FName>, OutLayer: cpp.Reference<cpp.Star<Layer>>): Bool;
	public function ToggleLayerVisibility(LayerName: cpp.Reference<FName>): Void;
	public function ToggleLayersVisibility(LayerNames: cpp.Reference<TArray<FName>>): Void;
	public function SetLayerVisibility(LayerName: cpp.Reference<FName>, bIsVisible: Bool): Void;
	public function SetLayersVisibility(LayerNames: cpp.Reference<TArray<FName>>, bIsVisible: Bool): Void;
	public function SelectActorsInLayers(LayerNames: cpp.Reference<TArray<FName>>, bSelect: Bool, bNotify: Bool, bSelectEvenIfHidden: Bool): Bool;
	public function SelectActorsInLayer(LayerName: cpp.Reference<FName>, bSelect: Bool, bNotify: Bool, bSelectEvenIfHidden: Bool): Bool;
	public function RenameLayer(OriginalLayerName: cpp.Reference<FName>, NewLayerName: cpp.Reference<FName>): Bool;
	public function RemoveSelectedActorsFromLayers(LayerNames: cpp.Reference<TArray<FName>>): Bool;
	public function RemoveSelectedActorsFromLayer(LayerName: cpp.Reference<FName>): Bool;
	public function RemoveLevelLayerInformation(Level: cpp.Star<Level>): Void;
	public function RemoveActorsFromLayers(Actors: cpp.Reference<TArray<cpp.Star<Actor>>>, LayerNames: cpp.Reference<TArray<FName>>, bUpdateStats: Bool): Bool;
	public function RemoveActorsFromLayer(Actors: cpp.Reference<TArray<cpp.Star<Actor>>>, LayerName: cpp.Reference<FName>, bUpdateStats: Bool): Bool;
	public function RemoveActorFromLayers(Actor: cpp.Star<Actor>, LayerNames: cpp.Reference<TArray<FName>>, bUpdateStats: Bool): Bool;
	public function RemoveActorFromLayer(Actor: cpp.Star<Actor>, LayerToRemove: cpp.Reference<FName>, bUpdateStats: Bool): Bool;
	public function MakeAllLayersVisible(): Void;
	public function IsLayer(LayerName: cpp.Reference<FName>): Bool;
	public function IsActorValidForLayer(Actor: cpp.Star<Actor>): Bool;
	public function InitializeNewActorLayers(Actor: cpp.Star<Actor>): Bool;
	public function GetWorld(): cpp.Star<World>;
	public function GetSelectedActors(): TArray<cpp.Star<Actor>>;
	public function GetLayer(LayerName: cpp.Reference<FName>): cpp.Star<Layer>;
	public function GetActorsFromLayers(LayerNames: cpp.Reference<TArray<FName>>): TArray<cpp.Star<Actor>>;
	public function GetActorsFromLayer(LayerName: cpp.Reference<FName>): TArray<cpp.Star<Actor>>;
	public function EditorRefreshLayerBrowser(): Void;
	public function EditorMapChange(): Void;
	public function DisassociateActorsFromLayers(Actors: cpp.Reference<TArray<cpp.Star<Actor>>>): Bool;
	public function DisassociateActorFromLayers(Actor: cpp.Star<Actor>): Bool;
	public function DeleteLayers(LayersToDelete: cpp.Reference<TArray<FName>>): Void;
	public function DeleteLayer(LayerToDelete: cpp.Reference<FName>): Void;
	public function CreateLayer(LayerName: cpp.Reference<FName>): cpp.Star<Layer>;
	public function AppendActorsFromLayers(LayerNames: cpp.Reference<TArray<FName>>, InOutActors: cpp.Reference<TArray<cpp.Star<Actor>>>): Void;
	public function AppendActorsFromLayer(LayerName: cpp.Reference<FName>, InOutActors: cpp.Reference<TArray<cpp.Star<Actor>>>): Void;
	public function AddSelectedActorsToLayers(LayerNames: cpp.Reference<TArray<FName>>): Bool;
	public function AddSelectedActorsToLayer(LayerName: cpp.Reference<FName>): Bool;
	public function AddLevelLayerInformation(Level: cpp.Star<Level>): Void;
	public function AddAllLayersTo(OutLayers: cpp.Reference<TArray<cpp.Star<Layer>>>): Void;
	public function AddAllLayerNamesTo(OutLayerNames: cpp.Reference<TArray<FName>>): Void;
	public function AddActorToLayers(Actor: cpp.Star<Actor>, LayerNames: cpp.Reference<TArray<FName>>): Bool;
	public function AddActorToLayer(Actor: cpp.Star<Actor>, LayerName: cpp.Reference<FName>): Bool;
	public function AddActorsToLayers(Actors: cpp.Reference<TArray<cpp.Star<Actor>>>, LayerNames: cpp.Reference<TArray<FName>>): Bool;
	public function AddActorsToLayer(Actors: cpp.Reference<TArray<cpp.Star<Actor>>>, LayerName: cpp.Reference<FName>): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetWorld, GetSelectedActors, GetLayer, GetActorsFromLayers, GetActorsFromLayer, AppendActorsFromLayers, AppendActorsFromLayer, AddAllLayersTo, AddAllLayerNamesTo)
@:nativeGen
abstract ConstLayersSubsystem(LayersSubsystem) from LayersSubsystem {
}

@:forward
@:nativeGen
@:native("LayersSubsystem*")
abstract LayersSubsystemPtr(cpp.Star<LayersSubsystem>) from cpp.Star<LayersSubsystem> to cpp.Star<LayersSubsystem>{
	@:from
	public static extern inline function fromValue(v: LayersSubsystem): LayersSubsystemPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): LayersSubsystem {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}