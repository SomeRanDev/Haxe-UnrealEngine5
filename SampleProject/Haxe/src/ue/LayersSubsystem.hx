// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ULayersSubsystem")
@:include("Layers/LayersSubsystem.h")
@:valueType
extern class LayersSubsystem extends EditorSubsystem {
	public function UpdateAllViewVisibility(LayerThatChanged: ucpp.Ref<FName>): Void;
	public function UpdateAllActorsVisibility(bNotifySelectionChange: Bool, bRedrawViewports: Bool): Bool;
	public function UpdateActorVisibility(Actor: ucpp.Ptr<Actor>, bOutSelectionChanged: ucpp.Ref<Bool>, bOutActorModified: ucpp.Ref<Bool>, bNotifySelectionChange: Bool, bRedrawViewports: Bool): Bool;
	public function UpdateActorAllViewsVisibility(Actor: ucpp.Ptr<Actor>): Void;
	public function TryGetLayer(LayerName: ucpp.Ref<FName>, OutLayer: ucpp.Ref<ucpp.Ptr<Layer>>): Bool;
	public function ToggleLayerVisibility(LayerName: ucpp.Ref<FName>): Void;
	public function ToggleLayersVisibility(LayerNames: ucpp.Ref<TArray<FName>>): Void;
	public function SetLayerVisibility(LayerName: ucpp.Ref<FName>, bIsVisible: Bool): Void;
	public function SetLayersVisibility(LayerNames: ucpp.Ref<TArray<FName>>, bIsVisible: Bool): Void;
	public function SelectActorsInLayers(LayerNames: ucpp.Ref<TArray<FName>>, bSelect: Bool, bNotify: Bool, bSelectEvenIfHidden: Bool): Bool;
	public function SelectActorsInLayer(LayerName: ucpp.Ref<FName>, bSelect: Bool, bNotify: Bool, bSelectEvenIfHidden: Bool): Bool;
	public function RenameLayer(OriginalLayerName: ucpp.Ref<FName>, NewLayerName: ucpp.Ref<FName>): Bool;
	public function RemoveSelectedActorsFromLayers(LayerNames: ucpp.Ref<TArray<FName>>): Bool;
	public function RemoveSelectedActorsFromLayer(LayerName: ucpp.Ref<FName>): Bool;
	public function RemoveLevelLayerInformation(Level: ucpp.Ptr<Level>): Void;
	public function RemoveActorsFromLayers(Actors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, LayerNames: ucpp.Ref<TArray<FName>>, bUpdateStats: Bool): Bool;
	public function RemoveActorsFromLayer(Actors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, LayerName: ucpp.Ref<FName>, bUpdateStats: Bool): Bool;
	public function RemoveActorFromLayers(Actor: ucpp.Ptr<Actor>, LayerNames: ucpp.Ref<TArray<FName>>, bUpdateStats: Bool): Bool;
	public function RemoveActorFromLayer(Actor: ucpp.Ptr<Actor>, LayerToRemove: ucpp.Ref<FName>, bUpdateStats: Bool): Bool;
	public function MakeAllLayersVisible(): Void;
	public function IsLayer(LayerName: ucpp.Ref<FName>): Bool;
	public function IsActorValidForLayer(Actor: ucpp.Ptr<Actor>): Bool;
	public function InitializeNewActorLayers(Actor: ucpp.Ptr<Actor>): Bool;
	public function GetWorld(): ucpp.Ptr<World>;
	public function GetSelectedActors(): TArray<ucpp.Ptr<Actor>>;
	public function GetLayer(LayerName: ucpp.Ref<FName>): ucpp.Ptr<Layer>;
	public function GetActorsFromLayers(LayerNames: ucpp.Ref<TArray<FName>>): TArray<ucpp.Ptr<Actor>>;
	public function GetActorsFromLayer(LayerName: ucpp.Ref<FName>): TArray<ucpp.Ptr<Actor>>;
	public function EditorRefreshLayerBrowser(): Void;
	public function EditorMapChange(): Void;
	public function DisassociateActorsFromLayers(Actors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Bool;
	public function DisassociateActorFromLayers(Actor: ucpp.Ptr<Actor>): Bool;
	public function DeleteLayers(LayersToDelete: ucpp.Ref<TArray<FName>>): Void;
	public function DeleteLayer(LayerToDelete: ucpp.Ref<FName>): Void;
	public function CreateLayer(LayerName: ucpp.Ref<FName>): ucpp.Ptr<Layer>;
	public function AppendActorsFromLayers(LayerNames: ucpp.Ref<TArray<FName>>, InOutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function AppendActorsFromLayer(LayerName: ucpp.Ref<FName>, InOutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function AddSelectedActorsToLayers(LayerNames: ucpp.Ref<TArray<FName>>): Bool;
	public function AddSelectedActorsToLayer(LayerName: ucpp.Ref<FName>): Bool;
	public function AddLevelLayerInformation(Level: ucpp.Ptr<Level>): Void;
	public function AddAllLayersTo(OutLayers: ucpp.Ref<TArray<ucpp.Ptr<Layer>>>): Void;
	public function AddAllLayerNamesTo(OutLayerNames: ucpp.Ref<TArray<FName>>): Void;
	public function AddActorToLayers(Actor: ucpp.Ptr<Actor>, LayerNames: ucpp.Ref<TArray<FName>>): Bool;
	public function AddActorToLayer(Actor: ucpp.Ptr<Actor>, LayerName: ucpp.Ref<FName>): Bool;
	public function AddActorsToLayers(Actors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, LayerNames: ucpp.Ref<TArray<FName>>): Bool;
	public function AddActorsToLayer(Actors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, LayerName: ucpp.Ref<FName>): Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetWorld, GetSelectedActors, GetLayer, GetActorsFromLayers, GetActorsFromLayer, AppendActorsFromLayers, AppendActorsFromLayer, AddAllLayersTo, AddAllLayerNamesTo)
@:nativeGen
abstract ConstLayersSubsystem(LayersSubsystem) from LayersSubsystem {
}

@:forward
@:nativeGen
@:native("LayersSubsystem*")
abstract LayersSubsystemPtr(ucpp.Ptr<LayersSubsystem>) from ucpp.Ptr<LayersSubsystem> to ucpp.Ptr<LayersSubsystem>{
	@:from
	public static extern inline function fromValue(v: LayersSubsystem): LayersSubsystemPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): LayersSubsystem {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}