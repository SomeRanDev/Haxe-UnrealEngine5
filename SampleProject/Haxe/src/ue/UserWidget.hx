// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UUserWidget")
@:include("Blueprint/UserWidget.h")
extern class UserWidget extends Widget {
	public var ColorAndOpacity: LinearColor;
	public var ColorAndOpacityDelegate: HaxeDelegateProperty<() -> Void>;
	public var ForegroundColor: SlateColor;
	public var ForegroundColorDelegate: HaxeDelegateProperty<() -> Void>;
	public var OnVisibilityChanged: HaxeMulticastSparseDelegateProperty<(ESlateVisibility) -> Void>;
	public var Padding: Margin;
	public var ActiveSequencePlayers: TArray<cpp.Star<UMGSequencePlayer>>;
	public var AnimationTickManager: cpp.Star<UMGSequenceTickManager>;
	public var StoppedSequencePlayers: TArray<cpp.Star<UMGSequencePlayer>>;
	public var NamedSlotBindings: TArray<NamedSlotBinding>;
	public var WidgetTree: cpp.Star<WidgetTree>;
	public var DesignTimeSize: Vector2D;
	public var DesignSizeMode: EDesignPreviewSizeMode;
	public var PaletteCategory: FText;
	public var PreviewBackground: cpp.Star<Texture2D>;
	public var Priority: cpp.Int32;
	public var bSupportsKeyboardFocus_DEPRECATED: Bool;
	public var bIsFocusable: Bool;
	public var bStopAction: Bool;
	public var bHasScriptImplementedTick: Bool;
	public var bHasScriptImplementedPaint: Bool;
	public var TickFrequency: EWidgetTickFrequency;
	public var InputComponent: cpp.Star<InputComp>;
	public var AnimationCallbacks: TArray<AnimationEventBinding>;

	public function UnregisterInputComponent(): Void;
	public function UnbindFromAnimationStarted(Animation: cpp.Star<WidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function UnbindFromAnimationFinished(Animation: cpp.Star<WidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function UnbindAllFromAnimationStarted(Animation: cpp.Star<WidgetAnimation>): Void;
	public function UnbindAllFromAnimationFinished(Animation: cpp.Star<WidgetAnimation>): Void;
	public function Tick(MyGeometry: Geometry, InDeltaTime: cpp.Float32): Void;
	public function StopListeningForInputAction(ActionName: FName, EventType: EInputEvent): Void;
	public function StopListeningForAllInputActions(): Void;
	public function StopAnimationsAndLatentActions(): Void;
	public function StopAnimation(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>): Void;
	public function StopAllAnimations(): Void;
	public function SetPositionInViewport(Position: Vector2D, bRemoveDPIScale: Bool): Void;
	public function SetPlaybackSpeed(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>, PlaybackSpeed: cpp.Float32): Void;
	public function SetPadding(InPadding: Margin): Void;
	public function SetOwningPlayer(LocalPlayerController: cpp.Star<PlayerController>): Void;
	public function SetNumLoopsToPlay(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>, NumLoopsToPlay: cpp.Int32): Void;
	public function SetInputActionPriority(NewPriority: cpp.Int32): Void;
	public function SetInputActionBlocking(bShouldBlock: Bool): Void;
	public function SetForegroundColor(InForegroundColor: SlateColor): Void;
	public function SetDesiredSizeInViewport(Size: Vector2D): Void;
	public function SetColorAndOpacity(InColorAndOpacity: LinearColor): Void;
	public function SetAnimationCurrentTime(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>, InTime: cpp.Float32): Void;
	public function SetAnchorsInViewport(Anchors: Anchors): Void;
	public function SetAlignmentInViewport(Alignment: Vector2D): Void;
	public function ReverseAnimation(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>): Void;
	public function RemoveFromViewport(): Void;
	public function RegisterInputComponent(): Void;
	public function PreConstruct(IsDesignTime: Bool): Void;
	public function PlaySound(SoundToPlay: cpp.Star<SoundBase>): Void;
	public function PlayAnimationTimeRange(InAnimation: cpp.Star<WidgetAnimation>, StartAtTime: cpp.Float32, EndAtTime: cpp.Float32, NumLoopsToPlay: cpp.Int32, PlayMode: EUMGSequencePlayMode, PlaybackSpeed: cpp.Float32, bRestoreState: Bool): cpp.Reference<cpp.Star<UMGSequencePlayer>>;
	public function PlayAnimationReverse(InAnimation: cpp.Star<WidgetAnimation>, PlaybackSpeed: cpp.Float32, bRestoreState: Bool): cpp.Reference<cpp.Star<UMGSequencePlayer>>;
	public function PlayAnimationForward(InAnimation: cpp.Star<WidgetAnimation>, PlaybackSpeed: cpp.Float32, bRestoreState: Bool): cpp.Reference<cpp.Star<UMGSequencePlayer>>;
	public function PlayAnimation(InAnimation: cpp.Star<WidgetAnimation>, StartAtTime: cpp.Float32, NumLoopsToPlay: cpp.Int32, PlayMode: EUMGSequencePlayMode, PlaybackSpeed: cpp.Float32, bRestoreState: Bool): cpp.Reference<cpp.Star<UMGSequencePlayer>>;
	public function PauseAnimation(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>): cpp.Reference<cpp.Float32>;
	public function OnTouchStarted(MyGeometry: Geometry, InTouchEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnTouchMoved(MyGeometry: Geometry, InTouchEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnTouchGesture(MyGeometry: Geometry, GestureEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnTouchForceChanged(MyGeometry: Geometry, InTouchEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnTouchEnded(MyGeometry: Geometry, InTouchEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnRemovedFromFocusPath(InFocusEvent: FocusEvent): Void;
	public function OnPreviewMouseButtonDown(MyGeometry: Geometry, MouseEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnPreviewKeyDown(MyGeometry: Geometry, InKeyEvent: KeyEvent): cpp.Reference<EventReply>;
	public function OnPaint(Context: cpp.Reference<PaintContext>): Void;
	public function OnMouseWheel(MyGeometry: Geometry, MouseEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnMouseMove(MyGeometry: Geometry, MouseEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnMouseLeave(MouseEvent: cpp.Reference<PointerEvent>): Void;
	public function OnMouseEnter(MyGeometry: Geometry, MouseEvent: cpp.Reference<PointerEvent>): Void;
	public function OnMouseCaptureLost(): Void;
	public function OnMouseButtonUp(MyGeometry: Geometry, MouseEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnMouseButtonDown(MyGeometry: Geometry, MouseEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnMouseButtonDoubleClick(InMyGeometry: Geometry, InMouseEvent: cpp.Reference<PointerEvent>): cpp.Reference<EventReply>;
	public function OnMotionDetected(MyGeometry: Geometry, InMotionEvent: MotionEvent): cpp.Reference<EventReply>;
	public function OnKeyUp(MyGeometry: Geometry, InKeyEvent: KeyEvent): cpp.Reference<EventReply>;
	public function OnKeyDown(MyGeometry: Geometry, InKeyEvent: KeyEvent): cpp.Reference<EventReply>;
	public function OnKeyChar(MyGeometry: Geometry, InCharacterEvent: CharacterEvent): cpp.Reference<EventReply>;
	public function OnInitialized(): Void;
	public function OnFocusReceived(MyGeometry: Geometry, InFocusEvent: FocusEvent): cpp.Reference<EventReply>;
	public function OnFocusLost(InFocusEvent: FocusEvent): Void;
	public function OnDrop(MyGeometry: Geometry, PointerEvent: PointerEvent, Operation: cpp.Star<DragDropOperation>): cpp.Reference<Bool>;
	public function OnDragOver(MyGeometry: Geometry, PointerEvent: PointerEvent, Operation: cpp.Star<DragDropOperation>): cpp.Reference<Bool>;
	public function OnDragLeave(PointerEvent: PointerEvent, Operation: cpp.Star<DragDropOperation>): Void;
	public function OnDragEnter(MyGeometry: Geometry, PointerEvent: PointerEvent, Operation: cpp.Star<DragDropOperation>): Void;
	public function OnDragDetected(MyGeometry: Geometry, PointerEvent: cpp.Reference<PointerEvent>, Operation: cpp.Reference<cpp.Star<DragDropOperation>>): Void;
	public function OnDragCancelled(PointerEvent: cpp.Reference<PointerEvent>, Operation: cpp.Star<DragDropOperation>): Void;
	public function OnAnimationStarted(Animation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>): Void;
	public function OnAnimationFinished(Animation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>): Void;
	public function OnAnalogValueChanged(MyGeometry: Geometry, InAnalogInputEvent: AnalogInputEvent): cpp.Reference<EventReply>;
	public function OnAddedToFocusPath(InFocusEvent: FocusEvent): Void;
	public function ListenForInputAction(ActionName: FName, EventType: EInputEvent, bConsume: Bool, Callback: HaxeDelegateProperty<() -> Void>): Void;
	public function IsPlayingAnimation(): cpp.Reference<Bool>;
	public function IsListeningForInputAction(ActionName: FName): cpp.Reference<Bool>;
	public function IsInViewport(): cpp.Reference<Bool>;
	public function IsInteractable(): cpp.Reference<Bool>;
	public function IsAnyAnimationPlaying(): cpp.Reference<Bool>;
	public function IsAnimationPlayingForward(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>): cpp.Reference<Bool>;
	public function IsAnimationPlaying(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>): cpp.Reference<Bool>;
	public function GetOwningPlayerPawn(): cpp.Reference<cpp.Star<Pawn>>;
	public function GetOwningPlayerCameraManager(): cpp.Reference<cpp.Star<PlayerCameraManager>>;
	public function GetIsVisible(): cpp.Reference<Bool>;
	public function GetAnimationCurrentTime(InAnimation: cpp.Star<WidgetAnimation.ConstWidgetAnimation>): cpp.Reference<cpp.Float32>;
	public function GetAnchorsInViewport(): cpp.Reference<Anchors>;
	public function GetAlignmentInViewport(): cpp.Reference<Vector2D>;
	public function FlushAnimations(): Void;
	public function Destruct(): Void;
	public function Construct(): Void;
	public function CancelLatentActions(): Void;
	public function BindToAnimationStarted(Animation: cpp.Star<WidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function BindToAnimationFinished(Animation: cpp.Star<WidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function BindToAnimationEvent(Animation: cpp.Star<WidgetAnimation>, Delegate: HaxeDelegateProperty<() -> Void>, AnimationEvent: EWidgetAnimationEvent, UserTag: FName): Void;
	public function AddToViewport(ZOrder: cpp.Int32): Void;
	public function AddToPlayerScreen(ZOrder: cpp.Int32): cpp.Reference<Bool>;
}

@:forward(
	OnPaint, IsPlayingAnimation, IsListeningForInputAction, IsInViewport, IsInteractable,
	IsAnyAnimationPlaying, IsAnimationPlaying, GetOwningPlayerPawn, GetOwningPlayerCameraManager, GetIsVisible,
	GetAnimationCurrentTime, GetAnchorsInViewport, GetAlignmentInViewport
)
@:nativeGen
abstract ConstUserWidget(UserWidget) from UserWidget {
	public extern var ColorAndOpacity(get, never): LinearColor;
	public inline extern function get_ColorAndOpacity(): LinearColor return this.ColorAndOpacity;
	public extern var ColorAndOpacityDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ColorAndOpacityDelegate(): HaxeDelegateProperty<() -> Void> return this.ColorAndOpacityDelegate;
	public extern var ForegroundColor(get, never): SlateColor;
	public inline extern function get_ForegroundColor(): SlateColor return this.ForegroundColor;
	public extern var ForegroundColorDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ForegroundColorDelegate(): HaxeDelegateProperty<() -> Void> return this.ForegroundColorDelegate;
	public extern var OnVisibilityChanged(get, never): HaxeMulticastSparseDelegateProperty<(ESlateVisibility) -> Void>;
	public inline extern function get_OnVisibilityChanged(): HaxeMulticastSparseDelegateProperty<(ESlateVisibility) -> Void> return this.OnVisibilityChanged;
	public extern var Padding(get, never): Margin;
	public inline extern function get_Padding(): Margin return this.Padding;
	public extern var ActiveSequencePlayers(get, never): TArray<cpp.Star<UMGSequencePlayer.ConstUMGSequencePlayer>>;
	public inline extern function get_ActiveSequencePlayers(): TArray<cpp.Star<UMGSequencePlayer.ConstUMGSequencePlayer>> return this.ActiveSequencePlayers;
	public extern var AnimationTickManager(get, never): cpp.Star<UMGSequenceTickManager.ConstUMGSequenceTickManager>;
	public inline extern function get_AnimationTickManager(): cpp.Star<UMGSequenceTickManager.ConstUMGSequenceTickManager> return this.AnimationTickManager;
	public extern var StoppedSequencePlayers(get, never): TArray<cpp.Star<UMGSequencePlayer.ConstUMGSequencePlayer>>;
	public inline extern function get_StoppedSequencePlayers(): TArray<cpp.Star<UMGSequencePlayer.ConstUMGSequencePlayer>> return this.StoppedSequencePlayers;
	public extern var NamedSlotBindings(get, never): TArray<NamedSlotBinding>;
	public inline extern function get_NamedSlotBindings(): TArray<NamedSlotBinding> return this.NamedSlotBindings;
	public extern var WidgetTree(get, never): cpp.Star<WidgetTree.ConstWidgetTree>;
	public inline extern function get_WidgetTree(): cpp.Star<WidgetTree.ConstWidgetTree> return this.WidgetTree;
	public extern var DesignTimeSize(get, never): Vector2D;
	public inline extern function get_DesignTimeSize(): Vector2D return this.DesignTimeSize;
	public extern var DesignSizeMode(get, never): EDesignPreviewSizeMode;
	public inline extern function get_DesignSizeMode(): EDesignPreviewSizeMode return this.DesignSizeMode;
	public extern var PaletteCategory(get, never): FText;
	public inline extern function get_PaletteCategory(): FText return this.PaletteCategory;
	public extern var PreviewBackground(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_PreviewBackground(): cpp.Star<Texture2D.ConstTexture2D> return this.PreviewBackground;
	public extern var Priority(get, never): cpp.Int32;
	public inline extern function get_Priority(): cpp.Int32 return this.Priority;
	public extern var bSupportsKeyboardFocus_DEPRECATED(get, never): Bool;
	public inline extern function get_bSupportsKeyboardFocus_DEPRECATED(): Bool return this.bSupportsKeyboardFocus_DEPRECATED;
	public extern var bIsFocusable(get, never): Bool;
	public inline extern function get_bIsFocusable(): Bool return this.bIsFocusable;
	public extern var bStopAction(get, never): Bool;
	public inline extern function get_bStopAction(): Bool return this.bStopAction;
	public extern var bHasScriptImplementedTick(get, never): Bool;
	public inline extern function get_bHasScriptImplementedTick(): Bool return this.bHasScriptImplementedTick;
	public extern var bHasScriptImplementedPaint(get, never): Bool;
	public inline extern function get_bHasScriptImplementedPaint(): Bool return this.bHasScriptImplementedPaint;
	public extern var TickFrequency(get, never): EWidgetTickFrequency;
	public inline extern function get_TickFrequency(): EWidgetTickFrequency return this.TickFrequency;
	public extern var InputComponent(get, never): cpp.Star<InputComp.ConstInputComp>;
	public inline extern function get_InputComponent(): cpp.Star<InputComp.ConstInputComp> return this.InputComponent;
	public extern var AnimationCallbacks(get, never): TArray<AnimationEventBinding>;
	public inline extern function get_AnimationCallbacks(): TArray<AnimationEventBinding> return this.AnimationCallbacks;
}