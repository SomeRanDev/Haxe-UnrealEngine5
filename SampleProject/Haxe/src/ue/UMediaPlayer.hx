// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMediaPlayer")
@:include("MediaPlayer.h")
extern class UMediaPlayer extends UObject {
	public var OnEndReached: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnMediaClosed: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnMediaOpened: HaxeMulticastSparseDelegateProperty<(FString) -> Void>;
	public var OnMediaOpenFailed: HaxeMulticastSparseDelegateProperty<(FString) -> Void>;
	public var OnPlaybackResumed: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnPlaybackSuspended: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnSeekCompleted: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnTracksChanged: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var CacheAhead: FTimespan;
	public var CacheBehind: FTimespan;
	public var CacheBehindGame: FTimespan;
	public var NativeAudioOut: Bool;
	public var PlayOnOpen: Bool;
	public var Shuffle: Bool;
	public var Loop: Bool;
	public var Playlist: TObjectPtr<UMediaPlaylist>;
	public var PlaylistIndex: cpp.Int32;
	public var TimeDelay: FTimespan;
	public var HorizontalFieldOfView: cpp.Float32;
	public var VerticalFieldOfView: cpp.Float32;
	public var ViewRotation: FRotator;
	public var PlayerGuid: FGuid;
	public var AffectedByPIEHandling: Bool;

	public function SupportsSeeking(): Bool;
	public function SupportsScrubbing(): Bool;
	public function SupportsRate(Rate: cpp.Float32, Unthinned: Bool): Bool;
	public function SetViewRotation(Rotation: FRotator, Absolute: Bool): Bool;
	public function SetViewField(Horizontal: cpp.Float32, Vertical: cpp.Float32, Absolute: Bool): Bool;
	public function SetVideoTrackFrameRate(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32, FrameRate: cpp.Float32): Bool;
	public function SetTrackFormat(TrackType: EMediaPlayerTrack, TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): Bool;
	public function SetTimeDelay(TimeDelay: FTimespan): Void;
	public function SetRate(Rate: cpp.Float32): Bool;
	public function SetNativeVolume(Volume: cpp.Float32): Bool;
	public function SetMediaOptions(Options: cpp.Star<UMediaSource>): Void;
	public function SetLooping(Looping: Bool): Bool;
	public function SetDesiredPlayerName(PlayerName: FName): Void;
	public function SetBlockOnTime(Time: FTimespan): Void;
	public function SelectTrack(TrackType: EMediaPlayerTrack, TrackIndex: cpp.Int32): Bool;
	public function Seek(Time: FTimespan): Bool;
	public function Rewind(): Bool;
	public function Reopen(): Bool;
	public function Previous(): Bool;
	public function PlayAndSeek(): Void;
	public function Play(): Bool;
	public function Pause(): Bool;
	public function OpenUrl(Url: FString): Bool;
	public function OpenSourceWithOptions(MediaSource: cpp.Star<UMediaSource>, Options: FMediaPlayerOptions): Bool;
	public function OpenSourceLatent(WorldContextObject: cpp.Star<UObject>, LatentInfo: FLatentActionInfo, MediaSource: cpp.Star<UMediaSource>, Options: FMediaPlayerOptions, bSuccess: Bool): Void;
	public function OpenSource(MediaSource: cpp.Star<UMediaSource>): Bool;
	public function OpenPlaylistIndex(InPlaylist: cpp.Star<UMediaPlaylist>, Index: cpp.Int32): Bool;
	public function OpenPlaylist(InPlaylist: cpp.Star<UMediaPlaylist>): Bool;
	public function OpenFile(FilePath: FString): Bool;
	public function Next(): Bool;
	public function IsReady(): Bool;
	public function IsPreparing(): Bool;
	public function IsPlaying(): Bool;
	public function IsPaused(): Bool;
	public function IsLooping(): Bool;
	public function IsConnecting(): Bool;
	public function IsClosed(): Bool;
	public function IsBuffering(): Bool;
	public function HasError(): Bool;
	public function GetViewRotation(): FRotator;
	public function GetVideoTrackType(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): FString;
	public function GetVideoTrackFrameRates(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): FFloatRange;
	public function GetVideoTrackFrameRate(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): cpp.Float32;
	public function GetVideoTrackDimensions(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): FIntPoint;
	public function GetVideoTrackAspectRatio(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): cpp.Float32;
	public function GetVerticalFieldOfView(): cpp.Float32;
	public function GetUrl(): FString;
	public function GetTrackLanguage(TrackType: EMediaPlayerTrack, TrackIndex: cpp.Int32): FString;
	public function GetTrackFormat(TrackType: EMediaPlayerTrack, TrackIndex: cpp.Int32): cpp.Int32;
	public function GetTrackDisplayName(TrackType: EMediaPlayerTrack, TrackIndex: cpp.Int32): FText;
	public function GetTimeStamp(): cpp.Star<UMediaTimeStampInfo>;
	public function GetTimeDelay(): FTimespan;
	public function GetTime(): FTimespan;
	public function GetSupportedRates(OutRates: TArray<FFloatRange>, Unthinned: Bool): Void;
	public function GetSelectedTrack(TrackType: EMediaPlayerTrack): cpp.Int32;
	public function GetRate(): cpp.Float32;
	public function GetPlaylistIndex(): cpp.Int32;
	public function GetPlaylist(): cpp.Star<UMediaPlaylist>;
	public function GetPlayerName(): FName;
	public function GetNumTracks(TrackType: EMediaPlayerTrack): cpp.Int32;
	public function GetNumTrackFormats(TrackType: EMediaPlayerTrack, TrackIndex: cpp.Int32): cpp.Int32;
	public function GetMediaName(): FText;
	public function GetHorizontalFieldOfView(): cpp.Float32;
	public function GetDuration(): FTimespan;
	public function GetDesiredPlayerName(): FName;
	public function GetAudioTrackType(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): FString;
	public function GetAudioTrackSampleRate(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): cpp.Int32;
	public function GetAudioTrackChannels(TrackIndex: cpp.Int32, FormatIndex: cpp.Int32): cpp.Int32;
	public function Close(): Void;
	public function CanPlayUrl(Url: FString): Bool;
	public function CanPlaySource(MediaSource: cpp.Star<UMediaSource>): Bool;
	public function CanPause(): Bool;
}
