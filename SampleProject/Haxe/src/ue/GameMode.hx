// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AGameMode")
@:include("GameFramework/GameMode.h")
@:valueType
extern class GameMode extends GameModeBase {
	@:protected public var MatchState: FName;
	public var bDelayedStart: Bool;
	public var NumSpectators: ucpp.num.Int32;
	public var NumPlayers: ucpp.num.Int32;
	public var NumBots: ucpp.num.Int32;
	public var MinRespawnDelay: ucpp.num.Float32;
	public var NumTravellingPlayers: ucpp.num.Int32;
	public var EngineMessageClass: TSubclassOf<LocalMessage>;
	public var InactivePlayerArray: TArray<ucpp.Ptr<PlayerState>>;
	@:protected public var InactivePlayerStateLifeSpan: ucpp.num.Float32;
	@:protected public var MaxInactivePlayers: ucpp.num.Int32;
	@:protected public var bHandleDedicatedServerReplays: Bool;

	public function StartMatch(): Void;
	public function Say(Msg: FString): Void;
	public function RestartGame(): Void;
	@:protected public function ReadyToStartMatch(): Bool;
	@:protected public function ReadyToEndMatch(): Bool;
	@:protected public function K2_OnSetMatchState(NewState: FName): Void;
	public function IsMatchInProgress(): Bool;
	public function GetMatchState(): FName;
	public function EndMatch(): Void;
	public function AbortMatch(): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(IsMatchInProgress, GetMatchState)
@:nativeGen
abstract ConstGameMode(GameMode) from GameMode {
	public extern var bDelayedStart(get, never): Bool;
	public inline extern function get_bDelayedStart(): Bool return this.bDelayedStart;
	public extern var NumSpectators(get, never): ucpp.num.Int32;
	public inline extern function get_NumSpectators(): ucpp.num.Int32 return this.NumSpectators;
	public extern var NumPlayers(get, never): ucpp.num.Int32;
	public inline extern function get_NumPlayers(): ucpp.num.Int32 return this.NumPlayers;
	public extern var NumBots(get, never): ucpp.num.Int32;
	public inline extern function get_NumBots(): ucpp.num.Int32 return this.NumBots;
	public extern var MinRespawnDelay(get, never): ucpp.num.Float32;
	public inline extern function get_MinRespawnDelay(): ucpp.num.Float32 return this.MinRespawnDelay;
	public extern var NumTravellingPlayers(get, never): ucpp.num.Int32;
	public inline extern function get_NumTravellingPlayers(): ucpp.num.Int32 return this.NumTravellingPlayers;
	public extern var EngineMessageClass(get, never): TSubclassOf<LocalMessage.ConstLocalMessage>;
	public inline extern function get_EngineMessageClass(): TSubclassOf<LocalMessage.ConstLocalMessage> return this.EngineMessageClass;
	public extern var InactivePlayerArray(get, never): TArray<ucpp.Ptr<PlayerState.ConstPlayerState>>;
	public inline extern function get_InactivePlayerArray(): TArray<ucpp.Ptr<PlayerState.ConstPlayerState>> return this.InactivePlayerArray;
}

@:forward
@:nativeGen
@:native("GameMode*")
abstract GameModePtr(ucpp.Ptr<GameMode>) from ucpp.Ptr<GameMode> to ucpp.Ptr<GameMode>{
	@:from
	public static extern inline function fromValue(v: GameMode): GameModePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GameMode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}