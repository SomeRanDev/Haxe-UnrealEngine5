// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UDataTable")
@:include("Engine/DataTable.h")
@:structAccess
extern class DataTable extends Object {
	public var RowStruct: cpp.Star<ScriptStruct>;
	public var bStripFromClientBuilds: Bool;
	public var bIgnoreExtraFields: Bool;
	public var bIgnoreMissingFields: Bool;
	public var ImportKeyField: FString;
	public var AssetImportData: cpp.Star<AssetImportData>;
	public var ImportPath_DEPRECATED: FString;
	public var RowStructName: FName;
	public var RowsSerializedWithTags: TArray<cpp.UInt8>;
	public var TemporarilyReferencedObjects: TSet<cpp.Star<Object>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstDataTable(DataTable) from DataTable {
	public extern var RowStruct(get, never): cpp.Star<ScriptStruct.ConstScriptStruct>;
	public inline extern function get_RowStruct(): cpp.Star<ScriptStruct.ConstScriptStruct> return this.RowStruct;
	public extern var bStripFromClientBuilds(get, never): Bool;
	public inline extern function get_bStripFromClientBuilds(): Bool return this.bStripFromClientBuilds;
	public extern var bIgnoreExtraFields(get, never): Bool;
	public inline extern function get_bIgnoreExtraFields(): Bool return this.bIgnoreExtraFields;
	public extern var bIgnoreMissingFields(get, never): Bool;
	public inline extern function get_bIgnoreMissingFields(): Bool return this.bIgnoreMissingFields;
	public extern var ImportKeyField(get, never): FString;
	public inline extern function get_ImportKeyField(): FString return this.ImportKeyField;
	public extern var AssetImportData(get, never): cpp.Star<AssetImportData.ConstAssetImportData>;
	public inline extern function get_AssetImportData(): cpp.Star<AssetImportData.ConstAssetImportData> return this.AssetImportData;
	public extern var ImportPath_DEPRECATED(get, never): FString;
	public inline extern function get_ImportPath_DEPRECATED(): FString return this.ImportPath_DEPRECATED;
	public extern var RowStructName(get, never): FName;
	public inline extern function get_RowStructName(): FName return this.RowStructName;
	public extern var RowsSerializedWithTags(get, never): TArray<cpp.UInt8>;
	public inline extern function get_RowsSerializedWithTags(): TArray<cpp.UInt8> return this.RowsSerializedWithTags;
	public extern var TemporarilyReferencedObjects(get, never): TSet<cpp.Star<Object.ConstObject>>;
	public inline extern function get_TemporarilyReferencedObjects(): TSet<cpp.Star<Object.ConstObject>> return this.TemporarilyReferencedObjects;
}

@:forward
@:nativeGen
@:native("DataTable*")
abstract DataTablePtr(cpp.Star<DataTable>) from cpp.Star<DataTable> to cpp.Star<DataTable>{
	@:from
	public static extern inline function fromValue(v: DataTable): DataTablePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): DataTable {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}