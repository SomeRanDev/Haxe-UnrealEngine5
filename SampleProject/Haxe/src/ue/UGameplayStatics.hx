// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGameplayStatics")
@:include("Kismet/GameplayStatics.h")
extern class UGameplayStatics extends UBlueprintFunctionLibrary {

	public function UnRetainAllSoundsInSoundClass(InSoundClass: cpp.Star<USoundClass>): Void;
	public function UnloadStreamLevelBySoftObjectPtr(WorldContextObject: cpp.Star<UObject>, Level: TSoftObjectPtr<UWorld>, LatentInfo: FLatentActionInfo, bShouldBlockOnUnload: Bool): Void;
	public function UnloadStreamLevel(WorldContextObject: cpp.Star<UObject>, LevelName: FName, LatentInfo: FLatentActionInfo, bShouldBlockOnUnload: Bool): Void;
	public function SuggestProjectileVelocity_CustomArc(WorldContextObject: cpp.Star<UObject>, OutLaunchVelocity: FVector, StartPos: FVector, EndPos: FVector, OverrideGravityZ: cpp.Float32, ArcParam: cpp.Float32): Bool;
	public function SpawnSoundAttached(Sound: cpp.Star<USoundBase>, AttachToComponent: cpp.Star<USceneComponent>, AttachPointName: FName, Location: FVector, Rotation: FRotator, LocationType: EAttachLocation, bStopWhenAttachedToDestroyed: Bool, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, AttenuationSettings: cpp.Star<USoundAttenuation>, ConcurrencySettings: cpp.Star<USoundConcurrency>, bAutoDestroy: Bool): cpp.Star<UAudioComponent>;
	public function SpawnSoundAtLocation(WorldContextObject: cpp.Star<UObject>, Sound: cpp.Star<USoundBase>, Location: FVector, Rotation: FRotator, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, AttenuationSettings: cpp.Star<USoundAttenuation>, ConcurrencySettings: cpp.Star<USoundConcurrency>, bAutoDestroy: Bool): cpp.Star<UAudioComponent>;
	public function SpawnSound2D(WorldContextObject: cpp.Star<UObject>, Sound: cpp.Star<USoundBase>, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, ConcurrencySettings: cpp.Star<USoundConcurrency>, bPersistAcrossLevelTransition: Bool, bAutoDestroy: Bool): cpp.Star<UAudioComponent>;
	public function SpawnObject(ObjectClass: TSubclassOf<UObject>, Outer: cpp.Star<UObject>): cpp.Star<UObject>;
	public function SpawnForceFeedbackAttached(ForceFeedbackEffect: cpp.Star<UForceFeedbackEffect>, AttachToComponent: cpp.Star<USceneComponent>, AttachPointName: FName, Location: FVector, Rotation: FRotator, LocationType: EAttachLocation, bStopWhenAttachedToDestroyed: Bool, bLooping: Bool, IntensityMultiplier: cpp.Float32, StartTime: cpp.Float32, AttenuationSettings: cpp.Star<UForceFeedbackAttenuation>, bAutoDestroy: Bool): cpp.Star<UForceFeedbackComponent>;
	public function SpawnForceFeedbackAtLocation(WorldContextObject: cpp.Star<UObject>, ForceFeedbackEffect: cpp.Star<UForceFeedbackEffect>, Location: FVector, Rotation: FRotator, bLooping: Bool, IntensityMultiplier: cpp.Float32, StartTime: cpp.Float32, AttenuationSettings: cpp.Star<UForceFeedbackAttenuation>, bAutoDestroy: Bool): cpp.Star<UForceFeedbackComponent>;
	public function SpawnEmitterAttached(EmitterTemplate: cpp.Star<UParticleSystem>, AttachToComponent: cpp.Star<USceneComponent>, AttachPointName: FName, Location: FVector, Rotation: FRotator, Scale: FVector, LocationType: EAttachLocation, bAutoDestroy: Bool, PoolingMethod: EPSCPoolMethod, bAutoActivate: Bool): cpp.Star<UParticleSystemComponent>;
	public function SpawnEmitterAtLocation(WorldContextObject: cpp.Star<UObject>, EmitterTemplate: cpp.Star<UParticleSystem>, Location: FVector, Rotation: FRotator, Scale: FVector, bAutoDestroy: Bool, PoolingMethod: EPSCPoolMethod, bAutoActivateSystem: Bool): cpp.Star<UParticleSystemComponent>;
	public function SpawnDialogueAttached(Dialogue: cpp.Star<UDialogueWave>, Context: FDialogueContext, AttachToComponent: cpp.Star<USceneComponent>, AttachPointName: FName, Location: FVector, Rotation: FRotator, LocationType: EAttachLocation, bStopWhenAttachedToDestroyed: Bool, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, AttenuationSettings: cpp.Star<USoundAttenuation>, bAutoDestroy: Bool): cpp.Star<UAudioComponent>;
	public function SpawnDialogueAtLocation(WorldContextObject: cpp.Star<UObject>, Dialogue: cpp.Star<UDialogueWave>, Context: FDialogueContext, Location: FVector, Rotation: FRotator, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, AttenuationSettings: cpp.Star<USoundAttenuation>, bAutoDestroy: Bool): cpp.Star<UAudioComponent>;
	public function SpawnDialogue2D(WorldContextObject: cpp.Star<UObject>, Dialogue: cpp.Star<UDialogueWave>, Context: FDialogueContext, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, bAutoDestroy: Bool): cpp.Star<UAudioComponent>;
	public function SpawnDecalAttached(DecalMaterial: cpp.Star<UMaterialInterface>, DecalSize: FVector, AttachToComponent: cpp.Star<USceneComponent>, AttachPointName: FName, Location: FVector, Rotation: FRotator, LocationType: EAttachLocation, LifeSpan: cpp.Float32): cpp.Star<UDecalComponent>;
	public function SpawnDecalAtLocation(WorldContextObject: cpp.Star<UObject>, DecalMaterial: cpp.Star<UMaterialInterface>, DecalSize: FVector, Location: FVector, Rotation: FRotator, LifeSpan: cpp.Float32): cpp.Star<UDecalComponent>;
	public function SetWorldOriginLocation(WorldContextObject: cpp.Star<UObject>, NewLocation: FIntVector): Void;
	public function SetViewportMouseCaptureMode(WorldContextObject: cpp.Star<UObject>, MouseCaptureMode: EMouseCaptureMode): Void;
	public function SetSubtitlesEnabled(bEnabled: Bool): Void;
	public function SetSoundMixClassOverride(WorldContextObject: cpp.Star<UObject>, InSoundMixModifier: cpp.Star<USoundMix>, InSoundClass: cpp.Star<USoundClass>, Volume: cpp.Float32, Pitch: cpp.Float32, FadeInTime: cpp.Float32, bApplyToChildren: Bool): Void;
	public function SetSoundClassDistanceScale(WorldContextObject: cpp.Star<UObject>, SoundClass: cpp.Star<USoundClass>, DistanceAttenuationScale: cpp.Float32, TimeSec: cpp.Float32): Void;
	public function SetPlayerControllerID(Player: cpp.Star<APlayerController>, ControllerId: cpp.Int32): Void;
	public function SetMaxAudioChannelsScaled(WorldContextObject: cpp.Star<UObject>, MaxChannelCountScale: cpp.Float32): Void;
	public function SetGlobalTimeDilation(WorldContextObject: cpp.Star<UObject>, TimeDilation: cpp.Float32): Void;
	public function SetGlobalPitchModulation(WorldContextObject: cpp.Star<UObject>, PitchModulation: cpp.Float32, TimeSec: cpp.Float32): Void;
	public function SetGlobalListenerFocusParameters(WorldContextObject: cpp.Star<UObject>, FocusAzimuthScale: cpp.Float32, NonFocusAzimuthScale: cpp.Float32, FocusDistanceScale: cpp.Float32, NonFocusDistanceScale: cpp.Float32, FocusVolumeScale: cpp.Float32, NonFocusVolumeScale: cpp.Float32, FocusPriorityScale: cpp.Float32, NonFocusPriorityScale: cpp.Float32): Void;
	public function SetGamePaused(WorldContextObject: cpp.Star<UObject>, bPaused: Bool): Bool;
	public function SetForceDisableSplitscreen(WorldContextObject: cpp.Star<UObject>, bDisable: Bool): Void;
	public function SetEnableWorldRendering(WorldContextObject: cpp.Star<UObject>, bEnable: Bool): Void;
	public function SetBaseSoundMix(WorldContextObject: cpp.Star<UObject>, InSoundMix: cpp.Star<USoundMix>): Void;
	public function SaveGameToSlot(SaveGameObject: cpp.Star<USaveGame>, SlotName: FString, UserIndex: cpp.Int32): Bool;
	public function RemovePlayer(Player: cpp.Star<APlayerController>, bDestroyPawn: Bool): Void;
	public function RebaseZeroOriginOntoLocal(WorldContextObject: cpp.Star<UObject>, WorldLocation: FVector): FVector;
	public function RebaseLocalOriginOntoZero(WorldContextObject: cpp.Star<UObject>, WorldLocation: FVector): FVector;
	public function PushSoundMixModifier(WorldContextObject: cpp.Star<UObject>, InSoundMixModifier: cpp.Star<USoundMix>): Void;
	public function ProjectWorldToScreen(Player: cpp.Star<APlayerController>, WorldPosition: FVector, ScreenPosition: FVector2D, bPlayerViewportRelative: Bool): Bool;
	public function PrimeSound(InSound: cpp.Star<USoundBase>): Void;
	public function PrimeAllSoundsInSoundClass(InSoundClass: cpp.Star<USoundClass>): Void;
	public function PopSoundMixModifier(WorldContextObject: cpp.Star<UObject>, InSoundMixModifier: cpp.Star<USoundMix>): Void;
	public function PlayWorldCameraShake(WorldContextObject: cpp.Star<UObject>, Shake: TSubclassOf<UCameraShakeBase>, Epicenter: FVector, InnerRadius: cpp.Float32, OuterRadius: cpp.Float32, Falloff: cpp.Float32, bOrientShakeTowardsEpicenter: Bool): Void;
	public function PlaySoundAtLocation(WorldContextObject: cpp.Star<UObject>, Sound: cpp.Star<USoundBase>, Location: FVector, Rotation: FRotator, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, AttenuationSettings: cpp.Star<USoundAttenuation>, ConcurrencySettings: cpp.Star<USoundConcurrency>, OwningActor: cpp.Star<AActor>, InitialParams: cpp.Star<UInitialActiveSoundParams>): Void;
	public function PlaySound2D(WorldContextObject: cpp.Star<UObject>, Sound: cpp.Star<USoundBase>, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, ConcurrencySettings: cpp.Star<USoundConcurrency>, OwningActor: cpp.Star<AActor>, bIsUISound: Bool): Void;
	public function PlayDialogueAtLocation(WorldContextObject: cpp.Star<UObject>, Dialogue: cpp.Star<UDialogueWave>, Context: FDialogueContext, Location: FVector, Rotation: FRotator, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, AttenuationSettings: cpp.Star<USoundAttenuation>): Void;
	public function PlayDialogue2D(WorldContextObject: cpp.Star<UObject>, Dialogue: cpp.Star<UDialogueWave>, Context: FDialogueContext, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32): Void;
	public function ParseOption(Options: FString, Key: FString): FString;
	public function OpenLevelBySoftObjectPtr(WorldContextObject: cpp.Star<UObject>, Level: TSoftObjectPtr<UWorld>, bAbsolute: Bool, Options: FString): Void;
	public function OpenLevel(WorldContextObject: cpp.Star<UObject>, LevelName: FName, bAbsolute: Bool, Options: FString): Void;
	public function MakeHitResult(bBlockingHit: Bool, bInitialOverlap: Bool, Time: cpp.Float32, Distance: cpp.Float32, Location: FVector, ImpactPoint: FVector, Normal: FVector, ImpactNormal: FVector, PhysMat: cpp.Star<UPhysicalMaterial>, HitActor: cpp.Star<AActor>, HitComponent: cpp.Star<UPrimitiveComponent>, HitBoneName: FName, BoneName: FName, HitItem: cpp.Int32, ElementIndex: cpp.Int32, FaceIndex: cpp.Int32, TraceStart: FVector, TraceEnd: FVector): FHitResult;
	public function LoadStreamLevelBySoftObjectPtr(WorldContextObject: cpp.Star<UObject>, Level: TSoftObjectPtr<UWorld>, bMakeVisibleAfterLoad: Bool, bShouldBlockOnLoad: Bool, LatentInfo: FLatentActionInfo): Void;
	public function LoadStreamLevel(WorldContextObject: cpp.Star<UObject>, LevelName: FName, bMakeVisibleAfterLoad: Bool, bShouldBlockOnLoad: Bool, LatentInfo: FLatentActionInfo): Void;
	public function LoadGameFromSlot(SlotName: FString, UserIndex: cpp.Int32): cpp.Star<USaveGame>;
	public function IsSplitscreenForceDisabled(WorldContextObject: cpp.Star<UObject>): Bool;
	public function IsGamePaused(WorldContextObject: cpp.Star<UObject>): Bool;
	public function HasOption(Options: FString, InKey: FString): Bool;
	public function HasLaunchOption(OptionToCheck: FString): Bool;
	public function GrassOverlappingSphereCount(WorldContextObject: cpp.Star<UObject>, StaticMesh: cpp.Star<UStaticMesh>, CenterPosition: FVector, Radius: cpp.Float32): cpp.Int32;
	public function GetWorldOriginLocation(WorldContextObject: cpp.Star<UObject>): FIntVector;
	public function GetWorldDeltaSeconds(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetViewProjectionMatrix(DesiredView: FMinimalViewInfo, ViewMatrix: FMatrix, ProjectionMatrix: FMatrix, ViewProjectionMatrix: FMatrix): Void;
	public function GetViewportMouseCaptureMode(WorldContextObject: cpp.Star<UObject>): EMouseCaptureMode;
	public function GetUnpausedTimeSeconds(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetTimeSeconds(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetSurfaceType(Hit: FHitResult): EPhysicalSurface;
	public function GetStreamingLevel(WorldContextObject: cpp.Star<UObject>, PackageName: FName): cpp.Star<ULevelStreaming>;
	public function GetRealTimeSeconds(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetPlayerStateFromUniqueNetId(WorldContextObject: cpp.Star<UObject>, UniqueId: FUniqueNetIdRepl): cpp.Star<APlayerState>;
	public function GetPlayerState(WorldContextObject: cpp.Star<UObject>, PlayerStateIndex: cpp.Int32): cpp.Star<APlayerState>;
	public function GetPlayerPawn(WorldContextObject: cpp.Star<UObject>, PlayerIndex: cpp.Int32): cpp.Star<APawn>;
	public function GetPlayerControllerID(Player: cpp.Star<APlayerController>): cpp.Int32;
	public function GetPlayerControllerFromID(WorldContextObject: cpp.Star<UObject>, ControllerID: cpp.Int32): cpp.Star<APlayerController>;
	public function GetPlayerController(WorldContextObject: cpp.Star<UObject>, PlayerIndex: cpp.Int32): cpp.Star<APlayerController>;
	public function GetPlayerCharacter(WorldContextObject: cpp.Star<UObject>, PlayerIndex: cpp.Int32): cpp.Star<ACharacter>;
	public function GetPlayerCameraManager(WorldContextObject: cpp.Star<UObject>, PlayerIndex: cpp.Int32): cpp.Star<APlayerCameraManager>;
	public function GetPlatformName(): FString;
	public function GetObjectClass(Object: cpp.Star<UObject>): cpp.Star<UClass>;
	public function GetNumPlayerStates(WorldContextObject: cpp.Star<UObject>): cpp.Int32;
	public function GetNumPlayerControllers(WorldContextObject: cpp.Star<UObject>): cpp.Int32;
	public function GetNumLocalPlayerControllers(WorldContextObject: cpp.Star<UObject>): cpp.Int32;
	public function GetMaxAudioChannelCount(WorldContextObject: cpp.Star<UObject>): cpp.Int32;
	public function GetKeyValue(Pair: FString, Key: cpp.Reference<FString>, Value: cpp.Reference<FString>): Void;
	public function GetIntOption(Options: FString, Key: FString, DefaultValue: cpp.Int32): cpp.Int32;
	public function GetGlobalTimeDilation(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetGameState(WorldContextObject: cpp.Star<UObject>): cpp.Star<AGameStateBase>;
	public function GetGameMode(WorldContextObject: cpp.Star<UObject>): cpp.Star<AGameModeBase>;
	public function GetGameInstance(WorldContextObject: cpp.Star<UObject>): cpp.Star<UGameInstance>;
	public function GetEnableWorldRendering(WorldContextObject: cpp.Star<UObject>): Bool;
	public function GetCurrentReverbEffect(WorldContextObject: cpp.Star<UObject>): cpp.Star<UReverbEffect>;
	public function GetCurrentLevelName(WorldContextObject: cpp.Star<UObject>, bRemovePrefixString: Bool): FString;
	public function GetClosestListenerLocation(WorldContextObject: cpp.Star<UObject>, Location: FVector, MaximumRange: cpp.Float32, bAllowAttenuationOverride: Bool, ListenerPosition: FVector): Bool;
	public function GetAudioTimeSeconds(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetAllActorsWithTag(WorldContextObject: cpp.Star<UObject>, Tag: FName, OutActors: TArray<cpp.Star<AActor>>): Void;
	public function GetAllActorsWithInterface(WorldContextObject: cpp.Star<UObject>, Interface: TSubclassOf<UInterface>, OutActors: TArray<cpp.Star<AActor>>): Void;
	public function GetAllActorsOfClassWithTag(WorldContextObject: cpp.Star<UObject>, ActorClass: TSubclassOf<AActor>, Tag: FName, OutActors: TArray<cpp.Star<AActor>>): Void;
	public function GetAllActorsOfClass(WorldContextObject: cpp.Star<UObject>, ActorClass: TSubclassOf<AActor>, OutActors: TArray<cpp.Star<AActor>>): Void;
	public function GetActorOfClass(WorldContextObject: cpp.Star<UObject>, ActorClass: TSubclassOf<AActor>): cpp.Star<AActor>;
	public function GetActorArrayBounds(Actors: TArray<cpp.Star<AActor>>, bOnlyCollidingComponents: Bool, Center: FVector, BoxExtent: FVector): Void;
	public function GetActorArrayAverageLocation(Actors: TArray<cpp.Star<AActor>>): FVector;
	public function GetAccurateRealTime(Seconds: cpp.Reference<cpp.Int32>, PartialSeconds: cpp.Reference<cpp.Float32>): Void;
	public function FlushLevelStreaming(WorldContextObject: cpp.Star<UObject>): Void;
	public function FinishSpawningActor(Actor: cpp.Star<AActor>, SpawnTransform: FTransform): cpp.Star<AActor>;
	public function FindNearestActor(Origin: FVector, ActorsToCheck: TArray<cpp.Star<AActor>>, Distance: cpp.Reference<cpp.Float32>): cpp.Star<AActor>;
	public function FindCollisionUV(Hit: FHitResult, UVChannel: cpp.Int32, UV: FVector2D): Bool;
	public function EnableLiveStreaming(Enable: Bool): Void;
	public function DoesSaveGameExist(SlotName: FString, UserIndex: cpp.Int32): Bool;
	public function DeprojectScreenToWorld(Player: cpp.Star<APlayerController>, ScreenPosition: FVector2D, WorldPosition: FVector, WorldDirection: FVector): Bool;
	public function DeleteGameInSlot(SlotName: FString, UserIndex: cpp.Int32): Bool;
	public function DeactivateReverbEffect(WorldContextObject: cpp.Star<UObject>, TagName: FName): Void;
	public function CreateSound2D(WorldContextObject: cpp.Star<UObject>, Sound: cpp.Star<USoundBase>, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32, StartTime: cpp.Float32, ConcurrencySettings: cpp.Star<USoundConcurrency>, bPersistAcrossLevelTransition: Bool, bAutoDestroy: Bool): cpp.Star<UAudioComponent>;
	public function CreateSaveGameObject(SaveGameClass: TSubclassOf<USaveGame>): cpp.Star<USaveGame>;
	public function CreatePlayer(WorldContextObject: cpp.Star<UObject>, ControllerId: cpp.Int32, bSpawnPlayerController: Bool): cpp.Star<APlayerController>;
	public function ClearSoundMixModifiers(WorldContextObject: cpp.Star<UObject>): Void;
	public function ClearSoundMixClassOverride(WorldContextObject: cpp.Star<UObject>, InSoundMixModifier: cpp.Star<USoundMix>, InSoundClass: cpp.Star<USoundClass>, FadeOutTime: cpp.Float32): Void;
	public function CancelAsyncLoading(): Void;
	public function BreakHitResult(Hit: FHitResult, bBlockingHit: Bool, bInitialOverlap: Bool, Time: cpp.Reference<cpp.Float32>, Distance: cpp.Reference<cpp.Float32>, Location: FVector, ImpactPoint: FVector, Normal: FVector, ImpactNormal: FVector, PhysMat: cpp.Reference<cpp.Star<UPhysicalMaterial>>, HitActor: cpp.Reference<cpp.Star<AActor>>, HitComponent: cpp.Reference<cpp.Star<UPrimitiveComponent>>, HitBoneName: cpp.Reference<FName>, BoneName: cpp.Reference<FName>, HitItem: cpp.Reference<cpp.Int32>, ElementIndex: cpp.Reference<cpp.Int32>, FaceIndex: cpp.Reference<cpp.Int32>, TraceStart: FVector, TraceEnd: FVector): Void;
	public function BlueprintSuggestProjectileVelocity(WorldContextObject: cpp.Star<UObject>, TossVelocity: FVector, StartLocation: FVector, EndLocation: FVector, LaunchSpeed: cpp.Float32, OverrideGravityZ: cpp.Float32, TraceOption: ESuggestProjVelocityTraceOption, CollisionRadius: cpp.Float32, bFavorHighArc: Bool, bDrawDebug: Bool): Bool;
	public function Blueprint_PredictProjectilePath_ByTraceChannel(WorldContextObject: cpp.Star<UObject>, OutHit: FHitResult, OutPathPositions: TArray<FVector>, OutLastTraceDestination: FVector, StartPos: FVector, LaunchVelocity: FVector, bTracePath: Bool, ProjectileRadius: cpp.Float32, TraceChannel: ECollisionChannel, bTraceComplex: Bool, ActorsToIgnore: TArray<cpp.Star<AActor>>, DrawDebugType: EDrawDebugTrace, DrawDebugTime: cpp.Float32, SimFrequency: cpp.Float32, MaxSimTime: cpp.Float32, OverrideGravityZ: cpp.Float32): Bool;
	public function Blueprint_PredictProjectilePath_ByObjectType(WorldContextObject: cpp.Star<UObject>, OutHit: FHitResult, OutPathPositions: TArray<FVector>, OutLastTraceDestination: FVector, StartPos: FVector, LaunchVelocity: FVector, bTracePath: Bool, ProjectileRadius: cpp.Float32, ObjectTypes: TArray<EObjectTypeQuery>, bTraceComplex: Bool, ActorsToIgnore: TArray<cpp.Star<AActor>>, DrawDebugType: EDrawDebugTrace, DrawDebugTime: cpp.Float32, SimFrequency: cpp.Float32, MaxSimTime: cpp.Float32, OverrideGravityZ: cpp.Float32): Bool;
	public function Blueprint_PredictProjectilePath_Advanced(WorldContextObject: cpp.Star<UObject>, PredictParams: FPredictProjectilePathParams, PredictResult: FPredictProjectilePathResult): Bool;
	public function BeginSpawningActorFromBlueprint(WorldContextObject: cpp.Star<UObject>, Blueprint: cpp.Star<UBlueprint>, SpawnTransform: FTransform, bNoCollisionFail: Bool): cpp.Star<AActor>;
	public function BeginDeferredActorSpawnFromClass(WorldContextObject: cpp.Star<UObject>, ActorClass: TSubclassOf<AActor>, SpawnTransform: FTransform, CollisionHandlingOverride: ESpawnActorCollisionHandlingMethod, Owner: cpp.Star<AActor>): cpp.Star<AActor>;
	public function AreSubtitlesEnabled(): Bool;
	public function AreAnyListenersWithinRange(WorldContextObject: cpp.Star<UObject>, Location: FVector, MaximumRange: cpp.Float32): Bool;
	public function ApplyRadialDamageWithFalloff(WorldContextObject: cpp.Star<UObject>, BaseDamage: cpp.Float32, MinimumDamage: cpp.Float32, Origin: FVector, DamageInnerRadius: cpp.Float32, DamageOuterRadius: cpp.Float32, DamageFalloff: cpp.Float32, DamageTypeClass: TSubclassOf<UDamageType>, IgnoreActors: TArray<cpp.Star<AActor>>, DamageCauser: cpp.Star<AActor>, InstigatedByController: cpp.Star<AController>, DamagePreventionChannel: ECollisionChannel): Bool;
	public function ApplyRadialDamage(WorldContextObject: cpp.Star<UObject>, BaseDamage: cpp.Float32, Origin: FVector, DamageRadius: cpp.Float32, DamageTypeClass: TSubclassOf<UDamageType>, IgnoreActors: TArray<cpp.Star<AActor>>, DamageCauser: cpp.Star<AActor>, InstigatedByController: cpp.Star<AController>, bDoFullDamage: Bool, DamagePreventionChannel: ECollisionChannel): Bool;
	public function ApplyPointDamage(DamagedActor: cpp.Star<AActor>, BaseDamage: cpp.Float32, HitFromDirection: FVector, HitInfo: FHitResult, EventInstigator: cpp.Star<AController>, DamageCauser: cpp.Star<AActor>, DamageTypeClass: TSubclassOf<UDamageType>): cpp.Float32;
	public function ApplyDamage(DamagedActor: cpp.Star<AActor>, BaseDamage: cpp.Float32, EventInstigator: cpp.Star<AController>, DamageCauser: cpp.Star<AActor>, DamageTypeClass: TSubclassOf<UDamageType>): cpp.Float32;
	public function AnnounceAccessibleString(AnnouncementString: FString): Void;
	public function ActivateReverbEffect(WorldContextObject: cpp.Star<UObject>, ReverbEffect: cpp.Star<UReverbEffect>, TagName: FName, Priority: cpp.Float32, Volume: cpp.Float32, FadeTime: cpp.Float32): Void;
}
