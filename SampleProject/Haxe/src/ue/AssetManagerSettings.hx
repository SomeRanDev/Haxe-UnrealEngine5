// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAssetManagerSettings")
@:include("Engine/AssetManagerSettings.h")
@:valueType
extern class AssetManagerSettings extends DeveloperSettings {
	public var PrimaryAssetTypesToScan: TArray<PrimaryAssetTypeInfo>;
	public var DirectoriesToExclude: TArray<DirectoryPath>;
	public var PrimaryAssetRules: TArray<PrimaryAssetRulesOverride>;
	public var CustomPrimaryAssetRules: TArray<PrimaryAssetRulesCustomOverride>;
	public var bOnlyCookProductionAssets: Bool;
	public var bShouldManagerDetermineTypeAndName: Bool;
	public var bShouldGuessTypeAndNameInEditor: Bool;
	public var bShouldAcquireMissingChunksOnLoad: Bool;
	public var bShouldWarnAboutInvalidAssets: Bool;
	public var PrimaryAssetIdRedirects: TArray<AssetManagerRedirect>;
	public var PrimaryAssetTypeRedirects: TArray<AssetManagerRedirect>;
	public var AssetPathRedirects: TArray<AssetManagerRedirect>;
	public var MetaDataTagsForAssetRegistry: TSet<FName>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstAssetManagerSettings(AssetManagerSettings) from AssetManagerSettings {
	public extern var PrimaryAssetTypesToScan(get, never): TArray<PrimaryAssetTypeInfo>;
	public inline extern function get_PrimaryAssetTypesToScan(): TArray<PrimaryAssetTypeInfo> return this.PrimaryAssetTypesToScan;
	public extern var DirectoriesToExclude(get, never): TArray<DirectoryPath>;
	public inline extern function get_DirectoriesToExclude(): TArray<DirectoryPath> return this.DirectoriesToExclude;
	public extern var PrimaryAssetRules(get, never): TArray<PrimaryAssetRulesOverride>;
	public inline extern function get_PrimaryAssetRules(): TArray<PrimaryAssetRulesOverride> return this.PrimaryAssetRules;
	public extern var CustomPrimaryAssetRules(get, never): TArray<PrimaryAssetRulesCustomOverride>;
	public inline extern function get_CustomPrimaryAssetRules(): TArray<PrimaryAssetRulesCustomOverride> return this.CustomPrimaryAssetRules;
	public extern var bOnlyCookProductionAssets(get, never): Bool;
	public inline extern function get_bOnlyCookProductionAssets(): Bool return this.bOnlyCookProductionAssets;
	public extern var bShouldManagerDetermineTypeAndName(get, never): Bool;
	public inline extern function get_bShouldManagerDetermineTypeAndName(): Bool return this.bShouldManagerDetermineTypeAndName;
	public extern var bShouldGuessTypeAndNameInEditor(get, never): Bool;
	public inline extern function get_bShouldGuessTypeAndNameInEditor(): Bool return this.bShouldGuessTypeAndNameInEditor;
	public extern var bShouldAcquireMissingChunksOnLoad(get, never): Bool;
	public inline extern function get_bShouldAcquireMissingChunksOnLoad(): Bool return this.bShouldAcquireMissingChunksOnLoad;
	public extern var bShouldWarnAboutInvalidAssets(get, never): Bool;
	public inline extern function get_bShouldWarnAboutInvalidAssets(): Bool return this.bShouldWarnAboutInvalidAssets;
	public extern var PrimaryAssetIdRedirects(get, never): TArray<AssetManagerRedirect>;
	public inline extern function get_PrimaryAssetIdRedirects(): TArray<AssetManagerRedirect> return this.PrimaryAssetIdRedirects;
	public extern var PrimaryAssetTypeRedirects(get, never): TArray<AssetManagerRedirect>;
	public inline extern function get_PrimaryAssetTypeRedirects(): TArray<AssetManagerRedirect> return this.PrimaryAssetTypeRedirects;
	public extern var AssetPathRedirects(get, never): TArray<AssetManagerRedirect>;
	public inline extern function get_AssetPathRedirects(): TArray<AssetManagerRedirect> return this.AssetPathRedirects;
	public extern var MetaDataTagsForAssetRegistry(get, never): TSet<FName>;
	public inline extern function get_MetaDataTagsForAssetRegistry(): TSet<FName> return this.MetaDataTagsForAssetRegistry;
}

@:forward
@:nativeGen
@:native("AssetManagerSettings*")
abstract AssetManagerSettingsPtr(ucpp.Ptr<AssetManagerSettings>) from ucpp.Ptr<AssetManagerSettings> to ucpp.Ptr<AssetManagerSettings>{
	@:from
	public static extern inline function fromValue(v: AssetManagerSettings): AssetManagerSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AssetManagerSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}