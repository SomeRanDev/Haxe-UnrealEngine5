// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAudioMixerBlueprintLibrary")
@:include("AudioMixerBlueprintLibrary.h")
@:valueType
extern class AudioMixerBlueprintLibrary extends BlueprintFunctionLibrary {
	public function TrimAudioCache(InMegabytesToFree: ucpp.num.Float32): ucpp.num.Float32;
	public function SwapAudioOutputDevice(WorldContextObject: ucpp.Ptr<Object.ConstObject>, NewDeviceId: FString, OnCompletedDeviceSwap: ucpp.Ref<HaxeDelegateProperty<(ucpp.Ref<SwapAudioOutputResult>) -> Void>>): Void;
	public function StopRecordingOutput(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ExportType: EAudioRecordingExportType, Name: FString, Path: FString, SubmixToRecord: ucpp.Ptr<SoundSubmix>, ExistingSoundWaveToOverwrite: ucpp.Ptr<SoundWave>): ucpp.Ptr<SoundWave>;
	public function StopAudioBus(WorldContextObject: ucpp.Ptr<Object.ConstObject>, AudioBus: ucpp.Ptr<AudioBus>): Void;
	public function StopAnalyzingOutput(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SubmixToStopAnalyzing: ucpp.Ptr<SoundSubmix>): Void;
	public function StartRecordingOutput(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ExpectedDuration: ucpp.num.Float32, SubmixToRecord: ucpp.Ptr<SoundSubmix>): Void;
	public function StartAudioBus(WorldContextObject: ucpp.Ptr<Object.ConstObject>, AudioBus: ucpp.Ptr<AudioBus>): Void;
	public function StartAnalyzingOutput(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SubmixToAnalyze: ucpp.Ptr<SoundSubmix>, FFTSize: EFFTSize, InterpolationMethod: EFFTPeakInterpolationMethod, WindowType: EFFTWindowType, HopSize: ucpp.num.Float32, SpectrumType: EAudioSpectrumType): Void;
	public function SetSubmixEffectChainOverride(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SoundSubmix: ucpp.Ptr<SoundSubmix>, SubmixEffectPresetChain: TArray<ucpp.Ptr<SoundEffectSubmixPreset>>, FadeTimeSec: ucpp.num.Float32): Void;
	public function SetBypassSourceEffectChainEntry(WorldContextObject: ucpp.Ptr<Object.ConstObject>, PresetChain: ucpp.Ptr<SoundEffectSourcePresetChain>, EntryIndex: ucpp.num.Int32, bBypassed: Bool): Void;
	public function ResumeRecordingOutput(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SubmixToPause: ucpp.Ptr<SoundSubmix>): Void;
	public function ReplaceSubmixEffect(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InSoundSubmix: ucpp.Ptr<SoundSubmix>, SubmixChainIndex: ucpp.num.Int32, SubmixEffectPreset: ucpp.Ptr<SoundEffectSubmixPreset>): Void;
	public function ReplaceSoundEffectSubmix(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InSoundSubmix: ucpp.Ptr<SoundSubmix>, SubmixChainIndex: ucpp.num.Int32, SubmixEffectPreset: ucpp.Ptr<SoundEffectSubmixPreset>): Void;
	public function RemoveSubmixEffectPresetAtIndex(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SoundSubmix: ucpp.Ptr<SoundSubmix>, SubmixChainIndex: ucpp.num.Int32): Void;
	public function RemoveSubmixEffectPreset(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SoundSubmix: ucpp.Ptr<SoundSubmix>, SubmixEffectPreset: ucpp.Ptr<SoundEffectSubmixPreset>): Void;
	public function RemoveSubmixEffectAtIndex(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SoundSubmix: ucpp.Ptr<SoundSubmix>, SubmixChainIndex: ucpp.num.Int32): Void;
	public function RemoveSubmixEffect(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SoundSubmix: ucpp.Ptr<SoundSubmix>, SubmixEffectPreset: ucpp.Ptr<SoundEffectSubmixPreset>): Void;
	public function RemoveSourceEffectFromPresetChain(WorldContextObject: ucpp.Ptr<Object.ConstObject>, PresetChain: ucpp.Ptr<SoundEffectSourcePresetChain>, EntryIndex: ucpp.num.Int32): Void;
	public function RemoveMasterSubmixEffect(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SubmixEffectPreset: ucpp.Ptr<SoundEffectSubmixPreset>): Void;
	public function PrimeSoundForPlayback(SoundWave: ucpp.Ptr<SoundWave>, OnLoadCompletion: HaxeDelegateProperty<(ucpp.Ptr<SoundWave.ConstSoundWave>, Bool) -> Void>): Void;
	public function PrimeSoundCueForPlayback(SoundCue: ucpp.Ptr<SoundCue>): Void;
	public function PauseRecordingOutput(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SubmixToPause: ucpp.Ptr<SoundSubmix>): Void;
	public function MakePresetSpectralAnalysisBandSettings(InBandPresetType: EAudioSpectrumBandPresetType, InNumBands: ucpp.num.Int32, InAttackTimeMsec: ucpp.num.Int32, InReleaseTimeMsec: ucpp.num.Int32): TArray<SoundSubmixSpectralAnalysisBandSettings>;
	public function MakeMusicalSpectralAnalysisBandSettings(InNumSemitones: ucpp.num.Int32, InStartingMusicalNote: EMusicalNoteName, InStartingOctave: ucpp.num.Int32, InAttackTimeMsec: ucpp.num.Int32, InReleaseTimeMsec: ucpp.num.Int32): TArray<SoundSubmixSpectralAnalysisBandSettings>;
	public function MakeFullSpectrumSpectralAnalysisBandSettings(InNumBands: ucpp.num.Int32, InMinimumFrequency: ucpp.num.Float32, InMaximumFrequency: ucpp.num.Float32, InAttackTimeMsec: ucpp.num.Int32, InReleaseTimeMsec: ucpp.num.Int32): TArray<SoundSubmixSpectralAnalysisBandSettings>;
	public function IsAudioBusActive(WorldContextObject: ucpp.Ptr<Object.ConstObject>, AudioBus: ucpp.Ptr<AudioBus>): Bool;
	public function GetPhaseForFrequencies(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Frequencies: ucpp.Ref<TArray<ucpp.num.Float32>>, Phases: ucpp.Ref<TArray<ucpp.num.Float32>>, SubmixToAnalyze: ucpp.Ptr<SoundSubmix>): Void;
	public function GetNumberOfEntriesInSourceEffectChain(WorldContextObject: ucpp.Ptr<Object.ConstObject>, PresetChain: ucpp.Ptr<SoundEffectSourcePresetChain>): ucpp.num.Int32;
	public function GetMagnitudeForFrequencies(WorldContextObject: ucpp.Ptr<Object.ConstObject>, Frequencies: ucpp.Ref<TArray<ucpp.num.Float32>>, Magnitudes: ucpp.Ref<TArray<ucpp.num.Float32>>, SubmixToAnalyze: ucpp.Ptr<SoundSubmix>): Void;
	public function GetCurrentAudioOutputDeviceName(WorldContextObject: ucpp.Ptr<Object.ConstObject>, OnObtainCurrentDeviceEvent: ucpp.Ref<HaxeDelegateProperty<(FString) -> Void>>): Void;
	public function GetAvailableAudioOutputDevices(WorldContextObject: ucpp.Ptr<Object.ConstObject>, OnObtainDevicesEvent: ucpp.Ref<HaxeDelegateProperty<(ucpp.Ref<TArray<AudioOutputDeviceInfo>>) -> Void>>): Void;
	public function Conv_AudioOutputDeviceInfoToString(Info: ucpp.Ref<AudioOutputDeviceInfo>): FString;
	public function ClearSubmixEffects(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SoundSubmix: ucpp.Ptr<SoundSubmix>): Void;
	public function ClearSubmixEffectChainOverride(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SoundSubmix: ucpp.Ptr<SoundSubmix>, FadeTimeSec: ucpp.num.Float32): Void;
	public function ClearMasterSubmixEffects(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Void;
	public function AddSubmixEffect(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SoundSubmix: ucpp.Ptr<SoundSubmix>, SubmixEffectPreset: ucpp.Ptr<SoundEffectSubmixPreset>): ucpp.num.Int32;
	public function AddSourceEffectToPresetChain(WorldContextObject: ucpp.Ptr<Object.ConstObject>, PresetChain: ucpp.Ptr<SoundEffectSourcePresetChain>, Entry: SourceEffectChainEntry): Void;
	public function AddMasterSubmixEffect(WorldContextObject: ucpp.Ptr<Object.ConstObject>, SubmixEffectPreset: ucpp.Ptr<SoundEffectSubmixPreset>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstAudioMixerBlueprintLibrary(AudioMixerBlueprintLibrary) from AudioMixerBlueprintLibrary {
}

@:forward
@:nativeGen
@:native("AudioMixerBlueprintLibrary*")
abstract AudioMixerBlueprintLibraryPtr(ucpp.Ptr<AudioMixerBlueprintLibrary>) from ucpp.Ptr<AudioMixerBlueprintLibrary> to ucpp.Ptr<AudioMixerBlueprintLibrary>{
	@:from
	public static extern inline function fromValue(v: AudioMixerBlueprintLibrary): AudioMixerBlueprintLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AudioMixerBlueprintLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}