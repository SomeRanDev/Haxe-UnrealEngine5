// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPrimitiveComponent")
@:include("Components/PrimitiveComponent.h")
@:valueType
extern class PrimitiveComp extends SceneComp {
	public var MinDrawDistance: ucpp.num.Float32;
	public var LDMaxDrawDistance: ucpp.num.Float32;
	public var CachedMaxDrawDistance: ucpp.num.Float32;
	public var DepthPriorityGroup: TEnumAsByte<ESceneDepthPriorityGroup>;
	public var ViewOwnerDepthPriorityGroup: TEnumAsByte<ESceneDepthPriorityGroup>;
	public var IndirectLightingCacheQuality: TEnumAsByte<EIndirectLightingCacheQuality>;
	public var LightmapType: ELightmapType;
	public var HLODBatchingPolicy: EHLODBatchingPolicy;
	public var bEnableAutoLODGeneration: Bool;
	public var bIsActorTextureStreamingBuiltData: Bool;
	public var bIsValidTextureStreamingBuiltData: Bool;
	public var bNeverDistanceCull: Bool;
	public var bAlwaysCreatePhysicsState: Bool;
	public function GetGenerateOverlapEvents(): Bool;
	public function SetGenerateOverlapEvents(input: Bool): Void;
	public var bMultiBodyOverlap: Bool;
	public var bTraceComplexOnMove: Bool;
	public var bReturnMaterialOnMove: Bool;
	public var bUseViewOwnerDepthPriorityGroup: Bool;
	public var bAllowCullDistanceVolume: Bool;
	public var bVisibleInReflectionCaptures: Bool;
	public var bVisibleInRealTimeSkyCaptures: Bool;
	public var bVisibleInRayTracing: Bool;
	public var bRenderInMainPass: Bool;
	public var bRenderInDepthPass: Bool;
	public var bReceivesDecals: Bool;
	public var bHoldout: Bool;
	public var bOwnerNoSee: Bool;
	public var bOnlyOwnerSee: Bool;
	public var bTreatAsBackgroundForOcclusion: Bool;
	public var bUseAsOccluder: Bool;
	public var bSelectable: Bool;
	public var bForceMipStreaming: Bool;
	public var bHasPerInstanceHitProxies: Bool;
	public var CastShadow: Bool;
	public var bEmissiveLightSource: Bool;
	public var bAffectDynamicIndirectLighting: Bool;
	public var bAffectIndirectLightingWhileHidden: Bool;
	public var bAffectDistanceFieldLighting: Bool;
	public var bCastDynamicShadow: Bool;
	public var bCastStaticShadow: Bool;
	public var bCastVolumetricTranslucentShadow: Bool;
	public var bCastContactShadow: Bool;
	public var bSelfShadowOnly: Bool;
	public var bCastFarShadow: Bool;
	public var bCastInsetShadow: Bool;
	public var bCastCinematicShadow: Bool;
	public var bCastHiddenShadow: Bool;
	public var bCastShadowAsTwoSided: Bool;
	public var bLightAttachmentsAsGroup: Bool;
	public var bExcludeFromLightAttachmentGroup: Bool;
	public var bReceiveMobileCSMShadows: Bool;
	public var bSingleSampleShadowFromStationaryLights: Bool;
	public var bIgnoreRadialImpulse: Bool;
	public var bIgnoreRadialForce: Bool;
	public var bApplyImpulseOnDamage: Bool;
	public var bReplicatePhysicsToAutonomousProxy: Bool;
	public var bFillCollisionUnderneathForNavmesh: Bool;
	public var AlwaysLoadOnClient: Bool;
	public var AlwaysLoadOnServer: Bool;
	public var bUseEditorCompositing: Bool;
	public var bIsBeingMovedByEditor: Bool;
	public var bRenderCustomDepth: Bool;
	public var bVisibleInSceneCaptureOnly: Bool;
	public var bHiddenInSceneCapture: Bool;
	public var bRayTracingFarField: Bool;
	@:protected public var bHasNoStreamableTextures: Bool;
	@:protected public var bStaticWhenNotMoveable: Bool;
	public var bHasCustomNavigableGeometry: TEnumAsByte<EHasCustomNavigableGeometry>;
	public var CanCharacterStepUpOn: TEnumAsByte<ECanBeCharacterBase>;
	public var LightingChannels: LightingChannels;
	public var RayTracingGroupId: ucpp.num.Int32;
	public var VisibilityId: ucpp.num.Int32;
	public var CustomDepthStencilValue: ucpp.num.Int32;
	private var CustomPrimitiveData: CustomPrimitiveData;
	private var CustomPrimitiveDataInternal: CustomPrimitiveData;
	public var TranslucencySortPriority: ucpp.num.Int32;
	public var TranslucencySortDistanceOffset: ucpp.num.Float32;
	public var RuntimeVirtualTextures: TArray<ucpp.Ptr<RuntimeVirtualTexture>>;
	public var VirtualTextureLodBias: ucpp.num.Int8;
	public var VirtualTextureCullMips: ucpp.num.Int8;
	public var VirtualTextureMinCoverage: ucpp.num.Int8;
	public var VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	public var BoundsScale: ucpp.num.Float32;
	public var MoveIgnoreActors: TArray<ucpp.Ptr<Actor>>;
	public var MoveIgnoreComponents: TArray<ucpp.Ptr<PrimitiveComp>>;
	public var BodyInstance: BodyInstance;
	public var OnComponentHit: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>, ucpp.Ptr<Actor>, ucpp.Ptr<PrimitiveComp>, Vector, ucpp.Ref<HitResult>) -> Void>;
	public var OnComponentBeginOverlap: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>, ucpp.Ptr<Actor>, ucpp.Ptr<PrimitiveComp>, ucpp.num.Int32, Bool, ucpp.Ref<HitResult>) -> Void>;
	public var OnComponentEndOverlap: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>, ucpp.Ptr<Actor>, ucpp.Ptr<PrimitiveComp>, ucpp.num.Int32) -> Void>;
	public var OnComponentWake: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>, FName) -> Void>;
	public var OnComponentSleep: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>, FName) -> Void>;
	public var OnComponentPhysicsStateChanged: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>, EComponentPhysicsStateChange) -> Void>;
	public var OnBeginCursorOver: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>) -> Void>;
	public var OnEndCursorOver: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>) -> Void>;
	public var OnClicked: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>, Key) -> Void>;
	public var OnReleased: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp>, Key) -> Void>;
	public var OnInputTouchBegin: HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp>) -> Void>;
	public var OnInputTouchEnd: HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp>) -> Void>;
	public var OnInputTouchEnter: HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp>) -> Void>;
	public var OnInputTouchLeave: HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp>) -> Void>;
	public var RayTracingGroupCullingPriority: ERayTracingGroupCullingPriority;
	public var CustomDepthStencilWriteMask: ERendererStencilMask;
	private var ExcludeFromHLODLevels: ucpp.num.UInt8;
	private var LODParentPrimitive: ucpp.Ptr<PrimitiveComp>;

	public function WasRecentlyRendered(Tolerance: ucpp.num.Float32): Bool;
	public function WakeRigidBody(BoneName: FName): Void;
	public function WakeAllRigidBodies(): Void;
	public function SetWalkableSlopeOverride(NewOverride: ucpp.Ref<WalkableSlopeOverride>): Void;
	public function SetVisibleInSceneCaptureOnly(bValue: Bool): Void;
	public function SetVisibleInRayTracing(bNewVisibleInRayTracing: Bool): Void;
	public function SetVectorParameterForDefaultCustomPrimitiveData(ParameterName: FName, Value: Vector4): Void;
	public function SetVectorParameterForCustomPrimitiveData(ParameterName: FName, Value: Vector4): Void;
	public function SetUseCCD(InUseCCD: Bool, BoneName: FName): Void;
	public function SetTranslucentSortPriority(NewTranslucentSortPriority: ucpp.num.Int32): Void;
	public function SetTranslucencySortDistanceOffset(NewTranslucencySortDistanceOffset: ucpp.num.Float32): Void;
	public function SetStaticWhenNotMoveable(bInStaticWhenNotMoveable: Bool): Void;
	public function SetSingleSampleShadowFromStationaryLights(bNewSingleSampleShadowFromStationaryLights: Bool): Void;
	public function SetSimulatePhysics(bSimulate: Bool): Void;
	public function SetScalarParameterForDefaultCustomPrimitiveData(ParameterName: FName, Value: ucpp.num.Float32): Void;
	public function SetScalarParameterForCustomPrimitiveData(ParameterName: FName, Value: ucpp.num.Float32): Void;
	public function SetRenderInMainPass(bValue: Bool): Void;
	public function SetRenderInDepthPass(bValue: Bool): Void;
	public function SetRenderCustomDepth(bValue: Bool): Void;
	public function SetReceivesDecals(bNewReceivesDecals: Bool): Void;
	public function SetPhysMaterialOverride(NewPhysMaterial: ucpp.Ptr<PhysicalMaterial>): Void;
	public function SetPhysicsMaxAngularVelocityInRadians(NewMaxAngVel: ucpp.num.Float32, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsMaxAngularVelocityInDegrees(NewMaxAngVel: ucpp.num.Float32, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsLinearVelocity(NewVel: Vector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsAngularVelocityInRadians(NewAngVel: Vector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsAngularVelocityInDegrees(NewAngVel: Vector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetOwnerNoSee(bNewOwnerNoSee: Bool): Void;
	public function SetOnlyOwnerSee(bNewOnlyOwnerSee: Bool): Void;
	public function SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: Bool): Void;
	public function SetMaterialByName(MaterialSlotName: FName, Material: ucpp.Ptr<MaterialInterface>): Void;
	public function SetMaterial(ElementIndex: ucpp.num.Int32, Material: ucpp.Ptr<MaterialInterface>): Void;
	public function SetMassScale(BoneName: FName, InMassScale: ucpp.num.Float32): Void;
	public function SetMassOverrideInKg(BoneName: FName, MassInKg: ucpp.num.Float32, bOverrideMass: Bool): Void;
	public function SetLinearDamping(InDamping: ucpp.num.Float32): Void;
	public function SetLightingChannels(bChannel0: Bool, bChannel1: Bool, bChannel2: Bool): Void;
	public function SetLightAttachmentsAsGroup(bInLightAttachmentsAsGroup: Bool): Void;
	public function SetHoldout(bNewHoldout: Bool): Void;
	public function SetHiddenInSceneCapture(bValue: Bool): Void;
	public function SetExcludeFromLightAttachmentGroup(bInExcludeFromLightAttachmentGroup: Bool): Void;
	private function SetExcludeForSpecificHLODLevels(InExcludeForSpecificHLODLevels: ucpp.Ref<TArray<ucpp.num.Int32>>): Void;
	public function SetExcludedFromHLODLevel(HLODLevel: EHLODLevelExclusion, bExcluded: Bool): Void;
	public function SetEnableGravity(bGravityEnabled: Bool): Void;
	public function SetEmissiveLightSource(NewEmissiveLightSource: Bool): Void;
	public function SetDefaultCustomPrimitiveDataVector4(DataIndex: ucpp.num.Int32, Value: Vector4): Void;
	public function SetDefaultCustomPrimitiveDataVector3(DataIndex: ucpp.num.Int32, Value: Vector): Void;
	public function SetDefaultCustomPrimitiveDataVector2(DataIndex: ucpp.num.Int32, Value: Vector2D): Void;
	public function SetDefaultCustomPrimitiveDataFloat(DataIndex: ucpp.num.Int32, Value: ucpp.num.Float32): Void;
	public function SetCustomPrimitiveDataVector4(DataIndex: ucpp.num.Int32, Value: Vector4): Void;
	public function SetCustomPrimitiveDataVector3(DataIndex: ucpp.num.Int32, Value: Vector): Void;
	public function SetCustomPrimitiveDataVector2(DataIndex: ucpp.num.Int32, Value: Vector2D): Void;
	public function SetCustomPrimitiveDataFloat(DataIndex: ucpp.num.Int32, Value: ucpp.num.Float32): Void;
	public function SetCustomDepthStencilWriteMask(WriteMaskBit: ERendererStencilMask): Void;
	public function SetCustomDepthStencilValue(Value: ucpp.num.Int32): Void;
	public function SetCullDistance(NewCullDistance: ucpp.num.Float32): Void;
	public function SetConstraintMode(ConstraintMode: TEnumAsByte<EDOFMode>): Void;
	public function SetCollisionResponseToChannel(Channel: TEnumAsByte<ECollisionChannel>, NewResponse: TEnumAsByte<ECollisionResponse>): Void;
	public function SetCollisionResponseToAllChannels(NewResponse: TEnumAsByte<ECollisionResponse>): Void;
	public function SetCollisionProfileName(InCollisionProfileName: FName, bUpdateOverlaps: Bool): Void;
	public function SetCollisionObjectType(Channel: TEnumAsByte<ECollisionChannel>): Void;
	public function SetCollisionEnabled(NewType: TEnumAsByte<ECollisionEnabled>): Void;
	public function SetCenterOfMass(CenterOfMassOffset: Vector, BoneName: FName): Void;
	public function SetCastShadow(NewCastShadow: Bool): Void;
	public function SetCastInsetShadow(bInCastInsetShadow: Bool): Void;
	public function SetCastHiddenShadow(NewCastHiddenShadow: Bool): Void;
	public function SetCastContactShadow(bInCastContactShadow: Bool): Void;
	public function SetBoundsScale(NewBoundsScale: ucpp.num.Float32): Void;
	public function SetAngularDamping(InDamping: ucpp.num.Float32): Void;
	public function SetAllUseCCD(InUseCCD: Bool): Void;
	public function SetAllPhysicsLinearVelocity(NewVel: Vector, bAddToCurrent: Bool): Void;
	public function SetAllPhysicsAngularVelocityInRadians(NewAngVel: ucpp.Ref<Vector>, bAddToCurrent: Bool): Void;
	public function SetAllPhysicsAngularVelocityInDegrees(NewAngVel: ucpp.Ref<Vector>, bAddToCurrent: Bool): Void;
	public function SetAllMassScale(InMassScale: ucpp.num.Float32): Void;
	public function SetAffectIndirectLightingWhileHidden(bNewAffectIndirectLightingWhileHidden: Bool): Void;
	public function SetAffectDynamicIndirectLighting(bNewAffectDynamicIndirectLighting: Bool): Void;
	public function SetAffectDistanceFieldLighting(NewAffectDistanceFieldLighting: Bool): Void;
	public function ScaleByMomentOfInertia(InputVector: Vector, BoneName: FName): Vector;
	public function PutRigidBodyToSleep(BoneName: FName): Void;
	public function K2_SphereTraceComponent(TraceStart: Vector, TraceEnd: Vector, SphereRadius: ucpp.num.Float32, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: ucpp.Ref<Vector>, HitNormal: ucpp.Ref<Vector>, BoneName: ucpp.Ref<FName>, OutHit: ucpp.Ref<HitResult>): Bool;
	public function K2_SphereOverlapComponent(InSphereCentre: Vector, InSphereRadius: ucpp.num.Float32, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: ucpp.Ref<Vector>, HitNormal: ucpp.Ref<Vector>, BoneName: ucpp.Ref<FName>, OutHit: ucpp.Ref<HitResult>): Bool;
	public function K2_LineTraceComponent(TraceStart: Vector, TraceEnd: Vector, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: ucpp.Ref<Vector>, HitNormal: ucpp.Ref<Vector>, BoneName: ucpp.Ref<FName>, OutHit: ucpp.Ref<HitResult>): Bool;
	public function K2_IsQueryCollisionEnabled(): Bool;
	public function K2_IsPhysicsCollisionEnabled(): Bool;
	public function K2_IsCollisionEnabled(): Bool;
	public function K2_BoxOverlapComponent(InBoxCentre: Vector, InBox: Box, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: ucpp.Ref<Vector>, HitNormal: ucpp.Ref<Vector>, BoneName: ucpp.Ref<FName>, OutHit: ucpp.Ref<HitResult>): Bool;
	public function IsOverlappingComponent(OtherComp: ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>): Bool;
	public function IsOverlappingActor(Other: ucpp.Ptr<Actor.ConstActor>): Bool;
	public function IsGravityEnabled(): Bool;
	public function IsExcludedFromHLODLevel(HLODLevel: EHLODLevelExclusion): Bool;
	public function IsAnyRigidBodyAwake(): Bool;
	public function InvalidateLumenSurfaceCache(): Void;
	public function IgnoreComponentWhenMoving(Component: ucpp.Ptr<PrimitiveComp>, bShouldIgnore: Bool): Void;
	public function IgnoreActorWhenMoving(Actor: ucpp.Ptr<Actor>, bShouldIgnore: Bool): Void;
	public function GetWalkableSlopeOverride(): WalkableSlopeOverride;
	public function GetStaticWhenNotMoveable(): Bool;
	public function GetPhysicsLinearVelocityAtPoint(Point: Vector, BoneName: FName): Vector;
	public function GetPhysicsLinearVelocity(BoneName: FName): Vector;
	public function GetPhysicsAngularVelocityInRadians(BoneName: FName): Vector;
	public function GetPhysicsAngularVelocityInDegrees(BoneName: FName): Vector;
	public function GetOverlappingComponents(OutOverlappingComponents: ucpp.Ref<TArray<ucpp.Ptr<PrimitiveComp>>>): Void;
	public function GetOverlappingActors(OverlappingActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>, ClassFilter: TSubclassOf<Actor>): Void;
	public function GetNumMaterials(): ucpp.num.Int32;
	public function GetMaterialFromCollisionFaceIndex(FaceIndex: ucpp.num.Int32, SectionIndex: ucpp.Ref<ucpp.num.Int32>): ucpp.Ptr<MaterialInterface>;
	public function GetMaterial(ElementIndex: ucpp.num.Int32): ucpp.Ptr<MaterialInterface>;
	public function GetMassScale(BoneName: FName): ucpp.num.Float32;
	public function GetMass(): ucpp.num.Float32;
	public function GetLinearDamping(): ucpp.num.Float32;
	public function GetInertiaTensor(BoneName: FName): Vector;
	private function GetExcludeForSpecificHLODLevels(): TArray<ucpp.num.Int32>;
	public function GetCustomPrimitiveDataIndexForVectorParameter(ParameterName: FName): ucpp.num.Int32;
	public function GetCustomPrimitiveDataIndexForScalarParameter(ParameterName: FName): ucpp.num.Int32;
	public function GetCollisionResponseToChannel(Channel: TEnumAsByte<ECollisionChannel>): TEnumAsByte<ECollisionResponse>;
	public function GetCollisionProfileName(): FName;
	public function GetCollisionObjectType(): TEnumAsByte<ECollisionChannel>;
	public function GetCollisionEnabled(): TEnumAsByte<ECollisionEnabled>;
	public function GetClosestPointOnCollision(Point: ucpp.Ref<Vector>, OutPointOnBody: ucpp.Ref<Vector>, BoneName: FName): ucpp.num.Float32;
	public function GetCenterOfMass(BoneName: FName): Vector;
	public function GetBodyInstanceAsyncPhysicsTickHandle(BoneName: FName, bGetWelded: Bool, Index: ucpp.num.Int32): BodyInstanceAsyncPhysicsTickHandle;
	public function GetAngularDamping(): ucpp.num.Float32;
	public function CreateDynamicMaterialInstance(ElementIndex: ucpp.num.Int32, SourceMaterial: ucpp.Ptr<MaterialInterface>, OptionalName: FName): ucpp.Ptr<MaterialInstanceDynamic>;
	public function CreateAndSetMaterialInstanceDynamicFromMaterial(ElementIndex: ucpp.num.Int32, Parent: ucpp.Ptr<MaterialInterface>): ucpp.Ptr<MaterialInstanceDynamic>;
	public function CreateAndSetMaterialInstanceDynamic(ElementIndex: ucpp.num.Int32): ucpp.Ptr<MaterialInstanceDynamic>;
	public function CopyArrayOfMoveIgnoreComponents(): TArray<ucpp.Ptr<PrimitiveComp>>;
	public function CopyArrayOfMoveIgnoreActors(): TArray<ucpp.Ptr<Actor>>;
	public function ClearMoveIgnoreComponents(): Void;
	public function ClearMoveIgnoreActors(): Void;
	public function CanCharacterStepUp(Pawn: ucpp.Ptr<Pawn>): Bool;
	public function AddVelocityChangeImpulseAtLocation(Impulse: Vector, Location: Vector, BoneName: FName): Void;
	public function AddTorqueInRadians(Torque: Vector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddTorqueInDegrees(Torque: Vector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddRadialImpulse(Origin: Vector, Radius: ucpp.num.Float32, Strength: ucpp.num.Float32, Falloff: TEnumAsByte<ERadialImpulseFalloff>, bVelChange: Bool): Void;
	public function AddRadialForce(Origin: Vector, Radius: ucpp.num.Float32, Strength: ucpp.num.Float32, Falloff: TEnumAsByte<ERadialImpulseFalloff>, bAccelChange: Bool): Void;
	public function AddImpulseAtLocation(Impulse: Vector, Location: Vector, BoneName: FName): Void;
	public function AddImpulse(Impulse: Vector, BoneName: FName, bVelChange: Bool): Void;
	public function AddForceAtLocationLocal(Force: Vector, Location: Vector, BoneName: FName): Void;
	public function AddForceAtLocation(Force: Vector, Location: Vector, BoneName: FName): Void;
	public function AddForce(Force: Vector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddAngularImpulseInRadians(Impulse: Vector, BoneName: FName, bVelChange: Bool): Void;
	public function AddAngularImpulseInDegrees(Impulse: Vector, BoneName: FName, bVelChange: Bool): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	WasRecentlyRendered, ScaleByMomentOfInertia, K2_IsQueryCollisionEnabled, K2_IsPhysicsCollisionEnabled, K2_IsCollisionEnabled,
	IsOverlappingComponent, IsOverlappingActor, IsGravityEnabled, IsExcludedFromHLODLevel, GetWalkableSlopeOverride,
	GetStaticWhenNotMoveable, GetPhysicsAngularVelocityInRadians, GetPhysicsAngularVelocityInDegrees, GetOverlappingComponents, GetOverlappingActors,
	GetNumMaterials, GetMaterialFromCollisionFaceIndex, GetMaterial, GetMassScale, GetMass,
	GetLinearDamping, GetInertiaTensor, GetExcludeForSpecificHLODLevels, GetCustomPrimitiveDataIndexForVectorParameter, GetCustomPrimitiveDataIndexForScalarParameter,
	GetCollisionResponseToChannel, GetCollisionProfileName, GetCollisionObjectType, GetCollisionEnabled, GetClosestPointOnCollision,
	GetCenterOfMass, GetBodyInstanceAsyncPhysicsTickHandle, GetAngularDamping, CanCharacterStepUp
)
@:nativeGen
abstract ConstPrimitiveComp(PrimitiveComp) from PrimitiveComp {
	public extern var MinDrawDistance(get, never): ucpp.num.Float32;
	public inline extern function get_MinDrawDistance(): ucpp.num.Float32 return this.MinDrawDistance;
	public extern var LDMaxDrawDistance(get, never): ucpp.num.Float32;
	public inline extern function get_LDMaxDrawDistance(): ucpp.num.Float32 return this.LDMaxDrawDistance;
	public extern var CachedMaxDrawDistance(get, never): ucpp.num.Float32;
	public inline extern function get_CachedMaxDrawDistance(): ucpp.num.Float32 return this.CachedMaxDrawDistance;
	public extern var DepthPriorityGroup(get, never): TEnumAsByte<ESceneDepthPriorityGroup>;
	public inline extern function get_DepthPriorityGroup(): TEnumAsByte<ESceneDepthPriorityGroup> return this.DepthPriorityGroup;
	public extern var ViewOwnerDepthPriorityGroup(get, never): TEnumAsByte<ESceneDepthPriorityGroup>;
	public inline extern function get_ViewOwnerDepthPriorityGroup(): TEnumAsByte<ESceneDepthPriorityGroup> return this.ViewOwnerDepthPriorityGroup;
	public extern var IndirectLightingCacheQuality(get, never): TEnumAsByte<EIndirectLightingCacheQuality>;
	public inline extern function get_IndirectLightingCacheQuality(): TEnumAsByte<EIndirectLightingCacheQuality> return this.IndirectLightingCacheQuality;
	public extern var LightmapType(get, never): ELightmapType;
	public inline extern function get_LightmapType(): ELightmapType return this.LightmapType;
	public extern var HLODBatchingPolicy(get, never): EHLODBatchingPolicy;
	public inline extern function get_HLODBatchingPolicy(): EHLODBatchingPolicy return this.HLODBatchingPolicy;
	public extern var bEnableAutoLODGeneration(get, never): Bool;
	public inline extern function get_bEnableAutoLODGeneration(): Bool return this.bEnableAutoLODGeneration;
	public extern var bIsActorTextureStreamingBuiltData(get, never): Bool;
	public inline extern function get_bIsActorTextureStreamingBuiltData(): Bool return this.bIsActorTextureStreamingBuiltData;
	public extern var bIsValidTextureStreamingBuiltData(get, never): Bool;
	public inline extern function get_bIsValidTextureStreamingBuiltData(): Bool return this.bIsValidTextureStreamingBuiltData;
	public extern var bNeverDistanceCull(get, never): Bool;
	public inline extern function get_bNeverDistanceCull(): Bool return this.bNeverDistanceCull;
	public extern var bAlwaysCreatePhysicsState(get, never): Bool;
	public inline extern function get_bAlwaysCreatePhysicsState(): Bool return this.bAlwaysCreatePhysicsState;
	public extern var bMultiBodyOverlap(get, never): Bool;
	public inline extern function get_bMultiBodyOverlap(): Bool return this.bMultiBodyOverlap;
	public extern var bTraceComplexOnMove(get, never): Bool;
	public inline extern function get_bTraceComplexOnMove(): Bool return this.bTraceComplexOnMove;
	public extern var bReturnMaterialOnMove(get, never): Bool;
	public inline extern function get_bReturnMaterialOnMove(): Bool return this.bReturnMaterialOnMove;
	public extern var bUseViewOwnerDepthPriorityGroup(get, never): Bool;
	public inline extern function get_bUseViewOwnerDepthPriorityGroup(): Bool return this.bUseViewOwnerDepthPriorityGroup;
	public extern var bAllowCullDistanceVolume(get, never): Bool;
	public inline extern function get_bAllowCullDistanceVolume(): Bool return this.bAllowCullDistanceVolume;
	public extern var bVisibleInReflectionCaptures(get, never): Bool;
	public inline extern function get_bVisibleInReflectionCaptures(): Bool return this.bVisibleInReflectionCaptures;
	public extern var bVisibleInRealTimeSkyCaptures(get, never): Bool;
	public inline extern function get_bVisibleInRealTimeSkyCaptures(): Bool return this.bVisibleInRealTimeSkyCaptures;
	public extern var bVisibleInRayTracing(get, never): Bool;
	public inline extern function get_bVisibleInRayTracing(): Bool return this.bVisibleInRayTracing;
	public extern var bRenderInMainPass(get, never): Bool;
	public inline extern function get_bRenderInMainPass(): Bool return this.bRenderInMainPass;
	public extern var bRenderInDepthPass(get, never): Bool;
	public inline extern function get_bRenderInDepthPass(): Bool return this.bRenderInDepthPass;
	public extern var bReceivesDecals(get, never): Bool;
	public inline extern function get_bReceivesDecals(): Bool return this.bReceivesDecals;
	public extern var bHoldout(get, never): Bool;
	public inline extern function get_bHoldout(): Bool return this.bHoldout;
	public extern var bOwnerNoSee(get, never): Bool;
	public inline extern function get_bOwnerNoSee(): Bool return this.bOwnerNoSee;
	public extern var bOnlyOwnerSee(get, never): Bool;
	public inline extern function get_bOnlyOwnerSee(): Bool return this.bOnlyOwnerSee;
	public extern var bTreatAsBackgroundForOcclusion(get, never): Bool;
	public inline extern function get_bTreatAsBackgroundForOcclusion(): Bool return this.bTreatAsBackgroundForOcclusion;
	public extern var bUseAsOccluder(get, never): Bool;
	public inline extern function get_bUseAsOccluder(): Bool return this.bUseAsOccluder;
	public extern var bSelectable(get, never): Bool;
	public inline extern function get_bSelectable(): Bool return this.bSelectable;
	public extern var bForceMipStreaming(get, never): Bool;
	public inline extern function get_bForceMipStreaming(): Bool return this.bForceMipStreaming;
	public extern var bHasPerInstanceHitProxies(get, never): Bool;
	public inline extern function get_bHasPerInstanceHitProxies(): Bool return this.bHasPerInstanceHitProxies;
	public extern var CastShadow(get, never): Bool;
	public inline extern function get_CastShadow(): Bool return this.CastShadow;
	public extern var bEmissiveLightSource(get, never): Bool;
	public inline extern function get_bEmissiveLightSource(): Bool return this.bEmissiveLightSource;
	public extern var bAffectDynamicIndirectLighting(get, never): Bool;
	public inline extern function get_bAffectDynamicIndirectLighting(): Bool return this.bAffectDynamicIndirectLighting;
	public extern var bAffectIndirectLightingWhileHidden(get, never): Bool;
	public inline extern function get_bAffectIndirectLightingWhileHidden(): Bool return this.bAffectIndirectLightingWhileHidden;
	public extern var bAffectDistanceFieldLighting(get, never): Bool;
	public inline extern function get_bAffectDistanceFieldLighting(): Bool return this.bAffectDistanceFieldLighting;
	public extern var bCastDynamicShadow(get, never): Bool;
	public inline extern function get_bCastDynamicShadow(): Bool return this.bCastDynamicShadow;
	public extern var bCastStaticShadow(get, never): Bool;
	public inline extern function get_bCastStaticShadow(): Bool return this.bCastStaticShadow;
	public extern var bCastVolumetricTranslucentShadow(get, never): Bool;
	public inline extern function get_bCastVolumetricTranslucentShadow(): Bool return this.bCastVolumetricTranslucentShadow;
	public extern var bCastContactShadow(get, never): Bool;
	public inline extern function get_bCastContactShadow(): Bool return this.bCastContactShadow;
	public extern var bSelfShadowOnly(get, never): Bool;
	public inline extern function get_bSelfShadowOnly(): Bool return this.bSelfShadowOnly;
	public extern var bCastFarShadow(get, never): Bool;
	public inline extern function get_bCastFarShadow(): Bool return this.bCastFarShadow;
	public extern var bCastInsetShadow(get, never): Bool;
	public inline extern function get_bCastInsetShadow(): Bool return this.bCastInsetShadow;
	public extern var bCastCinematicShadow(get, never): Bool;
	public inline extern function get_bCastCinematicShadow(): Bool return this.bCastCinematicShadow;
	public extern var bCastHiddenShadow(get, never): Bool;
	public inline extern function get_bCastHiddenShadow(): Bool return this.bCastHiddenShadow;
	public extern var bCastShadowAsTwoSided(get, never): Bool;
	public inline extern function get_bCastShadowAsTwoSided(): Bool return this.bCastShadowAsTwoSided;
	public extern var bLightAttachmentsAsGroup(get, never): Bool;
	public inline extern function get_bLightAttachmentsAsGroup(): Bool return this.bLightAttachmentsAsGroup;
	public extern var bExcludeFromLightAttachmentGroup(get, never): Bool;
	public inline extern function get_bExcludeFromLightAttachmentGroup(): Bool return this.bExcludeFromLightAttachmentGroup;
	public extern var bReceiveMobileCSMShadows(get, never): Bool;
	public inline extern function get_bReceiveMobileCSMShadows(): Bool return this.bReceiveMobileCSMShadows;
	public extern var bSingleSampleShadowFromStationaryLights(get, never): Bool;
	public inline extern function get_bSingleSampleShadowFromStationaryLights(): Bool return this.bSingleSampleShadowFromStationaryLights;
	public extern var bIgnoreRadialImpulse(get, never): Bool;
	public inline extern function get_bIgnoreRadialImpulse(): Bool return this.bIgnoreRadialImpulse;
	public extern var bIgnoreRadialForce(get, never): Bool;
	public inline extern function get_bIgnoreRadialForce(): Bool return this.bIgnoreRadialForce;
	public extern var bApplyImpulseOnDamage(get, never): Bool;
	public inline extern function get_bApplyImpulseOnDamage(): Bool return this.bApplyImpulseOnDamage;
	public extern var bReplicatePhysicsToAutonomousProxy(get, never): Bool;
	public inline extern function get_bReplicatePhysicsToAutonomousProxy(): Bool return this.bReplicatePhysicsToAutonomousProxy;
	public extern var bFillCollisionUnderneathForNavmesh(get, never): Bool;
	public inline extern function get_bFillCollisionUnderneathForNavmesh(): Bool return this.bFillCollisionUnderneathForNavmesh;
	public extern var AlwaysLoadOnClient(get, never): Bool;
	public inline extern function get_AlwaysLoadOnClient(): Bool return this.AlwaysLoadOnClient;
	public extern var AlwaysLoadOnServer(get, never): Bool;
	public inline extern function get_AlwaysLoadOnServer(): Bool return this.AlwaysLoadOnServer;
	public extern var bUseEditorCompositing(get, never): Bool;
	public inline extern function get_bUseEditorCompositing(): Bool return this.bUseEditorCompositing;
	public extern var bIsBeingMovedByEditor(get, never): Bool;
	public inline extern function get_bIsBeingMovedByEditor(): Bool return this.bIsBeingMovedByEditor;
	public extern var bRenderCustomDepth(get, never): Bool;
	public inline extern function get_bRenderCustomDepth(): Bool return this.bRenderCustomDepth;
	public extern var bVisibleInSceneCaptureOnly(get, never): Bool;
	public inline extern function get_bVisibleInSceneCaptureOnly(): Bool return this.bVisibleInSceneCaptureOnly;
	public extern var bHiddenInSceneCapture(get, never): Bool;
	public inline extern function get_bHiddenInSceneCapture(): Bool return this.bHiddenInSceneCapture;
	public extern var bRayTracingFarField(get, never): Bool;
	public inline extern function get_bRayTracingFarField(): Bool return this.bRayTracingFarField;
	public extern var bHasCustomNavigableGeometry(get, never): TEnumAsByte<EHasCustomNavigableGeometry>;
	public inline extern function get_bHasCustomNavigableGeometry(): TEnumAsByte<EHasCustomNavigableGeometry> return this.bHasCustomNavigableGeometry;
	public extern var CanCharacterStepUpOn(get, never): TEnumAsByte<ECanBeCharacterBase>;
	public inline extern function get_CanCharacterStepUpOn(): TEnumAsByte<ECanBeCharacterBase> return this.CanCharacterStepUpOn;
	public extern var LightingChannels(get, never): LightingChannels;
	public inline extern function get_LightingChannels(): LightingChannels return this.LightingChannels;
	public extern var RayTracingGroupId(get, never): ucpp.num.Int32;
	public inline extern function get_RayTracingGroupId(): ucpp.num.Int32 return this.RayTracingGroupId;
	public extern var VisibilityId(get, never): ucpp.num.Int32;
	public inline extern function get_VisibilityId(): ucpp.num.Int32 return this.VisibilityId;
	public extern var CustomDepthStencilValue(get, never): ucpp.num.Int32;
	public inline extern function get_CustomDepthStencilValue(): ucpp.num.Int32 return this.CustomDepthStencilValue;
	public extern var TranslucencySortPriority(get, never): ucpp.num.Int32;
	public inline extern function get_TranslucencySortPriority(): ucpp.num.Int32 return this.TranslucencySortPriority;
	public extern var TranslucencySortDistanceOffset(get, never): ucpp.num.Float32;
	public inline extern function get_TranslucencySortDistanceOffset(): ucpp.num.Float32 return this.TranslucencySortDistanceOffset;
	public extern var RuntimeVirtualTextures(get, never): TArray<ucpp.Ptr<RuntimeVirtualTexture.ConstRuntimeVirtualTexture>>;
	public inline extern function get_RuntimeVirtualTextures(): TArray<ucpp.Ptr<RuntimeVirtualTexture.ConstRuntimeVirtualTexture>> return this.RuntimeVirtualTextures;
	public extern var VirtualTextureLodBias(get, never): ucpp.num.Int8;
	public inline extern function get_VirtualTextureLodBias(): ucpp.num.Int8 return this.VirtualTextureLodBias;
	public extern var VirtualTextureCullMips(get, never): ucpp.num.Int8;
	public inline extern function get_VirtualTextureCullMips(): ucpp.num.Int8 return this.VirtualTextureCullMips;
	public extern var VirtualTextureMinCoverage(get, never): ucpp.num.Int8;
	public inline extern function get_VirtualTextureMinCoverage(): ucpp.num.Int8 return this.VirtualTextureMinCoverage;
	public extern var VirtualTextureRenderPassType(get, never): ERuntimeVirtualTextureMainPassType;
	public inline extern function get_VirtualTextureRenderPassType(): ERuntimeVirtualTextureMainPassType return this.VirtualTextureRenderPassType;
	public extern var BoundsScale(get, never): ucpp.num.Float32;
	public inline extern function get_BoundsScale(): ucpp.num.Float32 return this.BoundsScale;
	public extern var MoveIgnoreActors(get, never): TArray<ucpp.Ptr<Actor.ConstActor>>;
	public inline extern function get_MoveIgnoreActors(): TArray<ucpp.Ptr<Actor.ConstActor>> return this.MoveIgnoreActors;
	public extern var MoveIgnoreComponents(get, never): TArray<ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>>;
	public inline extern function get_MoveIgnoreComponents(): TArray<ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>> return this.MoveIgnoreComponents;
	public extern var BodyInstance(get, never): BodyInstance;
	public inline extern function get_BodyInstance(): BodyInstance return this.BodyInstance;
	public extern var OnComponentHit(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.Ptr<Actor.ConstActor>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, Vector, ucpp.Ref<HitResult>) -> Void>;
	public inline extern function get_OnComponentHit(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.Ptr<Actor.ConstActor>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, Vector, ucpp.Ref<HitResult>) -> Void> return this.OnComponentHit;
	public extern var OnComponentBeginOverlap(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.Ptr<Actor.ConstActor>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.num.Int32, Bool, ucpp.Ref<HitResult>) -> Void>;
	public inline extern function get_OnComponentBeginOverlap(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.Ptr<Actor.ConstActor>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.num.Int32, Bool, ucpp.Ref<HitResult>) -> Void> return this.OnComponentBeginOverlap;
	public extern var OnComponentEndOverlap(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.Ptr<Actor.ConstActor>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.num.Int32) -> Void>;
	public inline extern function get_OnComponentEndOverlap(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.Ptr<Actor.ConstActor>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, ucpp.num.Int32) -> Void> return this.OnComponentEndOverlap;
	public extern var OnComponentWake(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, FName) -> Void>;
	public inline extern function get_OnComponentWake(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, FName) -> Void> return this.OnComponentWake;
	public extern var OnComponentSleep(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, FName) -> Void>;
	public inline extern function get_OnComponentSleep(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, FName) -> Void> return this.OnComponentSleep;
	public extern var OnComponentPhysicsStateChanged(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, EComponentPhysicsStateChange) -> Void>;
	public inline extern function get_OnComponentPhysicsStateChanged(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, EComponentPhysicsStateChange) -> Void> return this.OnComponentPhysicsStateChanged;
	public extern var OnBeginCursorOver(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnBeginCursorOver(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnBeginCursorOver;
	public extern var OnEndCursorOver(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnEndCursorOver(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnEndCursorOver;
	public extern var OnClicked(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, Key) -> Void>;
	public inline extern function get_OnClicked(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, Key) -> Void> return this.OnClicked;
	public extern var OnReleased(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, Key) -> Void>;
	public inline extern function get_OnReleased(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>, Key) -> Void> return this.OnReleased;
	public extern var OnInputTouchBegin(get, never): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnInputTouchBegin(): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnInputTouchBegin;
	public extern var OnInputTouchEnd(get, never): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnInputTouchEnd(): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnInputTouchEnd;
	public extern var OnInputTouchEnter(get, never): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnInputTouchEnter(): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnInputTouchEnter;
	public extern var OnInputTouchLeave(get, never): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnInputTouchLeave(): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, ucpp.Ptr<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnInputTouchLeave;
	public extern var RayTracingGroupCullingPriority(get, never): ERayTracingGroupCullingPriority;
	public inline extern function get_RayTracingGroupCullingPriority(): ERayTracingGroupCullingPriority return this.RayTracingGroupCullingPriority;
	public extern var CustomDepthStencilWriteMask(get, never): ERendererStencilMask;
	public inline extern function get_CustomDepthStencilWriteMask(): ERendererStencilMask return this.CustomDepthStencilWriteMask;
}

@:forward
@:nativeGen
@:native("PrimitiveComp*")
abstract PrimitiveCompPtr(ucpp.Ptr<PrimitiveComp>) from ucpp.Ptr<PrimitiveComp> to ucpp.Ptr<PrimitiveComp>{
	@:from
	public static extern inline function fromValue(v: PrimitiveComp): PrimitiveCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PrimitiveComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}