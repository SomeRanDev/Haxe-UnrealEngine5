// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWorldPartitionRuntimeCell")
@:include("WorldPartition/WorldPartitionRuntimeCell.h")
@:structAccess
extern class WorldPartitionRuntimeCell extends Object {
	public var bIsAlwaysLoaded: Bool;
	public var DataLayers: TArray<FName>;
	public var Coords: IntVector;
	public var GridName: FName;
	public var DebugName: FString;
	public var Priority: cpp.Int32;
	public var bClientOnlyVisible: Bool;
	public var bIsHLOD: Bool;
	public var bBlockOnSlowLoading: Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstWorldPartitionRuntimeCell(WorldPartitionRuntimeCell) from WorldPartitionRuntimeCell {
	public extern var bIsAlwaysLoaded(get, never): Bool;
	public inline extern function get_bIsAlwaysLoaded(): Bool return this.bIsAlwaysLoaded;
	public extern var DataLayers(get, never): TArray<FName>;
	public inline extern function get_DataLayers(): TArray<FName> return this.DataLayers;
	public extern var Coords(get, never): IntVector;
	public inline extern function get_Coords(): IntVector return this.Coords;
	public extern var GridName(get, never): FName;
	public inline extern function get_GridName(): FName return this.GridName;
	public extern var DebugName(get, never): FString;
	public inline extern function get_DebugName(): FString return this.DebugName;
	public extern var Priority(get, never): cpp.Int32;
	public inline extern function get_Priority(): cpp.Int32 return this.Priority;
	public extern var bClientOnlyVisible(get, never): Bool;
	public inline extern function get_bClientOnlyVisible(): Bool return this.bClientOnlyVisible;
	public extern var bIsHLOD(get, never): Bool;
	public inline extern function get_bIsHLOD(): Bool return this.bIsHLOD;
	public extern var bBlockOnSlowLoading(get, never): Bool;
	public inline extern function get_bBlockOnSlowLoading(): Bool return this.bBlockOnSlowLoading;
}

@:forward
@:nativeGen
@:native("WorldPartitionRuntimeCell*")
abstract WorldPartitionRuntimeCellPtr(cpp.Star<WorldPartitionRuntimeCell>) from cpp.Star<WorldPartitionRuntimeCell> to cpp.Star<WorldPartitionRuntimeCell>{
	@:from
	public static extern inline function fromValue(v: WorldPartitionRuntimeCell): WorldPartitionRuntimeCellPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): WorldPartitionRuntimeCell {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}