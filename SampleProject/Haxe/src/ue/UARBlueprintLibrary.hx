// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UARBlueprintLibrary")
@:include("ARBlueprintLibrary.h")
extern class UARBlueprintLibrary extends UBlueprintFunctionLibrary {

	public function UnpinComponent(ComponentToUnpin: cpp.Star<USceneComponent>): Void;
	public function ToggleARCapture(bOnOff: Bool, CaptureType: EARCaptureType): Bool;
	public function StopARSession(): Void;
	public function StartARSession(SessionConfig: cpp.Star<UARSessionConfig>): Void;
	public function SetEnabledXRCamera(bOnOff: Bool): Void;
	public function SetARWorldScale(InWorldScale: cpp.Float32): Void;
	public function SetARWorldOriginLocationAndRotation(OriginLocation: FVector, OriginRotation: FRotator, bIsTransformInWorldSpace: Bool, bMaintainUpDirection: Bool): Void;
	public function SetAlignmentTransform(InAlignmentTransform: FTransform): Void;
	public function SaveARPinToLocalStore(InSaveName: FName, InPin: cpp.Star<UARPin>): Bool;
	public function ResizeXRCamera(InSize: FIntPoint): FIntPoint;
	public function RemovePin(PinToRemove: cpp.Star<UARPin>): Void;
	public function RemoveARPinFromLocalStore(InSaveName: FName): Void;
	public function RemoveAllARPinsFromLocalStore(): Void;
	public function PinComponentToTraceResult(ComponentToPin: cpp.Star<USceneComponent>, TraceResult: FARTraceResult, DebugName: FName): cpp.Star<UARPin>;
	public function PinComponentToARPin(ComponentToPin: cpp.Star<USceneComponent>, Pin: cpp.Star<UARPin>): Bool;
	public function PinComponent(ComponentToPin: cpp.Star<USceneComponent>, PinToWorldTransform: FTransform, TrackedGeometry: cpp.Star<UARTrackedGeometry>, DebugName: FName): cpp.Star<UARPin>;
	public function PauseARSession(): Void;
	public function LoadARPinsFromLocalStore(): TMap<FName, cpp.Star<UARPin>>;
	public function LineTraceTrackedObjects3D(Start: FVector, End: FVector, bTestFeaturePoints: Bool, bTestGroundPlane: Bool, bTestPlaneExtents: Bool, bTestPlaneBoundaryPolygon: Bool): TArray<FARTraceResult>;
	public function LineTraceTrackedObjects(ScreenCoord: FVector2D, bTestFeaturePoints: Bool, bTestGroundPlane: Bool, bTestPlaneExtents: Bool, bTestPlaneBoundaryPolygon: Bool): TArray<FARTraceResult>;
	public function IsSessionTypeSupported(SessionType: EARSessionType): Bool;
	public function IsSessionTrackingFeatureSupported(SessionType: EARSessionType, SessionTrackingFeature: EARSessionTrackingFeature): Bool;
	public function IsSceneReconstructionSupported(SessionType: EARSessionType, SceneReconstructionMethod: EARSceneReconstruction): Bool;
	public function IsARSupported(): Bool;
	public function IsARPinLocalStoreSupported(): Bool;
	public function IsARPinLocalStoreReady(): Bool;
	public function GetWorldMappingStatus(): EARWorldMappingState;
	public function GetTrackingQualityReason(): EARTrackingQualityReason;
	public function GetTrackingQuality(): EARTrackingQuality;
	public function GetSupportedVideoFormats(SessionType: EARSessionType): TArray<FARVideoFormat>;
	public function GetSessionConfig(): cpp.Star<UARSessionConfig>;
	public function GetPointCloud(): TArray<FVector>;
	public function GetPersonSegmentationImage(): cpp.Star<UARTexture>;
	public function GetPersonSegmentationDepthImage(): cpp.Star<UARTexture>;
	public function GetObjectClassificationAtLocation(InWorldLocation: FVector, OutClassification: EARObjectClassification, OutClassificationLocation: FVector, MaxLocationDiff: cpp.Float32): Bool;
	public function GetNumberOfTrackedFacesSupported(): cpp.Int32;
	public function GetCurrentLightEstimate(): cpp.Star<UARLightEstimate>;
	public function GetCameraIntrinsics(OutCameraIntrinsics: FARCameraIntrinsics): Bool;
	public function GetCameraImage(): cpp.Star<UARTextureCameraImage>;
	public function GetCameraDepth(): cpp.Star<UARTextureCameraDepth>;
	public function GetARWorldScale(): cpp.Float32;
	public function GetARTexture(TextureType: EARTextureType): cpp.Star<UARTexture>;
	public function GetARSessionStatus(): FARSessionStatus;
	public function GetAllTrackedPoses(): TArray<cpp.Star<UARTrackedPose>>;
	public function GetAllTrackedPoints(): TArray<cpp.Star<UARTrackedPoint>>;
	public function GetAllTrackedPlanes(): TArray<cpp.Star<UARPlaneGeometry>>;
	public function GetAllTrackedImages(): TArray<cpp.Star<UARTrackedImage>>;
	public function GetAllTrackedEnvironmentCaptureProbes(): TArray<cpp.Star<UAREnvironmentCaptureProbe>>;
	public function GetAllTracked2DPoses(): TArray<FARPose2D>;
	public function GetAllPins(): TArray<cpp.Star<UARPin>>;
	public function GetAllGeometriesByClass(GeometryClass: TSubclassOf<UARTrackedGeometry>): TArray<cpp.Star<UARTrackedGeometry>>;
	public function GetAllGeometries(): TArray<cpp.Star<UARTrackedGeometry>>;
	public function GetAlignmentTransform(): FTransform;
	public function FindTrackedPointsByName(PointName: FString): TArray<cpp.Star<UARTrackedPoint>>;
	public function DebugDrawTrackedGeometry(TrackedGeometry: cpp.Star<UARTrackedGeometry>, WorldContextObject: cpp.Star<UObject>, Color: FLinearColor, OutlineThickness: cpp.Float32, PersistForSeconds: cpp.Float32): Void;
	public function DebugDrawPin(ARPin: cpp.Star<UARPin>, WorldContextObject: cpp.Star<UObject>, Color: FLinearColor, Scale: cpp.Float32, PersistForSeconds: cpp.Float32): Void;
	public function CalculateClosestIntersection(StartPoints: TArray<FVector>, EndPoints: TArray<FVector>, ClosestIntersection: FVector): Void;
	public function CalculateAlignmentTransform(TransformInFirstCoordinateSystem: FTransform, TransformInSecondCoordinateSystem: FTransform, AlignmentTransform: FTransform): Void;
	public function AddTrackedPointWithName(WorldTransform: FTransform, PointName: FString, bDeletePointsWithSameName: Bool): Bool;
	public function AddRuntimeCandidateImage(SessionConfig: cpp.Star<UARSessionConfig>, CandidateTexture: cpp.Star<UTexture2D>, FriendlyName: FString, PhysicalWidth: cpp.Float32): cpp.Star<UARCandidateImage>;
	public function AddManualEnvironmentCaptureProbe(Location: FVector, Extent: FVector): Bool;
}
