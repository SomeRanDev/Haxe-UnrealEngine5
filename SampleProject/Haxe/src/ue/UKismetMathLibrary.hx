// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetMathLibrary")
@:include("Kismet/KismetMathLibrary.h")
extern class UKismetMathLibrary extends UBlueprintFunctionLibrary {

	public function Xor_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function Xor_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function Wrap(Value: cpp.Int32, Min: cpp.Int32, Max: cpp.Int32): cpp.Int32;
	public function WeightedMovingAverage_FVector(CurrentSample: FVector, PreviousSample: FVector, Weight: cpp.Float32): FVector;
	public function WeightedMovingAverage_FRotator(CurrentSample: FRotator, PreviousSample: FRotator, Weight: cpp.Float32): FRotator;
	public function WeightedMovingAverage_Float(CurrentSample: cpp.Float32, PreviousSample: cpp.Float32, Weight: cpp.Float32): cpp.Float32;
	public function VSizeXYSquared(A: FVector): cpp.Float64;
	public function VSizeXY(A: FVector): cpp.Float64;
	public function VSizeSquared(A: FVector): cpp.Float64;
	public function VSize2DSquared(A: FVector2D): cpp.Float64;
	public function VSize2D(A: FVector2D): cpp.Float64;
	public function VSize(A: FVector): cpp.Float64;
	public function VLerp(A: FVector, B: FVector, Alpha: cpp.Float32): FVector;
	public function VInterpTo_Constant(Current: FVector, Target: FVector, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): FVector;
	public function VInterpTo(Current: FVector, Target: FVector, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): FVector;
	public function VectorSpringInterp(Current: FVector, Target: FVector, SpringState: FVectorSpringState, Stiffness: cpp.Float32, CriticalDampingFactor: cpp.Float32, DeltaTime: cpp.Float32, Mass: cpp.Float32, TargetVelocityAmount: cpp.Float32, bClamp: Bool, MinValue: FVector, MaxValue: FVector, bInitializeFromTarget: Bool): FVector;
	public function Vector_Zero(): FVector;
	public function Vector_Up(): FVector;
	public function Vector_UnwindEuler(A: FVector): Void;
	public function Vector_UnitCartesianToSpherical(A: FVector): FVector2D;
	public function Vector_ToRadians(A: FVector): FVector;
	public function Vector_ToDegrees(A: FVector): FVector;
	public function Vector_SnappedToGrid(InVect: FVector, InGridSize: cpp.Float32): FVector;
	public function Vector_Set(A: FVector, X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): Void;
	public function Vector_Right(): FVector;
	public function Vector_Reciprocal(A: FVector): FVector;
	public function Vector_ProjectOnToNormal(V: FVector, InNormal: FVector): FVector;
	public function Vector_One(): FVector;
	public function Vector_NormalUnsafe(A: FVector): FVector;
	public function Vector_Normalize(A: FVector, Tolerance: cpp.Float32): Void;
	public function Vector_Normal2D(A: FVector, Tolerance: cpp.Float32): FVector;
	public function Vector_MirrorByPlane(A: FVector, InPlane: FPlane): FVector;
	public function Vector_Left(): FVector;
	public function Vector_IsZero(A: FVector): Bool;
	public function Vector_IsUnit(A: FVector, SquaredLenthTolerance: cpp.Float32): Bool;
	public function Vector_IsUniform(A: FVector, Tolerance: cpp.Float32): Bool;
	public function Vector_IsNormal(A: FVector): Bool;
	public function Vector_IsNearlyZero(A: FVector, Tolerance: cpp.Float32): Bool;
	public function Vector_IsNAN(A: FVector): Bool;
	public function Vector_HeadingAngle(A: FVector): cpp.Float64;
	public function Vector_GetSignVector(A: FVector): FVector;
	public function Vector_GetProjection(A: FVector): FVector;
	public function Vector_GetAbsMin(A: FVector): cpp.Float64;
	public function Vector_GetAbsMax(A: FVector): cpp.Float64;
	public function Vector_GetAbs(A: FVector): FVector;
	public function Vector_Forward(): FVector;
	public function Vector_Down(): FVector;
	public function Vector_DistanceSquared(V1: FVector, V2: FVector): cpp.Float64;
	public function Vector_Distance2DSquared(V1: FVector, V2: FVector): cpp.Float64;
	public function Vector_Distance2D(V1: FVector, V2: FVector): cpp.Float64;
	public function Vector_Distance(V1: FVector, V2: FVector): cpp.Float64;
	public function Vector_CosineAngle2D(A: FVector, B: FVector): cpp.Float64;
	public function Vector_ComponentMin(A: FVector, B: FVector): FVector;
	public function Vector_ComponentMax(A: FVector, B: FVector): FVector;
	public function Vector_ClampSizeMax2D(A: FVector, Max: cpp.Float64): FVector;
	public function Vector_ClampSizeMax(A: FVector, Max: cpp.Float64): FVector;
	public function Vector_ClampSize2D(A: FVector, Min: cpp.Float64, Max: cpp.Float64): FVector;
	public function Vector_BoundedToCube(InVect: FVector, InRadius: cpp.Float32): FVector;
	public function Vector_BoundedToBox(InVect: FVector, InBoxMin: FVector, InBoxMax: FVector): FVector;
	public function Vector_Backward(): FVector;
	public function Vector_Assign(A: FVector, InVector: FVector): Void;
	public function Vector_AddBounded(A: FVector, InAddVect: FVector, InRadius: cpp.Float32): Void;
	public function Vector4_Zero(): FVector4;
	public function Vector4_SizeSquared3(A: FVector4): cpp.Float64;
	public function Vector4_SizeSquared(A: FVector4): cpp.Float64;
	public function Vector4_Size3(A: FVector4): cpp.Float64;
	public function Vector4_Size(A: FVector4): cpp.Float64;
	public function Vector4_Set(A: FVector4, X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64, W: cpp.Float64): Void;
	public function Vector4_NormalUnsafe3(A: FVector4): FVector4;
	public function Vector4_Normalize3(A: FVector4, Tolerance: cpp.Float32): Void;
	public function Vector4_Normal3(A: FVector4, Tolerance: cpp.Float32): FVector4;
	public function Vector4_Negated(A: FVector4): FVector4;
	public function Vector4_MirrorByVector3(Direction: FVector4, SurfaceNormal: FVector4): FVector4;
	public function Vector4_IsZero(A: FVector4): Bool;
	public function Vector4_IsUnit3(A: FVector4, SquaredLenthTolerance: cpp.Float32): Bool;
	public function Vector4_IsNormal3(A: FVector4): Bool;
	public function Vector4_IsNearlyZero3(A: FVector4, Tolerance: cpp.Float32): Bool;
	public function Vector4_IsNAN(A: FVector4): Bool;
	public function Vector4_DotProduct3(A: FVector4, B: FVector4): cpp.Float64;
	public function Vector4_DotProduct(A: FVector4, B: FVector4): cpp.Float64;
	public function Vector4_CrossProduct3(A: FVector4, B: FVector4): FVector4;
	public function Vector4_Assign(A: FVector4, InVector: FVector4): Void;
	public function Vector2DInterpTo_Constant(Current: FVector2D, Target: FVector2D, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): FVector2D;
	public function Vector2DInterpTo(Current: FVector2D, Target: FVector2D, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): FVector2D;
	public function Vector2D_Zero(): FVector2D;
	public function Vector2D_Unit45Deg(): FVector2D;
	public function Vector2D_One(): FVector2D;
	public function VEase(A: FVector, B: FVector, Alpha: cpp.Float32, EasingFunc: EEasingFunc, BlendExp: cpp.Float32, Steps: cpp.Int32): FVector;
	public function UtcNow(): FDateTime;
	public function TransformVector4(Matrix: FMatrix, Vec4: FVector4): FVector4;
	public function TransformRotation(T: FTransform, Rotation: FRotator): FRotator;
	public function TransformLocation(T: FTransform, Location: FVector): FVector;
	public function TransformDirection(T: FTransform, Direction: FVector): FVector;
	public function Transform_Determinant(Transform: FTransform): cpp.Float32;
	public function ToSign2D(A: FVector2D): FVector2D;
	public function ToRounded2D(A: FVector2D): FVector2D;
	public function ToDirectionAndLength2D(A: FVector2D, OutDir: FVector2D, OutLength: cpp.Reference<cpp.Float64>): Void;
	public function Today(): FDateTime;
	public function TLerp(A: FTransform, B: FTransform, Alpha: cpp.Float32, InterpMode: ELerpInterpolationMode): FTransform;
	public function TInterpTo(Current: FTransform, Target: FTransform, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): FTransform;
	public function TimespanZeroValue(): FTimespan;
	public function TimespanRatio(A: FTimespan, B: FTimespan): cpp.Float32;
	public function TimespanMinValue(): FTimespan;
	public function TimespanMaxValue(): FTimespan;
	public function TimespanFromString(TimespanString: FString, Result: FTimespan): Bool;
	public function TEase(A: FTransform, B: FTransform, Alpha: cpp.Float32, EasingFunc: EEasingFunc, BlendExp: cpp.Float32, Steps: cpp.Int32): FTransform;
	public function Tan(A: cpp.Float64): cpp.Float64;
	public function Subtract_VectorVector(A: FVector, B: FVector): FVector;
	public function Subtract_VectorInt(A: FVector, B: cpp.Int32): FVector;
	public function Subtract_VectorFloat(A: FVector, B: cpp.Float64): FVector;
	public function Subtract_Vector4Vector4(A: FVector4, B: FVector4): FVector4;
	public function Subtract_Vector2DVector2D(A: FVector2D, B: FVector2D): FVector2D;
	public function Subtract_Vector2DFloat(A: FVector2D, B: cpp.Float64): FVector2D;
	public function Subtract_TimespanTimespan(A: FTimespan, B: FTimespan): FTimespan;
	public function Subtract_QuatQuat(A: FQuat, B: FQuat): FQuat;
	public function Subtract_LinearColorLinearColor(A: FLinearColor, B: FLinearColor): FLinearColor;
	public function Subtract_IntPointIntPoint(A: FIntPoint, B: FIntPoint): FIntPoint;
	public function Subtract_IntPointInt(A: FIntPoint, B: cpp.Int32): FIntPoint;
	public function Subtract_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function Subtract_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function Subtract_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Float64;
	public function Subtract_DateTimeTimespan(A: FDateTime, B: FTimespan): FDateTime;
	public function Subtract_DateTimeDateTime(A: FDateTime, B: FDateTime): FTimespan;
	public function Subtract_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.UInt8;
	public function Square(A: cpp.Float64): cpp.Float64;
	public function Sqrt(A: cpp.Float64): cpp.Float64;
	public function Spherical2DToUnitCartesian(A: FVector2D): FVector;
	public function Sin(A: cpp.Float64): cpp.Float64;
	public function SignOfInteger64(A: cpp.Int64): cpp.Int64;
	public function SignOfInteger(A: cpp.Int32): cpp.Int32;
	public function SignOfFloat(A: cpp.Float64): cpp.Float64;
	public function SetVectorSpringStateVelocity(SpringState: FVectorSpringState, Velocity: FVector): Void;
	public function SetRandomStreamSeed(Stream: FRandomStream, NewSeed: cpp.Int32): Void;
	public function SetQuaternionSpringStateAngularVelocity(SpringState: FQuaternionSpringState, AngularVelocity: FVector): Void;
	public function SetFloatSpringStateVelocity(SpringState: FFloatSpringState, Velocity: cpp.Float32): Void;
	public function Set2D(A: FVector2D, X: cpp.Float64, Y: cpp.Float64): Void;
	public function SelectVector(A: FVector, B: FVector, bPickA: Bool): FVector;
	public function SelectTransform(A: FTransform, B: FTransform, bPickA: Bool): FTransform;
	public function SelectString(A: FString, B: FString, bPickA: Bool): FString;
	public function SelectRotator(A: FRotator, B: FRotator, bPickA: Bool): FRotator;
	public function SelectObject(A: cpp.Star<UObject>, B: cpp.Star<UObject>, bSelectA: Bool): cpp.Star<UObject>;
	public function SelectInt(A: cpp.Int32, B: cpp.Int32, bPickA: Bool): cpp.Int32;
	public function SelectFloat(A: cpp.Float64, B: cpp.Float64, bPickA: Bool): cpp.Float64;
	public function SelectColor(A: FLinearColor, B: FLinearColor, bPickA: Bool): FLinearColor;
	public function SelectClass(A: cpp.Star<UClass>, B: cpp.Star<UClass>, bSelectA: Bool): cpp.Star<UClass>;
	public function SeedRandomStream(Stream: FRandomStream): Void;
	public function SafeDivide(A: cpp.Float64, B: cpp.Float64): cpp.Float64;
	public function Round64(A: cpp.Float64): cpp.Int64;
	public function Round(A: cpp.Float64): cpp.Int32;
	public function RotatorFromAxisAndAngle(Axis: FVector, Angle: cpp.Float32): FRotator;
	public function RotateAngleAxis(InVect: FVector, AngleDeg: cpp.Float32, Axis: FVector): FVector;
	public function RLerp(A: FRotator, B: FRotator, Alpha: cpp.Float32, bShortestPath: Bool): FRotator;
	public function RInterpTo_Constant(Current: FRotator, Target: FRotator, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): FRotator;
	public function RInterpTo(Current: FRotator, Target: FRotator, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): FRotator;
	public function RGBToHSV_Vector(RGB: FLinearColor, HSV: FLinearColor): Void;
	public function RGBToHSV(InColor: FLinearColor, H: cpp.Reference<cpp.Float32>, S: cpp.Reference<cpp.Float32>, V: cpp.Reference<cpp.Float32>, A: cpp.Reference<cpp.Float32>): Void;
	public function RGBLinearToHSV(RGB: FLinearColor): FLinearColor;
	public function ResetVectorSpringState(SpringState: FVectorSpringState): Void;
	public function ResetRandomStream(Stream: FRandomStream): Void;
	public function ResetQuaternionSpringState(SpringState: FQuaternionSpringState): Void;
	public function ResetFloatSpringState(SpringState: FFloatSpringState): Void;
	public function REase(A: FRotator, B: FRotator, Alpha: cpp.Float32, bShortestPath: Bool, EasingFunc: EEasingFunc, BlendExp: cpp.Float32, Steps: cpp.Int32): FRotator;
	public function RandomUnitVectorInEllipticalConeInRadiansFromStream(ConeDir: FVector, MaxYawInRadians: cpp.Float32, MaxPitchInRadians: cpp.Float32, Stream: FRandomStream): FVector;
	public function RandomUnitVectorInEllipticalConeInRadians(ConeDir: FVector, MaxYawInRadians: cpp.Float32, MaxPitchInRadians: cpp.Float32): FVector;
	public function RandomUnitVectorInEllipticalConeInDegreesFromStream(ConeDir: FVector, MaxYawInDegrees: cpp.Float32, MaxPitchInDegrees: cpp.Float32, Stream: FRandomStream): FVector;
	public function RandomUnitVectorInEllipticalConeInDegrees(ConeDir: FVector, MaxYawInDegrees: cpp.Float32, MaxPitchInDegrees: cpp.Float32): FVector;
	public function RandomUnitVectorInConeInRadiansFromStream(ConeDir: FVector, ConeHalfAngleInRadians: cpp.Float32, Stream: FRandomStream): FVector;
	public function RandomUnitVectorInConeInRadians(ConeDir: FVector, ConeHalfAngleInRadians: cpp.Float32): FVector;
	public function RandomUnitVectorInConeInDegreesFromStream(ConeDir: FVector, ConeHalfAngleInDegrees: cpp.Float32, Stream: FRandomStream): FVector;
	public function RandomUnitVectorInConeInDegrees(ConeDir: FVector, ConeHalfAngleInDegrees: cpp.Float32): FVector;
	public function RandomUnitVectorFromStream(Stream: FRandomStream): FVector;
	public function RandomUnitVector(): FVector;
	public function RandomRotatorFromStream(bRoll: Bool, Stream: FRandomStream): FRotator;
	public function RandomRotator(bRoll: Bool): FRotator;
	public function RandomPointInBoundingBoxFromStream(Center: FVector, HalfSize: FVector, Stream: FRandomStream): FVector;
	public function RandomPointInBoundingBox(Center: FVector, HalfSize: FVector): FVector;
	public function RandomIntegerInRangeFromStream(Min: cpp.Int32, Max: cpp.Int32, Stream: FRandomStream): cpp.Int32;
	public function RandomIntegerInRange(Min: cpp.Int32, Max: cpp.Int32): cpp.Int32;
	public function RandomIntegerFromStream(Max: cpp.Int32, Stream: FRandomStream): cpp.Int32;
	public function RandomInteger64InRange(Min: cpp.Int64, Max: cpp.Int64): cpp.Int64;
	public function RandomInteger64(Max: cpp.Int64): cpp.Int64;
	public function RandomInteger(Max: cpp.Int32): cpp.Int32;
	public function RandomFloatInRangeFromStream(Min: cpp.Float32, Max: cpp.Float32, Stream: FRandomStream): cpp.Float32;
	public function RandomFloatInRange(Min: cpp.Float64, Max: cpp.Float64): cpp.Float64;
	public function RandomFloatFromStream(Stream: FRandomStream): cpp.Float32;
	public function RandomFloat(): cpp.Float64;
	public function RandomBoolWithWeightFromStream(Weight: cpp.Float32, RandomStream: FRandomStream): Bool;
	public function RandomBoolWithWeight(Weight: cpp.Float32): Bool;
	public function RandomBoolFromStream(Stream: FRandomStream): Bool;
	public function RandomBool(): Bool;
	public function RadiansToDegrees(A: cpp.Float64): cpp.Float64;
	public function QuaternionSpringInterp(Current: FQuat, Target: FQuat, SpringState: FQuaternionSpringState, Stiffness: cpp.Float32, CriticalDampingFactor: cpp.Float32, DeltaTime: cpp.Float32, Mass: cpp.Float32, TargetVelocityAmount: cpp.Float32, bInitializeFromTarget: Bool): FQuat;
	public function Quat_VectorUp(Q: FQuat): FVector;
	public function Quat_VectorRight(Q: FQuat): FVector;
	public function Quat_VectorForward(Q: FQuat): FVector;
	public function Quat_UnrotateVector(Q: FQuat, V: FVector): FVector;
	public function Quat_SizeSquared(Q: FQuat): cpp.Float32;
	public function Quat_Size(Q: FQuat): cpp.Float32;
	public function Quat_SetFromEuler(Q: FQuat, Euler: FVector): Void;
	public function Quat_SetComponents(Q: FQuat, X: cpp.Float32, Y: cpp.Float32, Z: cpp.Float32, W: cpp.Float32): Void;
	public function Quat_Rotator(Q: FQuat): FRotator;
	public function Quat_RotateVector(Q: FQuat, V: FVector): FVector;
	public function Quat_Normalized(Q: FQuat, Tolerance: cpp.Float32): FQuat;
	public function Quat_Normalize(Q: FQuat, Tolerance: cpp.Float32): Void;
	public function Quat_MakeFromEuler(Euler: FVector): FQuat;
	public function Quat_Log(Q: FQuat): FQuat;
	public function Quat_IsNormalized(Q: FQuat): Bool;
	public function Quat_IsNonFinite(Q: FQuat): Bool;
	public function Quat_IsIdentity(Q: FQuat, Tolerance: cpp.Float32): Bool;
	public function Quat_IsFinite(Q: FQuat): Bool;
	public function Quat_Inversed(Q: FQuat): FQuat;
	public function Quat_Identity(): FQuat;
	public function Quat_GetRotationAxis(Q: FQuat): FVector;
	public function Quat_GetAxisZ(Q: FQuat): FVector;
	public function Quat_GetAxisY(Q: FQuat): FVector;
	public function Quat_GetAxisX(Q: FQuat): FVector;
	public function Quat_GetAngle(Q: FQuat): cpp.Float32;
	public function Quat_Exp(Q: FQuat): FQuat;
	public function Quat_Euler(Q: FQuat): FVector;
	public function Quat_EnforceShortestArcWith(A: FQuat, B: FQuat): Void;
	public function Quat_AngularDistance(A: FQuat, B: FQuat): cpp.Float32;
	public function ProjectVectorOnToVector(V: FVector, Target: FVector): FVector;
	public function ProjectVectorOnToPlane(V: FVector, PlaneNormal: FVector): FVector;
	public function ProjectPointOnToPlane(Point: FVector, PlaneBase: FVector, PlaneNormal: FVector): FVector;
	public function PointsAreCoplanar(Points: TArray<FVector>, Tolerance: cpp.Float32): Bool;
	public function PerlinNoise1D(Value: cpp.Float32): cpp.Float32;
	public function Percent_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function Percent_FloatFloat(A: cpp.Float64, B: cpp.Float64): cpp.Float64;
	public function Percent_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.UInt8;
	public function Or_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function Or_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function Now(): FDateTime;
	public function NotEqualExactly_VectorVector(A: FVector, B: FVector): Bool;
	public function NotEqualExactly_Vector4Vector4(A: FVector4, B: FVector4): Bool;
	public function NotEqualExactly_Vector2DVector2D(A: FVector2D, B: FVector2D): Bool;
	public function NotEqual_VectorVector(A: FVector, B: FVector, ErrorTolerance: cpp.Float32): Bool;
	public function NotEqual_Vector4Vector4(A: FVector4, B: FVector4, ErrorTolerance: cpp.Float32): Bool;
	public function NotEqual_Vector2DVector2D(A: FVector2D, B: FVector2D, ErrorTolerance: cpp.Float32): Bool;
	public function NotEqual_TimespanTimespan(A: FTimespan, B: FTimespan): Bool;
	public function NotEqual_RotatorRotator(A: FRotator, B: FRotator, ErrorTolerance: cpp.Float32): Bool;
	public function NotEqual_QuatQuat(A: FQuat, B: FQuat, ErrorTolerance: cpp.Float32): Bool;
	public function NotEqual_ObjectObject(A: cpp.Star<UObject>, B: cpp.Star<UObject>): Bool;
	public function NotEqual_NameName(A: FName, B: FName): Bool;
	public function NotEqual_MatrixMatrix(A: FMatrix, B: FMatrix, Tolerance: cpp.Float32): Bool;
	public function NotEqual_LinearColorLinearColor(A: FLinearColor, B: FLinearColor): Bool;
	public function NotEqual_IntPointIntPoint(A: FIntPoint, B: FIntPoint): Bool;
	public function NotEqual_IntInt(A: cpp.Int32, B: cpp.Int32): Bool;
	public function NotEqual_Int64Int64(A: cpp.Int64, B: cpp.Int64): Bool;
	public function NotEqual_DoubleDouble(A: cpp.Float64, B: cpp.Float64): Bool;
	public function NotEqual_DateTimeDateTime(A: FDateTime, B: FDateTime): Bool;
	public function NotEqual_ClassClass(A: cpp.Star<UClass>, B: cpp.Star<UClass>): Bool;
	public function NotEqual_ByteByte(A: cpp.UInt8, B: cpp.UInt8): Bool;
	public function NotEqual_BoolBool(A: Bool, B: Bool): Bool;
	public function Not_PreBool(A: Bool): Bool;
	public function Not_Int64(A: cpp.Int64): cpp.Int64;
	public function Not_Int(A: cpp.Int32): cpp.Int32;
	public function NormalSafe2D(A: FVector2D, Tolerance: cpp.Float32): FVector2D;
	public function NormalizeToRange(Value: cpp.Float64, RangeMin: cpp.Float64, RangeMax: cpp.Float64): cpp.Float64;
	public function NormalizedDeltaRotator(A: FRotator, B: FRotator): FRotator;
	public function NormalizeAxis(Angle: cpp.Float32): cpp.Float32;
	public function Normalize2D(A: FVector2D, Tolerance: cpp.Float32): Void;
	public function Normal2D(A: FVector2D): FVector2D;
	public function Normal(A: FVector, Tolerance: cpp.Float32): FVector;
	public function NegateVector(A: FVector): FVector;
	public function NegateRotator(A: FRotator): FRotator;
	public function Negated2D(A: FVector2D): FVector2D;
	public function NearlyEqual_TransformTransform(A: FTransform, B: FTransform, LocationTolerance: cpp.Float32, RotationTolerance: cpp.Float32, Scale3DTolerance: cpp.Float32): Bool;
	public function NearlyEqual_FloatFloat(A: cpp.Float64, B: cpp.Float64, ErrorTolerance: cpp.Float64): Bool;
	public function MultiplyMultiply_FloatFloat(Base: cpp.Float64, Exp: cpp.Float64): cpp.Float64;
	public function MultiplyByPi(Value: cpp.Float64): cpp.Float64;
	public function Multiply_VectorVector(A: FVector, B: FVector): FVector;
	public function Multiply_VectorInt(A: FVector, B: cpp.Int32): FVector;
	public function Multiply_VectorFloat(A: FVector, B: cpp.Float64): FVector;
	public function Multiply_Vector4Vector4(A: FVector4, B: FVector4): FVector4;
	public function Multiply_Vector2DVector2D(A: FVector2D, B: FVector2D): FVector2D;
	public function Multiply_Vector2DFloat(A: FVector2D, B: cpp.Float64): FVector2D;
	public function Multiply_TimespanFloat(A: FTimespan, Scalar: cpp.Float32): FTimespan;
	public function Multiply_RotatorInt(A: FRotator, B: cpp.Int32): FRotator;
	public function Multiply_RotatorFloat(A: FRotator, B: cpp.Float32): FRotator;
	public function Multiply_QuatQuat(A: FQuat, B: FQuat): FQuat;
	public function Multiply_MatrixMatrix(A: FMatrix, B: FMatrix): FMatrix;
	public function Multiply_MatrixFloat(A: FMatrix, B: cpp.Float64): FMatrix;
	public function Multiply_LinearColorLinearColor(A: FLinearColor, B: FLinearColor): FLinearColor;
	public function Multiply_LinearColorFloat(A: FLinearColor, B: cpp.Float32): FLinearColor;
	public function Multiply_IntPointIntPoint(A: FIntPoint, B: FIntPoint): FIntPoint;
	public function Multiply_IntPointInt(A: FIntPoint, B: cpp.Int32): FIntPoint;
	public function Multiply_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function Multiply_IntFloat(A: cpp.Int32, B: cpp.Float64): cpp.Float64;
	public function Multiply_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function Multiply_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Float64;
	public function Multiply_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.UInt8;
	public function MirrorVectorByNormal(InVect: FVector, InNormal: FVector): FVector;
	public function MinOfIntArray(IntArray: TArray<cpp.Int32>, IndexOfMinValue: cpp.Reference<cpp.Int32>, MinValue: cpp.Reference<cpp.Int32>): Void;
	public function MinOfFloatArray(FloatArray: TArray<cpp.Float32>, IndexOfMinValue: cpp.Reference<cpp.Int32>, MinValue: cpp.Reference<cpp.Float32>): Void;
	public function MinOfByteArray(ByteArray: TArray<cpp.UInt8>, IndexOfMinValue: cpp.Reference<cpp.Int32>, MinValue: cpp.UInt8): Void;
	public function MinInt64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function MinimumAreaRectangle(WorldContextObject: cpp.Star<UObject>, InVerts: TArray<FVector>, SampleSurfaceNormal: FVector, OutRectCenter: FVector, OutRectRotation: FRotator, OutSideLengthX: cpp.Reference<cpp.Float32>, OutSideLengthY: cpp.Reference<cpp.Float32>, bDebugDraw: Bool): Void;
	public function MinAreaRectangle(WorldContextObject: cpp.Star<UObject>, InPoints: TArray<FVector>, SampleSurfaceNormal: FVector, OutRectCenter: FVector, OutRectRotation: FRotator, OutRectLengthX: cpp.Reference<cpp.Float32>, OutRectLengthY: cpp.Reference<cpp.Float32>, bDebugDraw: Bool): Void;
	public function Min(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function MaxOfIntArray(IntArray: TArray<cpp.Int32>, IndexOfMaxValue: cpp.Reference<cpp.Int32>, MaxValue: cpp.Reference<cpp.Int32>): Void;
	public function MaxOfFloatArray(FloatArray: TArray<cpp.Float32>, IndexOfMaxValue: cpp.Reference<cpp.Int32>, MaxValue: cpp.Reference<cpp.Float32>): Void;
	public function MaxOfByteArray(ByteArray: TArray<cpp.UInt8>, IndexOfMaxValue: cpp.Reference<cpp.Int32>, MaxValue: cpp.UInt8): Void;
	public function MaxInt64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function Max(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function Matrix_TransformVector4(M: FMatrix, V: FVector4): FVector4;
	public function Matrix_TransformVector(M: FMatrix, V: FVector): FVector4;
	public function Matrix_TransformPosition(M: FMatrix, V: FVector): FVector4;
	public function Matrix_ToQuat(M: FMatrix): FQuat;
	public function Matrix_SetOrigin(M: FMatrix, NewOrigin: FVector): Void;
	public function Matrix_SetColumn(M: FMatrix, Column: EMatrixColumns, Value: FVector): Void;
	public function Matrix_SetAxis(M: FMatrix, Axis: EAxis, AxisVector: FVector): Void;
	public function Matrix_ScaleTranslation(M: FMatrix, Scale3D: FVector): FMatrix;
	public function Matrix_RemoveTranslation(M: FMatrix): FMatrix;
	public function Matrix_RemoveScaling(M: FMatrix, Tolerance: cpp.Float32): Void;
	public function Matrix_Mirror(M: FMatrix, MirrorAxis: EAxis, FlipAxis: EAxis): FMatrix;
	public function Matrix_InverseTransformVector(M: FMatrix, V: FVector): FVector;
	public function Matrix_InverseTransformPosition(M: FMatrix, V: FVector): FVector;
	public function Matrix_Identity(): FMatrix;
	public function Matrix_GetUnitAxis(M: FMatrix, Axis: EAxis): FVector;
	public function Matrix_GetUnitAxes(M: FMatrix, X: FVector, Y: FVector, Z: FVector): Void;
	public function Matrix_GetTransposed(M: FMatrix): FMatrix;
	public function Matrix_GetTransposeAdjoint(M: FMatrix): FMatrix;
	public function Matrix_GetScaleVector(M: FMatrix, Tolerance: cpp.Float32): FVector;
	public function Matrix_GetScaledAxis(M: FMatrix, Axis: EAxis): FVector;
	public function Matrix_GetScaledAxes(M: FMatrix, X: FVector, Y: FVector, Z: FVector): Void;
	public function Matrix_GetRotDeterminant(M: FMatrix): cpp.Float32;
	public function Matrix_GetRotator(M: FMatrix): FRotator;
	public function Matrix_GetOrigin(InMatrix: FMatrix): FVector;
	public function Matrix_GetMaximumAxisScale(M: FMatrix): cpp.Float32;
	public function Matrix_GetMatrixWithoutScale(M: FMatrix, Tolerance: cpp.Float32): FMatrix;
	public function Matrix_GetInverse(M: FMatrix): FMatrix;
	public function Matrix_GetFrustumTopPlane(M: FMatrix, OutPlane: FPlane): Bool;
	public function Matrix_GetFrustumRightPlane(M: FMatrix, OutPlane: FPlane): Bool;
	public function Matrix_GetFrustumNearPlane(M: FMatrix, OutPlane: FPlane): Bool;
	public function Matrix_GetFrustumLeftPlane(M: FMatrix, OutPlane: FPlane): Bool;
	public function Matrix_GetFrustumFarPlane(M: FMatrix, OutPlane: FPlane): Bool;
	public function Matrix_GetFrustumBottomPlane(M: FMatrix, OutPlane: FPlane): Bool;
	public function Matrix_GetDeterminant(M: FMatrix): cpp.Float32;
	public function Matrix_GetColumn(M: FMatrix, Column: EMatrixColumns): FVector;
	public function Matrix_ContainsNaN(M: FMatrix): Bool;
	public function Matrix_ConcatenateTranslation(M: FMatrix, Translation: FVector): FMatrix;
	public function Matrix_ApplyScale(M: FMatrix, Scale: cpp.Float32): FMatrix;
	public function MapRangeUnclamped(Value: cpp.Float64, InRangeA: cpp.Float64, InRangeB: cpp.Float64, OutRangeA: cpp.Float64, OutRangeB: cpp.Float64): cpp.Float64;
	public function MapRangeClamped(Value: cpp.Float64, InRangeA: cpp.Float64, InRangeB: cpp.Float64, OutRangeA: cpp.Float64, OutRangeB: cpp.Float64): cpp.Float64;
	public function MakeVector_NetQuantizeNormal(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): FVector_NetQuantizeNormal;
	public function MakeVector_NetQuantize100(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): FVector_NetQuantize100;
	public function MakeVector_NetQuantize10(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): FVector_NetQuantize10;
	public function MakeVector_NetQuantize(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): FVector_NetQuantize;
	public function MakeVector4(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64, W: cpp.Float64): FVector4;
	public function MakeVector2D(X: cpp.Float64, Y: cpp.Float64): FVector2D;
	public function MakeVector(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): FVector;
	public function MakeTransform(Location: FVector, Rotation: FRotator, Scale: FVector): FTransform;
	public function MakeTimespan2(Days: cpp.Int32, Hours: cpp.Int32, Minutes: cpp.Int32, Seconds: cpp.Int32, FractionNano: cpp.Int32): FTimespan;
	public function MakeTimespan(Days: cpp.Int32, Hours: cpp.Int32, Minutes: cpp.Int32, Seconds: cpp.Int32, Milliseconds: cpp.Int32): FTimespan;
	public function MakeRotFromZY(Z: FVector, Y: FVector): FRotator;
	public function MakeRotFromZX(Z: FVector, X: FVector): FRotator;
	public function MakeRotFromZ(Z: FVector): FRotator;
	public function MakeRotFromYZ(Y: FVector, Z: FVector): FRotator;
	public function MakeRotFromYX(Y: FVector, X: FVector): FRotator;
	public function MakeRotFromY(Y: FVector): FRotator;
	public function MakeRotFromXZ(X: FVector, Z: FVector): FRotator;
	public function MakeRotFromXY(X: FVector, Y: FVector): FRotator;
	public function MakeRotFromX(X: FVector): FRotator;
	public function MakeRotator(Roll: cpp.Float32, Pitch: cpp.Float32, Yaw: cpp.Float32): FRotator;
	public function MakeRotationFromAxes(Forward: FVector, Right: FVector, Up: FVector): FRotator;
	public function MakeRelativeTransform(A: FTransform, RelativeTo: FTransform): FTransform;
	public function MakeRandomStream(InitialSeed: cpp.Int32): FRandomStream;
	public function MakeQuat(X: cpp.Float32, Y: cpp.Float32, Z: cpp.Float32, W: cpp.Float32): FQuat;
	public function MakeQualifiedFrameTime(Frame: FFrameNumber, FrameRate: FFrameRate, SubFrame: cpp.Float32): FQualifiedFrameTime;
	public function MakePulsatingValue(InCurrentTime: cpp.Float32, InPulsesPerSecond: cpp.Float32, InPhase: cpp.Float32): cpp.Float32;
	public function MakePlaneFromPointAndNormal(Point: FVector, Normal: FVector): FPlane;
	public function MakeFrameRate(Numerator: cpp.Int32, Denominator: cpp.Int32): FFrameRate;
	public function MakeDateTime(Year: cpp.Int32, Month: cpp.Int32, Day: cpp.Int32, Hour: cpp.Int32, Minute: cpp.Int32, Second: cpp.Int32, Millisecond: cpp.Int32): FDateTime;
	public function MakeColor(R: cpp.Float32, G: cpp.Float32, B: cpp.Float32, A: cpp.Float32): FLinearColor;
	public function MakeBoxSphereBounds(Origin: FVector, BoxExtent: FVector, SphereRadius: cpp.Float32): FBoxSphereBounds;
	public function MakeBox2D(Min: FVector2D, Max: FVector2D): FBox2D;
	public function MakeBox(Min: FVector, Max: FVector): FBox;
	public function Loge(A: cpp.Float64): cpp.Float64;
	public function Log(A: cpp.Float64, Base: cpp.Float64): cpp.Float64;
	public function LinePlaneIntersection_OriginNormal(LineStart: FVector, LineEnd: FVector, PlaneOrigin: FVector, PlaneNormal: FVector, T: cpp.Reference<cpp.Float32>, Intersection: FVector): Bool;
	public function LinePlaneIntersection(LineStart: FVector, LineEnd: FVector, APlane: FPlane, T: cpp.Reference<cpp.Float32>, Intersection: FVector): Bool;
	public function LinearColorLerpUsingHSV(A: FLinearColor, B: FLinearColor, Alpha: cpp.Float32): FLinearColor;
	public function LinearColorLerp(A: FLinearColor, B: FLinearColor, Alpha: cpp.Float32): FLinearColor;
	public function LinearColor_Yellow(): FLinearColor;
	public function LinearColor_White(): FLinearColor;
	public function LinearColor_Transparent(): FLinearColor;
	public function LinearColor_ToRGBE(InLinearColor: FLinearColor): FColor;
	public function LinearColor_ToNewOpacity(InColor: FLinearColor, InOpacity: cpp.Float32): FLinearColor;
	public function LinearColor_SetTemperature(InOutColor: FLinearColor, InTemperature: cpp.Float32): Void;
	public function LinearColor_SetRGBA(InOutColor: FLinearColor, R: cpp.Float32, G: cpp.Float32, B: cpp.Float32, A: cpp.Float32): Void;
	public function LinearColor_SetRandomHue(InOutColor: FLinearColor): Void;
	public function LinearColor_SetFromSRGB(InOutColor: FLinearColor, InSRGB: FColor): Void;
	public function LinearColor_SetFromPow22(InOutColor: FLinearColor, InColor: FColor): Void;
	public function LinearColor_SetFromHSV(InOutColor: FLinearColor, H: cpp.Float32, S: cpp.Float32, V: cpp.Float32, A: cpp.Float32): Void;
	public function LinearColor_Set(InOutColor: FLinearColor, InColor: FLinearColor): Void;
	public function LinearColor_Red(): FLinearColor;
	public function LinearColor_QuantizeRound(InColor: FLinearColor): FColor;
	public function LinearColor_Quantize(InColor: FLinearColor): FColor;
	public function LinearColor_IsNearEqual(A: FLinearColor, B: FLinearColor, Tolerance: cpp.Float32): Bool;
	public function LinearColor_Green(): FLinearColor;
	public function LinearColor_Gray(): FLinearColor;
	public function LinearColor_GetMin(InColor: FLinearColor): cpp.Float32;
	public function LinearColor_GetMax(InColor: FLinearColor): cpp.Float32;
	public function LinearColor_GetLuminance(InColor: FLinearColor): cpp.Float32;
	public function LinearColor_Distance(C1: FLinearColor, C2: FLinearColor): cpp.Float32;
	public function LinearColor_Desaturated(InColor: FLinearColor, InDesaturation: cpp.Float32): FLinearColor;
	public function LinearColor_Blue(): FLinearColor;
	public function LinearColor_Black(): FLinearColor;
	public function LessLess_VectorRotator(A: FVector, B: FRotator): FVector;
	public function LessEqual_TimespanTimespan(A: FTimespan, B: FTimespan): Bool;
	public function LessEqual_IntInt(A: cpp.Int32, B: cpp.Int32): Bool;
	public function LessEqual_Int64Int64(A: cpp.Int64, B: cpp.Int64): Bool;
	public function LessEqual_DoubleDouble(A: cpp.Float64, B: cpp.Float64): Bool;
	public function LessEqual_DateTimeDateTime(A: FDateTime, B: FDateTime): Bool;
	public function LessEqual_ByteByte(A: cpp.UInt8, B: cpp.UInt8): Bool;
	public function Less_TimespanTimespan(A: FTimespan, B: FTimespan): Bool;
	public function Less_IntInt(A: cpp.Int32, B: cpp.Int32): Bool;
	public function Less_Int64Int64(A: cpp.Int64, B: cpp.Int64): Bool;
	public function Less_DoubleDouble(A: cpp.Float64, B: cpp.Float64): Bool;
	public function Less_DateTimeDateTime(A: FDateTime, B: FDateTime): Bool;
	public function Less_ByteByte(A: cpp.UInt8, B: cpp.UInt8): Bool;
	public function Lerp(A: cpp.Float64, B: cpp.Float64, Alpha: cpp.Float64): cpp.Float64;
	public function IsZero2D(A: FVector2D): Bool;
	public function IsPointInBoxWithTransform(Point: FVector, BoxWorldTransform: FTransform, BoxExtent: FVector): Bool;
	public function IsPointInBox(Point: FVector, BoxOrigin: FVector, BoxExtent: FVector): Bool;
	public function IsNearlyZero2D(A: FVector2D, Tolerance: cpp.Float32): Bool;
	public function IsMorning(A: FDateTime): Bool;
	public function IsLeapYear(Year: cpp.Int32): Bool;
	public function IsAfternoon(A: FDateTime): Bool;
	public function InvertTransform(T: FTransform): FTransform;
	public function InverseTransformRotation(T: FTransform, Rotation: FRotator): FRotator;
	public function InverseTransformLocation(T: FTransform, Location: FVector): FVector;
	public function InverseTransformDirection(T: FTransform, Direction: FVector): FVector;
	public function IntPoint_Zero(): FIntPoint;
	public function IntPoint_Up(): FIntPoint;
	public function IntPoint_Right(): FIntPoint;
	public function IntPoint_One(): FIntPoint;
	public function IntPoint_Left(): FIntPoint;
	public function IntPoint_Down(): FIntPoint;
	public function InRange_IntInt(Value: cpp.Int32, Min: cpp.Int32, Max: cpp.Int32, InclusiveMin: Bool, InclusiveMax: Bool): Bool;
	public function InRange_Int64Int64(Value: cpp.Int64, Min: cpp.Int64, Max: cpp.Int64, InclusiveMin: Bool, InclusiveMax: Bool): Bool;
	public function InRange_FloatFloat(Value: cpp.Float64, Min: cpp.Float64, Max: cpp.Float64, InclusiveMin: Bool, InclusiveMax: Bool): Bool;
	public function Hypotenuse(Width: cpp.Float64, Height: cpp.Float64): cpp.Float64;
	public function HSVToRGBLinear(HSV: FLinearColor): FLinearColor;
	public function HSVToRGB_Vector(HSV: FLinearColor, RGB: FLinearColor): Void;
	public function HSVToRGB(H: cpp.Float32, S: cpp.Float32, V: cpp.Float32, A: cpp.Float32): FLinearColor;
	public function GridSnap_Float(Location: cpp.Float64, GridSize: cpp.Float64): cpp.Float64;
	public function GreaterGreater_VectorRotator(A: FVector, B: FRotator): FVector;
	public function GreaterEqual_TimespanTimespan(A: FTimespan, B: FTimespan): Bool;
	public function GreaterEqual_IntInt(A: cpp.Int32, B: cpp.Int32): Bool;
	public function GreaterEqual_Int64Int64(A: cpp.Int64, B: cpp.Int64): Bool;
	public function GreaterEqual_DoubleDouble(A: cpp.Float64, B: cpp.Float64): Bool;
	public function GreaterEqual_DateTimeDateTime(A: FDateTime, B: FDateTime): Bool;
	public function GreaterEqual_ByteByte(A: cpp.UInt8, B: cpp.UInt8): Bool;
	public function Greater_TimespanTimespan(A: FTimespan, B: FTimespan): Bool;
	public function Greater_IntInt(A: cpp.Int32, B: cpp.Int32): Bool;
	public function Greater_Int64Int64(A: cpp.Int64, B: cpp.Int64): Bool;
	public function Greater_DoubleDouble(A: cpp.Float64, B: cpp.Float64): Bool;
	public function Greater_DateTimeDateTime(A: FDateTime, B: FDateTime): Bool;
	public function Greater_ByteByte(A: cpp.UInt8, B: cpp.UInt8): Bool;
	public function GetYear(A: FDateTime): cpp.Int32;
	public function GetYawPitchFromVector(InVec: FVector, Yaw: cpp.Reference<cpp.Float32>, Pitch: cpp.Reference<cpp.Float32>): Void;
	public function GetVectorArrayAverage(Vectors: TArray<FVector>): FVector;
	public function GetUpVector(InRot: FRotator): FVector;
	public function GetTotalSeconds(A: FTimespan): cpp.Float32;
	public function GetTotalMinutes(A: FTimespan): cpp.Float32;
	public function GetTotalMilliseconds(A: FTimespan): cpp.Float32;
	public function GetTotalHours(A: FTimespan): cpp.Float32;
	public function GetTotalDays(A: FTimespan): cpp.Float32;
	public function GetTimeOfDay(A: FDateTime): FTimespan;
	public function GetTAU(): cpp.Float64;
	public function GetSlopeDegreeAngles(MyRightYAxis: FVector, FloorNormal: FVector, UpVector: FVector, OutSlopePitchDegreeAngle: cpp.Reference<cpp.Float32>, OutSlopeRollDegreeAngle: cpp.Reference<cpp.Float32>): Void;
	public function GetSeconds(A: FTimespan): cpp.Int32;
	public function GetSecond(A: FDateTime): cpp.Int32;
	public function GetRotated2D(A: FVector2D, AngleDeg: cpp.Float32): FVector2D;
	public function GetRightVector(InRot: FRotator): FVector;
	public function GetReflectionVector(Direction: FVector, SurfaceNormal: FVector): FVector;
	public function GetPointDistanceToSegment(Point: FVector, SegmentStart: FVector, SegmentEnd: FVector): cpp.Float32;
	public function GetPointDistanceToLine(Point: FVector, LineOrigin: FVector, LineDirection: FVector): cpp.Float32;
	public function GetPI(): cpp.Float64;
	public function GetMonth(A: FDateTime): cpp.Int32;
	public function GetMinutes(A: FTimespan): cpp.Int32;
	public function GetMinute(A: FDateTime): cpp.Int32;
	public function GetMinElement(A: FVector): cpp.Float64;
	public function GetMin2D(A: FVector2D): cpp.Float64;
	public function GetMilliseconds(A: FTimespan): cpp.Int32;
	public function GetMillisecond(A: FDateTime): cpp.Int32;
	public function GetMaxElement(A: FVector): cpp.Float64;
	public function GetMax2D(A: FVector2D): cpp.Float64;
	public function GetHours(A: FTimespan): cpp.Int32;
	public function GetHour12(A: FDateTime): cpp.Int32;
	public function GetHour(A: FDateTime): cpp.Int32;
	public function GetForwardVector(InRot: FRotator): FVector;
	public function GetDuration(A: FTimespan): FTimespan;
	public function GetDirectionUnitVector(From: FVector, To: FVector): FVector;
	public function GetDays(A: FTimespan): cpp.Int32;
	public function GetDayOfYear(A: FDateTime): cpp.Int32;
	public function GetDay(A: FDateTime): cpp.Int32;
	public function GetDate(A: FDateTime): FDateTime;
	public function GetAzimuthAndElevation(InDirection: FVector, ReferenceFrame: FTransform, Azimuth: cpp.Reference<cpp.Float32>, Elevation: cpp.Reference<cpp.Float32>): Void;
	public function GetAxes(A: FRotator, X: FVector, Y: FVector, Z: FVector): Void;
	public function GetAbsMax2D(A: FVector2D): cpp.Float64;
	public function GetAbs2D(A: FVector2D): FVector2D;
	public function FWrap(Value: cpp.Float64, Min: cpp.Float64, Max: cpp.Float64): cpp.Float64;
	public function FTruncVector(InVector: FVector): FIntVector;
	public function FTrunc64(A: cpp.Float64): cpp.Int64;
	public function FTrunc(A: cpp.Float64): cpp.Int32;
	public function FromSeconds(Seconds: cpp.Float32): FTimespan;
	public function FromMinutes(Minutes: cpp.Float32): FTimespan;
	public function FromMilliseconds(Milliseconds: cpp.Float32): FTimespan;
	public function FromHours(Hours: cpp.Float32): FTimespan;
	public function FromDays(Days: cpp.Float32): FTimespan;
	public function Fraction(A: cpp.Float64): cpp.Float64;
	public function FMod64(Dividend: cpp.Float64, Divisor: cpp.Float64, Remainder: cpp.Reference<cpp.Float64>): cpp.Int64;
	public function FMod(Dividend: cpp.Float64, Divisor: cpp.Float64, Remainder: cpp.Reference<cpp.Float64>): cpp.Int32;
	public function FMin(A: cpp.Float64, B: cpp.Float64): cpp.Float64;
	public function FMax(A: cpp.Float64, B: cpp.Float64): cpp.Float64;
	public function FloatSpringInterp(Current: cpp.Float32, Target: cpp.Float32, SpringState: FFloatSpringState, Stiffness: cpp.Float32, CriticalDampingFactor: cpp.Float32, DeltaTime: cpp.Float32, Mass: cpp.Float32, TargetVelocityAmount: cpp.Float32, bClamp: Bool, MinValue: cpp.Float32, MaxValue: cpp.Float32, bInitializeFromTarget: Bool): cpp.Float32;
	public function FixedTurn(InCurrent: cpp.Float32, InDesired: cpp.Float32, InDeltaRate: cpp.Float32): cpp.Float32;
	public function FInterpTo_Constant(Current: cpp.Float64, Target: cpp.Float64, DeltaTime: cpp.Float64, InterpSpeed: cpp.Float64): cpp.Float64;
	public function FInterpTo(Current: cpp.Float64, Target: cpp.Float64, DeltaTime: cpp.Float64, InterpSpeed: cpp.Float64): cpp.Float64;
	public function FInterpEaseInOut(A: cpp.Float64, B: cpp.Float64, Alpha: cpp.Float64, Exponent: cpp.Float64): cpp.Float64;
	public function FindRelativeLookAtRotation(StartTransform: FTransform, TargetLocation: FVector): FRotator;
	public function FindNearestPointsOnLineSegments(Segment1Start: FVector, Segment1End: FVector, Segment2Start: FVector, Segment2End: FVector, Segment1Point: FVector, Segment2Point: FVector): Void;
	public function FindLookAtRotation(Start: FVector, Target: FVector): FRotator;
	public function FindClosestPointOnSegment(Point: FVector, SegmentStart: FVector, SegmentEnd: FVector): FVector;
	public function FindClosestPointOnLine(Point: FVector, LineOrigin: FVector, LineDirection: FVector): FVector;
	public function FFloor64(A: cpp.Float64): cpp.Int64;
	public function FFloor(A: cpp.Float64): cpp.Int32;
	public function FClamp(Value: cpp.Float64, Min: cpp.Float64, Max: cpp.Float64): cpp.Float64;
	public function FCeil64(A: cpp.Float64): cpp.Int64;
	public function FCeil(A: cpp.Float64): cpp.Int32;
	public function Exp(A: cpp.Float64): cpp.Float64;
	public function EqualExactly_VectorVector(A: FVector, B: FVector): Bool;
	public function EqualExactly_Vector4Vector4(A: FVector4, B: FVector4): Bool;
	public function EqualExactly_Vector2DVector2D(A: FVector2D, B: FVector2D): Bool;
	public function EqualEqual_VectorVector(A: FVector, B: FVector, ErrorTolerance: cpp.Float32): Bool;
	public function EqualEqual_Vector4Vector4(A: FVector4, B: FVector4, ErrorTolerance: cpp.Float32): Bool;
	public function EqualEqual_Vector2DVector2D(A: FVector2D, B: FVector2D, ErrorTolerance: cpp.Float32): Bool;
	public function EqualEqual_TransformTransform(A: FTransform, B: FTransform): Bool;
	public function EqualEqual_TimespanTimespan(A: FTimespan, B: FTimespan): Bool;
	public function EqualEqual_RotatorRotator(A: FRotator, B: FRotator, ErrorTolerance: cpp.Float32): Bool;
	public function EqualEqual_QuatQuat(A: FQuat, B: FQuat, Tolerance: cpp.Float32): Bool;
	public function EqualEqual_ObjectObject(A: cpp.Star<UObject>, B: cpp.Star<UObject>): Bool;
	public function EqualEqual_NameName(A: FName, B: FName): Bool;
	public function EqualEqual_MatrixMatrix(A: FMatrix, B: FMatrix, Tolerance: cpp.Float32): Bool;
	public function EqualEqual_LinearColorLinearColor(A: FLinearColor, B: FLinearColor): Bool;
	public function EqualEqual_IntInt(A: cpp.Int32, B: cpp.Int32): Bool;
	public function EqualEqual_Int64Int64(A: cpp.Int64, B: cpp.Int64): Bool;
	public function EqualEqual_DoubleDouble(A: cpp.Float64, B: cpp.Float64): Bool;
	public function EqualEqual_DateTimeDateTime(A: FDateTime, B: FDateTime): Bool;
	public function EqualEqual_ClassClass(A: cpp.Star<UClass>, B: cpp.Star<UClass>): Bool;
	public function EqualEqual_ByteByte(A: cpp.UInt8, B: cpp.UInt8): Bool;
	public function EqualEqual_BoolBool(A: Bool, B: Bool): Bool;
	public function Equal_IntPointIntPoint(A: FIntPoint, B: FIntPoint): Bool;
	public function Ease(A: cpp.Float64, B: cpp.Float64, Alpha: cpp.Float64, EasingFunc: EEasingFunc, BlendExp: cpp.Float64, Steps: cpp.Int32): cpp.Float64;
	public function DynamicWeightedMovingAverage_FVector(CurrentSample: FVector, PreviousSample: FVector, MaxDistance: cpp.Float32, MinWeight: cpp.Float32, MaxWeight: cpp.Float32): FVector;
	public function DynamicWeightedMovingAverage_FRotator(CurrentSample: FRotator, PreviousSample: FRotator, MaxDistance: cpp.Float32, MinWeight: cpp.Float32, MaxWeight: cpp.Float32): FRotator;
	public function DynamicWeightedMovingAverage_Float(CurrentSample: cpp.Float32, PreviousSample: cpp.Float32, MaxDistance: cpp.Float32, MinWeight: cpp.Float32, MaxWeight: cpp.Float32): cpp.Float32;
	public function DotProduct2D(A: FVector2D, B: FVector2D): cpp.Float64;
	public function Dot_VectorVector(A: FVector, B: FVector): cpp.Float64;
	public function Divide_VectorVector(A: FVector, B: FVector): FVector;
	public function Divide_VectorInt(A: FVector, B: cpp.Int32): FVector;
	public function Divide_VectorFloat(A: FVector, B: cpp.Float64): FVector;
	public function Divide_Vector4Vector4(A: FVector4, B: FVector4): FVector4;
	public function Divide_Vector2DVector2D(A: FVector2D, B: FVector2D): FVector2D;
	public function Divide_Vector2DFloat(A: FVector2D, B: cpp.Float64): FVector2D;
	public function Divide_TimespanFloat(A: FTimespan, Scalar: cpp.Float32): FTimespan;
	public function Divide_LinearColorLinearColor(A: FLinearColor, B: FLinearColor): FLinearColor;
	public function Divide_IntPointIntPoint(A: FIntPoint, B: FIntPoint): FIntPoint;
	public function Divide_IntPointInt(A: FIntPoint, B: cpp.Int32): FIntPoint;
	public function Divide_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function Divide_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function Divide_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Float64;
	public function Divide_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.UInt8;
	public function DistanceSquared2D(V1: FVector2D, V2: FVector2D): cpp.Float64;
	public function Distance2D(V1: FVector2D, V2: FVector2D): cpp.Float64;
	public function DegTan(A: cpp.Float64): cpp.Float64;
	public function DegSin(A: cpp.Float64): cpp.Float64;
	public function DegreesToRadians(A: cpp.Float64): cpp.Float64;
	public function DegCos(A: cpp.Float64): cpp.Float64;
	public function DegAtan2(Y: cpp.Float64, X: cpp.Float64): cpp.Float64;
	public function DegAtan(A: cpp.Float64): cpp.Float64;
	public function DegAsin(A: cpp.Float64): cpp.Float64;
	public function DegAcos(A: cpp.Float64): cpp.Float64;
	public function DaysInYear(Year: cpp.Int32): cpp.Int32;
	public function DaysInMonth(Year: cpp.Int32, Month: cpp.Int32): cpp.Int32;
	public function DateTimeMinValue(): FDateTime;
	public function DateTimeMaxValue(): FDateTime;
	public function DateTimeFromString(DateTimeString: FString, Result: FDateTime): Bool;
	public function DateTimeFromIsoString(IsoString: FString, Result: FDateTime): Bool;
	public function CrossProduct2D(A: FVector2D, B: FVector2D): cpp.Float64;
	public function Cross_VectorVector(A: FVector, B: FVector): FVector;
	public function CreateVectorFromYawPitch(Yaw: cpp.Float32, Pitch: cpp.Float32, Length: cpp.Float32): FVector;
	public function Cos(A: cpp.Float64): cpp.Float64;
	public function ConvertTransformToRelative(Transform: FTransform, ParentTransform: FTransform): FTransform;
	public function Conv_VectorToVector2D(InVector: FVector): FVector2D;
	public function Conv_VectorToTransform(InLocation: FVector): FTransform;
	public function Conv_VectorToRotator(InVec: FVector): FRotator;
	public function Conv_VectorToQuaternion(InVec: FVector): FQuat;
	public function Conv_VectorToLinearColor(InVec: FVector): FLinearColor;
	public function Conv_Vector4ToVector(InVector4: FVector4): FVector;
	public function Conv_Vector4ToRotator(InVec: FVector4): FRotator;
	public function Conv_Vector4ToQuaternion(InVec: FVector4): FQuat;
	public function Conv_Vector2DToVector(InVector2D: FVector2D, Z: cpp.Float32): FVector;
	public function Conv_Vector2DToIntPoint(InVector2D: FVector2D): FIntPoint;
	public function Conv_TransformToMatrix(Transform: FTransform): FMatrix;
	public function Conv_RotatorToVector(InRot: FRotator): FVector;
	public function Conv_RotatorToTransform(InRotator: FRotator): FTransform;
	public function Conv_RotatorToQuaternion(InRot: FRotator): FQuat;
	public function Conv_MatrixToTransform(InMatrix: FMatrix): FTransform;
	public function Conv_MatrixToRotator(InMatrix: FMatrix): FRotator;
	public function Conv_LinearColorToVector(InLinearColor: FLinearColor): FVector;
	public function Conv_LinearColorToColor(InLinearColor: FLinearColor, InUseSRGB: Bool): FColor;
	public function Conv_IntVectorToVector(InIntVector: FIntVector): FVector;
	public function Conv_IntToVector(InInt: cpp.Int32): FVector;
	public function Conv_IntToIntVector(InInt: cpp.Int32): FIntVector;
	public function Conv_IntToInt64(InInt: cpp.Int32): cpp.Int64;
	public function Conv_IntToFloat(InInt: cpp.Int32): cpp.Float32;
	public function Conv_IntToDouble(InInt: cpp.Int32): cpp.Float64;
	public function Conv_IntToByte(InInt: cpp.Int32): cpp.UInt8;
	public function Conv_IntToBool(InInt: cpp.Int32): Bool;
	public function Conv_IntPointToVector2D(InIntPoint: FIntPoint): FVector2D;
	public function Conv_Int64ToInt(InInt: cpp.Int64): cpp.Int32;
	public function Conv_Int64ToDouble(InInt: cpp.Int64): cpp.Float64;
	public function Conv_Int64ToByte(InInt: cpp.Int64): cpp.UInt8;
	public function Conv_FloatToVector(InFloat: cpp.Float32): FVector;
	public function Conv_FloatToLinearColor(InFloat: cpp.Float32): FLinearColor;
	public function Conv_FloatToDouble(InFloat: cpp.Float32): cpp.Float64;
	public function Conv_DoubleToVector(InDouble: cpp.Float64): FVector;
	public function Conv_DoubleToLinearColor(InDouble: cpp.Float64): FLinearColor;
	public function Conv_DoubleToInt64(InDouble: cpp.Float64): cpp.Int64;
	public function Conv_DoubleToFloat(InDouble: cpp.Float64): cpp.Float32;
	public function Conv_ColorToLinearColor(InColor: FColor): FLinearColor;
	public function Conv_ByteToInt64(InByte: cpp.UInt8): cpp.Int64;
	public function Conv_ByteToInt(InByte: cpp.UInt8): cpp.Int32;
	public function Conv_ByteToFloat(InByte: cpp.UInt8): cpp.Float32;
	public function Conv_ByteToDouble(InByte: cpp.UInt8): cpp.Float64;
	public function Conv_BoolToInt(InBool: Bool): cpp.Int32;
	public function Conv_BoolToFloat(InBool: Bool): cpp.Float32;
	public function Conv_BoolToByte(InBool: Bool): cpp.UInt8;
	public function ComposeTransforms(A: FTransform, B: FTransform): FTransform;
	public function ComposeRotators(A: FRotator, B: FRotator): FRotator;
	public function ClassIsChildOf(TestClass: TSubclassOf<UObject>, ParentClass: TSubclassOf<UObject>): Bool;
	public function ClampVectorSize(A: FVector, Min: cpp.Float64, Max: cpp.Float64): FVector;
	public function ClampInt64(Value: cpp.Int64, Min: cpp.Int64, Max: cpp.Int64): cpp.Int64;
	public function ClampAxis(Angle: cpp.Float32): cpp.Float32;
	public function ClampAxes2D(A: FVector2D, MinAxisVal: cpp.Float64, MaxAxisVal: cpp.Float64): FVector2D;
	public function ClampAngle(AngleDegrees: cpp.Float64, MinAngleDegrees: cpp.Float64, MaxAngleDegrees: cpp.Float64): cpp.Float64;
	public function Clamp(Value: cpp.Int32, Min: cpp.Int32, Max: cpp.Int32): cpp.Int32;
	public function CInterpTo(Current: FLinearColor, Target: FLinearColor, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): FLinearColor;
	public function BreakVector_NetQuantizeNormal(InVec: FVector_NetQuantizeNormal, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector_NetQuantize100(InVec: FVector_NetQuantize100, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector_NetQuantize10(InVec: FVector_NetQuantize10, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector_NetQuantize(InVec: FVector_NetQuantize, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector4(InVec: FVector4, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>, W: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector3f(InVec: FVector3f, X: cpp.Reference<cpp.Float32>, Y: cpp.Reference<cpp.Float32>, Z: cpp.Reference<cpp.Float32>): Void;
	public function BreakVector2D(InVec: FVector2D, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector(InVec: FVector, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakTransform(InTransform: FTransform, Location: FVector, Rotation: FRotator, Scale: FVector): Void;
	public function BreakTimespan2(InTimespan: FTimespan, Days: cpp.Reference<cpp.Int32>, Hours: cpp.Reference<cpp.Int32>, Minutes: cpp.Reference<cpp.Int32>, Seconds: cpp.Reference<cpp.Int32>, FractionNano: cpp.Reference<cpp.Int32>): Void;
	public function BreakTimespan(InTimespan: FTimespan, Days: cpp.Reference<cpp.Int32>, Hours: cpp.Reference<cpp.Int32>, Minutes: cpp.Reference<cpp.Int32>, Seconds: cpp.Reference<cpp.Int32>, Milliseconds: cpp.Reference<cpp.Int32>): Void;
	public function BreakRotIntoAxes(InRot: FRotator, X: FVector, Y: FVector, Z: FVector): Void;
	public function BreakRotator(InRot: FRotator, Roll: cpp.Reference<cpp.Float32>, Pitch: cpp.Reference<cpp.Float32>, Yaw: cpp.Reference<cpp.Float32>): Void;
	public function BreakRandomStream(InRandomStream: FRandomStream, InitialSeed: cpp.Reference<cpp.Int32>): Void;
	public function BreakQuat(InQuat: FQuat, X: cpp.Reference<cpp.Float32>, Y: cpp.Reference<cpp.Float32>, Z: cpp.Reference<cpp.Float32>, W: cpp.Reference<cpp.Float32>): Void;
	public function BreakQualifiedFrameTime(InFrameTime: FQualifiedFrameTime, Frame: FFrameNumber, FrameRate: FFrameRate, SubFrame: cpp.Reference<cpp.Float32>): Void;
	public function BreakFrameRate(InFrameRate: FFrameRate, Numerator: cpp.Reference<cpp.Int32>, Denominator: cpp.Reference<cpp.Int32>): Void;
	public function BreakDateTime(InDateTime: FDateTime, Year: cpp.Reference<cpp.Int32>, Month: cpp.Reference<cpp.Int32>, Day: cpp.Reference<cpp.Int32>, Hour: cpp.Reference<cpp.Int32>, Minute: cpp.Reference<cpp.Int32>, Second: cpp.Reference<cpp.Int32>, Millisecond: cpp.Reference<cpp.Int32>): Void;
	public function BreakColor(InColor: FLinearColor, R: cpp.Reference<cpp.Float32>, G: cpp.Reference<cpp.Float32>, B: cpp.Reference<cpp.Float32>, A: cpp.Reference<cpp.Float32>): Void;
	public function BreakBoxSphereBounds(InBoxSphereBounds: FBoxSphereBounds, Origin: FVector, BoxExtent: FVector, SphereRadius: cpp.Reference<cpp.Float32>): Void;
	public function BooleanXOR(A: Bool, B: Bool): Bool;
	public function BooleanOR(A: Bool, B: Bool): Bool;
	public function BooleanNOR(A: Bool, B: Bool): Bool;
	public function BooleanNAND(A: Bool, B: Bool): Bool;
	public function BooleanAND(A: Bool, B: Bool): Bool;
	public function BMin(A: cpp.UInt8, B: cpp.UInt8): cpp.UInt8;
	public function BMax(A: cpp.UInt8, B: cpp.UInt8): cpp.UInt8;
	public function Atan2(Y: cpp.Float64, X: cpp.Float64): cpp.Float64;
	public function Atan(A: cpp.Float64): cpp.Float64;
	public function Asin(A: cpp.Float64): cpp.Float64;
	public function And_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function And_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function Add_VectorVector(A: FVector, B: FVector): FVector;
	public function Add_VectorInt(A: FVector, B: cpp.Int32): FVector;
	public function Add_VectorFloat(A: FVector, B: cpp.Float64): FVector;
	public function Add_Vector4Vector4(A: FVector4, B: FVector4): FVector4;
	public function Add_Vector2DVector2D(A: FVector2D, B: FVector2D): FVector2D;
	public function Add_Vector2DFloat(A: FVector2D, B: cpp.Float64): FVector2D;
	public function Add_TimespanTimespan(A: FTimespan, B: FTimespan): FTimespan;
	public function Add_QuatQuat(A: FQuat, B: FQuat): FQuat;
	public function Add_MatrixMatrix(A: FMatrix, B: FMatrix): FMatrix;
	public function Add_LinearColorLinearColor(A: FLinearColor, B: FLinearColor): FLinearColor;
	public function Add_IntPointIntPoint(A: FIntPoint, B: FIntPoint): FIntPoint;
	public function Add_IntPointInt(A: FIntPoint, B: cpp.Int32): FIntPoint;
	public function Add_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Int32;
	public function Add_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Int64;
	public function Add_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Float64;
	public function Add_DateTimeTimespan(A: FDateTime, B: FTimespan): FDateTime;
	public function Add_DateTimeDateTime(A: FDateTime, B: FDateTime): FDateTime;
	public function Add_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.UInt8;
	public function Acos(A: cpp.Float64): cpp.Float64;
	public function Abs_Int64(A: cpp.Int64): cpp.Int64;
	public function Abs_Int(A: cpp.Int32): cpp.Int32;
	public function Abs(A: cpp.Float64): cpp.Float64;
}
