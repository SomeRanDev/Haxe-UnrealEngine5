// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USoundBase")
@:include("Sound/SoundBase.h")
@:valueType
extern class SoundBase extends Object {
	public var SoundClassObject: ucpp.Ptr<SoundClass>;
	public var bDebug: Bool;
	public var bOverrideConcurrency: Bool;
	public var bEnableBusSends: Bool;
	public var bEnableBaseSubmix: Bool;
	public var bEnableSubmixSends: Bool;
	public var bHasDelayNode: Bool;
	public var bHasConcatenatorNode: Bool;
	public var bBypassVolumeScaleForPriority: Bool;
	public var VirtualizationMode: EVirtualizationMode;
	public var ConcurrencySet: TSet<ucpp.Ptr<SoundConcurrency>>;
	public var ConcurrencyOverrides: SoundConcurrencySettings;
	public var Duration: ucpp.num.Float32;
	public var MaxDistance: ucpp.num.Float32;
	public var TotalSamples: ucpp.num.Float32;
	public var Priority: ucpp.num.Float32;
	public var AttenuationSettings: ucpp.Ptr<SoundAttenuation>;
	public var SoundSubmixObject: ucpp.Ptr<SoundSubmixBase>;
	public var SoundSubmixSends: TArray<SoundSubmixSendInfo>;
	public var SourceEffectChain: ucpp.Ptr<SoundEffectSourcePresetChain>;
	public var BusSends: TArray<SoundSourceBusSendInfo>;
	public var PreEffectBusSends: TArray<SoundSourceBusSendInfo>;
	public var AssetUserData: TArray<ucpp.Ptr<AssetUserData>>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstSoundBase(SoundBase) from SoundBase {
	public extern var SoundClassObject(get, never): ucpp.Ptr<SoundClass.ConstSoundClass>;
	public inline extern function get_SoundClassObject(): ucpp.Ptr<SoundClass.ConstSoundClass> return this.SoundClassObject;
	public extern var bDebug(get, never): Bool;
	public inline extern function get_bDebug(): Bool return this.bDebug;
	public extern var bOverrideConcurrency(get, never): Bool;
	public inline extern function get_bOverrideConcurrency(): Bool return this.bOverrideConcurrency;
	public extern var bEnableBusSends(get, never): Bool;
	public inline extern function get_bEnableBusSends(): Bool return this.bEnableBusSends;
	public extern var bEnableBaseSubmix(get, never): Bool;
	public inline extern function get_bEnableBaseSubmix(): Bool return this.bEnableBaseSubmix;
	public extern var bEnableSubmixSends(get, never): Bool;
	public inline extern function get_bEnableSubmixSends(): Bool return this.bEnableSubmixSends;
	public extern var bHasDelayNode(get, never): Bool;
	public inline extern function get_bHasDelayNode(): Bool return this.bHasDelayNode;
	public extern var bHasConcatenatorNode(get, never): Bool;
	public inline extern function get_bHasConcatenatorNode(): Bool return this.bHasConcatenatorNode;
	public extern var bBypassVolumeScaleForPriority(get, never): Bool;
	public inline extern function get_bBypassVolumeScaleForPriority(): Bool return this.bBypassVolumeScaleForPriority;
	public extern var VirtualizationMode(get, never): EVirtualizationMode;
	public inline extern function get_VirtualizationMode(): EVirtualizationMode return this.VirtualizationMode;
	public extern var ConcurrencySet(get, never): TSet<ucpp.Ptr<SoundConcurrency.ConstSoundConcurrency>>;
	public inline extern function get_ConcurrencySet(): TSet<ucpp.Ptr<SoundConcurrency.ConstSoundConcurrency>> return this.ConcurrencySet;
	public extern var ConcurrencyOverrides(get, never): SoundConcurrencySettings;
	public inline extern function get_ConcurrencyOverrides(): SoundConcurrencySettings return this.ConcurrencyOverrides;
	public extern var Duration(get, never): ucpp.num.Float32;
	public inline extern function get_Duration(): ucpp.num.Float32 return this.Duration;
	public extern var MaxDistance(get, never): ucpp.num.Float32;
	public inline extern function get_MaxDistance(): ucpp.num.Float32 return this.MaxDistance;
	public extern var TotalSamples(get, never): ucpp.num.Float32;
	public inline extern function get_TotalSamples(): ucpp.num.Float32 return this.TotalSamples;
	public extern var Priority(get, never): ucpp.num.Float32;
	public inline extern function get_Priority(): ucpp.num.Float32 return this.Priority;
	public extern var AttenuationSettings(get, never): ucpp.Ptr<SoundAttenuation.ConstSoundAttenuation>;
	public inline extern function get_AttenuationSettings(): ucpp.Ptr<SoundAttenuation.ConstSoundAttenuation> return this.AttenuationSettings;
	public extern var SoundSubmixObject(get, never): ucpp.Ptr<SoundSubmixBase.ConstSoundSubmixBase>;
	public inline extern function get_SoundSubmixObject(): ucpp.Ptr<SoundSubmixBase.ConstSoundSubmixBase> return this.SoundSubmixObject;
	public extern var SoundSubmixSends(get, never): TArray<SoundSubmixSendInfo>;
	public inline extern function get_SoundSubmixSends(): TArray<SoundSubmixSendInfo> return this.SoundSubmixSends;
	public extern var SourceEffectChain(get, never): ucpp.Ptr<SoundEffectSourcePresetChain.ConstSoundEffectSourcePresetChain>;
	public inline extern function get_SourceEffectChain(): ucpp.Ptr<SoundEffectSourcePresetChain.ConstSoundEffectSourcePresetChain> return this.SourceEffectChain;
	public extern var BusSends(get, never): TArray<SoundSourceBusSendInfo>;
	public inline extern function get_BusSends(): TArray<SoundSourceBusSendInfo> return this.BusSends;
	public extern var PreEffectBusSends(get, never): TArray<SoundSourceBusSendInfo>;
	public inline extern function get_PreEffectBusSends(): TArray<SoundSourceBusSendInfo> return this.PreEffectBusSends;
	public extern var AssetUserData(get, never): TArray<ucpp.Ptr<AssetUserData.ConstAssetUserData>>;
	public inline extern function get_AssetUserData(): TArray<ucpp.Ptr<AssetUserData.ConstAssetUserData>> return this.AssetUserData;
}

@:forward
@:nativeGen
@:native("SoundBase*")
abstract SoundBasePtr(ucpp.Ptr<SoundBase>) from ucpp.Ptr<SoundBase> to ucpp.Ptr<SoundBase>{
	@:from
	public static extern inline function fromValue(v: SoundBase): SoundBasePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SoundBase {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}