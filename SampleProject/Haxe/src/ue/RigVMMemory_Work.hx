// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URigVMMemory_Work")
@:structAccess
extern class RigVMMemory_Work extends RigVMMemoryStorage {
	public var ExecuteContext_: ControlRigExecuteContext;
	public var FootTrace_FootTrace_SphereTraceByTraceChannel_HitLocation: Vector;
	public var FootTrace_FootTrace_MathVectorAdd_Result: Vector;
	public var FootTrace_FootTrace_GetTransform_Transform: Transform;
	public var FootTrace_FootTrace_GetTransform_CachedIndex: TArray<CachedRigElement>;
	public var FootTrace_FootTrace_MathFloatAdd_Result: cpp.Float32;
	public var FootTrace_FootTrace_MathFloatAdd_A: cpp.Float32;
	public var FootTrace_FootTrace_GetTransform_1_Transform: Transform;
	public var FootTrace_FootTrace_GetTransform_1_CachedIndex: TArray<CachedRigElement>;
	public var FootTrace_FootTrace_MathVectorAdd_A__IO: Vector;
	public var FootTrace_FootTrace_MathVectorSub_Result: Vector;
	public var FootTrace_FootTrace_MathVectorSub_A__IO: Vector;
	public var FootTrace_FootTrace_SphereTraceByTraceChannel_bHit: Bool;
	public var FootTrace_FootTrace_SphereTraceByTraceChannel_HitNormal: Vector;
	public var FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_HitLocation: Vector;
	public var FootTrace_1_FootTrace_1_MathVectorAdd_Result: Vector;
	public var FootTrace_1_FootTrace_1_GetTransform_Transform: Transform;
	public var FootTrace_1_FootTrace_1_GetTransform_CachedIndex: TArray<CachedRigElement>;
	public var FootTrace_1_FootTrace_1_MathFloatAdd_Result: cpp.Float32;
	public var FootTrace_1_FootTrace_1_MathFloatAdd_A: cpp.Float32;
	public var FootTrace_1_FootTrace_1_GetTransform_1_Transform: Transform;
	public var FootTrace_1_FootTrace_1_GetTransform_1_CachedIndex: TArray<CachedRigElement>;
	public var FootTrace_1_FootTrace_1_MathVectorAdd_A__IO: Vector;
	public var FootTrace_1_FootTrace_1_MathVectorSub_Result: Vector;
	public var FootTrace_1_FootTrace_1_MathVectorSub_A__IO: Vector;
	public var FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_bHit: Bool;
	public var FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_HitNormal: Vector;
	public var AlphaInterp_Result: cpp.Float32;
	public var AlphaInterp_Value: cpp.Float32;
	public var AlphaInterp_ScaleBiasClamp: TArray<InputScaleBiasClamp>;
	public var AlphaInterp_1_Result: cpp.Float32;
	public var AlphaInterp_1_Value: cpp.Float32;
	public var AlphaInterp_1_ScaleBiasClamp: TArray<InputScaleBiasClamp>;
	public var If_Result: cpp.Float64;
	public var MathFloatLess_Result: Bool;
	public var MathFloatLess_A: cpp.Float32;
	public var MathFloatLess_B: cpp.Float32;
	public var If_True: cpp.Float64;
	public var If_False: cpp.Float64;
	public var ModifyTransforms_ItemToModify__IO: TArray<RigUnit_ModifyTransforms_PerItem>;
	public var ModifyTransforms_WorkData: TArray<RigUnit_ModifyTransforms_WorkData>;
	public var ModifyTransforms_1_ItemToModify__IO: TArray<RigUnit_ModifyTransforms_PerItem>;
	public var ModifyTransforms_1_WorkData: TArray<RigUnit_ModifyTransforms_WorkData>;
	public var ModifyTransforms_1_1_ItemToModify__IO: TArray<RigUnit_ModifyTransforms_PerItem>;
	public var ModifyTransforms_1_1_WorkData: TArray<RigUnit_ModifyTransforms_WorkData>;
	public var GetTransform_Transform: Transform;
	public var GetTransform_CachedIndex: TArray<CachedRigElement>;
	public var GetTransform_1_Transform: Transform;
	public var GetTransform_1_CachedIndex: TArray<CachedRigElement>;
	public var PBIK_Effectors__IO: TArray<PBIKEffector>;
	public var PBIK_EffectorSolverIndices: TArray<TArray<cpp.Int32>>;
	public var PBIK_BoneSettingToSolverBoneIndex: TArray<TArray<cpp.Int32>>;
	public var PBIK_SolverBoneToElementIndex: TArray<TArray<cpp.Int32>>;
	public var PBIK_Solver: TArray<PBIKSolver>;
	public var PBIK_bNeedsInit: TArray<Bool>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstRigVMMemory_Work(RigVMMemory_Work) from RigVMMemory_Work {
	public extern var ExecuteContext_(get, never): ControlRigExecuteContext;
	public inline extern function get_ExecuteContext_(): ControlRigExecuteContext return this.ExecuteContext_;
	public extern var FootTrace_FootTrace_SphereTraceByTraceChannel_HitLocation(get, never): Vector;
	public inline extern function get_FootTrace_FootTrace_SphereTraceByTraceChannel_HitLocation(): Vector return this.FootTrace_FootTrace_SphereTraceByTraceChannel_HitLocation;
	public extern var FootTrace_FootTrace_MathVectorAdd_Result(get, never): Vector;
	public inline extern function get_FootTrace_FootTrace_MathVectorAdd_Result(): Vector return this.FootTrace_FootTrace_MathVectorAdd_Result;
	public extern var FootTrace_FootTrace_GetTransform_Transform(get, never): Transform;
	public inline extern function get_FootTrace_FootTrace_GetTransform_Transform(): Transform return this.FootTrace_FootTrace_GetTransform_Transform;
	public extern var FootTrace_FootTrace_GetTransform_CachedIndex(get, never): TArray<CachedRigElement>;
	public inline extern function get_FootTrace_FootTrace_GetTransform_CachedIndex(): TArray<CachedRigElement> return this.FootTrace_FootTrace_GetTransform_CachedIndex;
	public extern var FootTrace_FootTrace_MathFloatAdd_Result(get, never): cpp.Float32;
	public inline extern function get_FootTrace_FootTrace_MathFloatAdd_Result(): cpp.Float32 return this.FootTrace_FootTrace_MathFloatAdd_Result;
	public extern var FootTrace_FootTrace_MathFloatAdd_A(get, never): cpp.Float32;
	public inline extern function get_FootTrace_FootTrace_MathFloatAdd_A(): cpp.Float32 return this.FootTrace_FootTrace_MathFloatAdd_A;
	public extern var FootTrace_FootTrace_GetTransform_1_Transform(get, never): Transform;
	public inline extern function get_FootTrace_FootTrace_GetTransform_1_Transform(): Transform return this.FootTrace_FootTrace_GetTransform_1_Transform;
	public extern var FootTrace_FootTrace_GetTransform_1_CachedIndex(get, never): TArray<CachedRigElement>;
	public inline extern function get_FootTrace_FootTrace_GetTransform_1_CachedIndex(): TArray<CachedRigElement> return this.FootTrace_FootTrace_GetTransform_1_CachedIndex;
	public extern var FootTrace_FootTrace_MathVectorAdd_A__IO(get, never): Vector;
	public inline extern function get_FootTrace_FootTrace_MathVectorAdd_A__IO(): Vector return this.FootTrace_FootTrace_MathVectorAdd_A__IO;
	public extern var FootTrace_FootTrace_MathVectorSub_Result(get, never): Vector;
	public inline extern function get_FootTrace_FootTrace_MathVectorSub_Result(): Vector return this.FootTrace_FootTrace_MathVectorSub_Result;
	public extern var FootTrace_FootTrace_MathVectorSub_A__IO(get, never): Vector;
	public inline extern function get_FootTrace_FootTrace_MathVectorSub_A__IO(): Vector return this.FootTrace_FootTrace_MathVectorSub_A__IO;
	public extern var FootTrace_FootTrace_SphereTraceByTraceChannel_bHit(get, never): Bool;
	public inline extern function get_FootTrace_FootTrace_SphereTraceByTraceChannel_bHit(): Bool return this.FootTrace_FootTrace_SphereTraceByTraceChannel_bHit;
	public extern var FootTrace_FootTrace_SphereTraceByTraceChannel_HitNormal(get, never): Vector;
	public inline extern function get_FootTrace_FootTrace_SphereTraceByTraceChannel_HitNormal(): Vector return this.FootTrace_FootTrace_SphereTraceByTraceChannel_HitNormal;
	public extern var FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_HitLocation(get, never): Vector;
	public inline extern function get_FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_HitLocation(): Vector return this.FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_HitLocation;
	public extern var FootTrace_1_FootTrace_1_MathVectorAdd_Result(get, never): Vector;
	public inline extern function get_FootTrace_1_FootTrace_1_MathVectorAdd_Result(): Vector return this.FootTrace_1_FootTrace_1_MathVectorAdd_Result;
	public extern var FootTrace_1_FootTrace_1_GetTransform_Transform(get, never): Transform;
	public inline extern function get_FootTrace_1_FootTrace_1_GetTransform_Transform(): Transform return this.FootTrace_1_FootTrace_1_GetTransform_Transform;
	public extern var FootTrace_1_FootTrace_1_GetTransform_CachedIndex(get, never): TArray<CachedRigElement>;
	public inline extern function get_FootTrace_1_FootTrace_1_GetTransform_CachedIndex(): TArray<CachedRigElement> return this.FootTrace_1_FootTrace_1_GetTransform_CachedIndex;
	public extern var FootTrace_1_FootTrace_1_MathFloatAdd_Result(get, never): cpp.Float32;
	public inline extern function get_FootTrace_1_FootTrace_1_MathFloatAdd_Result(): cpp.Float32 return this.FootTrace_1_FootTrace_1_MathFloatAdd_Result;
	public extern var FootTrace_1_FootTrace_1_MathFloatAdd_A(get, never): cpp.Float32;
	public inline extern function get_FootTrace_1_FootTrace_1_MathFloatAdd_A(): cpp.Float32 return this.FootTrace_1_FootTrace_1_MathFloatAdd_A;
	public extern var FootTrace_1_FootTrace_1_GetTransform_1_Transform(get, never): Transform;
	public inline extern function get_FootTrace_1_FootTrace_1_GetTransform_1_Transform(): Transform return this.FootTrace_1_FootTrace_1_GetTransform_1_Transform;
	public extern var FootTrace_1_FootTrace_1_GetTransform_1_CachedIndex(get, never): TArray<CachedRigElement>;
	public inline extern function get_FootTrace_1_FootTrace_1_GetTransform_1_CachedIndex(): TArray<CachedRigElement> return this.FootTrace_1_FootTrace_1_GetTransform_1_CachedIndex;
	public extern var FootTrace_1_FootTrace_1_MathVectorAdd_A__IO(get, never): Vector;
	public inline extern function get_FootTrace_1_FootTrace_1_MathVectorAdd_A__IO(): Vector return this.FootTrace_1_FootTrace_1_MathVectorAdd_A__IO;
	public extern var FootTrace_1_FootTrace_1_MathVectorSub_Result(get, never): Vector;
	public inline extern function get_FootTrace_1_FootTrace_1_MathVectorSub_Result(): Vector return this.FootTrace_1_FootTrace_1_MathVectorSub_Result;
	public extern var FootTrace_1_FootTrace_1_MathVectorSub_A__IO(get, never): Vector;
	public inline extern function get_FootTrace_1_FootTrace_1_MathVectorSub_A__IO(): Vector return this.FootTrace_1_FootTrace_1_MathVectorSub_A__IO;
	public extern var FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_bHit(get, never): Bool;
	public inline extern function get_FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_bHit(): Bool return this.FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_bHit;
	public extern var FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_HitNormal(get, never): Vector;
	public inline extern function get_FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_HitNormal(): Vector return this.FootTrace_1_FootTrace_1_SphereTraceByTraceChannel_HitNormal;
	public extern var AlphaInterp_Result(get, never): cpp.Float32;
	public inline extern function get_AlphaInterp_Result(): cpp.Float32 return this.AlphaInterp_Result;
	public extern var AlphaInterp_Value(get, never): cpp.Float32;
	public inline extern function get_AlphaInterp_Value(): cpp.Float32 return this.AlphaInterp_Value;
	public extern var AlphaInterp_ScaleBiasClamp(get, never): TArray<InputScaleBiasClamp>;
	public inline extern function get_AlphaInterp_ScaleBiasClamp(): TArray<InputScaleBiasClamp> return this.AlphaInterp_ScaleBiasClamp;
	public extern var AlphaInterp_1_Result(get, never): cpp.Float32;
	public inline extern function get_AlphaInterp_1_Result(): cpp.Float32 return this.AlphaInterp_1_Result;
	public extern var AlphaInterp_1_Value(get, never): cpp.Float32;
	public inline extern function get_AlphaInterp_1_Value(): cpp.Float32 return this.AlphaInterp_1_Value;
	public extern var AlphaInterp_1_ScaleBiasClamp(get, never): TArray<InputScaleBiasClamp>;
	public inline extern function get_AlphaInterp_1_ScaleBiasClamp(): TArray<InputScaleBiasClamp> return this.AlphaInterp_1_ScaleBiasClamp;
	public extern var If_Result(get, never): cpp.Float64;
	public inline extern function get_If_Result(): cpp.Float64 return this.If_Result;
	public extern var MathFloatLess_Result(get, never): Bool;
	public inline extern function get_MathFloatLess_Result(): Bool return this.MathFloatLess_Result;
	public extern var MathFloatLess_A(get, never): cpp.Float32;
	public inline extern function get_MathFloatLess_A(): cpp.Float32 return this.MathFloatLess_A;
	public extern var MathFloatLess_B(get, never): cpp.Float32;
	public inline extern function get_MathFloatLess_B(): cpp.Float32 return this.MathFloatLess_B;
	public extern var If_True(get, never): cpp.Float64;
	public inline extern function get_If_True(): cpp.Float64 return this.If_True;
	public extern var If_False(get, never): cpp.Float64;
	public inline extern function get_If_False(): cpp.Float64 return this.If_False;
	public extern var ModifyTransforms_ItemToModify__IO(get, never): TArray<RigUnit_ModifyTransforms_PerItem>;
	public inline extern function get_ModifyTransforms_ItemToModify__IO(): TArray<RigUnit_ModifyTransforms_PerItem> return this.ModifyTransforms_ItemToModify__IO;
	public extern var ModifyTransforms_WorkData(get, never): TArray<RigUnit_ModifyTransforms_WorkData>;
	public inline extern function get_ModifyTransforms_WorkData(): TArray<RigUnit_ModifyTransforms_WorkData> return this.ModifyTransforms_WorkData;
	public extern var ModifyTransforms_1_ItemToModify__IO(get, never): TArray<RigUnit_ModifyTransforms_PerItem>;
	public inline extern function get_ModifyTransforms_1_ItemToModify__IO(): TArray<RigUnit_ModifyTransforms_PerItem> return this.ModifyTransforms_1_ItemToModify__IO;
	public extern var ModifyTransforms_1_WorkData(get, never): TArray<RigUnit_ModifyTransforms_WorkData>;
	public inline extern function get_ModifyTransforms_1_WorkData(): TArray<RigUnit_ModifyTransforms_WorkData> return this.ModifyTransforms_1_WorkData;
	public extern var ModifyTransforms_1_1_ItemToModify__IO(get, never): TArray<RigUnit_ModifyTransforms_PerItem>;
	public inline extern function get_ModifyTransforms_1_1_ItemToModify__IO(): TArray<RigUnit_ModifyTransforms_PerItem> return this.ModifyTransforms_1_1_ItemToModify__IO;
	public extern var ModifyTransforms_1_1_WorkData(get, never): TArray<RigUnit_ModifyTransforms_WorkData>;
	public inline extern function get_ModifyTransforms_1_1_WorkData(): TArray<RigUnit_ModifyTransforms_WorkData> return this.ModifyTransforms_1_1_WorkData;
	public extern var GetTransform_Transform(get, never): Transform;
	public inline extern function get_GetTransform_Transform(): Transform return this.GetTransform_Transform;
	public extern var GetTransform_CachedIndex(get, never): TArray<CachedRigElement>;
	public inline extern function get_GetTransform_CachedIndex(): TArray<CachedRigElement> return this.GetTransform_CachedIndex;
	public extern var GetTransform_1_Transform(get, never): Transform;
	public inline extern function get_GetTransform_1_Transform(): Transform return this.GetTransform_1_Transform;
	public extern var GetTransform_1_CachedIndex(get, never): TArray<CachedRigElement>;
	public inline extern function get_GetTransform_1_CachedIndex(): TArray<CachedRigElement> return this.GetTransform_1_CachedIndex;
	public extern var PBIK_Effectors__IO(get, never): TArray<PBIKEffector>;
	public inline extern function get_PBIK_Effectors__IO(): TArray<PBIKEffector> return this.PBIK_Effectors__IO;
	public extern var PBIK_EffectorSolverIndices(get, never): TArray<TArray<cpp.Int32>>;
	public inline extern function get_PBIK_EffectorSolverIndices(): TArray<TArray<cpp.Int32>> return this.PBIK_EffectorSolverIndices;
	public extern var PBIK_BoneSettingToSolverBoneIndex(get, never): TArray<TArray<cpp.Int32>>;
	public inline extern function get_PBIK_BoneSettingToSolverBoneIndex(): TArray<TArray<cpp.Int32>> return this.PBIK_BoneSettingToSolverBoneIndex;
	public extern var PBIK_SolverBoneToElementIndex(get, never): TArray<TArray<cpp.Int32>>;
	public inline extern function get_PBIK_SolverBoneToElementIndex(): TArray<TArray<cpp.Int32>> return this.PBIK_SolverBoneToElementIndex;
	public extern var PBIK_Solver(get, never): TArray<PBIKSolver>;
	public inline extern function get_PBIK_Solver(): TArray<PBIKSolver> return this.PBIK_Solver;
	public extern var PBIK_bNeedsInit(get, never): TArray<Bool>;
	public inline extern function get_PBIK_bNeedsInit(): TArray<Bool> return this.PBIK_bNeedsInit;
}

@:forward
@:nativeGen
@:native("RigVMMemory_Work*")
abstract RigVMMemory_WorkPtr(cpp.Star<RigVMMemory_Work>) from cpp.Star<RigVMMemory_Work> to cpp.Star<RigVMMemory_Work>{
	@:from
	public static extern inline function fromValue(v: RigVMMemory_Work): RigVMMemory_WorkPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RigVMMemory_Work {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}