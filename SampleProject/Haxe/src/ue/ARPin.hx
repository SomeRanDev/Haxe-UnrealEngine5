// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UARPin")
@:include("ARPin.h")
@:structAccess
extern class ARPin extends Object {
	private var TrackedGeometry: cpp.Star<ARTrackedGeometry>;
	private var PinnedComponent: cpp.Star<SceneComp>;
	private var LocalToTrackingTransform: Transform;
	private var LocalToAlignedTrackingTransform: Transform;
	private var TrackingState: EARTrackingState;
	private var OnARTrackingStateChanged: HaxeMulticastSparseDelegateProperty<(EARTrackingState) -> Void>;
	private var OnARTransformUpdated: HaxeMulticastSparseDelegateProperty<(cpp.Reference<Transform>) -> Void>;

	public function GetTrackingState(): EARTrackingState;
	public function GetTrackedGeometry(): cpp.Star<ARTrackedGeometry>;
	public function GetPinnedComponent(): cpp.Star<SceneComp>;
	public function GetLocalToWorldTransform(): Transform;
	public function GetLocalToTrackingTransform(): Transform;
	public function GetDebugName(): FName;
	public function DebugDraw(World: cpp.Star<World>, Color: cpp.Reference<LinearColor>, Scale: cpp.Float32, PersistForSeconds: cpp.Float32): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetTrackingState, GetTrackedGeometry, GetPinnedComponent, GetLocalToWorldTransform, GetLocalToTrackingTransform, GetDebugName, DebugDraw)
@:nativeGen
abstract ConstARPin(ARPin) from ARPin {
}

@:forward
@:nativeGen
@:native("ARPin*")
abstract ARPinPtr(cpp.Star<ARPin>) from cpp.Star<ARPin> to cpp.Star<ARPin>{
	@:from
	public static extern inline function fromValue(v: ARPin): ARPinPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ARPin {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}