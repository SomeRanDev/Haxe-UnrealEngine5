// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAchievementWriteCallbackProxy")
@:include("AchievementWriteCallbackProxy.h")
@:structAccess
extern class AchievementWriteCallbackProxy extends OnlineBlueprintCallProxyBase {
	public var OnSuccess: HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32) -> Void>;
	public var OnFailure: HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32) -> Void>;

	public function WriteAchievementProgress(WorldContextObject: cpp.Star<Object>, PlayerController: cpp.Star<PlayerController>, AchievementName: FName, Progress: cpp.Float32, UserTag: cpp.Int32): cpp.Star<AchievementWriteCallbackProxy>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAchievementWriteCallbackProxy(AchievementWriteCallbackProxy) from AchievementWriteCallbackProxy {
	public extern var OnSuccess(get, never): HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32) -> Void>;
	public inline extern function get_OnSuccess(): HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32) -> Void> return this.OnSuccess;
	public extern var OnFailure(get, never): HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32) -> Void>;
	public inline extern function get_OnFailure(): HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32) -> Void> return this.OnFailure;
}

@:forward
@:nativeGen
@:native("AchievementWriteCallbackProxy*")
abstract AchievementWriteCallbackProxyPtr(cpp.Star<AchievementWriteCallbackProxy>) from cpp.Star<AchievementWriteCallbackProxy> to cpp.Star<AchievementWriteCallbackProxy>{
	@:from
	public static extern inline function fromValue(v: AchievementWriteCallbackProxy): AchievementWriteCallbackProxyPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AchievementWriteCallbackProxy {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}