// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditableText")
@:include("Components/EditableText.h")
@:valueType
extern class EditableText extends Widget {
	public function GetText(): FText;
	public function SetText(input: FText): Void;
	public var TextDelegate: HaxeDelegateProperty<() -> Void>;
	public function GetHintText(): FText;
	public function SetHintText(input: FText): Void;
	public var HintTextDelegate: HaxeDelegateProperty<() -> Void>;
	public var WidgetStyle: EditableTextStyle;
	public var IsReadOnly: Bool;
	public var IsPassword: Bool;
	public var MinimumDesiredWidth: ucpp.num.Float32;
	public var IsCaretMovedWhenGainFocus: Bool;
	public var SelectAllTextWhenFocused: Bool;
	public var RevertTextOnEscape: Bool;
	public var ClearKeyboardFocusOnCommit: Bool;
	public var SelectAllTextOnCommit: Bool;
	public var AllowContextMenu: Bool;
	public var KeyboardType: TEnumAsByte<EVirtualKeyboardType>;
	public var VirtualKeyboardOptions: VirtualKeyboardOptions;
	public var VirtualKeyboardTrigger: EVirtualKeyboardTrigger;
	public var VirtualKeyboardDismissAction: EVirtualKeyboardDismissAction;
	public function GetJustification(): TEnumAsByte<ETextJustify>;
	public function SetJustification(input: TEnumAsByte<ETextJustify>): Void;
	public var OverflowPolicy: ETextOverflowPolicy;
	public var ShapedTextOptions: ShapedTextOptions;
	public var OnTextChanged: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<FText>) -> Void>;
	public var OnTextCommitted: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<FText>, TEnumAsByte<ETextCommit>) -> Void>;

	public function SetTextOverflowPolicy(InOverflowPolicy: ETextOverflowPolicy): Void;
	public function SetMinimumDesiredWidth(InMinDesiredWidth: ucpp.num.Float32): Void;
	public function SetIsReadOnly(InbIsReadyOnly: Bool): Void;
	public function SetIsPassword(InbIsPassword: Bool): Void;
	public function SetFontOutlineMaterial(InMaterial: ucpp.Ptr<MaterialInterface>): Void;
	public function SetFontMaterial(InMaterial: ucpp.Ptr<MaterialInterface>): Void;
	public function SetFont(InFontInfo: SlateFontInfo): Void;
	public function OnEditableTextCommittedEvent__DelegateSignature(Text: ucpp.Ref<FText>, CommitMethod: TEnumAsByte<ETextCommit>): Void;
	public function OnEditableTextChangedEvent__DelegateSignature(Text: ucpp.Ref<FText>): Void;
	public function GetFont(): SlateFontInfo;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetFont)
@:nativeGen
abstract ConstEditableText(EditableText) from EditableText {
	public extern var TextDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_TextDelegate(): HaxeDelegateProperty<() -> Void> return this.TextDelegate;
	public extern var HintTextDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_HintTextDelegate(): HaxeDelegateProperty<() -> Void> return this.HintTextDelegate;
	public extern var WidgetStyle(get, never): EditableTextStyle;
	public inline extern function get_WidgetStyle(): EditableTextStyle return this.WidgetStyle;
	public extern var IsReadOnly(get, never): Bool;
	public inline extern function get_IsReadOnly(): Bool return this.IsReadOnly;
	public extern var IsPassword(get, never): Bool;
	public inline extern function get_IsPassword(): Bool return this.IsPassword;
	public extern var MinimumDesiredWidth(get, never): ucpp.num.Float32;
	public inline extern function get_MinimumDesiredWidth(): ucpp.num.Float32 return this.MinimumDesiredWidth;
	public extern var IsCaretMovedWhenGainFocus(get, never): Bool;
	public inline extern function get_IsCaretMovedWhenGainFocus(): Bool return this.IsCaretMovedWhenGainFocus;
	public extern var SelectAllTextWhenFocused(get, never): Bool;
	public inline extern function get_SelectAllTextWhenFocused(): Bool return this.SelectAllTextWhenFocused;
	public extern var RevertTextOnEscape(get, never): Bool;
	public inline extern function get_RevertTextOnEscape(): Bool return this.RevertTextOnEscape;
	public extern var ClearKeyboardFocusOnCommit(get, never): Bool;
	public inline extern function get_ClearKeyboardFocusOnCommit(): Bool return this.ClearKeyboardFocusOnCommit;
	public extern var SelectAllTextOnCommit(get, never): Bool;
	public inline extern function get_SelectAllTextOnCommit(): Bool return this.SelectAllTextOnCommit;
	public extern var AllowContextMenu(get, never): Bool;
	public inline extern function get_AllowContextMenu(): Bool return this.AllowContextMenu;
	public extern var KeyboardType(get, never): TEnumAsByte<EVirtualKeyboardType>;
	public inline extern function get_KeyboardType(): TEnumAsByte<EVirtualKeyboardType> return this.KeyboardType;
	public extern var VirtualKeyboardOptions(get, never): VirtualKeyboardOptions;
	public inline extern function get_VirtualKeyboardOptions(): VirtualKeyboardOptions return this.VirtualKeyboardOptions;
	public extern var VirtualKeyboardTrigger(get, never): EVirtualKeyboardTrigger;
	public inline extern function get_VirtualKeyboardTrigger(): EVirtualKeyboardTrigger return this.VirtualKeyboardTrigger;
	public extern var VirtualKeyboardDismissAction(get, never): EVirtualKeyboardDismissAction;
	public inline extern function get_VirtualKeyboardDismissAction(): EVirtualKeyboardDismissAction return this.VirtualKeyboardDismissAction;
	public extern var OverflowPolicy(get, never): ETextOverflowPolicy;
	public inline extern function get_OverflowPolicy(): ETextOverflowPolicy return this.OverflowPolicy;
	public extern var ShapedTextOptions(get, never): ShapedTextOptions;
	public inline extern function get_ShapedTextOptions(): ShapedTextOptions return this.ShapedTextOptions;
	public extern var OnTextChanged(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<FText>) -> Void>;
	public inline extern function get_OnTextChanged(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<FText>) -> Void> return this.OnTextChanged;
	public extern var OnTextCommitted(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<FText>, TEnumAsByte<ETextCommit>) -> Void>;
	public inline extern function get_OnTextCommitted(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<FText>, TEnumAsByte<ETextCommit>) -> Void> return this.OnTextCommitted;
}

@:forward
@:nativeGen
@:native("EditableText*")
abstract EditableTextPtr(ucpp.Ptr<EditableText>) from ucpp.Ptr<EditableText> to ucpp.Ptr<EditableText>{
	@:from
	public static extern inline function fromValue(v: EditableText): EditableTextPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EditableText {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}