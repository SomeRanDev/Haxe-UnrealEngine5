// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimGraphNode_BlendSpaceGraphBase")
@:include("AnimGraphNode_BlendSpaceGraphBase.h")
@:structAccess
extern class AnimGraphNode_BlendSpaceGraphBase extends AnimGraphNode_Base {
	public var BlendSpace: cpp.Star<BlendSpace>;
	public var BlendSpaceClass: TSubclassOf<BlendSpace>;
	public var BlendSpaceGraph: cpp.Star<BlendSpaceGraph>;
	public var Graphs: TArray<cpp.Star<EdGraph>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAnimGraphNode_BlendSpaceGraphBase(AnimGraphNode_BlendSpaceGraphBase) from AnimGraphNode_BlendSpaceGraphBase {
	public extern var BlendSpace(get, never): cpp.Star<BlendSpace.ConstBlendSpace>;
	public inline extern function get_BlendSpace(): cpp.Star<BlendSpace.ConstBlendSpace> return this.BlendSpace;
	public extern var BlendSpaceClass(get, never): TSubclassOf<BlendSpace.ConstBlendSpace>;
	public inline extern function get_BlendSpaceClass(): TSubclassOf<BlendSpace.ConstBlendSpace> return this.BlendSpaceClass;
	public extern var BlendSpaceGraph(get, never): cpp.Star<BlendSpaceGraph.ConstBlendSpaceGraph>;
	public inline extern function get_BlendSpaceGraph(): cpp.Star<BlendSpaceGraph.ConstBlendSpaceGraph> return this.BlendSpaceGraph;
	public extern var Graphs(get, never): TArray<cpp.Star<EdGraph.ConstEdGraph>>;
	public inline extern function get_Graphs(): TArray<cpp.Star<EdGraph.ConstEdGraph>> return this.Graphs;
}

@:forward
@:nativeGen
@:native("AnimGraphNode_BlendSpaceGraphBase*")
abstract AnimGraphNode_BlendSpaceGraphBasePtr(cpp.Star<AnimGraphNode_BlendSpaceGraphBase>) from cpp.Star<AnimGraphNode_BlendSpaceGraphBase> to cpp.Star<AnimGraphNode_BlendSpaceGraphBase>{
	@:from
	public static extern inline function fromValue(v: AnimGraphNode_BlendSpaceGraphBase): AnimGraphNode_BlendSpaceGraphBasePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimGraphNode_BlendSpaceGraphBase {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}