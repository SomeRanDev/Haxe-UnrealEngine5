// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UViewportWorldInteraction")
@:include("ViewportWorldInteraction.h")
@:structAccess
extern class ViewportWorldInteraction extends EditorWorldExtension {
	public var Interactors: TArray<cpp.Star<ViewportInteractor>>;
	public var ViewportTransformer: cpp.Star<ViewportTransformer>;
	public var TransformGizmoActor: cpp.Star<BaseTransformGizmo>;
	public var SnapGridActor: cpp.Star<Actor>;
	public var SnapGridMeshComponent: cpp.Star<StaticMeshComp>;
	public var SnapGridMID: cpp.Star<MaterialInstanceDynamic>;
	public var DefaultMouseCursorInteractor: cpp.Star<MouseCursorInteractor>;
	public var ActorsToExcludeFromHitTest: TArray<TWeakObjectPtr<Actor>>;
	public var AssetContainer: cpp.Star<ViewportInteractionAssetContainer>;

	public function SetWorldToMetersScale(NewWorldToMetersScale: cpp.Float32, bCompensateRoomWorldScale: Bool): Void;
	public function SetRoomTransformForNextFrame(NewRoomTransform: cpp.Reference<Transform>): Void;
	public function SetHeadTransform(NewHeadTransform: cpp.Reference<Transform>): Void;
	public function RemoveInteractor(Interactor: cpp.Star<ViewportInteractor>): Void;
	public function GetWorldScaleFactor(): cpp.Reference<cpp.Float32>;
	public function GetTransformGizmoActor(): cpp.Reference<cpp.Star<BaseTransformGizmo>>;
	public function GetRoomTransform(): cpp.Reference<Transform>;
	public function GetRoomSpaceHeadTransform(): cpp.Reference<Transform>;
	public function GetInteractors(): cpp.Reference<TArray<cpp.Star<ViewportInteractor>>>;
	public function GetHeadTransform(): cpp.Reference<Transform>;
	public function AddInteractor(Interactor: cpp.Star<ViewportInteractor>): Void;
	public function AddActorToExcludeFromHitTests(ActorToExcludeFromHitTests: cpp.Star<Actor>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetWorldScaleFactor, GetRoomTransform, GetRoomSpaceHeadTransform, GetInteractors, GetHeadTransform)
@:nativeGen
abstract ConstViewportWorldInteraction(ViewportWorldInteraction) from ViewportWorldInteraction {
	public extern var Interactors(get, never): TArray<cpp.Star<ViewportInteractor.ConstViewportInteractor>>;
	public inline extern function get_Interactors(): TArray<cpp.Star<ViewportInteractor.ConstViewportInteractor>> return this.Interactors;
	public extern var ViewportTransformer(get, never): cpp.Star<ViewportTransformer.ConstViewportTransformer>;
	public inline extern function get_ViewportTransformer(): cpp.Star<ViewportTransformer.ConstViewportTransformer> return this.ViewportTransformer;
	public extern var TransformGizmoActor(get, never): cpp.Star<BaseTransformGizmo.ConstBaseTransformGizmo>;
	public inline extern function get_TransformGizmoActor(): cpp.Star<BaseTransformGizmo.ConstBaseTransformGizmo> return this.TransformGizmoActor;
	public extern var SnapGridActor(get, never): cpp.Star<Actor.ConstActor>;
	public inline extern function get_SnapGridActor(): cpp.Star<Actor.ConstActor> return this.SnapGridActor;
	public extern var SnapGridMeshComponent(get, never): cpp.Star<StaticMeshComp.ConstStaticMeshComp>;
	public inline extern function get_SnapGridMeshComponent(): cpp.Star<StaticMeshComp.ConstStaticMeshComp> return this.SnapGridMeshComponent;
	public extern var SnapGridMID(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_SnapGridMID(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.SnapGridMID;
	public extern var DefaultMouseCursorInteractor(get, never): cpp.Star<MouseCursorInteractor.ConstMouseCursorInteractor>;
	public inline extern function get_DefaultMouseCursorInteractor(): cpp.Star<MouseCursorInteractor.ConstMouseCursorInteractor> return this.DefaultMouseCursorInteractor;
	public extern var ActorsToExcludeFromHitTest(get, never): TArray<TWeakObjectPtr<Actor.ConstActor>>;
	public inline extern function get_ActorsToExcludeFromHitTest(): TArray<TWeakObjectPtr<Actor.ConstActor>> return this.ActorsToExcludeFromHitTest;
	public extern var AssetContainer(get, never): cpp.Star<ViewportInteractionAssetContainer.ConstViewportInteractionAssetContainer>;
	public inline extern function get_AssetContainer(): cpp.Star<ViewportInteractionAssetContainer.ConstViewportInteractionAssetContainer> return this.AssetContainer;
}

@:forward
@:nativeGen
@:native("ViewportWorldInteraction*")
abstract ViewportWorldInteractionPtr(cpp.Star<ViewportWorldInteraction>) from cpp.Star<ViewportWorldInteraction> to cpp.Star<ViewportWorldInteraction>{
	@:from
	public static extern inline function fromValue(v: ViewportWorldInteraction): ViewportWorldInteractionPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ViewportWorldInteraction {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}