// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ULODSyncComponent")
@:include("Components/LODSyncComponent.h")
@:valueType
extern class LODSyncComp extends ActorComp {
	public var NumLODs: ucpp.num.Int32;
	public var ForcedLOD: ucpp.num.Int32;
	public var MinLOD: ucpp.num.Int32;
	public var ComponentsToSync: TArray<ComponentSync>;
	public var CustomLODMapping: TMap<FName, LODMappingData>;
	private var CurrentLOD: ucpp.num.Int32;
	private var CurrentNumLODs: ucpp.num.Int32;
	private var DriveComponents: TArray<ucpp.Ptr<PrimitiveComp>>;
	private var SubComponents: TArray<ucpp.Ptr<PrimitiveComp>>;

	public function GetLODSyncDebugText(): FString;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetLODSyncDebugText)
@:nativeGen
abstract ConstLODSyncComp(LODSyncComp) from LODSyncComp {
	public extern var NumLODs(get, never): ucpp.num.Int32;
	public inline extern function get_NumLODs(): ucpp.num.Int32 return this.NumLODs;
	public extern var ForcedLOD(get, never): ucpp.num.Int32;
	public inline extern function get_ForcedLOD(): ucpp.num.Int32 return this.ForcedLOD;
	public extern var MinLOD(get, never): ucpp.num.Int32;
	public inline extern function get_MinLOD(): ucpp.num.Int32 return this.MinLOD;
	public extern var ComponentsToSync(get, never): TArray<ComponentSync>;
	public inline extern function get_ComponentsToSync(): TArray<ComponentSync> return this.ComponentsToSync;
	public extern var CustomLODMapping(get, never): TMap<FName, LODMappingData>;
	public inline extern function get_CustomLODMapping(): TMap<FName, LODMappingData> return this.CustomLODMapping;
}

@:forward
@:nativeGen
@:native("LODSyncComp*")
abstract LODSyncCompPtr(ucpp.Ptr<LODSyncComp>) from ucpp.Ptr<LODSyncComp> to ucpp.Ptr<LODSyncComp>{
	@:from
	public static extern inline function fromValue(v: LODSyncComp): LODSyncCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): LODSyncComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}