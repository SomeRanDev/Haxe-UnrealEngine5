// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AGameModeBase")
@:include("GameFramework/GameModeBase.h")
extern class AGameModeBase extends AInfo {
	public var OptionsString: FString;
	public var GameSessionClass: TSubclassOf<AGameSession>;
	public var GameStateClass: TSubclassOf<AGameStateBase>;
	public var PlayerControllerClass: TSubclassOf<APlayerController>;
	public var PlayerStateClass: TSubclassOf<APlayerState>;
	public var HUDClass: TSubclassOf<AHUD>;
	public var DefaultPawnClass: TSubclassOf<APawn>;
	public var SpectatorClass: TSubclassOf<ASpectatorPawn>;
	public var ReplaySpectatorPlayerControllerClass: TSubclassOf<APlayerController>;
	public var ServerStatReplicatorClass: TSubclassOf<AServerStatReplicator>;
	public var GameSession: TObjectPtr<AGameSession>;
	public var GameState: TObjectPtr<AGameStateBase>;
	public var ServerStatReplicator: TObjectPtr<AServerStatReplicator>;
	public var DefaultPlayerName: FText;
	public var bUseSeamlessTravel: Bool;
	public var bStartPlayersAsSpectators: Bool;
	public var bPauseable: Bool;

	public function StartPlay(): Void;
	public function SpawnDefaultPawnFor(NewPlayer: cpp.Star<AController>, StartSpot: cpp.Star<AActor>): cpp.Star<APawn>;
	public function SpawnDefaultPawnAtTransform(NewPlayer: cpp.Star<AController>, SpawnTransform: FTransform): cpp.Star<APawn>;
	public function ShouldReset(ActorToReset: cpp.Star<AActor>): Bool;
	public function ReturnToMainMenuHost(): Void;
	public function RestartPlayerAtTransform(NewPlayer: cpp.Star<AController>, SpawnTransform: FTransform): Void;
	public function RestartPlayerAtPlayerStart(NewPlayer: cpp.Star<AController>, StartSpot: cpp.Star<AActor>): Void;
	public function RestartPlayer(NewPlayer: cpp.Star<AController>): Void;
	public function ResetLevel(): Void;
	public function PlayerCanRestart(Player: cpp.Star<APlayerController>): Bool;
	public function MustSpectate(NewPlayerController: cpp.Star<APlayerController>): Bool;
	public function K2_PostLogin(NewPlayer: cpp.Star<APlayerController>): Void;
	public function K2_OnSwapPlayerControllers(OldPC: cpp.Star<APlayerController>, NewPC: cpp.Star<APlayerController>): Void;
	public function K2_OnRestartPlayer(NewPlayer: cpp.Star<AController>): Void;
	public function K2_OnLogout(ExitingController: cpp.Star<AController>): Void;
	public function K2_OnChangeName(Other: cpp.Star<AController>, NewName: FString, bNameChange: Bool): Void;
	public function K2_FindPlayerStart(Player: cpp.Star<AController>, IncomingName: FString): cpp.Star<AActor>;
	public function InitStartSpot(StartSpot: cpp.Star<AActor>, NewPlayer: cpp.Star<AController>): Void;
	public function InitializeHUDForPlayer(NewPlayer: cpp.Star<APlayerController>): Void;
	public function HasMatchStarted(): Bool;
	public function HasMatchEnded(): Bool;
	public function HandleStartingNewPlayer(NewPlayer: cpp.Star<APlayerController>): Void;
	public function GetNumSpectators(): cpp.Int32;
	public function GetNumPlayers(): cpp.Int32;
	public function GetDefaultPawnClassForController(InController: cpp.Star<AController>): cpp.Star<UClass>;
	public function FindPlayerStart(Player: cpp.Star<AController>, IncomingName: FString): cpp.Star<AActor>;
	public function ChoosePlayerStart(Player: cpp.Star<AController>): cpp.Star<AActor>;
	public function ChangeName(Controller: cpp.Star<AController>, NewName: FString, bNameChange: Bool): Void;
	public function CanSpectate(Viewer: cpp.Star<APlayerController>, ViewTarget: cpp.Star<APlayerState>): Bool;
}
