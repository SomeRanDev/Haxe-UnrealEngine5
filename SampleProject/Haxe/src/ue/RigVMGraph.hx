// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URigVMGraph")
@:include("RigVMModel/RigVMGraph.h")
@:structAccess
extern class RigVMGraph extends Object {
	private var Nodes: TArray<cpp.Star<RigVMNode>>;
	private var Links: TArray<cpp.Star<RigVMLink>>;
	private var SelectedNodes: TArray<FName>;
	private var DefaultFunctionLibraryPtr: TWeakObjectPtr<RigVMGraph>;
	private var LocalVariables: TArray<RigVMGraphVariableDescription>;

	public function SetDefaultFunctionLibrary(InFunctionLibrary: cpp.Star<RigVMFunctionLibrary>): Void;
	public function IsTopLevelGraph(): Bool;
	public function IsRootGraph(): Bool;
	public function IsNodeSelected(InNodeName: cpp.Reference<FName>): Bool;
	public function GetVariableDescriptions(): TArray<RigVMGraphVariableDescription>;
	public function GetSelectNodes(): TArray<FName>;
	public function GetRootGraph(): cpp.Star<RigVMGraph>;
	public function GetReturnNode(): cpp.Star<RigVMFunctionReturnNode>;
	public function GetParentGraph(): cpp.Star<RigVMGraph>;
	public function GetParameterDescriptions(): TArray<RigVMGraphParameterDescription>;
	public function GetOutputArguments(): TArray<RigVMGraphVariableDescription>;
	public function GetNodes(): TArray<cpp.Star<RigVMNode>>;
	public function GetNodePath(): FString;
	public function GetLocalVariables(bIncludeInputArguments: Bool): TArray<RigVMGraphVariableDescription>;
	public function GetLinks(): TArray<cpp.Star<RigVMLink>>;
	public function GetInputArguments(): TArray<RigVMGraphVariableDescription>;
	public function GetGraphName(): FString;
	public function GetEntryNode(): cpp.Star<RigVMFunctionEntryNode>;
	public function GetDefaultFunctionLibrary(): cpp.Star<RigVMFunctionLibrary>;
	public function GetContainedGraphs(bRecursive: Bool): TArray<cpp.Star<RigVMGraph>>;
	public function FindPin(InPinPath: FString): cpp.Star<RigVMPin>;
	public function FindNodeByName(InNodeName: cpp.Reference<FName>): cpp.Star<RigVMNode>;
	public function FindNode(InNodePath: FString): cpp.Star<RigVMNode>;
	public function FindLink(InLinkPinPathRepresentation: FString): cpp.Star<RigVMLink>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsTopLevelGraph, IsRootGraph, IsNodeSelected, GetVariableDescriptions, GetSelectNodes,
	GetRootGraph, GetReturnNode, GetParentGraph, GetParameterDescriptions, GetOutputArguments,
	GetNodes, GetNodePath, GetLocalVariables, GetLinks, GetInputArguments,
	GetGraphName, GetEntryNode, GetDefaultFunctionLibrary, GetContainedGraphs, FindPin,
	FindNodeByName, FindNode, FindLink
)
@:nativeGen
abstract ConstRigVMGraph(RigVMGraph) from RigVMGraph {
}

@:forward
@:nativeGen
@:native("RigVMGraph*")
abstract RigVMGraphPtr(cpp.Star<RigVMGraph>) from cpp.Star<RigVMGraph> to cpp.Star<RigVMGraph>{
	@:from
	public static extern inline function fromValue(v: RigVMGraph): RigVMGraphPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RigVMGraph {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}