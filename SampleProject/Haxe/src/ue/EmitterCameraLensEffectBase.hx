// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AEmitterCameraLensEffectBase")
@:include("Particles/EmitterCameraLensEffectBase.h")
@:valueType
extern class EmitterCameraLensEffectBase extends Emitter {
	@:protected public var PS_CameraEffect: ucpp.Ptr<ParticleSystem>;
	@:protected public var BaseCamera: ucpp.Ptr<PlayerCameraManager>;
	@:protected public var RelativeTransform: Transform;
	public var BaseFOV: ucpp.num.Float32;
	public var bAllowMultipleInstances: Bool;
	public var bResetWhenRetriggered: Bool;
	public var EmittersToTreatAsSame: TArray<TSubclassOf<Actor>>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstEmitterCameraLensEffectBase(EmitterCameraLensEffectBase) from EmitterCameraLensEffectBase {
	public extern var BaseFOV(get, never): ucpp.num.Float32;
	public inline extern function get_BaseFOV(): ucpp.num.Float32 return this.BaseFOV;
	public extern var bAllowMultipleInstances(get, never): Bool;
	public inline extern function get_bAllowMultipleInstances(): Bool return this.bAllowMultipleInstances;
	public extern var bResetWhenRetriggered(get, never): Bool;
	public inline extern function get_bResetWhenRetriggered(): Bool return this.bResetWhenRetriggered;
	public extern var EmittersToTreatAsSame(get, never): TArray<TSubclassOf<Actor.ConstActor>>;
	public inline extern function get_EmittersToTreatAsSame(): TArray<TSubclassOf<Actor.ConstActor>> return this.EmittersToTreatAsSame;
}

@:forward
@:nativeGen
@:native("EmitterCameraLensEffectBase*")
abstract EmitterCameraLensEffectBasePtr(ucpp.Ptr<EmitterCameraLensEffectBase>) from ucpp.Ptr<EmitterCameraLensEffectBase> to ucpp.Ptr<EmitterCameraLensEffectBase>{
	@:from
	public static extern inline function fromValue(v: EmitterCameraLensEffectBase): EmitterCameraLensEffectBasePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EmitterCameraLensEffectBase {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}