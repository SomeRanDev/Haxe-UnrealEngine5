// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMockDataMeshTrackerComponent")
@:include("MockDataMeshTrackerComponent.h")
@:valueType
extern class MockDataMeshTrackerComp extends SceneComp {
	public var OnMeshTrackerUpdated: HaxeMulticastSparseDelegateProperty<(ucpp.num.Int32, ucpp.Ref<TArray<Vector>>, ucpp.Ref<TArray<ucpp.num.Int32>>, ucpp.Ref<TArray<Vector>>, ucpp.Ref<TArray<ucpp.num.Float32>>) -> Void>;
	public var ScanWorld: Bool;
	public var RequestNormals: Bool;
	public var RequestVertexConfidence: Bool;
	public var VertexColorMode: EMeshTrackerVertexColorMode;
	public var BlockVertexColors: TArray<Color>;
	public var VertexColorFromConfidenceZero: LinearColor;
	public var VertexColorFromConfidenceOne: LinearColor;
	public var UpdateInterval: ucpp.num.Float32;
	public var MRMesh: ucpp.Ptr<MRMeshComp>;

	public function OnMockDataMeshTrackerUpdated__DelegateSignature(Index: ucpp.num.Int32, Vertices: ucpp.Ref<TArray<Vector>>, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Normals: ucpp.Ref<TArray<Vector>>, Confidence: ucpp.Ref<TArray<ucpp.num.Float32>>): Void;
	public function DisconnectMRMesh(InMRMeshPtr: ucpp.Ptr<MRMeshComp>): Void;
	public function ConnectMRMesh(InMRMeshPtr: ucpp.Ptr<MRMeshComp>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstMockDataMeshTrackerComp(MockDataMeshTrackerComp) from MockDataMeshTrackerComp {
	public extern var OnMeshTrackerUpdated(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.num.Int32, ucpp.Ref<TArray<Vector>>, ucpp.Ref<TArray<ucpp.num.Int32>>, ucpp.Ref<TArray<Vector>>, ucpp.Ref<TArray<ucpp.num.Float32>>) -> Void>;
	public inline extern function get_OnMeshTrackerUpdated(): HaxeMulticastSparseDelegateProperty<(ucpp.num.Int32, ucpp.Ref<TArray<Vector>>, ucpp.Ref<TArray<ucpp.num.Int32>>, ucpp.Ref<TArray<Vector>>, ucpp.Ref<TArray<ucpp.num.Float32>>) -> Void> return this.OnMeshTrackerUpdated;
	public extern var ScanWorld(get, never): Bool;
	public inline extern function get_ScanWorld(): Bool return this.ScanWorld;
	public extern var RequestNormals(get, never): Bool;
	public inline extern function get_RequestNormals(): Bool return this.RequestNormals;
	public extern var RequestVertexConfidence(get, never): Bool;
	public inline extern function get_RequestVertexConfidence(): Bool return this.RequestVertexConfidence;
	public extern var VertexColorMode(get, never): EMeshTrackerVertexColorMode;
	public inline extern function get_VertexColorMode(): EMeshTrackerVertexColorMode return this.VertexColorMode;
	public extern var BlockVertexColors(get, never): TArray<Color>;
	public inline extern function get_BlockVertexColors(): TArray<Color> return this.BlockVertexColors;
	public extern var VertexColorFromConfidenceZero(get, never): LinearColor;
	public inline extern function get_VertexColorFromConfidenceZero(): LinearColor return this.VertexColorFromConfidenceZero;
	public extern var VertexColorFromConfidenceOne(get, never): LinearColor;
	public inline extern function get_VertexColorFromConfidenceOne(): LinearColor return this.VertexColorFromConfidenceOne;
	public extern var UpdateInterval(get, never): ucpp.num.Float32;
	public inline extern function get_UpdateInterval(): ucpp.num.Float32 return this.UpdateInterval;
	public extern var MRMesh(get, never): ucpp.Ptr<MRMeshComp.ConstMRMeshComp>;
	public inline extern function get_MRMesh(): ucpp.Ptr<MRMeshComp.ConstMRMeshComp> return this.MRMesh;
}

@:forward
@:nativeGen
@:native("MockDataMeshTrackerComp*")
abstract MockDataMeshTrackerCompPtr(ucpp.Ptr<MockDataMeshTrackerComp>) from ucpp.Ptr<MockDataMeshTrackerComp> to ucpp.Ptr<MockDataMeshTrackerComp>{
	@:from
	public static extern inline function fromValue(v: MockDataMeshTrackerComp): MockDataMeshTrackerCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MockDataMeshTrackerComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}