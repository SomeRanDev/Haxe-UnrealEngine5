// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UVariant")
@:include("Variant.h")
@:valueType
extern class Variant extends Object {
	private var Dependencies: TArray<VariantDependency>;
	private var ObjectBindings: TArray<ucpp.Ptr<VariantObjectBinding>>;
	private var Thumbnail: ucpp.Ptr<Texture2D>;

	public function SwitchOn(): Void;
	public function SetThumbnailFromTexture(NewThumbnail: ucpp.Ptr<Texture2D>): Void;
	public function SetThumbnailFromFile(FilePath: FString): Void;
	public function SetThumbnailFromEditorViewport(): Void;
	public function SetThumbnailFromCamera(WorldContextObject: ucpp.Ptr<Object>, CameraTransform: ucpp.Ref<Transform>, FOVDegrees: ucpp.num.Float32, MinZ: ucpp.num.Float32, Gamma: ucpp.num.Float32): Void;
	public function SetDisplayText(NewDisplayText: ucpp.Ref<FText>): Void;
	public function SetDependency(Index: ucpp.num.Int32, Dependency: ucpp.Ref<VariantDependency>): Void;
	public function IsActive(): Bool;
	public function GetThumbnail(): ucpp.Ptr<Texture2D>;
	public function GetParent(): ucpp.Ptr<VariantSet>;
	public function GetNumDependencies(): ucpp.num.Int32;
	public function GetNumActors(): ucpp.num.Int32;
	public function GetDisplayText(): FText;
	public function GetDependents(LevelVariantSets: ucpp.Ptr<LevelVariantSets>, bOnlyEnabledDependencies: Bool): TArray<ucpp.Ptr<Variant>>;
	public function GetDependency(Index: ucpp.num.Int32): VariantDependency;
	public function GetActor(ActorIndex: ucpp.num.Int32): ucpp.Ptr<Actor>;
	public function DeleteDependency(Index: ucpp.num.Int32): Void;
	public function AddDependency(Dependency: ucpp.Ref<VariantDependency>): ucpp.num.Int32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetDisplayText)
@:nativeGen
abstract ConstVariant(Variant) from Variant {
}

@:forward
@:nativeGen
@:native("Variant*")
abstract VariantPtr(ucpp.Ptr<Variant>) from ucpp.Ptr<Variant> to ucpp.Ptr<Variant>{
	@:from
	public static extern inline function fromValue(v: Variant): VariantPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Variant {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}