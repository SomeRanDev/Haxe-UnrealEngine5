// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCameraComponent")
@:include("Camera/CameraComponent.h")
@:valueType
extern class CameraComp extends SceneComp {
	public var FieldOfView: ucpp.num.Float32;
	public var OrthoWidth: ucpp.num.Float32;
	public var OrthoNearClipPlane: ucpp.num.Float32;
	public var OrthoFarClipPlane: ucpp.num.Float32;
	public var AspectRatio: ucpp.num.Float32;
	public var bConstrainAspectRatio: Bool;
	public var bUseFieldOfViewForLOD: Bool;
	public var bLockToHmd: Bool;
	public var bUsePawnControlRotation: Bool;
	public var ProjectionMode: TEnumAsByte<ECameraProjectionMode>;
	public var PostProcessBlendWeight: ucpp.num.Float32;
	public var PostProcessSettings: PostProcessSettings;

	public function SetUseFieldOfViewForLOD(bInUseFieldOfViewForLOD: Bool): Void;
	public function SetProjectionMode(InProjectionMode: TEnumAsByte<ECameraProjectionMode>): Void;
	public function SetPostProcessBlendWeight(InPostProcessBlendWeight: ucpp.num.Float32): Void;
	public function SetOrthoWidth(InOrthoWidth: ucpp.num.Float32): Void;
	public function SetOrthoNearClipPlane(InOrthoNearClipPlane: ucpp.num.Float32): Void;
	public function SetOrthoFarClipPlane(InOrthoFarClipPlane: ucpp.num.Float32): Void;
	public function SetFieldOfView(InFieldOfView: ucpp.num.Float32): Void;
	public function SetConstraintAspectRatio(bInConstrainAspectRatio: Bool): Void;
	public function SetAspectRatio(InAspectRatio: ucpp.num.Float32): Void;
	public function RemoveBlendable(InBlendableObject: BlendableInterface): Void;
	@:protected public function OnCameraMeshHiddenChanged(): Void;
	public function GetFilmbackText(): FText;
	public function GetCameraView(DeltaTime: ucpp.num.Float32, DesiredView: ucpp.Ref<MinimalViewInfo>): Void;
	public function AddOrUpdateBlendable(InBlendableObject: BlendableInterface, InWeight: ucpp.num.Float32): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetFilmbackText)
@:nativeGen
abstract ConstCameraComp(CameraComp) from CameraComp {
	public extern var FieldOfView(get, never): ucpp.num.Float32;
	public inline extern function get_FieldOfView(): ucpp.num.Float32 return this.FieldOfView;
	public extern var OrthoWidth(get, never): ucpp.num.Float32;
	public inline extern function get_OrthoWidth(): ucpp.num.Float32 return this.OrthoWidth;
	public extern var OrthoNearClipPlane(get, never): ucpp.num.Float32;
	public inline extern function get_OrthoNearClipPlane(): ucpp.num.Float32 return this.OrthoNearClipPlane;
	public extern var OrthoFarClipPlane(get, never): ucpp.num.Float32;
	public inline extern function get_OrthoFarClipPlane(): ucpp.num.Float32 return this.OrthoFarClipPlane;
	public extern var AspectRatio(get, never): ucpp.num.Float32;
	public inline extern function get_AspectRatio(): ucpp.num.Float32 return this.AspectRatio;
	public extern var bConstrainAspectRatio(get, never): Bool;
	public inline extern function get_bConstrainAspectRatio(): Bool return this.bConstrainAspectRatio;
	public extern var bUseFieldOfViewForLOD(get, never): Bool;
	public inline extern function get_bUseFieldOfViewForLOD(): Bool return this.bUseFieldOfViewForLOD;
	public extern var bLockToHmd(get, never): Bool;
	public inline extern function get_bLockToHmd(): Bool return this.bLockToHmd;
	public extern var bUsePawnControlRotation(get, never): Bool;
	public inline extern function get_bUsePawnControlRotation(): Bool return this.bUsePawnControlRotation;
	public extern var ProjectionMode(get, never): TEnumAsByte<ECameraProjectionMode>;
	public inline extern function get_ProjectionMode(): TEnumAsByte<ECameraProjectionMode> return this.ProjectionMode;
	public extern var PostProcessBlendWeight(get, never): ucpp.num.Float32;
	public inline extern function get_PostProcessBlendWeight(): ucpp.num.Float32 return this.PostProcessBlendWeight;
	public extern var PostProcessSettings(get, never): PostProcessSettings;
	public inline extern function get_PostProcessSettings(): PostProcessSettings return this.PostProcessSettings;
}

@:forward
@:nativeGen
@:native("CameraComp*")
abstract CameraCompPtr(ucpp.Ptr<CameraComp>) from ucpp.Ptr<CameraComp> to ucpp.Ptr<CameraComp>{
	@:from
	public static extern inline function fromValue(v: CameraComp): CameraCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): CameraComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}