// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWorldPartitionConvertCommandlet")
@:include("Commandlets/WorldPartitionConvertCommandlet.h")
@:valueType
extern class WorldPartitionConvertCommandlet extends Commandlet {
	@:protected public var EditorHashClass: TSubclassOf<WorldPartitionEditorHash>;
	@:protected public var RuntimeHashClass: TSubclassOf<WorldPartitionRuntimeHash>;
	@:protected public var ExcludedLevels: TArray<FString>;
	@:protected public var bConvertActorsNotReferencedByLevelScript: Bool;
	@:protected public var WorldOrigin: Vector;
	@:protected public var WorldExtent: Vector;
	@:protected public var HLODLayerAssetsPath: FString;
	@:protected public var DefaultHLODLayerName: FString;
	@:protected public var DefaultHLODLayerAsset: FString;
	@:protected public var FoliageTypePath: FString;
	@:protected public var HLODLayersForActorClasses: TArray<HLODLayerActorMapping>;
	@:protected public var HLODLayers: TMap<FString, ucpp.Ptr<HLODLayer>>;
	@:protected public var LandscapeGridSize: ucpp.num.UInt32;
	@:protected public var DataLayerAssetFolder: FString;
	@:protected public var DataLayerFactory: ucpp.Ptr<DataLayerFactory>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstWorldPartitionConvertCommandlet(WorldPartitionConvertCommandlet) from WorldPartitionConvertCommandlet {
}

@:forward
@:nativeGen
@:native("WorldPartitionConvertCommandlet*")
abstract WorldPartitionConvertCommandletPtr(ucpp.Ptr<WorldPartitionConvertCommandlet>) from ucpp.Ptr<WorldPartitionConvertCommandlet> to ucpp.Ptr<WorldPartitionConvertCommandlet>{
	@:from
	public static extern inline function fromValue(v: WorldPartitionConvertCommandlet): WorldPartitionConvertCommandletPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): WorldPartitionConvertCommandlet {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}