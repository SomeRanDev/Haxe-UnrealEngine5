// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAudioComponent")
@:include("Components/AudioComponent.h")
extern class UAudioComponent extends USceneComponent {
	public var Sound: TObjectPtr<USoundBase>;
	public var DefaultParameters: TArray<FAudioParameter>;
	public var InstanceParameters: TArray<FAudioParameter>;
	public var SoundClassOverride: TObjectPtr<USoundClass>;
	public var bAutoDestroy: Bool;
	public var bStopWhenOwnerDestroyed: Bool;
	public var bShouldRemainActiveIfDropped: Bool;
	public var bAllowSpatialization: Bool;
	public var bOverrideAttenuation: Bool;
	public var bOverrideSubtitlePriority: Bool;
	public var bIsUISound: Bool;
	public var bEnableLowPassFilter: Bool;
	public var bOverridePriority: Bool;
	public var bSuppressSubtitles: Bool;
	public var bCanPlayMultipleInstances: Bool;
	public var bDisableParameterUpdatesWhilePlaying: Bool;
	public var bAutoManageAttachment: Bool;
	public var AudioComponentUserID: FName;
	public var PitchModulationMin: cpp.Float32;
	public var PitchModulationMax: cpp.Float32;
	public var VolumeModulationMin: cpp.Float32;
	public var VolumeModulationMax: cpp.Float32;
	public var VolumeMultiplier: cpp.Float32;
	public var EnvelopeFollowerAttackTime: cpp.Int32;
	public var EnvelopeFollowerReleaseTime: cpp.Int32;
	public var Priority: cpp.Float32;
	public var SubtitlePriority: cpp.Float32;
	public var SourceEffectChain: TObjectPtr<USoundEffectSourcePresetChain>;
	public var VolumeWeightedPriorityScale_DEPRECATED: cpp.Float32;
	public var HighFrequencyGainMultiplier_DEPRECATED: cpp.Float32;
	public var PitchMultiplier: cpp.Float32;
	public var LowPassFilterFrequency: cpp.Float32;
	public var AttenuationSettings: TObjectPtr<USoundAttenuation>;
	public var AttenuationOverrides: FSoundAttenuationSettings;
	public var ConcurrencySettings_DEPRECATED: TObjectPtr<USoundConcurrency>;
	public var ConcurrencySet: TSet<TObjectPtr<USoundConcurrency>>;
	public var AutoAttachLocationRule: EAttachmentRule;
	public var AutoAttachRotationRule: EAttachmentRule;
	public var AutoAttachScaleRule: EAttachmentRule;
	public var ModulationRouting: FSoundModulationDefaultRoutingSettings;
	public var OnAudioPlayStateChanged: HaxeMulticastSparseDelegateProperty<(EAudioComponentPlayState) -> Void>;
	public var OnAudioVirtualizationChanged: HaxeMulticastSparseDelegateProperty<(Bool) -> Void>;
	public var OnAudioFinished: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnAudioPlaybackPercent: HaxeMulticastSparseDelegateProperty<(cpp.Star<USoundWave>, cpp.Float32) -> Void>;
	public var OnAudioSingleEnvelopeValue: HaxeMulticastSparseDelegateProperty<(cpp.Star<USoundWave>, cpp.Float32) -> Void>;
	public var OnAudioMultiEnvelopeValue: HaxeMulticastSparseDelegateProperty<(cpp.Float32, cpp.Float32, cpp.Int32) -> Void>;
	public var OnQueueSubtitles: HaxeDelegateProperty<(TArray<FSubtitleCue>, cpp.Float32) -> Void>;
	public var AutoAttachParent: TWeakObjectPtr<USceneComponent>;
	public var AutoAttachSocketName: FName;

	public function StopDelayed(DelayTime: cpp.Float32): Void;
	public function Stop(): Void;
	public function SetWaveParameter(InName: FName, InWave: cpp.Star<USoundWave>): Void;
	public function SetVolumeMultiplier(NewVolumeMultiplier: cpp.Float32): Void;
	public function SetUISound(bInUISound: Bool): Void;
	public function SetSubmixSend(Submix: cpp.Star<USoundSubmixBase>, SendLevel: cpp.Float32): Void;
	public function SetSourceBusSendPreEffect(SoundSourceBus: cpp.Star<USoundSourceBus>, SourceBusSendLevel: cpp.Float32): Void;
	public function SetSourceBusSendPostEffect(SoundSourceBus: cpp.Star<USoundSourceBus>, SourceBusSendLevel: cpp.Float32): Void;
	public function SetSound(NewSound: cpp.Star<USoundBase>): Void;
	public function SetPitchMultiplier(NewPitchMultiplier: cpp.Float32): Void;
	public function SetPaused(bPause: Bool): Void;
	public function SetOutputToBusOnly(bInOutputToBusOnly: Bool): Void;
	public function SetLowPassFilterFrequency(InLowPassFilterFrequency: cpp.Float32): Void;
	public function SetLowPassFilterEnabled(InLowPassFilterEnabled: Bool): Void;
	public function SetIntParameter(InName: FName, InInt: cpp.Int32): Void;
	public function SetFloatParameter(InName: FName, InFloat: cpp.Float32): Void;
	public function SetBoolParameter(InName: FName, InBool: Bool): Void;
	public function SetAudioBusSendPreEffect(AudioBus: cpp.Star<UAudioBus>, AudioBusSendLevel: cpp.Float32): Void;
	public function SetAudioBusSendPostEffect(AudioBus: cpp.Star<UAudioBus>, AudioBusSendLevel: cpp.Float32): Void;
	public function PlayQuantized(WorldContextObject: cpp.Star<UObject>, InClockHandle: cpp.Reference<cpp.Star<UQuartzClockHandle>>, InQuantizationBoundary: FQuartzQuantizationBoundary, InDelegate: HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>, InStartTime: cpp.Float32, InFadeInDuration: cpp.Float32, InFadeVolumeLevel: cpp.Float32, InFadeCurve: EAudioFaderCurve): Void;
	public function Play(StartTime: cpp.Float32): Void;
	public function IsVirtualized(): Bool;
	public function IsPlaying(): Bool;
	public function HasCookedFFTData(): Bool;
	public function HasCookedAmplitudeEnvelopeData(): Bool;
	public function GetPlayState(): EAudioComponentPlayState;
	public function GetCookedFFTDataForAllPlayingSounds(OutSoundWaveSpectralData: TArray<FSoundWaveSpectralDataPerSound>): Bool;
	public function GetCookedFFTData(FrequenciesToGet: TArray<cpp.Float32>, OutSoundWaveSpectralData: TArray<FSoundWaveSpectralData>): Bool;
	public function GetCookedEnvelopeDataForAllPlayingSounds(OutEnvelopeData: TArray<FSoundWaveEnvelopeDataPerSound>): Bool;
	public function GetCookedEnvelopeData(OutEnvelopeData: cpp.Reference<cpp.Float32>): Bool;
	public function FadeOut(FadeOutDuration: cpp.Float32, FadeVolumeLevel: cpp.Float32, FadeCurve: EAudioFaderCurve): Void;
	public function FadeIn(FadeInDuration: cpp.Float32, FadeVolumeLevel: cpp.Float32, StartTime: cpp.Float32, FadeCurve: EAudioFaderCurve): Void;
	public function BP_GetAttenuationSettingsToApply(OutAttenuationSettings: FSoundAttenuationSettings): Bool;
	public function AdjustVolume(AdjustVolumeDuration: cpp.Float32, AdjustVolumeLevel: cpp.Float32, FadeCurve: EAudioFaderCurve): Void;
	public function AdjustAttenuation(InAttenuationSettings: FSoundAttenuationSettings): Void;
}
