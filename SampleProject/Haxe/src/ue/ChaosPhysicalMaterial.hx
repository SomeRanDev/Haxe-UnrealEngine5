// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UChaosPhysicalMaterial")
@:include("Chaos/ChaosPhysicalMaterial.h")
@:structAccess
extern class ChaosPhysicalMaterial extends Object {
	public var Friction: cpp.Float32;
	public var StaticFriction: cpp.Float32;
	public var Restitution: cpp.Float32;
	public var LinearEtherDrag: cpp.Float32;
	public var AngularEtherDrag: cpp.Float32;
	public var SleepingLinearVelocityThreshold: cpp.Float32;
	public var SleepingAngularVelocityThreshold: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstChaosPhysicalMaterial(ChaosPhysicalMaterial) from ChaosPhysicalMaterial {
	public extern var Friction(get, never): cpp.Float32;
	public inline extern function get_Friction(): cpp.Float32 return this.Friction;
	public extern var StaticFriction(get, never): cpp.Float32;
	public inline extern function get_StaticFriction(): cpp.Float32 return this.StaticFriction;
	public extern var Restitution(get, never): cpp.Float32;
	public inline extern function get_Restitution(): cpp.Float32 return this.Restitution;
	public extern var LinearEtherDrag(get, never): cpp.Float32;
	public inline extern function get_LinearEtherDrag(): cpp.Float32 return this.LinearEtherDrag;
	public extern var AngularEtherDrag(get, never): cpp.Float32;
	public inline extern function get_AngularEtherDrag(): cpp.Float32 return this.AngularEtherDrag;
	public extern var SleepingLinearVelocityThreshold(get, never): cpp.Float32;
	public inline extern function get_SleepingLinearVelocityThreshold(): cpp.Float32 return this.SleepingLinearVelocityThreshold;
	public extern var SleepingAngularVelocityThreshold(get, never): cpp.Float32;
	public inline extern function get_SleepingAngularVelocityThreshold(): cpp.Float32 return this.SleepingAngularVelocityThreshold;
}

@:forward
@:nativeGen
@:native("ChaosPhysicalMaterial*")
abstract ChaosPhysicalMaterialPtr(cpp.Star<ChaosPhysicalMaterial>) from cpp.Star<ChaosPhysicalMaterial> to cpp.Star<ChaosPhysicalMaterial>{
	@:from
	public static extern inline function fromValue(v: ChaosPhysicalMaterial): ChaosPhysicalMaterialPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ChaosPhysicalMaterial {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}