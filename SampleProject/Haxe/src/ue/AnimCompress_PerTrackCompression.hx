// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimCompress_PerTrackCompression")
@:include("Animation/AnimCompress_PerTrackCompression.h")
@:valueType
extern class AnimCompress_PerTrackCompression extends AnimCompress_RemoveLinearKeys {
	public var MaxZeroingThreshold: ucpp.num.Float32;
	public var MaxPosDiffBitwise: ucpp.num.Float32;
	public var MaxAngleDiffBitwise: ucpp.num.Float32;
	public var MaxScaleDiffBitwise: ucpp.num.Float32;
	public var AllowedRotationFormats: TArray<TEnumAsByte<AnimationCompressionFormat>>;
	public var AllowedTranslationFormats: TArray<TEnumAsByte<AnimationCompressionFormat>>;
	public var AllowedScaleFormats: TArray<TEnumAsByte<AnimationCompressionFormat>>;
	public var bResampleAnimation: Bool;
	public var ResampledFramerate: ucpp.num.Float32;
	public var MinKeysForResampling: ucpp.num.Int32;
	public var bUseAdaptiveError: Bool;
	public var bUseOverrideForEndEffectors: Bool;
	public var TrackHeightBias: ucpp.num.Int32;
	public var ParentingDivisor: ucpp.num.Float32;
	public var ParentingDivisorExponent: ucpp.num.Float32;
	public var bUseAdaptiveError2: Bool;
	public var RotationErrorSourceRatio: ucpp.num.Float32;
	public var TranslationErrorSourceRatio: ucpp.num.Float32;
	public var ScaleErrorSourceRatio: ucpp.num.Float32;
	public var MaxErrorPerTrackRatio: ucpp.num.Float32;
	public var PerturbationProbeSize: ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstAnimCompress_PerTrackCompression(AnimCompress_PerTrackCompression) from AnimCompress_PerTrackCompression {
	public extern var MaxZeroingThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_MaxZeroingThreshold(): ucpp.num.Float32 return this.MaxZeroingThreshold;
	public extern var MaxPosDiffBitwise(get, never): ucpp.num.Float32;
	public inline extern function get_MaxPosDiffBitwise(): ucpp.num.Float32 return this.MaxPosDiffBitwise;
	public extern var MaxAngleDiffBitwise(get, never): ucpp.num.Float32;
	public inline extern function get_MaxAngleDiffBitwise(): ucpp.num.Float32 return this.MaxAngleDiffBitwise;
	public extern var MaxScaleDiffBitwise(get, never): ucpp.num.Float32;
	public inline extern function get_MaxScaleDiffBitwise(): ucpp.num.Float32 return this.MaxScaleDiffBitwise;
	public extern var AllowedRotationFormats(get, never): TArray<TEnumAsByte<AnimationCompressionFormat>>;
	public inline extern function get_AllowedRotationFormats(): TArray<TEnumAsByte<AnimationCompressionFormat>> return this.AllowedRotationFormats;
	public extern var AllowedTranslationFormats(get, never): TArray<TEnumAsByte<AnimationCompressionFormat>>;
	public inline extern function get_AllowedTranslationFormats(): TArray<TEnumAsByte<AnimationCompressionFormat>> return this.AllowedTranslationFormats;
	public extern var AllowedScaleFormats(get, never): TArray<TEnumAsByte<AnimationCompressionFormat>>;
	public inline extern function get_AllowedScaleFormats(): TArray<TEnumAsByte<AnimationCompressionFormat>> return this.AllowedScaleFormats;
	public extern var bResampleAnimation(get, never): Bool;
	public inline extern function get_bResampleAnimation(): Bool return this.bResampleAnimation;
	public extern var ResampledFramerate(get, never): ucpp.num.Float32;
	public inline extern function get_ResampledFramerate(): ucpp.num.Float32 return this.ResampledFramerate;
	public extern var MinKeysForResampling(get, never): ucpp.num.Int32;
	public inline extern function get_MinKeysForResampling(): ucpp.num.Int32 return this.MinKeysForResampling;
	public extern var bUseAdaptiveError(get, never): Bool;
	public inline extern function get_bUseAdaptiveError(): Bool return this.bUseAdaptiveError;
	public extern var bUseOverrideForEndEffectors(get, never): Bool;
	public inline extern function get_bUseOverrideForEndEffectors(): Bool return this.bUseOverrideForEndEffectors;
	public extern var TrackHeightBias(get, never): ucpp.num.Int32;
	public inline extern function get_TrackHeightBias(): ucpp.num.Int32 return this.TrackHeightBias;
	public extern var ParentingDivisor(get, never): ucpp.num.Float32;
	public inline extern function get_ParentingDivisor(): ucpp.num.Float32 return this.ParentingDivisor;
	public extern var ParentingDivisorExponent(get, never): ucpp.num.Float32;
	public inline extern function get_ParentingDivisorExponent(): ucpp.num.Float32 return this.ParentingDivisorExponent;
	public extern var bUseAdaptiveError2(get, never): Bool;
	public inline extern function get_bUseAdaptiveError2(): Bool return this.bUseAdaptiveError2;
	public extern var RotationErrorSourceRatio(get, never): ucpp.num.Float32;
	public inline extern function get_RotationErrorSourceRatio(): ucpp.num.Float32 return this.RotationErrorSourceRatio;
	public extern var TranslationErrorSourceRatio(get, never): ucpp.num.Float32;
	public inline extern function get_TranslationErrorSourceRatio(): ucpp.num.Float32 return this.TranslationErrorSourceRatio;
	public extern var ScaleErrorSourceRatio(get, never): ucpp.num.Float32;
	public inline extern function get_ScaleErrorSourceRatio(): ucpp.num.Float32 return this.ScaleErrorSourceRatio;
	public extern var MaxErrorPerTrackRatio(get, never): ucpp.num.Float32;
	public inline extern function get_MaxErrorPerTrackRatio(): ucpp.num.Float32 return this.MaxErrorPerTrackRatio;
	public extern var PerturbationProbeSize(get, never): ucpp.num.Float32;
	public inline extern function get_PerturbationProbeSize(): ucpp.num.Float32 return this.PerturbationProbeSize;
}

@:forward
@:nativeGen
@:native("AnimCompress_PerTrackCompression*")
abstract AnimCompress_PerTrackCompressionPtr(ucpp.Ptr<AnimCompress_PerTrackCompression>) from ucpp.Ptr<AnimCompress_PerTrackCompression> to ucpp.Ptr<AnimCompress_PerTrackCompression>{
	@:from
	public static extern inline function fromValue(v: AnimCompress_PerTrackCompression): AnimCompress_PerTrackCompressionPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimCompress_PerTrackCompression {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}