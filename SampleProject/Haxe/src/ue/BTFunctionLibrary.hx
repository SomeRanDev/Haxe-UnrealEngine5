// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBTFunctionLibrary")
@:include("BehaviorTree/BTFunctionLibrary.h")
@:valueType
extern class BTFunctionLibrary extends BlueprintFunctionLibrary {
	public function StopUsingExternalEvent(NodeOwner: ucpp.Ptr<BTNode>): Void;
	public function StartUsingExternalEvent(NodeOwner: ucpp.Ptr<BTNode>, OwningActor: ucpp.Ptr<Actor>): Void;
	public function SetBlackboardValueAsVector(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: Vector): Void;
	public function SetBlackboardValueAsString(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: FString): Void;
	public function SetBlackboardValueAsRotator(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: Rotator): Void;
	public function SetBlackboardValueAsObject(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: ucpp.Ptr<Object>): Void;
	public function SetBlackboardValueAsName(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: FName): Void;
	public function SetBlackboardValueAsInt(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: ucpp.num.Int32): Void;
	public function SetBlackboardValueAsFloat(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: ucpp.num.Float32): Void;
	public function SetBlackboardValueAsEnum(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: ucpp.num.UInt8): Void;
	public function SetBlackboardValueAsClass(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: ucpp.Ptr<Class>): Void;
	public function SetBlackboardValueAsBool(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>, Value: Bool): Void;
	public function GetOwnersBlackboard(NodeOwner: ucpp.Ptr<BTNode>): ucpp.Ptr<BlackboardComp>;
	public function GetOwnerComponent(NodeOwner: ucpp.Ptr<BTNode>): ucpp.Ptr<BehaviorTreeComp>;
	public function GetBlackboardValueAsVector(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): Vector;
	public function GetBlackboardValueAsString(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): FString;
	public function GetBlackboardValueAsRotator(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): Rotator;
	public function GetBlackboardValueAsObject(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): ucpp.Ptr<Object>;
	public function GetBlackboardValueAsName(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): FName;
	public function GetBlackboardValueAsInt(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): ucpp.num.Int32;
	public function GetBlackboardValueAsFloat(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): ucpp.num.Float32;
	public function GetBlackboardValueAsEnum(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): ucpp.num.UInt8;
	public function GetBlackboardValueAsClass(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): ucpp.Ptr<Class>;
	public function GetBlackboardValueAsBool(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): Bool;
	public function GetBlackboardValueAsActor(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): ucpp.Ptr<Actor>;
	public function ClearBlackboardValueAsVector(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): Void;
	public function ClearBlackboardValue(NodeOwner: ucpp.Ptr<BTNode>, Key: ucpp.Ref<BlackboardKeySelector>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstBTFunctionLibrary(BTFunctionLibrary) from BTFunctionLibrary {
}

@:forward
@:nativeGen
@:native("BTFunctionLibrary*")
abstract BTFunctionLibraryPtr(ucpp.Ptr<BTFunctionLibrary>) from ucpp.Ptr<BTFunctionLibrary> to ucpp.Ptr<BTFunctionLibrary>{
	@:from
	public static extern inline function fromValue(v: BTFunctionLibrary): BTFunctionLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): BTFunctionLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}