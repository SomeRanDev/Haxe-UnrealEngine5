// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USplineComponent")
@:include("Components/SplineComponent.h")
extern class USplineComponent extends UPrimitiveComponent {
	public var SplineCurves: FSplineCurves;
	public var SplineInfo_DEPRECATED: FInterpCurveVector;
	public var SplineRotInfo_DEPRECATED: FInterpCurveQuat;
	public var SplineScaleInfo_DEPRECATED: FInterpCurveVector;
	public var SplineReparamTable_DEPRECATED: FInterpCurveFloat;
	public var bAllowSplineEditingPerInstance_DEPRECATED: Bool;
	public var ReparamStepsPerSegment: cpp.Int32;
	public var Duration: cpp.Float32;
	public var bStationaryEndpoints: Bool;
	public var bSplineHasBeenEdited: Bool;
	public var bModifiedByConstructionScript: Bool;
	public var bInputSplinePointsToConstructionScript: Bool;
	public var bDrawDebug: Bool;
	public var bClosedLoop: Bool;
	public var bLoopPositionOverride: Bool;
	public var LoopPosition: cpp.Float32;
	public var DefaultUpVector: FVector;
	public var EditorUnselectedSplineSegmentColor: FLinearColor;
	public var EditorSelectedSplineSegmentColor: FLinearColor;
	public var EditorTangentColor: FLinearColor;
	public var bAllowDiscontinuousSpline: Bool;
	public var bShouldVisualizeScale: Bool;
	public var ScaleVisualizationWidth: cpp.Float32;

	public function UpdateSpline(): Void;
	public function SetWorldLocationAtSplinePoint(PointIndex: cpp.Int32, InLocation: FVector): Void;
	public function SetUpVectorAtSplinePoint(PointIndex: cpp.Int32, InUpVector: FVector, CoordinateSpace: ESplineCoordinateSpace, bUpdateSpline: Bool): Void;
	public function SetUnselectedSplineSegmentColor(SegmentColor: FLinearColor): Void;
	public function SetTangentsAtSplinePoint(PointIndex: cpp.Int32, InArriveTangent: FVector, InLeaveTangent: FVector, CoordinateSpace: ESplineCoordinateSpace, bUpdateSpline: Bool): Void;
	public function SetTangentColor(TangentColor: FLinearColor): Void;
	public function SetTangentAtSplinePoint(PointIndex: cpp.Int32, InTangent: FVector, CoordinateSpace: ESplineCoordinateSpace, bUpdateSpline: Bool): Void;
	public function SetSplineWorldPoints(Points: TArray<FVector>): Void;
	public function SetSplinePointType(PointIndex: cpp.Int32, Type: ESplinePointType, bUpdateSpline: Bool): Void;
	public function SetSplinePoints(Points: TArray<FVector>, CoordinateSpace: ESplineCoordinateSpace, bUpdateSpline: Bool): Void;
	public function SetSplineLocalPoints(Points: TArray<FVector>): Void;
	public function SetSelectedSplineSegmentColor(SegmentColor: FLinearColor): Void;
	public function SetScaleAtSplinePoint(PointIndex: cpp.Int32, InScaleVector: FVector, bUpdateSpline: Bool): Void;
	public function SetRotationAtSplinePoint(PointIndex: cpp.Int32, InRotation: FRotator, CoordinateSpace: ESplineCoordinateSpace, bUpdateSpline: Bool): Void;
	public function SetLocationAtSplinePoint(PointIndex: cpp.Int32, InLocation: FVector, CoordinateSpace: ESplineCoordinateSpace, bUpdateSpline: Bool): Void;
	public function SetDrawDebug(bShow: Bool): Void;
	public function SetDefaultUpVector(UpVector: FVector, CoordinateSpace: ESplineCoordinateSpace): Void;
	public function SetClosedLoopAtPosition(bInClosedLoop: Bool, Key: cpp.Float32, bUpdateSpline: Bool): Void;
	public function SetClosedLoop(bInClosedLoop: Bool, bUpdateSpline: Bool): Void;
	public function RemoveSplinePoint(Index: cpp.Int32, bUpdateSpline: Bool): Void;
	public function IsClosedLoop(): Bool;
	public function GetWorldTangentAtDistanceAlongSpline(Distance: cpp.Float32): FVector;
	public function GetWorldRotationAtTime(Time: cpp.Float32, bUseConstantVelocity: Bool): FRotator;
	public function GetWorldRotationAtDistanceAlongSpline(Distance: cpp.Float32): FRotator;
	public function GetWorldLocationAtTime(Time: cpp.Float32, bUseConstantVelocity: Bool): FVector;
	public function GetWorldLocationAtSplinePoint(PointIndex: cpp.Int32): FVector;
	public function GetWorldLocationAtDistanceAlongSpline(Distance: cpp.Float32): FVector;
	public function GetWorldDirectionAtTime(Time: cpp.Float32, bUseConstantVelocity: Bool): FVector;
	public function GetWorldDirectionAtDistanceAlongSpline(Distance: cpp.Float32): FVector;
	public function GetVectorPropertyAtSplinePoint(Index: cpp.Int32, PropertyName: FName): FVector;
	public function GetVectorPropertyAtSplineInputKey(InKey: cpp.Float32, PropertyName: FName): FVector;
	public function GetUpVectorAtTime(Time: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseConstantVelocity: Bool): FVector;
	public function GetUpVectorAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetUpVectorAtSplineInputKey(InKey: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetUpVectorAtDistanceAlongSpline(Distance: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetTransformAtTime(Time: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseConstantVelocity: Bool, bUseScale: Bool): FTransform;
	public function GetTransformAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace, bUseScale: Bool): FTransform;
	public function GetTransformAtSplineInputKey(InKey: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseScale: Bool): FTransform;
	public function GetTransformAtDistanceAlongSpline(Distance: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseScale: Bool): FTransform;
	public function GetTangentAtTime(Time: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseConstantVelocity: Bool): FVector;
	public function GetTangentAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetTangentAtSplineInputKey(InKey: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetTangentAtDistanceAlongSpline(Distance: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetSplinePointType(PointIndex: cpp.Int32): ESplinePointType;
	public function GetSplineLength(): cpp.Float32;
	public function GetScaleAtTime(Time: cpp.Float32, bUseConstantVelocity: Bool): FVector;
	public function GetScaleAtSplinePoint(PointIndex: cpp.Int32): FVector;
	public function GetScaleAtSplineInputKey(InKey: cpp.Float32): FVector;
	public function GetScaleAtDistanceAlongSpline(Distance: cpp.Float32): FVector;
	public function GetRotationAtTime(Time: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseConstantVelocity: Bool): FRotator;
	public function GetRotationAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): FRotator;
	public function GetRotationAtSplineInputKey(InKey: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FRotator;
	public function GetRotationAtDistanceAlongSpline(Distance: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FRotator;
	public function GetRollAtTime(Time: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseConstantVelocity: Bool): cpp.Float32;
	public function GetRollAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): cpp.Float32;
	public function GetRollAtSplineInputKey(InKey: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): cpp.Float32;
	public function GetRollAtDistanceAlongSpline(Distance: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): cpp.Float32;
	public function GetRightVectorAtTime(Time: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseConstantVelocity: Bool): FVector;
	public function GetRightVectorAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetRightVectorAtSplineInputKey(InKey: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetRightVectorAtDistanceAlongSpline(Distance: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetNumberOfSplineSegments(): cpp.Int32;
	public function GetNumberOfSplinePoints(): cpp.Int32;
	public function GetLocationAtTime(Time: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseConstantVelocity: Bool): FVector;
	public function GetLocationAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetLocationAtSplineInputKey(InKey: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetLocationAtDistanceAlongSpline(Distance: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetLocationAndTangentAtSplinePoint(PointIndex: cpp.Int32, Location: FVector, Tangent: FVector, CoordinateSpace: ESplineCoordinateSpace): Void;
	public function GetLocalLocationAndTangentAtSplinePoint(PointIndex: cpp.Int32, LocalLocation: FVector, LocalTangent: FVector): Void;
	public function GetLeaveTangentAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetInputKeyAtDistanceAlongSpline(Distance: cpp.Float32): cpp.Float32;
	public function GetFloatPropertyAtSplinePoint(Index: cpp.Int32, PropertyName: FName): cpp.Float32;
	public function GetFloatPropertyAtSplineInputKey(InKey: cpp.Float32, PropertyName: FName): cpp.Float32;
	public function GetDistanceAlongSplineAtSplinePoint(PointIndex: cpp.Int32): cpp.Float32;
	public function GetDistanceAlongSplineAtSplineInputKey(InKey: cpp.Float32): cpp.Float32;
	public function GetDirectionAtTime(Time: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, bUseConstantVelocity: Bool): FVector;
	public function GetDirectionAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetDirectionAtSplineInputKey(InKey: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetDirectionAtDistanceAlongSpline(Distance: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetDefaultUpVector(CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function GetArriveTangentAtSplinePoint(PointIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function FindUpVectorClosestToWorldLocation(WorldLocation: FVector, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function FindTransformClosestToWorldLocation(WorldLocation: FVector, CoordinateSpace: ESplineCoordinateSpace, bUseScale: Bool): FTransform;
	public function FindTangentClosestToWorldLocation(WorldLocation: FVector, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function FindScaleClosestToWorldLocation(WorldLocation: FVector): FVector;
	public function FindRotationClosestToWorldLocation(WorldLocation: FVector, CoordinateSpace: ESplineCoordinateSpace): FRotator;
	public function FindRollClosestToWorldLocation(WorldLocation: FVector, CoordinateSpace: ESplineCoordinateSpace): cpp.Float32;
	public function FindRightVectorClosestToWorldLocation(WorldLocation: FVector, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function FindLocationClosestToWorldLocation(WorldLocation: FVector, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function FindInputKeyClosestToWorldLocation(WorldLocation: FVector): cpp.Float32;
	public function FindDirectionClosestToWorldLocation(WorldLocation: FVector, CoordinateSpace: ESplineCoordinateSpace): FVector;
	public function DivideSplineIntoPolylineRecursive(StartDistanceAlongSpline: cpp.Float32, EndDistanceAlongSpline: cpp.Float32, CoordinateSpace: ESplineCoordinateSpace, MaxSquareDistanceFromSpline: cpp.Float32, OutPoints: TArray<FVector>): Bool;
	public function ConvertSplineToPolyLine(CoordinateSpace: ESplineCoordinateSpace, MaxSquareDistanceFromSpline: cpp.Float32, OutPoints: TArray<FVector>): Bool;
	public function ConvertSplineSegmentToPolyLine(SplinePointStartIndex: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace, MaxSquareDistanceFromSpline: cpp.Float32, OutPoints: TArray<FVector>): Bool;
	public function ClearSplinePoints(bUpdateSpline: Bool): Void;
	public function AddSplineWorldPoint(Position: FVector): Void;
	public function AddSplinePointAtIndex(Position: FVector, Index: cpp.Int32, CoordinateSpace: ESplineCoordinateSpace, bUpdateSpline: Bool): Void;
	public function AddSplinePoint(Position: FVector, CoordinateSpace: ESplineCoordinateSpace, bUpdateSpline: Bool): Void;
	public function AddSplineLocalPoint(Position: FVector): Void;
	public function AddPoints(Points: TArray<FSplinePoint>, bUpdateSpline: Bool): Void;
	public function AddPoint(Point: FSplinePoint, bUpdateSpline: Bool): Void;
}
