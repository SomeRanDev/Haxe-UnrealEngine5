// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCameraModifier")
@:include("Camera/CameraModifier.h")
@:structAccess
extern class CameraModifier extends Object {
	public var bDebug: Bool;
	public var bExclusive: Bool;
	public var Priority: cpp.UInt8;
	@:protected public var CameraOwner: cpp.Star<PlayerCameraManager>;
	@:protected public var AlphaInTime: cpp.Float32;
	@:protected public var AlphaOutTime: cpp.Float32;
	@:protected public var Alpha: cpp.Float32;

	@:protected public function OnCameraOwnerDestroyed(InOwner: cpp.Star<Actor>): Void;
	public function IsDisabled(): Bool;
	public function GetViewTarget(): cpp.Star<Actor>;
	public function EnableModifier(): Void;
	public function DisableModifier(bImmediate: Bool): Void;
	public function BlueprintModifyPostProcess(DeltaTime: cpp.Float32, PostProcessBlendWeight: cpp.Reference<cpp.Float32>, PostProcessSettings: cpp.Reference<PostProcessSettings>): Void;
	public function BlueprintModifyCamera(DeltaTime: cpp.Float32, ViewLocation: Vector, ViewRotation: Rotator, FOV: cpp.Float32, NewViewLocation: cpp.Reference<Vector>, NewViewRotation: cpp.Reference<Rotator>, NewFOV: cpp.Reference<cpp.Float32>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsDisabled, GetViewTarget)
@:nativeGen
abstract ConstCameraModifier(CameraModifier) from CameraModifier {
	public extern var bDebug(get, never): Bool;
	public inline extern function get_bDebug(): Bool return this.bDebug;
	public extern var bExclusive(get, never): Bool;
	public inline extern function get_bExclusive(): Bool return this.bExclusive;
	public extern var Priority(get, never): cpp.UInt8;
	public inline extern function get_Priority(): cpp.UInt8 return this.Priority;
}

@:forward
@:nativeGen
@:native("CameraModifier*")
abstract CameraModifierPtr(cpp.Star<CameraModifier>) from cpp.Star<CameraModifier> to cpp.Star<CameraModifier>{
	@:from
	public static extern inline function fromValue(v: CameraModifier): CameraModifierPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): CameraModifier {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}