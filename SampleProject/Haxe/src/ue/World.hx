// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWorld")
@:include("Engine/World.h")
@:structAccess
extern class World extends Object {
	public var Layers: TArray<cpp.Star<Layer>>;
	public var ActiveGroupActors: TArray<cpp.Star<Actor>>;
	public var ThumbnailInfo: cpp.Star<ThumbnailInfo>;
	public var PersistentLevel: cpp.Star<Level>;
	public var NetDriver: cpp.Star<NetDriver>;
	public var LineBatcher: cpp.Star<LineBatchComp>;
	public var PersistentLineBatcher: cpp.Star<LineBatchComp>;
	public var ForegroundLineBatcher: cpp.Star<LineBatchComp>;
	public var NetworkManager: cpp.Star<GameNetworkManager>;
	public var PhysicsCollisionHandler: cpp.Star<PhysicsCollisionHandler>;
	public var ExtraReferencedObjects: TArray<cpp.Star<Object>>;
	public var PerModuleDataObjects: TArray<cpp.Star<Object>>;
	public var StreamingLevels: TArray<cpp.Star<LevelStreaming>>;
	public var StreamingLevelsToConsider: StreamingLevelsToConsider;
	public var StreamingLevelsPrefix: FString;
	public var CurrentLevelPendingVisibility: cpp.Star<Level>;
	public var CurrentLevelPendingInvisibility: cpp.Star<Level>;
	public var DemoNetDriver: cpp.Star<DemoNetDriver>;
	public var MyParticleEventManager: cpp.Star<ParticleEventManager>;
	public var DefaultPhysicsVolume: cpp.Star<PhysicsVolume>;
	public var bAreConstraintsDirty: Bool;
	public var NavigationSystem: cpp.Star<NavigationSystemBase>;
	public var AuthorityGameMode: cpp.Star<GameModeBase>;
	public var GameState: cpp.Star<GameStateBase>;
	public var AISystem: cpp.Star<AISystemBase>;
	public var AvoidanceManager: cpp.Star<AvoidanceManager>;
	public var Levels: TArray<cpp.Star<Level>>;
	public var LevelCollections: TArray<LevelCollection>;
	public var CurrentLevel: cpp.Star<Level>;
	public var OwningGameInstance: cpp.Star<GameInstance>;
	public var ParameterCollectionInstances: TArray<cpp.Star<MaterialParameterCollectionInstance>>;
	public var CanvasForRenderingToTarget: cpp.Star<Canvas>;
	public var CanvasForDrawMaterialToRenderTarget: cpp.Star<Canvas>;
	public var EditorViews: TArray<LevelViewportInfo>;
	public var PhysicsField: cpp.Star<PhysicsFieldComp>;
	public var LWILastAssignedUID: cpp.UInt32;
	public var ComponentsThatNeedPreEndOfFrameSync: TSet<cpp.Star<ActorComp>>;
	public var ComponentsThatNeedEndOfFrameUpdate: TArray<cpp.Star<ActorComp>>;
	public var ComponentsThatNeedEndOfFrameUpdate_OnGameThread: TArray<cpp.Star<ActorComp>>;
	public var SelectedLevels: TArray<cpp.Star<Level>>;
	public var WorldComposition: cpp.Star<WorldComposition>;
	public var PSCPool: WorldPSCPool;

	public function K2_GetWorldSettings(): cpp.Reference<cpp.Star<WorldSettings>>;
	public function HandleTimelineScrubbed(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstWorld(World) from World {
	public extern var Layers(get, never): TArray<cpp.Star<Layer.ConstLayer>>;
	public inline extern function get_Layers(): TArray<cpp.Star<Layer.ConstLayer>> return this.Layers;
	public extern var ActiveGroupActors(get, never): TArray<cpp.Star<Actor.ConstActor>>;
	public inline extern function get_ActiveGroupActors(): TArray<cpp.Star<Actor.ConstActor>> return this.ActiveGroupActors;
	public extern var ThumbnailInfo(get, never): cpp.Star<ThumbnailInfo.ConstThumbnailInfo>;
	public inline extern function get_ThumbnailInfo(): cpp.Star<ThumbnailInfo.ConstThumbnailInfo> return this.ThumbnailInfo;
	public extern var PersistentLevel(get, never): cpp.Star<Level.ConstLevel>;
	public inline extern function get_PersistentLevel(): cpp.Star<Level.ConstLevel> return this.PersistentLevel;
	public extern var NetDriver(get, never): cpp.Star<NetDriver.ConstNetDriver>;
	public inline extern function get_NetDriver(): cpp.Star<NetDriver.ConstNetDriver> return this.NetDriver;
	public extern var LineBatcher(get, never): cpp.Star<LineBatchComp.ConstLineBatchComp>;
	public inline extern function get_LineBatcher(): cpp.Star<LineBatchComp.ConstLineBatchComp> return this.LineBatcher;
	public extern var PersistentLineBatcher(get, never): cpp.Star<LineBatchComp.ConstLineBatchComp>;
	public inline extern function get_PersistentLineBatcher(): cpp.Star<LineBatchComp.ConstLineBatchComp> return this.PersistentLineBatcher;
	public extern var ForegroundLineBatcher(get, never): cpp.Star<LineBatchComp.ConstLineBatchComp>;
	public inline extern function get_ForegroundLineBatcher(): cpp.Star<LineBatchComp.ConstLineBatchComp> return this.ForegroundLineBatcher;
	public extern var NetworkManager(get, never): cpp.Star<GameNetworkManager.ConstGameNetworkManager>;
	public inline extern function get_NetworkManager(): cpp.Star<GameNetworkManager.ConstGameNetworkManager> return this.NetworkManager;
	public extern var PhysicsCollisionHandler(get, never): cpp.Star<PhysicsCollisionHandler.ConstPhysicsCollisionHandler>;
	public inline extern function get_PhysicsCollisionHandler(): cpp.Star<PhysicsCollisionHandler.ConstPhysicsCollisionHandler> return this.PhysicsCollisionHandler;
	public extern var ExtraReferencedObjects(get, never): TArray<cpp.Star<Object.ConstObject>>;
	public inline extern function get_ExtraReferencedObjects(): TArray<cpp.Star<Object.ConstObject>> return this.ExtraReferencedObjects;
	public extern var PerModuleDataObjects(get, never): TArray<cpp.Star<Object.ConstObject>>;
	public inline extern function get_PerModuleDataObjects(): TArray<cpp.Star<Object.ConstObject>> return this.PerModuleDataObjects;
	public extern var StreamingLevels(get, never): TArray<cpp.Star<LevelStreaming.ConstLevelStreaming>>;
	public inline extern function get_StreamingLevels(): TArray<cpp.Star<LevelStreaming.ConstLevelStreaming>> return this.StreamingLevels;
	public extern var StreamingLevelsToConsider(get, never): StreamingLevelsToConsider;
	public inline extern function get_StreamingLevelsToConsider(): StreamingLevelsToConsider return this.StreamingLevelsToConsider;
	public extern var StreamingLevelsPrefix(get, never): FString;
	public inline extern function get_StreamingLevelsPrefix(): FString return this.StreamingLevelsPrefix;
	public extern var CurrentLevelPendingVisibility(get, never): cpp.Star<Level.ConstLevel>;
	public inline extern function get_CurrentLevelPendingVisibility(): cpp.Star<Level.ConstLevel> return this.CurrentLevelPendingVisibility;
	public extern var CurrentLevelPendingInvisibility(get, never): cpp.Star<Level.ConstLevel>;
	public inline extern function get_CurrentLevelPendingInvisibility(): cpp.Star<Level.ConstLevel> return this.CurrentLevelPendingInvisibility;
	public extern var DemoNetDriver(get, never): cpp.Star<DemoNetDriver.ConstDemoNetDriver>;
	public inline extern function get_DemoNetDriver(): cpp.Star<DemoNetDriver.ConstDemoNetDriver> return this.DemoNetDriver;
	public extern var MyParticleEventManager(get, never): cpp.Star<ParticleEventManager.ConstParticleEventManager>;
	public inline extern function get_MyParticleEventManager(): cpp.Star<ParticleEventManager.ConstParticleEventManager> return this.MyParticleEventManager;
	public extern var DefaultPhysicsVolume(get, never): cpp.Star<PhysicsVolume.ConstPhysicsVolume>;
	public inline extern function get_DefaultPhysicsVolume(): cpp.Star<PhysicsVolume.ConstPhysicsVolume> return this.DefaultPhysicsVolume;
	public extern var bAreConstraintsDirty(get, never): Bool;
	public inline extern function get_bAreConstraintsDirty(): Bool return this.bAreConstraintsDirty;
	public extern var NavigationSystem(get, never): cpp.Star<NavigationSystemBase.ConstNavigationSystemBase>;
	public inline extern function get_NavigationSystem(): cpp.Star<NavigationSystemBase.ConstNavigationSystemBase> return this.NavigationSystem;
	public extern var AuthorityGameMode(get, never): cpp.Star<GameModeBase.ConstGameModeBase>;
	public inline extern function get_AuthorityGameMode(): cpp.Star<GameModeBase.ConstGameModeBase> return this.AuthorityGameMode;
	public extern var GameState(get, never): cpp.Star<GameStateBase.ConstGameStateBase>;
	public inline extern function get_GameState(): cpp.Star<GameStateBase.ConstGameStateBase> return this.GameState;
	public extern var AISystem(get, never): cpp.Star<AISystemBase.ConstAISystemBase>;
	public inline extern function get_AISystem(): cpp.Star<AISystemBase.ConstAISystemBase> return this.AISystem;
	public extern var AvoidanceManager(get, never): cpp.Star<AvoidanceManager.ConstAvoidanceManager>;
	public inline extern function get_AvoidanceManager(): cpp.Star<AvoidanceManager.ConstAvoidanceManager> return this.AvoidanceManager;
	public extern var Levels(get, never): TArray<cpp.Star<Level.ConstLevel>>;
	public inline extern function get_Levels(): TArray<cpp.Star<Level.ConstLevel>> return this.Levels;
	public extern var LevelCollections(get, never): TArray<LevelCollection>;
	public inline extern function get_LevelCollections(): TArray<LevelCollection> return this.LevelCollections;
	public extern var CurrentLevel(get, never): cpp.Star<Level.ConstLevel>;
	public inline extern function get_CurrentLevel(): cpp.Star<Level.ConstLevel> return this.CurrentLevel;
	public extern var OwningGameInstance(get, never): cpp.Star<GameInstance.ConstGameInstance>;
	public inline extern function get_OwningGameInstance(): cpp.Star<GameInstance.ConstGameInstance> return this.OwningGameInstance;
	public extern var ParameterCollectionInstances(get, never): TArray<cpp.Star<MaterialParameterCollectionInstance.ConstMaterialParameterCollectionInstance>>;
	public inline extern function get_ParameterCollectionInstances(): TArray<cpp.Star<MaterialParameterCollectionInstance.ConstMaterialParameterCollectionInstance>> return this.ParameterCollectionInstances;
	public extern var CanvasForRenderingToTarget(get, never): cpp.Star<Canvas.ConstCanvas>;
	public inline extern function get_CanvasForRenderingToTarget(): cpp.Star<Canvas.ConstCanvas> return this.CanvasForRenderingToTarget;
	public extern var CanvasForDrawMaterialToRenderTarget(get, never): cpp.Star<Canvas.ConstCanvas>;
	public inline extern function get_CanvasForDrawMaterialToRenderTarget(): cpp.Star<Canvas.ConstCanvas> return this.CanvasForDrawMaterialToRenderTarget;
	public extern var EditorViews(get, never): TArray<LevelViewportInfo>;
	public inline extern function get_EditorViews(): TArray<LevelViewportInfo> return this.EditorViews;
	public extern var PhysicsField(get, never): cpp.Star<PhysicsFieldComp.ConstPhysicsFieldComp>;
	public inline extern function get_PhysicsField(): cpp.Star<PhysicsFieldComp.ConstPhysicsFieldComp> return this.PhysicsField;
	public extern var LWILastAssignedUID(get, never): cpp.UInt32;
	public inline extern function get_LWILastAssignedUID(): cpp.UInt32 return this.LWILastAssignedUID;
	public extern var ComponentsThatNeedPreEndOfFrameSync(get, never): TSet<cpp.Star<ActorComp.ConstActorComp>>;
	public inline extern function get_ComponentsThatNeedPreEndOfFrameSync(): TSet<cpp.Star<ActorComp.ConstActorComp>> return this.ComponentsThatNeedPreEndOfFrameSync;
	public extern var ComponentsThatNeedEndOfFrameUpdate(get, never): TArray<cpp.Star<ActorComp.ConstActorComp>>;
	public inline extern function get_ComponentsThatNeedEndOfFrameUpdate(): TArray<cpp.Star<ActorComp.ConstActorComp>> return this.ComponentsThatNeedEndOfFrameUpdate;
	public extern var ComponentsThatNeedEndOfFrameUpdate_OnGameThread(get, never): TArray<cpp.Star<ActorComp.ConstActorComp>>;
	public inline extern function get_ComponentsThatNeedEndOfFrameUpdate_OnGameThread(): TArray<cpp.Star<ActorComp.ConstActorComp>> return this.ComponentsThatNeedEndOfFrameUpdate_OnGameThread;
	public extern var SelectedLevels(get, never): TArray<cpp.Star<Level.ConstLevel>>;
	public inline extern function get_SelectedLevels(): TArray<cpp.Star<Level.ConstLevel>> return this.SelectedLevels;
	public extern var WorldComposition(get, never): cpp.Star<WorldComposition.ConstWorldComposition>;
	public inline extern function get_WorldComposition(): cpp.Star<WorldComposition.ConstWorldComposition> return this.WorldComposition;
	public extern var PSCPool(get, never): WorldPSCPool;
	public inline extern function get_PSCPool(): WorldPSCPool return this.PSCPool;
}

@:forward
@:nativeGen
@:native("World*")
abstract WorldPtr(cpp.Star<World>) from cpp.Star<World> to cpp.Star<World>{
	@:from
	public static extern inline function fromValue(v: World): WorldPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): World {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}