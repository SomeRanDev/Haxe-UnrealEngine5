// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URadialIntMask")
@:include("Field/FieldSystemObjects.h")
@:structAccess
extern class RadialIntMask extends FieldNodeInt {
	public var Radius: cpp.Float32;
	public var Position: Vector;
	public var InteriorValue: cpp.Int32;
	public var ExteriorValue: cpp.Int32;
	public var SetMaskCondition: ESetMaskConditionType;

	public function SetRadialIntMask(Radius: cpp.Float32, Position: Vector, InteriorValue: cpp.Int32, ExteriorValue: cpp.Int32, SetMaskConditionIn: ESetMaskConditionType): cpp.Reference<cpp.Star<RadialIntMask>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstRadialIntMask(RadialIntMask) from RadialIntMask {
	public extern var Radius(get, never): cpp.Float32;
	public inline extern function get_Radius(): cpp.Float32 return this.Radius;
	public extern var Position(get, never): Vector;
	public inline extern function get_Position(): Vector return this.Position;
	public extern var InteriorValue(get, never): cpp.Int32;
	public inline extern function get_InteriorValue(): cpp.Int32 return this.InteriorValue;
	public extern var ExteriorValue(get, never): cpp.Int32;
	public inline extern function get_ExteriorValue(): cpp.Int32 return this.ExteriorValue;
	public extern var SetMaskCondition(get, never): ESetMaskConditionType;
	public inline extern function get_SetMaskCondition(): ESetMaskConditionType return this.SetMaskCondition;
}

@:forward
@:nativeGen
@:native("RadialIntMask*")
abstract RadialIntMaskPtr(cpp.Star<RadialIntMask>) from cpp.Star<RadialIntMask> to cpp.Star<RadialIntMask>{
	@:from
	public static extern inline function fromValue(v: RadialIntMask): RadialIntMaskPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RadialIntMask {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}