// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGameplayTagsSettings")
@:include("GameplayTagsSettings.h")
@:valueType
extern class GameplayTagsSettings extends GameplayTagsList {
	public var ImportTagsFromConfig: Bool;
	public var WarnOnInvalidTags: Bool;
	public var ClearInvalidTags: Bool;
	public var AllowEditorTagUnloading: Bool;
	public var AllowGameTagUnloading: Bool;
	public var FastReplication: Bool;
	public var InvalidTagCharacters: FString;
	public var CategoryRemapping: TArray<GameplayTagCategoryRemap>;
	public var GameplayTagTableList: TArray<SoftObjectPath>;
	public var GameplayTagRedirects: TArray<GameplayTagRedirect>;
	public var CommonlyReplicatedTags: TArray<FName>;
	public var NumBitsForContainerSize: ucpp.num.Int32;
	public var NetIndexFirstBitSegment: ucpp.num.Int32;
	public var RestrictedConfigFiles: TArray<RestrictedConfigInfo>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstGameplayTagsSettings(GameplayTagsSettings) from GameplayTagsSettings {
	public extern var ImportTagsFromConfig(get, never): Bool;
	public inline extern function get_ImportTagsFromConfig(): Bool return this.ImportTagsFromConfig;
	public extern var WarnOnInvalidTags(get, never): Bool;
	public inline extern function get_WarnOnInvalidTags(): Bool return this.WarnOnInvalidTags;
	public extern var ClearInvalidTags(get, never): Bool;
	public inline extern function get_ClearInvalidTags(): Bool return this.ClearInvalidTags;
	public extern var AllowEditorTagUnloading(get, never): Bool;
	public inline extern function get_AllowEditorTagUnloading(): Bool return this.AllowEditorTagUnloading;
	public extern var AllowGameTagUnloading(get, never): Bool;
	public inline extern function get_AllowGameTagUnloading(): Bool return this.AllowGameTagUnloading;
	public extern var FastReplication(get, never): Bool;
	public inline extern function get_FastReplication(): Bool return this.FastReplication;
	public extern var InvalidTagCharacters(get, never): FString;
	public inline extern function get_InvalidTagCharacters(): FString return this.InvalidTagCharacters;
	public extern var CategoryRemapping(get, never): TArray<GameplayTagCategoryRemap>;
	public inline extern function get_CategoryRemapping(): TArray<GameplayTagCategoryRemap> return this.CategoryRemapping;
	public extern var GameplayTagTableList(get, never): TArray<SoftObjectPath>;
	public inline extern function get_GameplayTagTableList(): TArray<SoftObjectPath> return this.GameplayTagTableList;
	public extern var GameplayTagRedirects(get, never): TArray<GameplayTagRedirect>;
	public inline extern function get_GameplayTagRedirects(): TArray<GameplayTagRedirect> return this.GameplayTagRedirects;
	public extern var CommonlyReplicatedTags(get, never): TArray<FName>;
	public inline extern function get_CommonlyReplicatedTags(): TArray<FName> return this.CommonlyReplicatedTags;
	public extern var NumBitsForContainerSize(get, never): ucpp.num.Int32;
	public inline extern function get_NumBitsForContainerSize(): ucpp.num.Int32 return this.NumBitsForContainerSize;
	public extern var NetIndexFirstBitSegment(get, never): ucpp.num.Int32;
	public inline extern function get_NetIndexFirstBitSegment(): ucpp.num.Int32 return this.NetIndexFirstBitSegment;
	public extern var RestrictedConfigFiles(get, never): TArray<RestrictedConfigInfo>;
	public inline extern function get_RestrictedConfigFiles(): TArray<RestrictedConfigInfo> return this.RestrictedConfigFiles;
}

@:forward
@:nativeGen
@:native("GameplayTagsSettings*")
abstract GameplayTagsSettingsPtr(ucpp.Ptr<GameplayTagsSettings>) from ucpp.Ptr<GameplayTagsSettings> to ucpp.Ptr<GameplayTagsSettings>{
	@:from
	public static extern inline function fromValue(v: GameplayTagsSettings): GameplayTagsSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GameplayTagsSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}