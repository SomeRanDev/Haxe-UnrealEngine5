// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWidgetAnimation")
@:include("Animation/WidgetAnimation.h")
@:structAccess
extern class WidgetAnimation extends MovieSceneSequence {
	public var MovieScene: cpp.Star<MovieScene>;
	public var AnimationBindings: TArray<WidgetAnimationBinding>;
	private var bLegacyFinishOnStop: Bool;
	private var DisplayLabel: FString;

	public function UnbindFromAnimationStarted(Widget: cpp.Star<UserWidget>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function UnbindFromAnimationFinished(Widget: cpp.Star<UserWidget>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function UnbindAllFromAnimationStarted(Widget: cpp.Star<UserWidget>): Void;
	public function UnbindAllFromAnimationFinished(Widget: cpp.Star<UserWidget>): Void;
	public function GetStartTime(): cpp.Float32;
	public function GetEndTime(): cpp.Float32;
	public function BindToAnimationStarted(Widget: cpp.Star<UserWidget>, Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function BindToAnimationFinished(Widget: cpp.Star<UserWidget>, Delegate: HaxeDelegateProperty<() -> Void>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetStartTime, GetEndTime)
@:nativeGen
abstract ConstWidgetAnimation(WidgetAnimation) from WidgetAnimation {
	public extern var MovieScene(get, never): cpp.Star<MovieScene.ConstMovieScene>;
	public inline extern function get_MovieScene(): cpp.Star<MovieScene.ConstMovieScene> return this.MovieScene;
	public extern var AnimationBindings(get, never): TArray<WidgetAnimationBinding>;
	public inline extern function get_AnimationBindings(): TArray<WidgetAnimationBinding> return this.AnimationBindings;
}

@:forward
@:nativeGen
@:native("WidgetAnimation*")
abstract WidgetAnimationPtr(cpp.Star<WidgetAnimation>) from cpp.Star<WidgetAnimation> to cpp.Star<WidgetAnimation>{
	@:from
	public static extern inline function fromValue(v: WidgetAnimation): WidgetAnimationPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): WidgetAnimation {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}