// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPawnSensingComponent")
@:include("Perception/PawnSensingComponent.h")
@:valueType
extern class PawnSensingComp extends ActorComp {
	public var HearingThreshold: ucpp.num.Float32;
	public var LOSHearingThreshold: ucpp.num.Float32;
	public var SightRadius: ucpp.num.Float32;
	public var SensingInterval: ucpp.num.Float32;
	public var HearingMaxSoundAge: ucpp.num.Float32;
	public var bEnableSensingUpdates: Bool;
	public var bOnlySensePlayers: Bool;
	public var bSeePawns: Bool;
	public var bHearNoises: Bool;
	public var OnSeePawn: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn>) -> Void>;
	public var OnHearNoise: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn>, ucpp.Ref<Vector>, ucpp.num.Float32) -> Void>;
	@:protected public var PeripheralVisionAngle: ucpp.num.Float32;
	@:protected public var PeripheralVisionCosine: ucpp.num.Float32;

	public function SetSensingUpdatesEnabled(bEnabled: Bool): Void;
	public function SetSensingInterval(NewSensingInterval: ucpp.num.Float32): Void;
	public function SetPeripheralVisionAngle(NewPeripheralVisionAngle: ucpp.num.Float32): Void;
	public function SeePawnDelegate__DelegateSignature(Pawn: ucpp.Ptr<Pawn>): Void;
	public function HearNoiseDelegate__DelegateSignature(Instigator: ucpp.Ptr<Pawn>, Location: ucpp.Ref<Vector>, Volume: ucpp.num.Float32): Void;
	public function GetPeripheralVisionCosine(): ucpp.num.Float32;
	public function GetPeripheralVisionAngle(): ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetPeripheralVisionCosine, GetPeripheralVisionAngle)
@:nativeGen
abstract ConstPawnSensingComp(PawnSensingComp) from PawnSensingComp {
	public extern var HearingThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_HearingThreshold(): ucpp.num.Float32 return this.HearingThreshold;
	public extern var LOSHearingThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_LOSHearingThreshold(): ucpp.num.Float32 return this.LOSHearingThreshold;
	public extern var SightRadius(get, never): ucpp.num.Float32;
	public inline extern function get_SightRadius(): ucpp.num.Float32 return this.SightRadius;
	public extern var SensingInterval(get, never): ucpp.num.Float32;
	public inline extern function get_SensingInterval(): ucpp.num.Float32 return this.SensingInterval;
	public extern var HearingMaxSoundAge(get, never): ucpp.num.Float32;
	public inline extern function get_HearingMaxSoundAge(): ucpp.num.Float32 return this.HearingMaxSoundAge;
	public extern var bEnableSensingUpdates(get, never): Bool;
	public inline extern function get_bEnableSensingUpdates(): Bool return this.bEnableSensingUpdates;
	public extern var bOnlySensePlayers(get, never): Bool;
	public inline extern function get_bOnlySensePlayers(): Bool return this.bOnlySensePlayers;
	public extern var bSeePawns(get, never): Bool;
	public inline extern function get_bSeePawns(): Bool return this.bSeePawns;
	public extern var bHearNoises(get, never): Bool;
	public inline extern function get_bHearNoises(): Bool return this.bHearNoises;
	public extern var OnSeePawn(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>) -> Void>;
	public inline extern function get_OnSeePawn(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>) -> Void> return this.OnSeePawn;
	public extern var OnHearNoise(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>, ucpp.Ref<Vector>, ucpp.num.Float32) -> Void>;
	public inline extern function get_OnHearNoise(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>, ucpp.Ref<Vector>, ucpp.num.Float32) -> Void> return this.OnHearNoise;
}

@:forward
@:nativeGen
@:native("PawnSensingComp*")
abstract PawnSensingCompPtr(ucpp.Ptr<PawnSensingComp>) from ucpp.Ptr<PawnSensingComp> to ucpp.Ptr<PawnSensingComp>{
	@:from
	public static extern inline function fromValue(v: PawnSensingComp): PawnSensingCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PawnSensingComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}