// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AHUD")
@:include("GameFramework/HUD.h")
extern class AHUD extends AActor {
	public var PlayerOwner: TObjectPtr<APlayerController>;
	public var bLostFocusPaused: Bool;
	public var bShowHUD: Bool;
	public var bShowDebugInfo: Bool;
	public var CurrentTargetIndex: cpp.Int32;
	public var bShowHitBoxDebugInfo: Bool;
	public var bShowOverlays: Bool;
	public var bEnableDebugTextShadow: Bool;
	public var PostRenderedActors: TArray<TObjectPtr<AActor>>;
	public var DebugDisplay: TArray<FName>;
	public var ToggledDebugCategories: TArray<FName>;
	public var Canvas: TObjectPtr<UCanvas>;
	public var DebugCanvas: TObjectPtr<UCanvas>;
	public var DebugTextList: TArray<FDebugTextInfo>;
	public var ShowDebugTargetDesiredClass: TSubclassOf<AActor>;
	public var ShowDebugTargetActor: TObjectPtr<AActor>;

	public function ShowHUD(): Void;
	public function ShowDebugToggleSubCategory(Category: FName): Void;
	public function ShowDebugForReticleTargetToggle(DesiredClass: TSubclassOf<AActor>): Void;
	public function ShowDebug(DebugType: FName): Void;
	public function RemoveDebugText(SrcActor: cpp.Star<AActor>, bLeaveDurationText: Bool): Void;
	public function RemoveAllDebugStrings(): Void;
	public function ReceiveHitBoxRelease(BoxName: FName): Void;
	public function ReceiveHitBoxEndCursorOver(BoxName: FName): Void;
	public function ReceiveHitBoxClick(BoxName: FName): Void;
	public function ReceiveHitBoxBeginCursorOver(BoxName: FName): Void;
	public function ReceiveDrawHUD(SizeX: cpp.Int32, SizeY: cpp.Int32): Void;
	public function Project(Location: FVector, bClampToZeroPlane: Bool): FVector;
	public function PreviousDebugTarget(): Void;
	public function NextDebugTarget(): Void;
	public function GetTextSize(Text: FString, OutWidth: cpp.Reference<cpp.Float32>, OutHeight: cpp.Reference<cpp.Float32>, Font: cpp.Star<UFont>, Scale: cpp.Float32): Void;
	public function GetOwningPlayerController(): cpp.Star<APlayerController>;
	public function GetOwningPawn(): cpp.Star<APawn>;
	public function GetActorsInSelectionRectangle(ClassFilter: TSubclassOf<AActor>, FirstPoint: FVector2D, SecondPoint: FVector2D, OutActors: TArray<cpp.Star<AActor>>, bIncludeNonCollidingComponents: Bool, bActorMustBeFullyEnclosed: Bool): Void;
	public function DrawTextureSimple(Texture: cpp.Star<UTexture>, ScreenX: cpp.Float32, ScreenY: cpp.Float32, Scale: cpp.Float32, bScalePosition: Bool): Void;
	public function DrawTexture(Texture: cpp.Star<UTexture>, ScreenX: cpp.Float32, ScreenY: cpp.Float32, ScreenW: cpp.Float32, ScreenH: cpp.Float32, TextureU: cpp.Float32, TextureV: cpp.Float32, TextureUWidth: cpp.Float32, TextureVHeight: cpp.Float32, TintColor: FLinearColor, BlendMode: EBlendMode, Scale: cpp.Float32, bScalePosition: Bool, Rotation: cpp.Float32, RotPivot: FVector2D): Void;
	public function DrawText(Text: FString, TextColor: FLinearColor, ScreenX: cpp.Float32, ScreenY: cpp.Float32, Font: cpp.Star<UFont>, Scale: cpp.Float32, bScalePosition: Bool): Void;
	public function DrawRect(RectColor: FLinearColor, ScreenX: cpp.Float32, ScreenY: cpp.Float32, ScreenW: cpp.Float32, ScreenH: cpp.Float32): Void;
	public function DrawMaterialTriangle(Material: cpp.Star<UMaterialInterface>, V0_Pos: FVector2D, V1_Pos: FVector2D, V2_Pos: FVector2D, V0_UV: FVector2D, V1_UV: FVector2D, V2_UV: FVector2D, V0_Color: FLinearColor, V1_Color: FLinearColor, V2_Color: FLinearColor): Void;
	public function DrawMaterialSimple(Material: cpp.Star<UMaterialInterface>, ScreenX: cpp.Float32, ScreenY: cpp.Float32, ScreenW: cpp.Float32, ScreenH: cpp.Float32, Scale: cpp.Float32, bScalePosition: Bool): Void;
	public function DrawMaterial(Material: cpp.Star<UMaterialInterface>, ScreenX: cpp.Float32, ScreenY: cpp.Float32, ScreenW: cpp.Float32, ScreenH: cpp.Float32, MaterialU: cpp.Float32, MaterialV: cpp.Float32, MaterialUWidth: cpp.Float32, MaterialVHeight: cpp.Float32, Scale: cpp.Float32, bScalePosition: Bool, Rotation: cpp.Float32, RotPivot: FVector2D): Void;
	public function DrawLine(StartScreenX: cpp.Float32, StartScreenY: cpp.Float32, EndScreenX: cpp.Float32, EndScreenY: cpp.Float32, LineColor: FLinearColor, LineThickness: cpp.Float32): Void;
	public function Deproject(ScreenX: cpp.Float32, ScreenY: cpp.Float32, WorldPosition: FVector, WorldDirection: FVector): Void;
	public function AddHitBox(Position: FVector2D, Size: FVector2D, InName: FName, bConsumesInput: Bool, Priority: cpp.Int32): Void;
	public function AddDebugText(DebugText: FString, SrcActor: cpp.Star<AActor>, Duration: cpp.Float32, Offset: FVector, DesiredOffset: FVector, TextColor: FColor, bSkipOverwriteCheck: Bool, bAbsoluteLocation: Bool, bKeepAttachedToActor: Bool, InFont: cpp.Star<UFont>, FontScale: cpp.Float32, bDrawShadow: Bool): Void;
}
