// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UComboBoxString")
@:include("Components/ComboBoxString.h")
@:structAccess
extern class ComboBoxString extends Widget {
	private var DefaultOptions: TArray<FString>;
	private var SelectedOption: FString;
	public var WidgetStyle: ComboBoxStyle;
	public var ItemStyle: TableRowStyle;
	public var ContentPadding: Margin;
	public var MaxListHeight: cpp.Float32;
	public var HasDownArrow: Bool;
	public var EnableGamepadNavigationMode: Bool;
	public var Font: SlateFontInfo;
	public var ForegroundColor: SlateColor;
	public var bIsFocusable: Bool;
	public var OnGenerateWidgetEvent: HaxeDelegateProperty<(FString) -> Void>;
	public var OnSelectionChanged: HaxeMulticastSparseDelegateProperty<(FString, TEnumAsByte<ESelectInfo>) -> Void>;
	public var OnOpening: HaxeMulticastSparseDelegateProperty<() -> Void>;

	public function SetSelectedOption(Option: FString): Void;
	public function SetSelectedIndex(Index: cpp.Int32): Void;
	public function RemoveOption(Option: FString): Bool;
	public function RefreshOptions(): Void;
	public function OnSelectionChangedEvent__DelegateSignature(SelectedItem: FString, SelectionType: TEnumAsByte<ESelectInfo>): Void;
	public function OnOpeningEvent__DelegateSignature(): Void;
	public function IsOpen(): Bool;
	public function GetSelectedOption(): FString;
	public function GetSelectedIndex(): cpp.Int32;
	public function GetOptionCount(): cpp.Int32;
	public function GetOptionAtIndex(Index: cpp.Int32): FString;
	public function FindOptionIndex(Option: FString): cpp.Int32;
	public function ClearSelection(): Void;
	public function ClearOptions(): Void;
	public function AddOption(Option: FString): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsOpen, GetSelectedOption, GetSelectedIndex, GetOptionCount, GetOptionAtIndex, FindOptionIndex)
@:nativeGen
abstract ConstComboBoxString(ComboBoxString) from ComboBoxString {
	public extern var WidgetStyle(get, never): ComboBoxStyle;
	public inline extern function get_WidgetStyle(): ComboBoxStyle return this.WidgetStyle;
	public extern var ItemStyle(get, never): TableRowStyle;
	public inline extern function get_ItemStyle(): TableRowStyle return this.ItemStyle;
	public extern var ContentPadding(get, never): Margin;
	public inline extern function get_ContentPadding(): Margin return this.ContentPadding;
	public extern var MaxListHeight(get, never): cpp.Float32;
	public inline extern function get_MaxListHeight(): cpp.Float32 return this.MaxListHeight;
	public extern var HasDownArrow(get, never): Bool;
	public inline extern function get_HasDownArrow(): Bool return this.HasDownArrow;
	public extern var EnableGamepadNavigationMode(get, never): Bool;
	public inline extern function get_EnableGamepadNavigationMode(): Bool return this.EnableGamepadNavigationMode;
	public extern var Font(get, never): SlateFontInfo;
	public inline extern function get_Font(): SlateFontInfo return this.Font;
	public extern var ForegroundColor(get, never): SlateColor;
	public inline extern function get_ForegroundColor(): SlateColor return this.ForegroundColor;
	public extern var bIsFocusable(get, never): Bool;
	public inline extern function get_bIsFocusable(): Bool return this.bIsFocusable;
	public extern var OnGenerateWidgetEvent(get, never): HaxeDelegateProperty<(FString) -> Void>;
	public inline extern function get_OnGenerateWidgetEvent(): HaxeDelegateProperty<(FString) -> Void> return this.OnGenerateWidgetEvent;
	public extern var OnSelectionChanged(get, never): HaxeMulticastSparseDelegateProperty<(FString, TEnumAsByte<ESelectInfo>) -> Void>;
	public inline extern function get_OnSelectionChanged(): HaxeMulticastSparseDelegateProperty<(FString, TEnumAsByte<ESelectInfo>) -> Void> return this.OnSelectionChanged;
	public extern var OnOpening(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnOpening(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnOpening;
}

@:forward
@:nativeGen
@:native("ComboBoxString*")
abstract ComboBoxStringPtr(cpp.Star<ComboBoxString>) from cpp.Star<ComboBoxString> to cpp.Star<ComboBoxString>{
	@:from
	public static extern inline function fromValue(v: ComboBoxString): ComboBoxStringPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ComboBoxString {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}