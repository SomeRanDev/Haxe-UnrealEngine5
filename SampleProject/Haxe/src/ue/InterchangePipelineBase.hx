// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangePipelineBase")
@:include("InterchangePipelineBase.h")
@:valueType
extern class InterchangePipelineBase extends Object {
	@:protected public var Results: ucpp.Ptr<InterchangeResultsContainer>;
	@:protected public var PropertiesStates: TMap<FName, InterchangePipelinePropertyStates>;

	public function ScriptedSetReimportSourceIndex(ReimportObjectClass: ucpp.Ptr<Class>, SourceFileIndex: ucpp.num.Int32): Void;
	public function ScriptedExecutePreImportPipeline(BaseNodeContainer: ucpp.Ptr<InterchangeBaseNodeContainer>, SourceDatas: ucpp.Ref<TArray<ucpp.Ptr<InterchangeSourceData>>>): Void;
	public function ScriptedExecutePostImportPipeline(BaseNodeContainer: ucpp.Ptr<InterchangeBaseNodeContainer.ConstInterchangeBaseNodeContainer>, FactoryNodeKey: FString, CreatedAsset: ucpp.Ptr<Object>, bIsAReimport: Bool): Void;
	public function ScriptedExecutePostFactoryPipeline(BaseNodeContainer: ucpp.Ptr<InterchangeBaseNodeContainer.ConstInterchangeBaseNodeContainer>, FactoryNodeKey: FString, CreatedAsset: ucpp.Ptr<Object>, bIsAReimport: Bool): Void;
	public function ScriptedExecutePipeline(BaseNodeContainer: ucpp.Ptr<InterchangeBaseNodeContainer>, SourceDatas: ucpp.Ref<TArray<ucpp.Ptr<InterchangeSourceData>>>): Void;
	public function ScriptedExecuteExportPipeline(BaseNodeContainer: ucpp.Ptr<InterchangeBaseNodeContainer>): Void;
	public function ScriptedCanExecuteOnAnyThread(PipelineTask: EInterchangePipelineTask): Bool;
	public function FindOrAddPropertyStates(PropertyPath: FName): InterchangePipelinePropertyStates;
	public function DoesPropertyStatesExist(PropertyPath: FName): Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(DoesPropertyStatesExist)
@:nativeGen
abstract ConstInterchangePipelineBase(InterchangePipelineBase) from InterchangePipelineBase {
}

@:forward
@:nativeGen
@:native("InterchangePipelineBase*")
abstract InterchangePipelineBasePtr(ucpp.Ptr<InterchangePipelineBase>) from ucpp.Ptr<InterchangePipelineBase> to ucpp.Ptr<InterchangePipelineBase>{
	@:from
	public static extern inline function fromValue(v: InterchangePipelineBase): InterchangePipelineBasePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangePipelineBase {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}