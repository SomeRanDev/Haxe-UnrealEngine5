// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetMathLibrary")
@:include("Kismet/KismetMathLibrary.h")
@:valueType
extern class KismetMathLibrary extends BlueprintFunctionLibrary {
	public function Xor_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function Xor_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Wrap(Value: ucpp.num.Int32, Min: ucpp.num.Int32, Max: ucpp.num.Int32): ucpp.num.Int32;
	public function WeightedMovingAverage_FVector(CurrentSample: Vector, PreviousSample: Vector, Weight: ucpp.num.Float32): Vector;
	public function WeightedMovingAverage_FRotator(CurrentSample: Rotator, PreviousSample: Rotator, Weight: ucpp.num.Float32): Rotator;
	public function WeightedMovingAverage_Float(CurrentSample: ucpp.num.Float32, PreviousSample: ucpp.num.Float32, Weight: ucpp.num.Float32): ucpp.num.Float32;
	public function VSizeXYSquared(A: Vector): ucpp.num.Float64;
	public function VSizeXY(A: Vector): ucpp.num.Float64;
	public function VSizeSquared(A: Vector): ucpp.num.Float64;
	public function VSize2DSquared(A: Vector2D): ucpp.num.Float64;
	public function VSize2D(A: Vector2D): ucpp.num.Float64;
	public function VSize(A: Vector): ucpp.num.Float64;
	public function VLerp(A: Vector, B: Vector, Alpha: ucpp.num.Float32): Vector;
	public function VInterpTo_Constant(Current: Vector, Target: Vector, DeltaTime: ucpp.num.Float32, InterpSpeed: ucpp.num.Float32): Vector;
	public function VInterpTo(Current: Vector, Target: Vector, DeltaTime: ucpp.num.Float32, InterpSpeed: ucpp.num.Float32): Vector;
	public function VectorSpringInterp(Current: Vector, Target: Vector, SpringState: ucpp.Ref<VectorSpringState>, Stiffness: ucpp.num.Float32, CriticalDampingFactor: ucpp.num.Float32, DeltaTime: ucpp.num.Float32, Mass: ucpp.num.Float32, TargetVelocityAmount: ucpp.num.Float32, bClamp: Bool, MinValue: Vector, MaxValue: Vector, bInitializeFromTarget: Bool): Vector;
	public function Vector_Zero(): Vector;
	public function Vector_Up(): Vector;
	public function Vector_UnwindEuler(A: ucpp.Ref<Vector>): Void;
	public function Vector_UnitCartesianToSpherical(A: Vector): Vector2D;
	public function Vector_ToRadians(A: Vector): Vector;
	public function Vector_ToDegrees(A: Vector): Vector;
	public function Vector_SnappedToGrid(InVect: Vector, InGridSize: ucpp.num.Float32): Vector;
	public function Vector_SlerpVectorToDirection(Vector: Vector, Direction: Vector, Alpha: ucpp.num.Float64): Vector;
	public function Vector_SlerpNormals(NormalA: Vector, NormalB: Vector, Alpha: ucpp.num.Float64): Vector;
	public function Vector_Set(A: ucpp.Ref<Vector>, X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64): Void;
	public function Vector_Right(): Vector;
	public function Vector_Reciprocal(A: ucpp.Ref<Vector>): Vector;
	public function Vector_ProjectOnToNormal(V: Vector, InNormal: Vector): Vector;
	public function Vector_One(): Vector;
	public function Vector_NormalUnsafe(A: ucpp.Ref<Vector>): Vector;
	public function Vector_Normalize(A: ucpp.Ref<Vector>, Tolerance: ucpp.num.Float32): Void;
	public function Vector_Normal2D(A: Vector, Tolerance: ucpp.num.Float32): Vector;
	public function Vector_MirrorByPlane(A: Vector, InPlane: ucpp.Ref<Plane>): Vector;
	public function Vector_Left(): Vector;
	public function Vector_IsZero(A: ucpp.Ref<Vector>): Bool;
	public function Vector_IsUnit(A: ucpp.Ref<Vector>, SquaredLenthTolerance: ucpp.num.Float32): Bool;
	public function Vector_IsUniform(A: ucpp.Ref<Vector>, Tolerance: ucpp.num.Float32): Bool;
	public function Vector_IsNormal(A: ucpp.Ref<Vector>): Bool;
	public function Vector_IsNearlyZero(A: ucpp.Ref<Vector>, Tolerance: ucpp.num.Float32): Bool;
	public function Vector_IsNAN(A: ucpp.Ref<Vector>): Bool;
	public function Vector_HeadingAngle(A: Vector): ucpp.num.Float64;
	public function Vector_GetSignVector(A: Vector): Vector;
	public function Vector_GetProjection(A: Vector): Vector;
	public function Vector_GetAbsMin(A: Vector): ucpp.num.Float64;
	public function Vector_GetAbsMax(A: Vector): ucpp.num.Float64;
	public function Vector_GetAbs(A: Vector): Vector;
	public function Vector_Forward(): Vector;
	public function Vector_Down(): Vector;
	public function Vector_DistanceSquared(V1: Vector, V2: Vector): ucpp.num.Float64;
	public function Vector_Distance2DSquared(V1: Vector, V2: Vector): ucpp.num.Float64;
	public function Vector_Distance2D(V1: Vector, V2: Vector): ucpp.num.Float64;
	public function Vector_Distance(V1: Vector, V2: Vector): ucpp.num.Float64;
	public function Vector_CosineAngle2D(A: Vector, B: Vector): ucpp.num.Float64;
	public function Vector_ComponentMin(A: Vector, B: Vector): Vector;
	public function Vector_ComponentMax(A: Vector, B: Vector): Vector;
	public function Vector_ClampSizeMax2D(A: Vector, Max: ucpp.num.Float64): Vector;
	public function Vector_ClampSizeMax(A: Vector, Max: ucpp.num.Float64): Vector;
	public function Vector_ClampSize2D(A: Vector, Min: ucpp.num.Float64, Max: ucpp.num.Float64): Vector;
	public function Vector_BoundedToCube(InVect: Vector, InRadius: ucpp.num.Float32): Vector;
	public function Vector_BoundedToBox(InVect: Vector, InBoxMin: Vector, InBoxMax: Vector): Vector;
	public function Vector_Backward(): Vector;
	public function Vector_Assign(A: ucpp.Ref<Vector>, InVector: ucpp.Ref<Vector>): Void;
	public function Vector_AddBounded(A: ucpp.Ref<Vector>, InAddVect: Vector, InRadius: ucpp.num.Float32): Void;
	public function Vector4_Zero(): Vector4;
	public function Vector4_SizeSquared3(A: ucpp.Ref<Vector4>): ucpp.num.Float64;
	public function Vector4_SizeSquared(A: ucpp.Ref<Vector4>): ucpp.num.Float64;
	public function Vector4_Size3(A: ucpp.Ref<Vector4>): ucpp.num.Float64;
	public function Vector4_Size(A: ucpp.Ref<Vector4>): ucpp.num.Float64;
	public function Vector4_Set(A: ucpp.Ref<Vector4>, X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64, W: ucpp.num.Float64): Void;
	public function Vector4_NormalUnsafe3(A: ucpp.Ref<Vector4>): Vector4;
	public function Vector4_Normalize3(A: ucpp.Ref<Vector4>, Tolerance: ucpp.num.Float32): Void;
	public function Vector4_Normal3(A: ucpp.Ref<Vector4>, Tolerance: ucpp.num.Float32): Vector4;
	public function Vector4_Negated(A: ucpp.Ref<Vector4>): Vector4;
	public function Vector4_MirrorByVector3(Direction: ucpp.Ref<Vector4>, SurfaceNormal: ucpp.Ref<Vector4>): Vector4;
	public function Vector4_IsZero(A: ucpp.Ref<Vector4>): Bool;
	public function Vector4_IsUnit3(A: ucpp.Ref<Vector4>, SquaredLenthTolerance: ucpp.num.Float32): Bool;
	public function Vector4_IsNormal3(A: ucpp.Ref<Vector4>): Bool;
	public function Vector4_IsNearlyZero3(A: ucpp.Ref<Vector4>, Tolerance: ucpp.num.Float32): Bool;
	public function Vector4_IsNAN(A: ucpp.Ref<Vector4>): Bool;
	public function Vector4_DotProduct3(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): ucpp.num.Float64;
	public function Vector4_DotProduct(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): ucpp.num.Float64;
	public function Vector4_CrossProduct3(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): Vector4;
	public function Vector4_Assign(A: ucpp.Ref<Vector4>, InVector: ucpp.Ref<Vector4>): Void;
	public function Vector2DInterpTo_Constant(Current: Vector2D, Target: Vector2D, DeltaTime: ucpp.num.Float32, InterpSpeed: ucpp.num.Float32): Vector2D;
	public function Vector2DInterpTo(Current: Vector2D, Target: Vector2D, DeltaTime: ucpp.num.Float32, InterpSpeed: ucpp.num.Float32): Vector2D;
	public function Vector2D_Zero(): Vector2D;
	public function Vector2D_Unit45Deg(): Vector2D;
	public function Vector2D_One(): Vector2D;
	public function VEase(A: Vector, B: Vector, Alpha: ucpp.num.Float32, EasingFunc: TEnumAsByte<EEasingFunc>, BlendExp: ucpp.num.Float32, Steps: ucpp.num.Int32): Vector;
	public function UtcNow(): DateTime;
	public function TransformVector4(Matrix: ucpp.Ref<Matrix>, Vec4: ucpp.Ref<Vector4>): Vector4;
	public function TransformRotation(T: ucpp.Ref<Transform>, Rotation: Rotator): Rotator;
	public function TransformLocation(T: ucpp.Ref<Transform>, Location: Vector): Vector;
	public function TransformDirection(T: ucpp.Ref<Transform>, Direction: Vector): Vector;
	public function Transform_Determinant(Transform: ucpp.Ref<Transform>): ucpp.num.Float32;
	public function ToSign2D(A: Vector2D): Vector2D;
	public function ToRounded2D(A: Vector2D): Vector2D;
	public function ToDirectionAndLength2D(A: Vector2D, OutDir: ucpp.Ref<Vector2D>, OutLength: ucpp.Ref<ucpp.num.Float64>): Void;
	public function Today(): DateTime;
	public function TLerp(A: ucpp.Ref<Transform>, B: ucpp.Ref<Transform>, Alpha: ucpp.num.Float32, InterpMode: TEnumAsByte<ELerpInterpolationMode>): Transform;
	public function TInterpTo(Current: ucpp.Ref<Transform>, Target: ucpp.Ref<Transform>, DeltaTime: ucpp.num.Float32, InterpSpeed: ucpp.num.Float32): Transform;
	public function TimespanZeroValue(): Timespan;
	public function TimespanRatio(A: Timespan, B: Timespan): ucpp.num.Float32;
	public function TimespanMinValue(): Timespan;
	public function TimespanMaxValue(): Timespan;
	public function TimespanFromString(TimespanString: FString, Result: ucpp.Ref<Timespan>): Bool;
	public function TEase(A: ucpp.Ref<Transform>, B: ucpp.Ref<Transform>, Alpha: ucpp.num.Float32, EasingFunc: TEnumAsByte<EEasingFunc>, BlendExp: ucpp.num.Float32, Steps: ucpp.num.Int32): Transform;
	public function Tan(A: ucpp.num.Float64): ucpp.num.Float64;
	public function Subtract_VectorVector(A: Vector, B: Vector): Vector;
	public function Subtract_VectorInt(A: Vector, B: ucpp.num.Int32): Vector;
	public function Subtract_VectorFloat(A: Vector, B: ucpp.num.Float64): Vector;
	public function Subtract_Vector4Vector4(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): Vector4;
	public function Subtract_Vector2DVector2D(A: Vector2D, B: Vector2D): Vector2D;
	public function Subtract_Vector2DFloat(A: Vector2D, B: ucpp.num.Float64): Vector2D;
	public function Subtract_TimespanTimespan(A: Timespan, B: Timespan): Timespan;
	public function Subtract_QuatQuat(A: ucpp.Ref<Quat>, B: ucpp.Ref<Quat>): Quat;
	public function Subtract_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor;
	public function Subtract_IntPointIntPoint(A: IntPoint, B: IntPoint): IntPoint;
	public function Subtract_IntPointInt(A: IntPoint, B: ucpp.num.Int32): IntPoint;
	public function Subtract_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function Subtract_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Subtract_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): ucpp.num.Float64;
	public function Subtract_DateTimeTimespan(A: DateTime, B: Timespan): DateTime;
	public function Subtract_DateTimeDateTime(A: DateTime, B: DateTime): Timespan;
	public function Subtract_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): ucpp.num.UInt8;
	public function Square(A: ucpp.num.Float64): ucpp.num.Float64;
	public function Sqrt(A: ucpp.num.Float64): ucpp.num.Float64;
	public function Spherical2DToUnitCartesian(A: Vector2D): Vector;
	public function Sin(A: ucpp.num.Float64): ucpp.num.Float64;
	public function SignOfInteger64(A: ucpp.num.Int64): ucpp.num.Int64;
	public function SignOfInteger(A: ucpp.num.Int32): ucpp.num.Int32;
	public function SignOfFloat(A: ucpp.num.Float64): ucpp.num.Float64;
	public function SetVectorSpringStateVelocity(SpringState: ucpp.Ref<VectorSpringState>, Velocity: Vector): Void;
	public function SetRandomStreamSeed(Stream: ucpp.Ref<RandomStream>, NewSeed: ucpp.num.Int32): Void;
	public function SetQuaternionSpringStateAngularVelocity(SpringState: ucpp.Ref<QuaternionSpringState>, AngularVelocity: Vector): Void;
	public function SetFloatSpringStateVelocity(SpringState: ucpp.Ref<FloatSpringState>, Velocity: ucpp.num.Float32): Void;
	public function Set2D(A: ucpp.Ref<Vector2D>, X: ucpp.num.Float64, Y: ucpp.num.Float64): Void;
	public function SelectVector(A: Vector, B: Vector, bPickA: Bool): Vector;
	public function SelectTransform(A: ucpp.Ref<Transform>, B: ucpp.Ref<Transform>, bPickA: Bool): Transform;
	public function SelectString(A: FString, B: FString, bPickA: Bool): FString;
	public function SelectRotator(A: Rotator, B: Rotator, bPickA: Bool): Rotator;
	public function SelectObject(A: ucpp.Ptr<Object>, B: ucpp.Ptr<Object>, bSelectA: Bool): ucpp.Ptr<Object>;
	public function SelectInt(A: ucpp.num.Int32, B: ucpp.num.Int32, bPickA: Bool): ucpp.num.Int32;
	public function SelectFloat(A: ucpp.num.Float64, B: ucpp.num.Float64, bPickA: Bool): ucpp.num.Float64;
	public function SelectColor(A: LinearColor, B: LinearColor, bPickA: Bool): LinearColor;
	public function SelectClass(A: ucpp.Ptr<Class>, B: ucpp.Ptr<Class>, bSelectA: Bool): ucpp.Ptr<Class>;
	public function SeedRandomStream(Stream: ucpp.Ref<RandomStream>): Void;
	public function SafeDivide(A: ucpp.num.Float64, B: ucpp.num.Float64): ucpp.num.Float64;
	public function Round64(A: ucpp.num.Float64): ucpp.num.Int64;
	public function Round(A: ucpp.num.Float64): ucpp.num.Int32;
	public function RotatorFromAxisAndAngle(Axis: Vector, Angle: ucpp.num.Float32): Rotator;
	public function RotateAngleAxis(InVect: Vector, AngleDeg: ucpp.num.Float32, Axis: Vector): Vector;
	public function RLerp(A: Rotator, B: Rotator, Alpha: ucpp.num.Float32, bShortestPath: Bool): Rotator;
	public function RInterpTo_Constant(Current: Rotator, Target: Rotator, DeltaTime: ucpp.num.Float32, InterpSpeed: ucpp.num.Float32): Rotator;
	public function RInterpTo(Current: Rotator, Target: Rotator, DeltaTime: ucpp.num.Float32, InterpSpeed: ucpp.num.Float32): Rotator;
	public function RGBToHSV_Vector(RGB: LinearColor, HSV: ucpp.Ref<LinearColor>): Void;
	public function RGBToHSV(InColor: LinearColor, H: ucpp.Ref<ucpp.num.Float32>, S: ucpp.Ref<ucpp.num.Float32>, V: ucpp.Ref<ucpp.num.Float32>, A: ucpp.Ref<ucpp.num.Float32>): Void;
	public function RGBLinearToHSV(RGB: LinearColor): LinearColor;
	public function ResetVectorSpringState(SpringState: ucpp.Ref<VectorSpringState>): Void;
	public function ResetRandomStream(Stream: ucpp.Ref<RandomStream>): Void;
	public function ResetQuaternionSpringState(SpringState: ucpp.Ref<QuaternionSpringState>): Void;
	public function ResetFloatSpringState(SpringState: ucpp.Ref<FloatSpringState>): Void;
	public function REase(A: Rotator, B: Rotator, Alpha: ucpp.num.Float32, bShortestPath: Bool, EasingFunc: TEnumAsByte<EEasingFunc>, BlendExp: ucpp.num.Float32, Steps: ucpp.num.Int32): Rotator;
	public function RandomUnitVectorInEllipticalConeInRadiansFromStream(Stream: ucpp.Ref<RandomStream>, ConeDir: ucpp.Ref<Vector>, MaxYawInRadians: ucpp.num.Float32, MaxPitchInRadians: ucpp.num.Float32): Vector;
	public function RandomUnitVectorInEllipticalConeInRadians(ConeDir: Vector, MaxYawInRadians: ucpp.num.Float32, MaxPitchInRadians: ucpp.num.Float32): Vector;
	public function RandomUnitVectorInEllipticalConeInDegreesFromStream(Stream: ucpp.Ref<RandomStream>, ConeDir: ucpp.Ref<Vector>, MaxYawInDegrees: ucpp.num.Float32, MaxPitchInDegrees: ucpp.num.Float32): Vector;
	public function RandomUnitVectorInEllipticalConeInDegrees(ConeDir: Vector, MaxYawInDegrees: ucpp.num.Float32, MaxPitchInDegrees: ucpp.num.Float32): Vector;
	public function RandomUnitVectorInConeInRadiansFromStream(Stream: ucpp.Ref<RandomStream>, ConeDir: ucpp.Ref<Vector>, ConeHalfAngleInRadians: ucpp.num.Float32): Vector;
	public function RandomUnitVectorInConeInRadians(ConeDir: Vector, ConeHalfAngleInRadians: ucpp.num.Float32): Vector;
	public function RandomUnitVectorInConeInDegreesFromStream(Stream: ucpp.Ref<RandomStream>, ConeDir: ucpp.Ref<Vector>, ConeHalfAngleInDegrees: ucpp.num.Float32): Vector;
	public function RandomUnitVectorInConeInDegrees(ConeDir: Vector, ConeHalfAngleInDegrees: ucpp.num.Float32): Vector;
	public function RandomUnitVectorFromStream(Stream: ucpp.Ref<RandomStream>): Vector;
	public function RandomUnitVector(): Vector;
	public function RandomRotatorFromStream(Stream: ucpp.Ref<RandomStream>, bRoll: Bool): Rotator;
	public function RandomRotator(bRoll: Bool): Rotator;
	public function RandomPointInBoundingBoxFromStream_Box(Stream: ucpp.Ref<RandomStream>, Box: Box): Vector;
	public function RandomPointInBoundingBoxFromStream(Stream: ucpp.Ref<RandomStream>, Center: Vector, HalfSize: Vector): Vector;
	public function RandomPointInBoundingBox_Box(Box: Box): Vector;
	public function RandomPointInBoundingBox(Center: Vector, HalfSize: Vector): Vector;
	public function RandomIntegerInRangeFromStream(Stream: ucpp.Ref<RandomStream>, Min: ucpp.num.Int32, Max: ucpp.num.Int32): ucpp.num.Int32;
	public function RandomIntegerInRange(Min: ucpp.num.Int32, Max: ucpp.num.Int32): ucpp.num.Int32;
	public function RandomIntegerFromStream(Stream: ucpp.Ref<RandomStream>, Max: ucpp.num.Int32): ucpp.num.Int32;
	public function RandomInteger64InRange(Min: ucpp.num.Int64, Max: ucpp.num.Int64): ucpp.num.Int64;
	public function RandomInteger64(Max: ucpp.num.Int64): ucpp.num.Int64;
	public function RandomInteger(Max: ucpp.num.Int32): ucpp.num.Int32;
	public function RandomFloatInRangeFromStream(Stream: ucpp.Ref<RandomStream>, Min: ucpp.num.Float32, Max: ucpp.num.Float32): ucpp.num.Float32;
	public function RandomFloatInRange(Min: ucpp.num.Float64, Max: ucpp.num.Float64): ucpp.num.Float64;
	public function RandomFloatFromStream(Stream: ucpp.Ref<RandomStream>): ucpp.num.Float32;
	public function RandomFloat(): ucpp.num.Float64;
	public function RandomBoolWithWeightFromStream(RandomStream: ucpp.Ref<RandomStream>, Weight: ucpp.num.Float32): Bool;
	public function RandomBoolWithWeight(Weight: ucpp.num.Float32): Bool;
	public function RandomBoolFromStream(Stream: ucpp.Ref<RandomStream>): Bool;
	public function RandomBool(): Bool;
	public function RadiansToDegrees(A: ucpp.num.Float64): ucpp.num.Float64;
	public function QuaternionSpringInterp(Current: Quat, Target: Quat, SpringState: ucpp.Ref<QuaternionSpringState>, Stiffness: ucpp.num.Float32, CriticalDampingFactor: ucpp.num.Float32, DeltaTime: ucpp.num.Float32, Mass: ucpp.num.Float32, TargetVelocityAmount: ucpp.num.Float32, bInitializeFromTarget: Bool): Quat;
	public function Quat_VectorUp(Q: ucpp.Ref<Quat>): Vector;
	public function Quat_VectorRight(Q: ucpp.Ref<Quat>): Vector;
	public function Quat_VectorForward(Q: ucpp.Ref<Quat>): Vector;
	public function Quat_UnrotateVector(Q: ucpp.Ref<Quat>, V: ucpp.Ref<Vector>): Vector;
	public function Quat_Slerp(A: ucpp.Ref<Quat>, B: ucpp.Ref<Quat>, Alpha: ucpp.num.Float64): Quat;
	public function Quat_SizeSquared(Q: ucpp.Ref<Quat>): ucpp.num.Float32;
	public function Quat_Size(Q: ucpp.Ref<Quat>): ucpp.num.Float32;
	public function Quat_SetFromEuler(Q: ucpp.Ref<Quat>, Euler: ucpp.Ref<Vector>): Void;
	public function Quat_SetComponents(Q: ucpp.Ref<Quat>, X: ucpp.num.Float32, Y: ucpp.num.Float32, Z: ucpp.num.Float32, W: ucpp.num.Float32): Void;
	public function Quat_Rotator(Q: ucpp.Ref<Quat>): Rotator;
	public function Quat_RotateVector(Q: ucpp.Ref<Quat>, V: ucpp.Ref<Vector>): Vector;
	public function Quat_Normalized(Q: ucpp.Ref<Quat>, Tolerance: ucpp.num.Float32): Quat;
	public function Quat_Normalize(Q: ucpp.Ref<Quat>, Tolerance: ucpp.num.Float32): Void;
	public function Quat_MakeFromEuler(Euler: ucpp.Ref<Vector>): Quat;
	public function Quat_Log(Q: ucpp.Ref<Quat>): Quat;
	public function Quat_IsNormalized(Q: ucpp.Ref<Quat>): Bool;
	public function Quat_IsNonFinite(Q: ucpp.Ref<Quat>): Bool;
	public function Quat_IsIdentity(Q: ucpp.Ref<Quat>, Tolerance: ucpp.num.Float32): Bool;
	public function Quat_IsFinite(Q: ucpp.Ref<Quat>): Bool;
	public function Quat_Inversed(Q: ucpp.Ref<Quat>): Quat;
	public function Quat_Identity(): Quat;
	public function Quat_GetRotationAxis(Q: ucpp.Ref<Quat>): Vector;
	public function Quat_GetAxisZ(Q: ucpp.Ref<Quat>): Vector;
	public function Quat_GetAxisY(Q: ucpp.Ref<Quat>): Vector;
	public function Quat_GetAxisX(Q: ucpp.Ref<Quat>): Vector;
	public function Quat_GetAngle(Q: ucpp.Ref<Quat>): ucpp.num.Float32;
	public function Quat_FindBetweenVectors(Start: Vector, End: Vector): Quat;
	public function Quat_FindBetweenNormals(StartNormal: Vector, EndNormal: Vector): Quat;
	public function Quat_Exp(Q: ucpp.Ref<Quat>): Quat;
	public function Quat_Euler(Q: ucpp.Ref<Quat>): Vector;
	public function Quat_EnforceShortestArcWith(A: ucpp.Ref<Quat>, B: ucpp.Ref<Quat>): Void;
	public function Quat_AngularDistance(A: ucpp.Ref<Quat>, B: ucpp.Ref<Quat>): ucpp.num.Float32;
	public function ProjectVectorOnToVector(V: Vector, Target: Vector): Vector;
	public function ProjectVectorOnToPlane(V: Vector, PlaneNormal: Vector): Vector;
	public function ProjectPointOnToPlane(Point: Vector, PlaneBase: Vector, PlaneNormal: Vector): Vector;
	public function PointsAreCoplanar(Points: ucpp.Ref<TArray<Vector>>, Tolerance: ucpp.num.Float32): Bool;
	public function PerlinNoise1D(Value: ucpp.num.Float32): ucpp.num.Float32;
	public function Percent_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function Percent_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Percent_FloatFloat(A: ucpp.num.Float64, B: ucpp.num.Float64): ucpp.num.Float64;
	public function Percent_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): ucpp.num.UInt8;
	public function Or_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function Or_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Now(): DateTime;
	public function NotEqualExactly_VectorVector(A: Vector, B: Vector): Bool;
	public function NotEqualExactly_Vector4Vector4(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): Bool;
	public function NotEqualExactly_Vector2DVector2D(A: Vector2D, B: Vector2D): Bool;
	public function NotEqual_VectorVector(A: Vector, B: Vector, ErrorTolerance: ucpp.num.Float32): Bool;
	public function NotEqual_Vector4Vector4(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>, ErrorTolerance: ucpp.num.Float32): Bool;
	public function NotEqual_Vector2DVector2D(A: Vector2D, B: Vector2D, ErrorTolerance: ucpp.num.Float32): Bool;
	public function NotEqual_TimespanTimespan(A: Timespan, B: Timespan): Bool;
	public function NotEqual_RotatorRotator(A: Rotator, B: Rotator, ErrorTolerance: ucpp.num.Float32): Bool;
	public function NotEqual_QuatQuat(A: ucpp.Ref<Quat>, B: ucpp.Ref<Quat>, ErrorTolerance: ucpp.num.Float32): Bool;
	public function NotEqual_ObjectObject(A: ucpp.Ptr<Object>, B: ucpp.Ptr<Object>): Bool;
	public function NotEqual_NameName(A: FName, B: FName): Bool;
	public function NotEqual_MatrixMatrix(A: ucpp.Ref<Matrix>, B: ucpp.Ref<Matrix>, Tolerance: ucpp.num.Float32): Bool;
	public function NotEqual_LinearColorLinearColor(A: LinearColor, B: LinearColor): Bool;
	public function NotEqual_IntPointIntPoint(A: IntPoint, B: IntPoint): Bool;
	public function NotEqual_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): Bool;
	public function NotEqual_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): Bool;
	public function NotEqual_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): Bool;
	public function NotEqual_DateTimeDateTime(A: DateTime, B: DateTime): Bool;
	public function NotEqual_ClassClass(A: ucpp.Ptr<Class>, B: ucpp.Ptr<Class>): Bool;
	public function NotEqual_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): Bool;
	public function NotEqual_BoolBool(A: Bool, B: Bool): Bool;
	public function Not_PreBool(A: Bool): Bool;
	public function Not_Int64(A: ucpp.num.Int64): ucpp.num.Int64;
	public function Not_Int(A: ucpp.num.Int32): ucpp.num.Int32;
	public function NormalSafe2D(A: Vector2D, Tolerance: ucpp.num.Float32): Vector2D;
	public function NormalizeToRange(Value: ucpp.num.Float64, RangeMin: ucpp.num.Float64, RangeMax: ucpp.num.Float64): ucpp.num.Float64;
	public function NormalizedDeltaRotator(A: Rotator, B: Rotator): Rotator;
	public function NormalizeAxis(Angle: ucpp.num.Float32): ucpp.num.Float32;
	public function Normalize2D(A: ucpp.Ref<Vector2D>, Tolerance: ucpp.num.Float32): Void;
	public function Normal2D(A: Vector2D): Vector2D;
	public function Normal(A: Vector, Tolerance: ucpp.num.Float32): Vector;
	public function NegateVector(A: Vector): Vector;
	public function NegateRotator(A: Rotator): Rotator;
	public function Negated2D(A: ucpp.Ref<Vector2D>): Vector2D;
	public function NearlyEqual_TransformTransform(A: ucpp.Ref<Transform>, B: ucpp.Ref<Transform>, LocationTolerance: ucpp.num.Float32, RotationTolerance: ucpp.num.Float32, Scale3DTolerance: ucpp.num.Float32): Bool;
	public function NearlyEqual_FloatFloat(A: ucpp.num.Float64, B: ucpp.num.Float64, ErrorTolerance: ucpp.num.Float64): Bool;
	public function MultiplyMultiply_FloatFloat(Base: ucpp.num.Float64, Exp: ucpp.num.Float64): ucpp.num.Float64;
	public function MultiplyByPi(Value: ucpp.num.Float64): ucpp.num.Float64;
	public function Multiply_VectorVector(A: Vector, B: Vector): Vector;
	public function Multiply_VectorInt(A: Vector, B: ucpp.num.Int32): Vector;
	public function Multiply_VectorFloat(A: Vector, B: ucpp.num.Float64): Vector;
	public function Multiply_Vector4Vector4(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): Vector4;
	public function Multiply_Vector2DVector2D(A: Vector2D, B: Vector2D): Vector2D;
	public function Multiply_Vector2DFloat(A: Vector2D, B: ucpp.num.Float64): Vector2D;
	public function Multiply_TimespanFloat(A: Timespan, Scalar: ucpp.num.Float32): Timespan;
	public function Multiply_RotatorInt(A: Rotator, B: ucpp.num.Int32): Rotator;
	public function Multiply_RotatorFloat(A: Rotator, B: ucpp.num.Float32): Rotator;
	public function Multiply_QuatQuat(A: ucpp.Ref<Quat>, B: ucpp.Ref<Quat>): Quat;
	public function Multiply_MatrixMatrix(A: ucpp.Ref<Matrix>, B: ucpp.Ref<Matrix>): Matrix;
	public function Multiply_MatrixFloat(A: ucpp.Ref<Matrix>, B: ucpp.num.Float64): Matrix;
	public function Multiply_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor;
	public function Multiply_LinearColorFloat(A: LinearColor, B: ucpp.num.Float32): LinearColor;
	public function Multiply_IntPointIntPoint(A: IntPoint, B: IntPoint): IntPoint;
	public function Multiply_IntPointInt(A: IntPoint, B: ucpp.num.Int32): IntPoint;
	public function Multiply_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function Multiply_IntFloat(A: ucpp.num.Int32, B: ucpp.num.Float64): ucpp.num.Float64;
	public function Multiply_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Multiply_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): ucpp.num.Float64;
	public function Multiply_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): ucpp.num.UInt8;
	public function MirrorVectorByNormal(InVect: Vector, InNormal: Vector): Vector;
	public function MinOfIntArray(IntArray: ucpp.Ref<TArray<ucpp.num.Int32>>, IndexOfMinValue: ucpp.Ref<ucpp.num.Int32>, MinValue: ucpp.Ref<ucpp.num.Int32>): Void;
	public function MinOfFloatArray(FloatArray: ucpp.Ref<TArray<ucpp.num.Float32>>, IndexOfMinValue: ucpp.Ref<ucpp.num.Int32>, MinValue: ucpp.Ref<ucpp.num.Float32>): Void;
	public function MinOfByteArray(ByteArray: ucpp.Ref<TArray<ucpp.num.UInt8>>, IndexOfMinValue: ucpp.Ref<ucpp.num.Int32>, MinValue: ucpp.Ref<ucpp.num.UInt8>): Void;
	public function MinInt64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function MinimumAreaRectangle(WorldContextObject: ucpp.Ptr<Object>, InVerts: ucpp.Ref<TArray<Vector>>, SampleSurfaceNormal: ucpp.Ref<Vector>, OutRectCenter: ucpp.Ref<Vector>, OutRectRotation: ucpp.Ref<Rotator>, OutSideLengthX: ucpp.Ref<ucpp.num.Float32>, OutSideLengthY: ucpp.Ref<ucpp.num.Float32>, bDebugDraw: Bool): Void;
	public function MinAreaRectangle(WorldContextObject: ucpp.Ptr<Object>, InPoints: ucpp.Ref<TArray<Vector>>, SampleSurfaceNormal: ucpp.Ref<Vector>, OutRectCenter: ucpp.Ref<Vector>, OutRectRotation: ucpp.Ref<Rotator>, OutRectLengthX: ucpp.Ref<ucpp.num.Float32>, OutRectLengthY: ucpp.Ref<ucpp.num.Float32>, bDebugDraw: Bool): Void;
	public function Min(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function MedianOfIntArray(IntArray: TArray<ucpp.num.Int32>, MedianValue: ucpp.Ref<ucpp.num.Float32>): Void;
	public function MaxOfIntArray(IntArray: ucpp.Ref<TArray<ucpp.num.Int32>>, IndexOfMaxValue: ucpp.Ref<ucpp.num.Int32>, MaxValue: ucpp.Ref<ucpp.num.Int32>): Void;
	public function MaxOfFloatArray(FloatArray: ucpp.Ref<TArray<ucpp.num.Float32>>, IndexOfMaxValue: ucpp.Ref<ucpp.num.Int32>, MaxValue: ucpp.Ref<ucpp.num.Float32>): Void;
	public function MaxOfByteArray(ByteArray: ucpp.Ref<TArray<ucpp.num.UInt8>>, IndexOfMaxValue: ucpp.Ref<ucpp.num.Int32>, MaxValue: ucpp.Ref<ucpp.num.UInt8>): Void;
	public function MaxInt64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Max(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function Matrix_TransformVector4(M: ucpp.Ref<Matrix>, V: Vector4): Vector4;
	public function Matrix_TransformVector(M: ucpp.Ref<Matrix>, V: Vector): Vector4;
	public function Matrix_TransformPosition(M: ucpp.Ref<Matrix>, V: Vector): Vector4;
	public function Matrix_ToQuat(M: ucpp.Ref<Matrix>): Quat;
	public function Matrix_SetOrigin(M: ucpp.Ref<Matrix>, NewOrigin: Vector): Void;
	public function Matrix_SetColumn(M: ucpp.Ref<Matrix>, Column: TEnumAsByte<EMatrixColumns>, Value: Vector): Void;
	public function Matrix_SetAxis(M: ucpp.Ref<Matrix>, Axis: TEnumAsByte<EAxis>, AxisVector: Vector): Void;
	public function Matrix_ScaleTranslation(M: ucpp.Ref<Matrix>, Scale3D: Vector): Matrix;
	public function Matrix_RemoveTranslation(M: ucpp.Ref<Matrix>): Matrix;
	public function Matrix_RemoveScaling(M: ucpp.Ref<Matrix>, Tolerance: ucpp.num.Float32): Void;
	public function Matrix_Mirror(M: ucpp.Ref<Matrix>, MirrorAxis: TEnumAsByte<EAxis>, FlipAxis: TEnumAsByte<EAxis>): Matrix;
	public function Matrix_InverseTransformVector(M: ucpp.Ref<Matrix>, V: Vector): Vector;
	public function Matrix_InverseTransformPosition(M: ucpp.Ref<Matrix>, V: Vector): Vector;
	public function Matrix_Identity(): Matrix;
	public function Matrix_GetUnitAxis(M: ucpp.Ref<Matrix>, Axis: TEnumAsByte<EAxis>): Vector;
	public function Matrix_GetUnitAxes(M: ucpp.Ref<Matrix>, X: ucpp.Ref<Vector>, Y: ucpp.Ref<Vector>, Z: ucpp.Ref<Vector>): Void;
	public function Matrix_GetTransposed(M: ucpp.Ref<Matrix>): Matrix;
	public function Matrix_GetTransposeAdjoint(M: ucpp.Ref<Matrix>): Matrix;
	public function Matrix_GetScaleVector(M: ucpp.Ref<Matrix>, Tolerance: ucpp.num.Float32): Vector;
	public function Matrix_GetScaledAxis(M: ucpp.Ref<Matrix>, Axis: TEnumAsByte<EAxis>): Vector;
	public function Matrix_GetScaledAxes(M: ucpp.Ref<Matrix>, X: ucpp.Ref<Vector>, Y: ucpp.Ref<Vector>, Z: ucpp.Ref<Vector>): Void;
	public function Matrix_GetRotDeterminant(M: ucpp.Ref<Matrix>): ucpp.num.Float32;
	public function Matrix_GetRotator(M: ucpp.Ref<Matrix>): Rotator;
	public function Matrix_GetOrigin(InMatrix: ucpp.Ref<Matrix>): Vector;
	public function Matrix_GetMaximumAxisScale(M: ucpp.Ref<Matrix>): ucpp.num.Float32;
	public function Matrix_GetMatrixWithoutScale(M: ucpp.Ref<Matrix>, Tolerance: ucpp.num.Float32): Matrix;
	public function Matrix_GetInverse(M: ucpp.Ref<Matrix>): Matrix;
	public function Matrix_GetFrustumTopPlane(M: ucpp.Ref<Matrix>, OutPlane: ucpp.Ref<Plane>): Bool;
	public function Matrix_GetFrustumRightPlane(M: ucpp.Ref<Matrix>, OutPlane: ucpp.Ref<Plane>): Bool;
	public function Matrix_GetFrustumNearPlane(M: ucpp.Ref<Matrix>, OutPlane: ucpp.Ref<Plane>): Bool;
	public function Matrix_GetFrustumLeftPlane(M: ucpp.Ref<Matrix>, OutPlane: ucpp.Ref<Plane>): Bool;
	public function Matrix_GetFrustumFarPlane(M: ucpp.Ref<Matrix>, OutPlane: ucpp.Ref<Plane>): Bool;
	public function Matrix_GetFrustumBottomPlane(M: ucpp.Ref<Matrix>, OutPlane: ucpp.Ref<Plane>): Bool;
	public function Matrix_GetDeterminant(M: ucpp.Ref<Matrix>): ucpp.num.Float32;
	public function Matrix_GetColumn(M: ucpp.Ref<Matrix>, Column: TEnumAsByte<EMatrixColumns>): Vector;
	public function Matrix_ContainsNaN(M: ucpp.Ref<Matrix>): Bool;
	public function Matrix_ConcatenateTranslation(M: ucpp.Ref<Matrix>, Translation: Vector): Matrix;
	public function Matrix_ApplyScale(M: ucpp.Ref<Matrix>, Scale: ucpp.num.Float32): Matrix;
	public function MapRangeUnclamped(Value: ucpp.num.Float64, InRangeA: ucpp.num.Float64, InRangeB: ucpp.num.Float64, OutRangeA: ucpp.num.Float64, OutRangeB: ucpp.num.Float64): ucpp.num.Float64;
	public function MapRangeClamped(Value: ucpp.num.Float64, InRangeA: ucpp.num.Float64, InRangeB: ucpp.num.Float64, OutRangeA: ucpp.num.Float64, OutRangeB: ucpp.num.Float64): ucpp.num.Float64;
	public function MakeVector_NetQuantizeNormal(X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64): Vector_NetQuantizeNormal;
	public function MakeVector_NetQuantize100(X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64): Vector_NetQuantize100;
	public function MakeVector_NetQuantize10(X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64): Vector_NetQuantize10;
	public function MakeVector_NetQuantize(X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64): Vector_NetQuantize;
	public function MakeVector4(X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64, W: ucpp.num.Float64): Vector4;
	public function MakeVector2D(X: ucpp.num.Float64, Y: ucpp.num.Float64): Vector2D;
	public function MakeVector(X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64): Vector;
	public function MakeTransform(Location: Vector, Rotation: Rotator, Scale: Vector): Transform;
	public function MakeTimespan2(Days: ucpp.num.Int32, Hours: ucpp.num.Int32, Minutes: ucpp.num.Int32, Seconds: ucpp.num.Int32, FractionNano: ucpp.num.Int32): Timespan;
	public function MakeTimespan(Days: ucpp.num.Int32, Hours: ucpp.num.Int32, Minutes: ucpp.num.Int32, Seconds: ucpp.num.Int32, Milliseconds: ucpp.num.Int32): Timespan;
	public function MakeRotFromZY(Z: ucpp.Ref<Vector>, Y: ucpp.Ref<Vector>): Rotator;
	public function MakeRotFromZX(Z: ucpp.Ref<Vector>, X: ucpp.Ref<Vector>): Rotator;
	public function MakeRotFromZ(Z: ucpp.Ref<Vector>): Rotator;
	public function MakeRotFromYZ(Y: ucpp.Ref<Vector>, Z: ucpp.Ref<Vector>): Rotator;
	public function MakeRotFromYX(Y: ucpp.Ref<Vector>, X: ucpp.Ref<Vector>): Rotator;
	public function MakeRotFromY(Y: ucpp.Ref<Vector>): Rotator;
	public function MakeRotFromXZ(X: ucpp.Ref<Vector>, Z: ucpp.Ref<Vector>): Rotator;
	public function MakeRotFromXY(X: ucpp.Ref<Vector>, Y: ucpp.Ref<Vector>): Rotator;
	public function MakeRotFromX(X: ucpp.Ref<Vector>): Rotator;
	public function MakeRotator(Roll: ucpp.num.Float32, Pitch: ucpp.num.Float32, Yaw: ucpp.num.Float32): Rotator;
	public function MakeRotationFromAxes(Forward: Vector, Right: Vector, Up: Vector): Rotator;
	public function MakeRelativeTransform(A: ucpp.Ref<Transform>, RelativeTo: ucpp.Ref<Transform>): Transform;
	public function MakeRandomStream(InitialSeed: ucpp.num.Int32): RandomStream;
	public function MakeQuat(X: ucpp.num.Float32, Y: ucpp.num.Float32, Z: ucpp.num.Float32, W: ucpp.num.Float32): Quat;
	public function MakeQualifiedFrameTime(Frame: FrameNumber, FrameRate: FrameRate, SubFrame: ucpp.num.Float32): QualifiedFrameTime;
	public function MakePulsatingValue(InCurrentTime: ucpp.num.Float32, InPulsesPerSecond: ucpp.num.Float32, InPhase: ucpp.num.Float32): ucpp.num.Float32;
	public function MakePlaneFromPointAndNormal(Point: Vector, Normal: Vector): Plane;
	public function MakeFrameRate(Numerator: ucpp.num.Int32, Denominator: ucpp.num.Int32): FrameRate;
	public function MakeDateTime(Year: ucpp.num.Int32, Month: ucpp.num.Int32, Day: ucpp.num.Int32, Hour: ucpp.num.Int32, Minute: ucpp.num.Int32, Second: ucpp.num.Int32, Millisecond: ucpp.num.Int32): DateTime;
	public function MakeColor(R: ucpp.num.Float32, G: ucpp.num.Float32, B: ucpp.num.Float32, A: ucpp.num.Float32): LinearColor;
	public function MakeBoxSphereBounds(Origin: Vector, BoxExtent: Vector, SphereRadius: ucpp.num.Float32): BoxSphereBounds;
	public function MakeBox2D(Min: Vector2D, Max: Vector2D): Box2D;
	public function MakeBox(Min: Vector, Max: Vector): Box;
	public function Loge(A: ucpp.num.Float64): ucpp.num.Float64;
	public function Log(A: ucpp.num.Float64, Base: ucpp.num.Float64): ucpp.num.Float64;
	public function LinePlaneIntersection_OriginNormal(LineStart: ucpp.Ref<Vector>, LineEnd: ucpp.Ref<Vector>, PlaneOrigin: Vector, PlaneNormal: Vector, T: ucpp.Ref<ucpp.num.Float32>, Intersection: ucpp.Ref<Vector>): Bool;
	public function LinePlaneIntersection(LineStart: ucpp.Ref<Vector>, LineEnd: ucpp.Ref<Vector>, APlane: ucpp.Ref<Plane>, T: ucpp.Ref<ucpp.num.Float32>, Intersection: ucpp.Ref<Vector>): Bool;
	public function LinearColorLerpUsingHSV(A: LinearColor, B: LinearColor, Alpha: ucpp.num.Float32): LinearColor;
	public function LinearColorLerp(A: LinearColor, B: LinearColor, Alpha: ucpp.num.Float32): LinearColor;
	public function LinearColor_Yellow(): LinearColor;
	public function LinearColor_White(): LinearColor;
	public function LinearColor_Transparent(): LinearColor;
	public function LinearColor_ToRGBE(InLinearColor: LinearColor): Color;
	public function LinearColor_ToNewOpacity(InColor: LinearColor, InOpacity: ucpp.num.Float32): LinearColor;
	public function LinearColor_SetTemperature(InOutColor: ucpp.Ref<LinearColor>, InTemperature: ucpp.num.Float32): Void;
	public function LinearColor_SetRGBA(InOutColor: ucpp.Ref<LinearColor>, R: ucpp.num.Float32, G: ucpp.num.Float32, B: ucpp.num.Float32, A: ucpp.num.Float32): Void;
	public function LinearColor_SetRandomHue(InOutColor: ucpp.Ref<LinearColor>): Void;
	public function LinearColor_SetFromSRGB(InOutColor: ucpp.Ref<LinearColor>, InSRGB: ucpp.Ref<Color>): Void;
	public function LinearColor_SetFromPow22(InOutColor: ucpp.Ref<LinearColor>, InColor: ucpp.Ref<Color>): Void;
	public function LinearColor_SetFromHSV(InOutColor: ucpp.Ref<LinearColor>, H: ucpp.num.Float32, S: ucpp.num.Float32, V: ucpp.num.Float32, A: ucpp.num.Float32): Void;
	public function LinearColor_Set(InOutColor: ucpp.Ref<LinearColor>, InColor: LinearColor): Void;
	public function LinearColor_Red(): LinearColor;
	public function LinearColor_QuantizeRound(InColor: LinearColor): Color;
	public function LinearColor_Quantize(InColor: LinearColor): Color;
	public function LinearColor_IsNearEqual(A: LinearColor, B: LinearColor, Tolerance: ucpp.num.Float32): Bool;
	public function LinearColor_Green(): LinearColor;
	public function LinearColor_Gray(): LinearColor;
	public function LinearColor_GetMin(InColor: LinearColor): ucpp.num.Float32;
	public function LinearColor_GetMax(InColor: LinearColor): ucpp.num.Float32;
	public function LinearColor_GetLuminance(InColor: LinearColor): ucpp.num.Float32;
	public function LinearColor_Distance(C1: LinearColor, C2: LinearColor): ucpp.num.Float32;
	public function LinearColor_Desaturated(InColor: LinearColor, InDesaturation: ucpp.num.Float32): LinearColor;
	public function LinearColor_Blue(): LinearColor;
	public function LinearColor_Black(): LinearColor;
	public function LessLess_VectorRotator(A: Vector, B: Rotator): Vector;
	public function LessEqual_TimespanTimespan(A: Timespan, B: Timespan): Bool;
	public function LessEqual_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): Bool;
	public function LessEqual_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): Bool;
	public function LessEqual_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): Bool;
	public function LessEqual_DateTimeDateTime(A: DateTime, B: DateTime): Bool;
	public function LessEqual_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): Bool;
	public function Less_TimespanTimespan(A: Timespan, B: Timespan): Bool;
	public function Less_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): Bool;
	public function Less_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): Bool;
	public function Less_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): Bool;
	public function Less_DateTimeDateTime(A: DateTime, B: DateTime): Bool;
	public function Less_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): Bool;
	public function Lerp(A: ucpp.num.Float64, B: ucpp.num.Float64, Alpha: ucpp.num.Float64): ucpp.num.Float64;
	public function IsZero2D(A: ucpp.Ref<Vector2D>): Bool;
	public function IsPointInBoxWithTransform_Box(Point: Vector, BoxWorldTransform: ucpp.Ref<Transform>, BoxExtent: Box): Bool;
	public function IsPointInBoxWithTransform(Point: Vector, BoxWorldTransform: ucpp.Ref<Transform>, BoxExtent: Vector): Bool;
	public function IsPointInBox_Box(Point: Vector, Box: Box): Bool;
	public function IsPointInBox(Point: Vector, BoxOrigin: Vector, BoxExtent: Vector): Bool;
	public function IsNearlyZero2D(A: ucpp.Ref<Vector2D>, Tolerance: ucpp.num.Float32): Bool;
	public function IsMorning(A: DateTime): Bool;
	public function IsLeapYear(Year: ucpp.num.Int32): Bool;
	public function IsAfternoon(A: DateTime): Bool;
	public function InvertTransform(T: ucpp.Ref<Transform>): Transform;
	public function InverseTransformRotation(T: ucpp.Ref<Transform>, Rotation: Rotator): Rotator;
	public function InverseTransformLocation(T: ucpp.Ref<Transform>, Location: Vector): Vector;
	public function InverseTransformDirection(T: ucpp.Ref<Transform>, Direction: Vector): Vector;
	public function IntPoint_Zero(): IntPoint;
	public function IntPoint_Up(): IntPoint;
	public function IntPoint_Right(): IntPoint;
	public function IntPoint_One(): IntPoint;
	public function IntPoint_Left(): IntPoint;
	public function IntPoint_Down(): IntPoint;
	public function InRange_IntInt(Value: ucpp.num.Int32, Min: ucpp.num.Int32, Max: ucpp.num.Int32, InclusiveMin: Bool, InclusiveMax: Bool): Bool;
	public function InRange_Int64Int64(Value: ucpp.num.Int64, Min: ucpp.num.Int64, Max: ucpp.num.Int64, InclusiveMin: Bool, InclusiveMax: Bool): Bool;
	public function InRange_FloatFloat(Value: ucpp.num.Float64, Min: ucpp.num.Float64, Max: ucpp.num.Float64, InclusiveMin: Bool, InclusiveMax: Bool): Bool;
	public function Hypotenuse(Width: ucpp.num.Float64, Height: ucpp.num.Float64): ucpp.num.Float64;
	public function HSVToRGBLinear(HSV: LinearColor): LinearColor;
	public function HSVToRGB_Vector(HSV: LinearColor, RGB: ucpp.Ref<LinearColor>): Void;
	public function HSVToRGB(H: ucpp.num.Float32, S: ucpp.num.Float32, V: ucpp.num.Float32, A: ucpp.num.Float32): LinearColor;
	public function GridSnap_Float(Location: ucpp.num.Float64, GridSize: ucpp.num.Float64): ucpp.num.Float64;
	public function GreaterGreater_VectorRotator(A: Vector, B: Rotator): Vector;
	public function GreaterEqual_TimespanTimespan(A: Timespan, B: Timespan): Bool;
	public function GreaterEqual_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): Bool;
	public function GreaterEqual_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): Bool;
	public function GreaterEqual_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): Bool;
	public function GreaterEqual_DateTimeDateTime(A: DateTime, B: DateTime): Bool;
	public function GreaterEqual_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): Bool;
	public function Greater_TimespanTimespan(A: Timespan, B: Timespan): Bool;
	public function Greater_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): Bool;
	public function Greater_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): Bool;
	public function Greater_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): Bool;
	public function Greater_DateTimeDateTime(A: DateTime, B: DateTime): Bool;
	public function Greater_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): Bool;
	public function GetYear(A: DateTime): ucpp.num.Int32;
	public function GetYawPitchFromVector(InVec: Vector, Yaw: ucpp.Ref<ucpp.num.Float32>, Pitch: ucpp.Ref<ucpp.num.Float32>): Void;
	public function GetVectorArrayAverage(Vectors: ucpp.Ref<TArray<Vector>>): Vector;
	public function GetUpVector(InRot: Rotator): Vector;
	public function GetTotalSeconds(A: Timespan): ucpp.num.Float32;
	public function GetTotalMinutes(A: Timespan): ucpp.num.Float32;
	public function GetTotalMilliseconds(A: Timespan): ucpp.num.Float32;
	public function GetTotalHours(A: Timespan): ucpp.num.Float32;
	public function GetTotalDays(A: Timespan): ucpp.num.Float32;
	public function GetTimeOfDay(A: DateTime): Timespan;
	public function GetTAU(): ucpp.num.Float64;
	public function GetSlopeDegreeAngles(MyRightYAxis: ucpp.Ref<Vector>, FloorNormal: ucpp.Ref<Vector>, UpVector: ucpp.Ref<Vector>, OutSlopePitchDegreeAngle: ucpp.Ref<ucpp.num.Float32>, OutSlopeRollDegreeAngle: ucpp.Ref<ucpp.num.Float32>): Void;
	public function GetSeconds(A: Timespan): ucpp.num.Int32;
	public function GetSecond(A: DateTime): ucpp.num.Int32;
	public function GetRotated2D(A: Vector2D, AngleDeg: ucpp.num.Float32): Vector2D;
	public function GetRightVector(InRot: Rotator): Vector;
	public function GetReflectionVector(Direction: Vector, SurfaceNormal: Vector): Vector;
	public function GetPointDistanceToSegment(Point: Vector, SegmentStart: Vector, SegmentEnd: Vector): ucpp.num.Float32;
	public function GetPointDistanceToLine(Point: Vector, LineOrigin: Vector, LineDirection: Vector): ucpp.num.Float32;
	public function GetPI(): ucpp.num.Float64;
	public function GetMonth(A: DateTime): ucpp.num.Int32;
	public function GetMinutes(A: Timespan): ucpp.num.Int32;
	public function GetMinute(A: DateTime): ucpp.num.Int32;
	public function GetMinElement(A: Vector): ucpp.num.Float64;
	public function GetMin2D(A: Vector2D): ucpp.num.Float64;
	public function GetMilliseconds(A: Timespan): ucpp.num.Int32;
	public function GetMillisecond(A: DateTime): ucpp.num.Int32;
	public function GetMaxElement(A: Vector): ucpp.num.Float64;
	public function GetMax2D(A: Vector2D): ucpp.num.Float64;
	public function GetHours(A: Timespan): ucpp.num.Int32;
	public function GetHour12(A: DateTime): ucpp.num.Int32;
	public function GetHour(A: DateTime): ucpp.num.Int32;
	public function GetForwardVector(InRot: Rotator): Vector;
	public function GetDuration(A: Timespan): Timespan;
	public function GetDirectionUnitVector(From: Vector, To: Vector): Vector;
	public function GetDays(A: Timespan): ucpp.num.Int32;
	public function GetDayOfYear(A: DateTime): ucpp.num.Int32;
	public function GetDay(A: DateTime): ucpp.num.Int32;
	public function GetDate(A: DateTime): DateTime;
	public function GetAzimuthAndElevation(InDirection: Vector, ReferenceFrame: ucpp.Ref<Transform>, Azimuth: ucpp.Ref<ucpp.num.Float32>, Elevation: ucpp.Ref<ucpp.num.Float32>): Void;
	public function GetAxes(A: Rotator, X: ucpp.Ref<Vector>, Y: ucpp.Ref<Vector>, Z: ucpp.Ref<Vector>): Void;
	public function GetAbsMax2D(A: Vector2D): ucpp.num.Float64;
	public function GetAbs2D(A: Vector2D): Vector2D;
	public function FWrap(Value: ucpp.num.Float64, Min: ucpp.num.Float64, Max: ucpp.num.Float64): ucpp.num.Float64;
	public function FTruncVector(InVector: ucpp.Ref<Vector>): IntVector;
	public function FTrunc64(A: ucpp.num.Float64): ucpp.num.Int64;
	public function FTrunc(A: ucpp.num.Float64): ucpp.num.Int32;
	public function FromSeconds(Seconds: ucpp.num.Float32): Timespan;
	public function FromMinutes(Minutes: ucpp.num.Float32): Timespan;
	public function FromMilliseconds(Milliseconds: ucpp.num.Float32): Timespan;
	public function FromHours(Hours: ucpp.num.Float32): Timespan;
	public function FromDays(Days: ucpp.num.Float32): Timespan;
	public function Fraction(A: ucpp.num.Float64): ucpp.num.Float64;
	public function FMod64(Dividend: ucpp.num.Float64, Divisor: ucpp.num.Float64, Remainder: ucpp.Ref<ucpp.num.Float64>): ucpp.num.Int64;
	public function FMod(Dividend: ucpp.num.Float64, Divisor: ucpp.num.Float64, Remainder: ucpp.Ref<ucpp.num.Float64>): ucpp.num.Int32;
	public function FMin(A: ucpp.num.Float64, B: ucpp.num.Float64): ucpp.num.Float64;
	public function FMax(A: ucpp.num.Float64, B: ucpp.num.Float64): ucpp.num.Float64;
	public function FloatSpringInterp(Current: ucpp.num.Float32, Target: ucpp.num.Float32, SpringState: ucpp.Ref<FloatSpringState>, Stiffness: ucpp.num.Float32, CriticalDampingFactor: ucpp.num.Float32, DeltaTime: ucpp.num.Float32, Mass: ucpp.num.Float32, TargetVelocityAmount: ucpp.num.Float32, bClamp: Bool, MinValue: ucpp.num.Float32, MaxValue: ucpp.num.Float32, bInitializeFromTarget: Bool): ucpp.num.Float32;
	public function FixedTurn(InCurrent: ucpp.num.Float32, InDesired: ucpp.num.Float32, InDeltaRate: ucpp.num.Float32): ucpp.num.Float32;
	public function FInterpTo_Constant(Current: ucpp.num.Float64, Target: ucpp.num.Float64, DeltaTime: ucpp.num.Float64, InterpSpeed: ucpp.num.Float64): ucpp.num.Float64;
	public function FInterpTo(Current: ucpp.num.Float64, Target: ucpp.num.Float64, DeltaTime: ucpp.num.Float64, InterpSpeed: ucpp.num.Float64): ucpp.num.Float64;
	public function FInterpEaseInOut(A: ucpp.num.Float64, B: ucpp.num.Float64, Alpha: ucpp.num.Float64, Exponent: ucpp.num.Float64): ucpp.num.Float64;
	public function FindRelativeLookAtRotation(StartTransform: ucpp.Ref<Transform>, TargetLocation: ucpp.Ref<Vector>): Rotator;
	public function FindNearestPointsOnLineSegments(Segment1Start: Vector, Segment1End: Vector, Segment2Start: Vector, Segment2End: Vector, Segment1Point: ucpp.Ref<Vector>, Segment2Point: ucpp.Ref<Vector>): Void;
	public function FindLookAtRotation(Start: ucpp.Ref<Vector>, Target: ucpp.Ref<Vector>): Rotator;
	public function FindClosestPointOnSegment(Point: Vector, SegmentStart: Vector, SegmentEnd: Vector): Vector;
	public function FindClosestPointOnLine(Point: Vector, LineOrigin: Vector, LineDirection: Vector): Vector;
	public function FFloor64(A: ucpp.num.Float64): ucpp.num.Int64;
	public function FFloor(A: ucpp.num.Float64): ucpp.num.Int32;
	public function FClamp(Value: ucpp.num.Float64, Min: ucpp.num.Float64, Max: ucpp.num.Float64): ucpp.num.Float64;
	public function FCeil64(A: ucpp.num.Float64): ucpp.num.Int64;
	public function FCeil(A: ucpp.num.Float64): ucpp.num.Int32;
	public function Exp(A: ucpp.num.Float64): ucpp.num.Float64;
	public function EqualExactly_VectorVector(A: Vector, B: Vector): Bool;
	public function EqualExactly_Vector4Vector4(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): Bool;
	public function EqualExactly_Vector2DVector2D(A: Vector2D, B: Vector2D): Bool;
	public function EqualEqual_VectorVector(A: Vector, B: Vector, ErrorTolerance: ucpp.num.Float32): Bool;
	public function EqualEqual_Vector4Vector4(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>, ErrorTolerance: ucpp.num.Float32): Bool;
	public function EqualEqual_Vector2DVector2D(A: Vector2D, B: Vector2D, ErrorTolerance: ucpp.num.Float32): Bool;
	public function EqualEqual_TransformTransform(A: ucpp.Ref<Transform>, B: ucpp.Ref<Transform>): Bool;
	public function EqualEqual_TimespanTimespan(A: Timespan, B: Timespan): Bool;
	public function EqualEqual_RotatorRotator(A: Rotator, B: Rotator, ErrorTolerance: ucpp.num.Float32): Bool;
	public function EqualEqual_QuatQuat(A: ucpp.Ref<Quat>, B: ucpp.Ref<Quat>, Tolerance: ucpp.num.Float32): Bool;
	public function EqualEqual_ObjectObject(A: ucpp.Ptr<Object>, B: ucpp.Ptr<Object>): Bool;
	public function EqualEqual_NameName(A: FName, B: FName): Bool;
	public function EqualEqual_MatrixMatrix(A: ucpp.Ref<Matrix>, B: ucpp.Ref<Matrix>, Tolerance: ucpp.num.Float32): Bool;
	public function EqualEqual_LinearColorLinearColor(A: LinearColor, B: LinearColor): Bool;
	public function EqualEqual_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): Bool;
	public function EqualEqual_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): Bool;
	public function EqualEqual_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): Bool;
	public function EqualEqual_DateTimeDateTime(A: DateTime, B: DateTime): Bool;
	public function EqualEqual_ClassClass(A: ucpp.Ptr<Class>, B: ucpp.Ptr<Class>): Bool;
	public function EqualEqual_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): Bool;
	public function EqualEqual_BoolBool(A: Bool, B: Bool): Bool;
	public function Equal_IntPointIntPoint(A: IntPoint, B: IntPoint): Bool;
	public function Ease(A: ucpp.num.Float64, B: ucpp.num.Float64, Alpha: ucpp.num.Float64, EasingFunc: TEnumAsByte<EEasingFunc>, BlendExp: ucpp.num.Float64, Steps: ucpp.num.Int32): ucpp.num.Float64;
	public function DynamicWeightedMovingAverage_FVector(CurrentSample: Vector, PreviousSample: Vector, MaxDistance: ucpp.num.Float32, MinWeight: ucpp.num.Float32, MaxWeight: ucpp.num.Float32): Vector;
	public function DynamicWeightedMovingAverage_FRotator(CurrentSample: Rotator, PreviousSample: Rotator, MaxDistance: ucpp.num.Float32, MinWeight: ucpp.num.Float32, MaxWeight: ucpp.num.Float32): Rotator;
	public function DynamicWeightedMovingAverage_Float(CurrentSample: ucpp.num.Float32, PreviousSample: ucpp.num.Float32, MaxDistance: ucpp.num.Float32, MinWeight: ucpp.num.Float32, MaxWeight: ucpp.num.Float32): ucpp.num.Float32;
	public function DotProduct2D(A: Vector2D, B: Vector2D): ucpp.num.Float64;
	public function Dot_VectorVector(A: Vector, B: Vector): ucpp.num.Float64;
	public function Divide_VectorVector(A: Vector, B: Vector): Vector;
	public function Divide_VectorInt(A: Vector, B: ucpp.num.Int32): Vector;
	public function Divide_VectorFloat(A: Vector, B: ucpp.num.Float64): Vector;
	public function Divide_Vector4Vector4(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): Vector4;
	public function Divide_Vector2DVector2D(A: Vector2D, B: Vector2D): Vector2D;
	public function Divide_Vector2DFloat(A: Vector2D, B: ucpp.num.Float64): Vector2D;
	public function Divide_TimespanFloat(A: Timespan, Scalar: ucpp.num.Float32): Timespan;
	public function Divide_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor;
	public function Divide_IntPointIntPoint(A: IntPoint, B: IntPoint): IntPoint;
	public function Divide_IntPointInt(A: IntPoint, B: ucpp.num.Int32): IntPoint;
	public function Divide_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function Divide_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Divide_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): ucpp.num.Float64;
	public function Divide_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): ucpp.num.UInt8;
	public function DistanceSquared2D(V1: Vector2D, V2: Vector2D): ucpp.num.Float64;
	public function Distance2D(V1: Vector2D, V2: Vector2D): ucpp.num.Float64;
	public function DegTan(A: ucpp.num.Float64): ucpp.num.Float64;
	public function DegSin(A: ucpp.num.Float64): ucpp.num.Float64;
	public function DegreesToRadians(A: ucpp.num.Float64): ucpp.num.Float64;
	public function DegCos(A: ucpp.num.Float64): ucpp.num.Float64;
	public function DegAtan2(Y: ucpp.num.Float64, X: ucpp.num.Float64): ucpp.num.Float64;
	public function DegAtan(A: ucpp.num.Float64): ucpp.num.Float64;
	public function DegAsin(A: ucpp.num.Float64): ucpp.num.Float64;
	public function DegAcos(A: ucpp.num.Float64): ucpp.num.Float64;
	public function DaysInYear(Year: ucpp.num.Int32): ucpp.num.Int32;
	public function DaysInMonth(Year: ucpp.num.Int32, Month: ucpp.num.Int32): ucpp.num.Int32;
	public function DateTimeMinValue(): DateTime;
	public function DateTimeMaxValue(): DateTime;
	public function DateTimeFromString(DateTimeString: FString, Result: ucpp.Ref<DateTime>): Bool;
	public function DateTimeFromIsoString(IsoString: FString, Result: ucpp.Ref<DateTime>): Bool;
	public function CrossProduct2D(A: Vector2D, B: Vector2D): ucpp.num.Float64;
	public function Cross_VectorVector(A: Vector, B: Vector): Vector;
	public function CreateVectorFromYawPitch(Yaw: ucpp.num.Float32, Pitch: ucpp.num.Float32, Length: ucpp.num.Float32): Vector;
	public function Cos(A: ucpp.num.Float64): ucpp.num.Float64;
	public function Conv_VectorToVector2D(InVector: Vector): Vector2D;
	public function Conv_VectorToTransform(InLocation: Vector): Transform;
	public function Conv_VectorToRotator(InVec: Vector): Rotator;
	public function Conv_VectorToQuaternion(InVec: Vector): Quat;
	public function Conv_VectorToLinearColor(InVec: Vector): LinearColor;
	public function Conv_Vector4ToVector(InVector4: ucpp.Ref<Vector4>): Vector;
	public function Conv_Vector4ToRotator(InVec: ucpp.Ref<Vector4>): Rotator;
	public function Conv_Vector4ToQuaternion(InVec: ucpp.Ref<Vector4>): Quat;
	public function Conv_Vector2DToVector(InVector2D: Vector2D, Z: ucpp.num.Float32): Vector;
	public function Conv_Vector2DToIntPoint(InVector2D: Vector2D): IntPoint;
	public function Conv_TransformToMatrix(Transform: ucpp.Ref<Transform>): Matrix;
	public function Conv_RotatorToVector(InRot: Rotator): Vector;
	public function Conv_RotatorToTransform(InRotator: ucpp.Ref<Rotator>): Transform;
	public function Conv_RotatorToQuaternion(InRot: Rotator): Quat;
	public function Conv_MatrixToTransform(InMatrix: ucpp.Ref<Matrix>): Transform;
	public function Conv_MatrixToRotator(InMatrix: ucpp.Ref<Matrix>): Rotator;
	public function Conv_LinearColorToVector(InLinearColor: LinearColor): Vector;
	public function Conv_LinearColorToColor(InLinearColor: LinearColor, InUseSRGB: Bool): Color;
	public function Conv_IntVectorToVector(InIntVector: ucpp.Ref<IntVector>): Vector;
	public function Conv_IntToVector(InInt: ucpp.num.Int32): Vector;
	public function Conv_IntToIntVector(InInt: ucpp.num.Int32): IntVector;
	public function Conv_IntToInt64(InInt: ucpp.num.Int32): ucpp.num.Int64;
	public function Conv_IntToDouble(InInt: ucpp.num.Int32): ucpp.num.Float64;
	public function Conv_IntToByte(InInt: ucpp.num.Int32): ucpp.num.UInt8;
	public function Conv_IntToBool(InInt: ucpp.num.Int32): Bool;
	public function Conv_IntPointToVector2D(InIntPoint: IntPoint): Vector2D;
	public function Conv_Int64ToInt(InInt: ucpp.num.Int64): ucpp.num.Int32;
	public function Conv_Int64ToDouble(InInt: ucpp.num.Int64): ucpp.num.Float64;
	public function Conv_Int64ToByte(InInt: ucpp.num.Int64): ucpp.num.UInt8;
	public function Conv_FloatToDouble(InFloat: ucpp.num.Float32): ucpp.num.Float64;
	public function Conv_DoubleToVector2D(InDouble: ucpp.num.Float64): Vector2D;
	public function Conv_DoubleToVector(InDouble: ucpp.num.Float64): Vector;
	public function Conv_DoubleToLinearColor(InDouble: ucpp.num.Float64): LinearColor;
	public function Conv_DoubleToInt64(InDouble: ucpp.num.Float64): ucpp.num.Int64;
	public function Conv_DoubleToFloat(InDouble: ucpp.num.Float64): ucpp.num.Float32;
	public function Conv_ColorToLinearColor(InColor: Color): LinearColor;
	public function Conv_ByteToInt64(InByte: ucpp.num.UInt8): ucpp.num.Int64;
	public function Conv_ByteToInt(InByte: ucpp.num.UInt8): ucpp.num.Int32;
	public function Conv_ByteToDouble(InByte: ucpp.num.UInt8): ucpp.num.Float64;
	public function Conv_BoolToInt(InBool: Bool): ucpp.num.Int32;
	public function Conv_BoolToDouble(InBool: Bool): ucpp.num.Float64;
	public function Conv_BoolToByte(InBool: Bool): ucpp.num.UInt8;
	public function ComposeTransforms(A: ucpp.Ref<Transform>, B: ucpp.Ref<Transform>): Transform;
	public function ComposeRotators(A: Rotator, B: Rotator): Rotator;
	public function ClassIsChildOf(TestClass: TSubclassOf<Object>, ParentClass: TSubclassOf<Object>): Bool;
	public function ClampVectorSize(A: Vector, Min: ucpp.num.Float64, Max: ucpp.num.Float64): Vector;
	public function ClampInt64(Value: ucpp.num.Int64, Min: ucpp.num.Int64, Max: ucpp.num.Int64): ucpp.num.Int64;
	public function ClampAxis(Angle: ucpp.num.Float32): ucpp.num.Float32;
	public function ClampAxes2D(A: Vector2D, MinAxisVal: ucpp.num.Float64, MaxAxisVal: ucpp.num.Float64): Vector2D;
	public function ClampAngle(AngleDegrees: ucpp.num.Float64, MinAngleDegrees: ucpp.num.Float64, MaxAngleDegrees: ucpp.num.Float64): ucpp.num.Float64;
	public function Clamp(Value: ucpp.num.Int32, Min: ucpp.num.Int32, Max: ucpp.num.Int32): ucpp.num.Int32;
	public function CInterpTo(Current: LinearColor, Target: LinearColor, DeltaTime: ucpp.num.Float32, InterpSpeed: ucpp.num.Float32): LinearColor;
	public function BreakVector_NetQuantizeNormal(InVec: Vector_NetQuantizeNormal, X: ucpp.Ref<ucpp.num.Float64>, Y: ucpp.Ref<ucpp.num.Float64>, Z: ucpp.Ref<ucpp.num.Float64>): Void;
	public function BreakVector_NetQuantize100(InVec: Vector_NetQuantize100, X: ucpp.Ref<ucpp.num.Float64>, Y: ucpp.Ref<ucpp.num.Float64>, Z: ucpp.Ref<ucpp.num.Float64>): Void;
	public function BreakVector_NetQuantize10(InVec: Vector_NetQuantize10, X: ucpp.Ref<ucpp.num.Float64>, Y: ucpp.Ref<ucpp.num.Float64>, Z: ucpp.Ref<ucpp.num.Float64>): Void;
	public function BreakVector_NetQuantize(InVec: Vector_NetQuantize, X: ucpp.Ref<ucpp.num.Float64>, Y: ucpp.Ref<ucpp.num.Float64>, Z: ucpp.Ref<ucpp.num.Float64>): Void;
	public function BreakVector4(InVec: ucpp.Ref<Vector4>, X: ucpp.Ref<ucpp.num.Float64>, Y: ucpp.Ref<ucpp.num.Float64>, Z: ucpp.Ref<ucpp.num.Float64>, W: ucpp.Ref<ucpp.num.Float64>): Void;
	public function BreakVector3f(InVec: Vector3f, X: ucpp.Ref<ucpp.num.Float32>, Y: ucpp.Ref<ucpp.num.Float32>, Z: ucpp.Ref<ucpp.num.Float32>): Void;
	public function BreakVector2D(InVec: Vector2D, X: ucpp.Ref<ucpp.num.Float64>, Y: ucpp.Ref<ucpp.num.Float64>): Void;
	public function BreakVector(InVec: Vector, X: ucpp.Ref<ucpp.num.Float64>, Y: ucpp.Ref<ucpp.num.Float64>, Z: ucpp.Ref<ucpp.num.Float64>): Void;
	public function BreakTransform(InTransform: ucpp.Ref<Transform>, Location: ucpp.Ref<Vector>, Rotation: ucpp.Ref<Rotator>, Scale: ucpp.Ref<Vector>): Void;
	public function BreakTimespan2(InTimespan: Timespan, Days: ucpp.Ref<ucpp.num.Int32>, Hours: ucpp.Ref<ucpp.num.Int32>, Minutes: ucpp.Ref<ucpp.num.Int32>, Seconds: ucpp.Ref<ucpp.num.Int32>, FractionNano: ucpp.Ref<ucpp.num.Int32>): Void;
	public function BreakTimespan(InTimespan: Timespan, Days: ucpp.Ref<ucpp.num.Int32>, Hours: ucpp.Ref<ucpp.num.Int32>, Minutes: ucpp.Ref<ucpp.num.Int32>, Seconds: ucpp.Ref<ucpp.num.Int32>, Milliseconds: ucpp.Ref<ucpp.num.Int32>): Void;
	public function BreakRotIntoAxes(InRot: ucpp.Ref<Rotator>, X: ucpp.Ref<Vector>, Y: ucpp.Ref<Vector>, Z: ucpp.Ref<Vector>): Void;
	public function BreakRotator(InRot: Rotator, Roll: ucpp.Ref<ucpp.num.Float32>, Pitch: ucpp.Ref<ucpp.num.Float32>, Yaw: ucpp.Ref<ucpp.num.Float32>): Void;
	public function BreakRandomStream(InRandomStream: ucpp.Ref<RandomStream>, InitialSeed: ucpp.Ref<ucpp.num.Int32>): Void;
	public function BreakQuat(InQuat: ucpp.Ref<Quat>, X: ucpp.Ref<ucpp.num.Float32>, Y: ucpp.Ref<ucpp.num.Float32>, Z: ucpp.Ref<ucpp.num.Float32>, W: ucpp.Ref<ucpp.num.Float32>): Void;
	public function BreakQualifiedFrameTime(InFrameTime: ucpp.Ref<QualifiedFrameTime>, Frame: ucpp.Ref<FrameNumber>, FrameRate: ucpp.Ref<FrameRate>, SubFrame: ucpp.Ref<ucpp.num.Float32>): Void;
	public function BreakFrameRate(InFrameRate: ucpp.Ref<FrameRate>, Numerator: ucpp.Ref<ucpp.num.Int32>, Denominator: ucpp.Ref<ucpp.num.Int32>): Void;
	public function BreakDateTime(InDateTime: DateTime, Year: ucpp.Ref<ucpp.num.Int32>, Month: ucpp.Ref<ucpp.num.Int32>, Day: ucpp.Ref<ucpp.num.Int32>, Hour: ucpp.Ref<ucpp.num.Int32>, Minute: ucpp.Ref<ucpp.num.Int32>, Second: ucpp.Ref<ucpp.num.Int32>, Millisecond: ucpp.Ref<ucpp.num.Int32>): Void;
	public function BreakColor(InColor: LinearColor, R: ucpp.Ref<ucpp.num.Float32>, G: ucpp.Ref<ucpp.num.Float32>, B: ucpp.Ref<ucpp.num.Float32>, A: ucpp.Ref<ucpp.num.Float32>): Void;
	public function BreakBoxSphereBounds(InBoxSphereBounds: ucpp.Ref<BoxSphereBounds>, Origin: ucpp.Ref<Vector>, BoxExtent: ucpp.Ref<Vector>, SphereRadius: ucpp.Ref<ucpp.num.Float32>): Void;
	public function BooleanXOR(A: Bool, B: Bool): Bool;
	public function BooleanOR(A: Bool, B: Bool): Bool;
	public function BooleanNOR(A: Bool, B: Bool): Bool;
	public function BooleanNAND(A: Bool, B: Bool): Bool;
	public function BooleanAND(A: Bool, B: Bool): Bool;
	public function BMin(A: ucpp.num.UInt8, B: ucpp.num.UInt8): ucpp.num.UInt8;
	public function BMax(A: ucpp.num.UInt8, B: ucpp.num.UInt8): ucpp.num.UInt8;
	public function AverageOfIntArray(IntArray: ucpp.Ref<TArray<ucpp.num.Int32>>, AverageValue: ucpp.Ref<ucpp.num.Float32>): Void;
	public function Atan2(Y: ucpp.num.Float64, X: ucpp.num.Float64): ucpp.num.Float64;
	public function Atan(A: ucpp.num.Float64): ucpp.num.Float64;
	public function Asin(A: ucpp.num.Float64): ucpp.num.Float64;
	public function And_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function And_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Add_VectorVector(A: Vector, B: Vector): Vector;
	public function Add_VectorInt(A: Vector, B: ucpp.num.Int32): Vector;
	public function Add_VectorFloat(A: Vector, B: ucpp.num.Float64): Vector;
	public function Add_Vector4Vector4(A: ucpp.Ref<Vector4>, B: ucpp.Ref<Vector4>): Vector4;
	public function Add_Vector2DVector2D(A: Vector2D, B: Vector2D): Vector2D;
	public function Add_Vector2DFloat(A: Vector2D, B: ucpp.num.Float64): Vector2D;
	public function Add_TimespanTimespan(A: Timespan, B: Timespan): Timespan;
	public function Add_QuatQuat(A: ucpp.Ref<Quat>, B: ucpp.Ref<Quat>): Quat;
	public function Add_MatrixMatrix(A: ucpp.Ref<Matrix>, B: ucpp.Ref<Matrix>): Matrix;
	public function Add_LinearColorLinearColor(A: LinearColor, B: LinearColor): LinearColor;
	public function Add_IntPointIntPoint(A: IntPoint, B: IntPoint): IntPoint;
	public function Add_IntPointInt(A: IntPoint, B: ucpp.num.Int32): IntPoint;
	public function Add_IntInt(A: ucpp.num.Int32, B: ucpp.num.Int32): ucpp.num.Int32;
	public function Add_Int64Int64(A: ucpp.num.Int64, B: ucpp.num.Int64): ucpp.num.Int64;
	public function Add_DoubleDouble(A: ucpp.num.Float64, B: ucpp.num.Float64): ucpp.num.Float64;
	public function Add_DateTimeTimespan(A: DateTime, B: Timespan): DateTime;
	public function Add_DateTimeDateTime(A: DateTime, B: DateTime): DateTime;
	public function Add_ByteByte(A: ucpp.num.UInt8, B: ucpp.num.UInt8): ucpp.num.UInt8;
	public function Acos(A: ucpp.num.Float64): ucpp.num.Float64;
	public function Abs_Int64(A: ucpp.num.Int64): ucpp.num.Int64;
	public function Abs_Int(A: ucpp.num.Int32): ucpp.num.Int32;
	public function Abs(A: ucpp.num.Float64): ucpp.num.Float64;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstKismetMathLibrary(KismetMathLibrary) from KismetMathLibrary {
}

@:forward
@:nativeGen
@:native("KismetMathLibrary*")
abstract KismetMathLibraryPtr(ucpp.Ptr<KismetMathLibrary>) from ucpp.Ptr<KismetMathLibrary> to ucpp.Ptr<KismetMathLibrary>{
	@:from
	public static extern inline function fromValue(v: KismetMathLibrary): KismetMathLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): KismetMathLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}