// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetMathLibrary")
@:include("Kismet/KismetMathLibrary.h")
extern class KismetMathLibrary extends BlueprintFunctionLibrary {
	public function Xor_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Xor_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Wrap(Value: cpp.Int32, Min: cpp.Int32, Max: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function WeightedMovingAverage_FVector(CurrentSample: Vector, PreviousSample: Vector, Weight: cpp.Float32): cpp.Reference<Vector>;
	public function WeightedMovingAverage_FRotator(CurrentSample: Rotator, PreviousSample: Rotator, Weight: cpp.Float32): cpp.Reference<Rotator>;
	public function WeightedMovingAverage_Float(CurrentSample: cpp.Float32, PreviousSample: cpp.Float32, Weight: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function VSizeXYSquared(A: Vector): cpp.Reference<cpp.Float64>;
	public function VSizeXY(A: Vector): cpp.Reference<cpp.Float64>;
	public function VSizeSquared(A: Vector): cpp.Reference<cpp.Float64>;
	public function VSize2DSquared(A: Vector2D): cpp.Reference<cpp.Float64>;
	public function VSize2D(A: Vector2D): cpp.Reference<cpp.Float64>;
	public function VSize(A: Vector): cpp.Reference<cpp.Float64>;
	public function VLerp(A: Vector, B: Vector, Alpha: cpp.Float32): cpp.Reference<Vector>;
	public function VInterpTo_Constant(Current: Vector, Target: Vector, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): cpp.Reference<Vector>;
	public function VInterpTo(Current: Vector, Target: Vector, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): cpp.Reference<Vector>;
	public function VectorSpringInterp(Current: Vector, Target: Vector, SpringState: cpp.Reference<VectorSpringState>, Stiffness: cpp.Float32, CriticalDampingFactor: cpp.Float32, DeltaTime: cpp.Float32, Mass: cpp.Float32, TargetVelocityAmount: cpp.Float32, bClamp: Bool, MinValue: Vector, MaxValue: Vector, bInitializeFromTarget: Bool): cpp.Reference<Vector>;
	public function Vector_Zero(): cpp.Reference<Vector>;
	public function Vector_Up(): cpp.Reference<Vector>;
	public function Vector_UnwindEuler(A: cpp.Reference<Vector>): Void;
	public function Vector_UnitCartesianToSpherical(A: Vector): cpp.Reference<Vector2D>;
	public function Vector_ToRadians(A: Vector): cpp.Reference<Vector>;
	public function Vector_ToDegrees(A: Vector): cpp.Reference<Vector>;
	public function Vector_SnappedToGrid(InVect: Vector, InGridSize: cpp.Float32): cpp.Reference<Vector>;
	public function Vector_Set(A: cpp.Reference<Vector>, X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): Void;
	public function Vector_Right(): cpp.Reference<Vector>;
	public function Vector_Reciprocal(A: cpp.Reference<Vector>): cpp.Reference<Vector>;
	public function Vector_ProjectOnToNormal(V: Vector, InNormal: Vector): cpp.Reference<Vector>;
	public function Vector_One(): cpp.Reference<Vector>;
	public function Vector_NormalUnsafe(A: cpp.Reference<Vector>): cpp.Reference<Vector>;
	public function Vector_Normalize(A: cpp.Reference<Vector>, Tolerance: cpp.Float32): Void;
	public function Vector_Normal2D(A: Vector, Tolerance: cpp.Float32): cpp.Reference<Vector>;
	public function Vector_MirrorByPlane(A: Vector, InPlane: cpp.Reference<Plane>): cpp.Reference<Vector>;
	public function Vector_Left(): cpp.Reference<Vector>;
	public function Vector_IsZero(A: cpp.Reference<Vector>): cpp.Reference<Bool>;
	public function Vector_IsUnit(A: cpp.Reference<Vector>, SquaredLenthTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function Vector_IsUniform(A: cpp.Reference<Vector>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function Vector_IsNormal(A: cpp.Reference<Vector>): cpp.Reference<Bool>;
	public function Vector_IsNearlyZero(A: cpp.Reference<Vector>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function Vector_IsNAN(A: cpp.Reference<Vector>): cpp.Reference<Bool>;
	public function Vector_HeadingAngle(A: Vector): cpp.Reference<cpp.Float64>;
	public function Vector_GetSignVector(A: Vector): cpp.Reference<Vector>;
	public function Vector_GetProjection(A: Vector): cpp.Reference<Vector>;
	public function Vector_GetAbsMin(A: Vector): cpp.Reference<cpp.Float64>;
	public function Vector_GetAbsMax(A: Vector): cpp.Reference<cpp.Float64>;
	public function Vector_GetAbs(A: Vector): cpp.Reference<Vector>;
	public function Vector_Forward(): cpp.Reference<Vector>;
	public function Vector_Down(): cpp.Reference<Vector>;
	public function Vector_DistanceSquared(V1: Vector, V2: Vector): cpp.Reference<cpp.Float64>;
	public function Vector_Distance2DSquared(V1: Vector, V2: Vector): cpp.Reference<cpp.Float64>;
	public function Vector_Distance2D(V1: Vector, V2: Vector): cpp.Reference<cpp.Float64>;
	public function Vector_Distance(V1: Vector, V2: Vector): cpp.Reference<cpp.Float64>;
	public function Vector_CosineAngle2D(A: Vector, B: Vector): cpp.Reference<cpp.Float64>;
	public function Vector_ComponentMin(A: Vector, B: Vector): cpp.Reference<Vector>;
	public function Vector_ComponentMax(A: Vector, B: Vector): cpp.Reference<Vector>;
	public function Vector_ClampSizeMax2D(A: Vector, Max: cpp.Float64): cpp.Reference<Vector>;
	public function Vector_ClampSizeMax(A: Vector, Max: cpp.Float64): cpp.Reference<Vector>;
	public function Vector_ClampSize2D(A: Vector, Min: cpp.Float64, Max: cpp.Float64): cpp.Reference<Vector>;
	public function Vector_BoundedToCube(InVect: Vector, InRadius: cpp.Float32): cpp.Reference<Vector>;
	public function Vector_BoundedToBox(InVect: Vector, InBoxMin: Vector, InBoxMax: Vector): cpp.Reference<Vector>;
	public function Vector_Backward(): cpp.Reference<Vector>;
	public function Vector_Assign(A: cpp.Reference<Vector>, InVector: cpp.Reference<Vector>): Void;
	public function Vector_AddBounded(A: cpp.Reference<Vector>, InAddVect: Vector, InRadius: cpp.Float32): Void;
	public function Vector4_Zero(): cpp.Reference<Vector4>;
	public function Vector4_SizeSquared3(A: cpp.Reference<Vector4>): cpp.Reference<cpp.Float64>;
	public function Vector4_SizeSquared(A: cpp.Reference<Vector4>): cpp.Reference<cpp.Float64>;
	public function Vector4_Size3(A: cpp.Reference<Vector4>): cpp.Reference<cpp.Float64>;
	public function Vector4_Size(A: cpp.Reference<Vector4>): cpp.Reference<cpp.Float64>;
	public function Vector4_Set(A: cpp.Reference<Vector4>, X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64, W: cpp.Float64): Void;
	public function Vector4_NormalUnsafe3(A: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function Vector4_Normalize3(A: cpp.Reference<Vector4>, Tolerance: cpp.Float32): Void;
	public function Vector4_Normal3(A: cpp.Reference<Vector4>, Tolerance: cpp.Float32): cpp.Reference<Vector4>;
	public function Vector4_Negated(A: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function Vector4_MirrorByVector3(Direction: cpp.Reference<Vector4>, SurfaceNormal: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function Vector4_IsZero(A: cpp.Reference<Vector4>): cpp.Reference<Bool>;
	public function Vector4_IsUnit3(A: cpp.Reference<Vector4>, SquaredLenthTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function Vector4_IsNormal3(A: cpp.Reference<Vector4>): cpp.Reference<Bool>;
	public function Vector4_IsNearlyZero3(A: cpp.Reference<Vector4>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function Vector4_IsNAN(A: cpp.Reference<Vector4>): cpp.Reference<Bool>;
	public function Vector4_DotProduct3(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<cpp.Float64>;
	public function Vector4_DotProduct(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<cpp.Float64>;
	public function Vector4_CrossProduct3(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function Vector4_Assign(A: cpp.Reference<Vector4>, InVector: cpp.Reference<Vector4>): Void;
	public function Vector2DInterpTo_Constant(Current: Vector2D, Target: Vector2D, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): cpp.Reference<Vector2D>;
	public function Vector2DInterpTo(Current: Vector2D, Target: Vector2D, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): cpp.Reference<Vector2D>;
	public function Vector2D_Zero(): cpp.Reference<Vector2D>;
	public function Vector2D_Unit45Deg(): cpp.Reference<Vector2D>;
	public function Vector2D_One(): cpp.Reference<Vector2D>;
	public function VEase(A: Vector, B: Vector, Alpha: cpp.Float32, EasingFunc: EEasingFunc, BlendExp: cpp.Float32, Steps: cpp.Int32): cpp.Reference<Vector>;
	public function UtcNow(): cpp.Reference<DateTime>;
	public function TransformVector4(Matrix: cpp.Reference<Matrix>, Vec4: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function TransformRotation(T: cpp.Reference<Transform>, Rotation: Rotator): cpp.Reference<Rotator>;
	public function TransformLocation(T: cpp.Reference<Transform>, Location: Vector): cpp.Reference<Vector>;
	public function TransformDirection(T: cpp.Reference<Transform>, Direction: Vector): cpp.Reference<Vector>;
	public function Transform_Determinant(Transform: cpp.Reference<Transform>): cpp.Reference<cpp.Float32>;
	public function ToSign2D(A: Vector2D): cpp.Reference<Vector2D>;
	public function ToRounded2D(A: Vector2D): cpp.Reference<Vector2D>;
	public function ToDirectionAndLength2D(A: Vector2D, OutDir: cpp.Reference<Vector2D>, OutLength: cpp.Reference<cpp.Float64>): Void;
	public function Today(): cpp.Reference<DateTime>;
	public function TLerp(A: cpp.Reference<Transform>, B: cpp.Reference<Transform>, Alpha: cpp.Float32, InterpMode: ELerpInterpolationMode): cpp.Reference<Transform>;
	public function TInterpTo(Current: cpp.Reference<Transform>, Target: cpp.Reference<Transform>, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): cpp.Reference<Transform>;
	public function TimespanZeroValue(): cpp.Reference<Timespan>;
	public function TimespanRatio(A: Timespan, B: Timespan): cpp.Reference<cpp.Float32>;
	public function TimespanMinValue(): cpp.Reference<Timespan>;
	public function TimespanMaxValue(): cpp.Reference<Timespan>;
	public function TimespanFromString(TimespanString: FString, Result: cpp.Reference<Timespan>): cpp.Reference<Bool>;
	public function TEase(A: cpp.Reference<Transform>, B: cpp.Reference<Transform>, Alpha: cpp.Float32, EasingFunc: EEasingFunc, BlendExp: cpp.Float32, Steps: cpp.Int32): cpp.Reference<Transform>;
	public function Tan(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Subtract_VectorVector(A: Vector, B: Vector): cpp.Reference<Vector>;
	public function Subtract_VectorInt(A: Vector, B: cpp.Int32): cpp.Reference<Vector>;
	public function Subtract_VectorFloat(A: Vector, B: cpp.Float64): cpp.Reference<Vector>;
	public function Subtract_Vector4Vector4(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function Subtract_Vector2DVector2D(A: Vector2D, B: Vector2D): cpp.Reference<Vector2D>;
	public function Subtract_Vector2DFloat(A: Vector2D, B: cpp.Float64): cpp.Reference<Vector2D>;
	public function Subtract_TimespanTimespan(A: Timespan, B: Timespan): cpp.Reference<Timespan>;
	public function Subtract_QuatQuat(A: cpp.Reference<Quat>, B: cpp.Reference<Quat>): cpp.Reference<Quat>;
	public function Subtract_LinearColorLinearColor(A: LinearColor, B: LinearColor): cpp.Reference<LinearColor>;
	public function Subtract_IntPointIntPoint(A: IntPoint, B: IntPoint): cpp.Reference<IntPoint>;
	public function Subtract_IntPointInt(A: IntPoint, B: cpp.Int32): cpp.Reference<IntPoint>;
	public function Subtract_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Subtract_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Subtract_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Subtract_DateTimeTimespan(A: DateTime, B: Timespan): cpp.Reference<DateTime>;
	public function Subtract_DateTimeDateTime(A: DateTime, B: DateTime): cpp.Reference<Timespan>;
	public function Subtract_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<cpp.UInt8>;
	public function Square(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Sqrt(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Spherical2DToUnitCartesian(A: Vector2D): cpp.Reference<Vector>;
	public function Sin(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function SignOfInteger64(A: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function SignOfInteger(A: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function SignOfFloat(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function SetVectorSpringStateVelocity(SpringState: cpp.Reference<VectorSpringState>, Velocity: Vector): Void;
	public function SetRandomStreamSeed(Stream: cpp.Reference<RandomStream>, NewSeed: cpp.Int32): Void;
	public function SetQuaternionSpringStateAngularVelocity(SpringState: cpp.Reference<QuaternionSpringState>, AngularVelocity: Vector): Void;
	public function SetFloatSpringStateVelocity(SpringState: cpp.Reference<FloatSpringState>, Velocity: cpp.Float32): Void;
	public function Set2D(A: cpp.Reference<Vector2D>, X: cpp.Float64, Y: cpp.Float64): Void;
	public function SelectVector(A: Vector, B: Vector, bPickA: Bool): cpp.Reference<Vector>;
	public function SelectTransform(A: cpp.Reference<Transform>, B: cpp.Reference<Transform>, bPickA: Bool): cpp.Reference<Transform>;
	public function SelectString(A: FString, B: FString, bPickA: Bool): cpp.Reference<FString>;
	public function SelectRotator(A: Rotator, B: Rotator, bPickA: Bool): cpp.Reference<Rotator>;
	public function SelectObject(A: cpp.Star<Object>, B: cpp.Star<Object>, bSelectA: Bool): cpp.Reference<cpp.Star<Object>>;
	public function SelectInt(A: cpp.Int32, B: cpp.Int32, bPickA: Bool): cpp.Reference<cpp.Int32>;
	public function SelectFloat(A: cpp.Float64, B: cpp.Float64, bPickA: Bool): cpp.Reference<cpp.Float64>;
	public function SelectColor(A: LinearColor, B: LinearColor, bPickA: Bool): cpp.Reference<LinearColor>;
	public function SelectClass(A: cpp.Star<Class>, B: cpp.Star<Class>, bSelectA: Bool): cpp.Reference<cpp.Star<Class>>;
	public function SeedRandomStream(Stream: cpp.Reference<RandomStream>): Void;
	public function SafeDivide(A: cpp.Float64, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Round64(A: cpp.Float64): cpp.Reference<cpp.Int64>;
	public function Round(A: cpp.Float64): cpp.Reference<cpp.Int32>;
	public function RotatorFromAxisAndAngle(Axis: Vector, Angle: cpp.Float32): cpp.Reference<Rotator>;
	public function RotateAngleAxis(InVect: Vector, AngleDeg: cpp.Float32, Axis: Vector): cpp.Reference<Vector>;
	public function RLerp(A: Rotator, B: Rotator, Alpha: cpp.Float32, bShortestPath: Bool): cpp.Reference<Rotator>;
	public function RInterpTo_Constant(Current: Rotator, Target: Rotator, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): cpp.Reference<Rotator>;
	public function RInterpTo(Current: Rotator, Target: Rotator, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): cpp.Reference<Rotator>;
	public function RGBToHSV_Vector(RGB: LinearColor, HSV: cpp.Reference<LinearColor>): Void;
	public function RGBToHSV(InColor: LinearColor, H: cpp.Reference<cpp.Float32>, S: cpp.Reference<cpp.Float32>, V: cpp.Reference<cpp.Float32>, A: cpp.Reference<cpp.Float32>): Void;
	public function RGBLinearToHSV(RGB: LinearColor): cpp.Reference<LinearColor>;
	public function ResetVectorSpringState(SpringState: cpp.Reference<VectorSpringState>): Void;
	public function ResetRandomStream(Stream: cpp.Reference<RandomStream>): Void;
	public function ResetQuaternionSpringState(SpringState: cpp.Reference<QuaternionSpringState>): Void;
	public function ResetFloatSpringState(SpringState: cpp.Reference<FloatSpringState>): Void;
	public function REase(A: Rotator, B: Rotator, Alpha: cpp.Float32, bShortestPath: Bool, EasingFunc: EEasingFunc, BlendExp: cpp.Float32, Steps: cpp.Int32): cpp.Reference<Rotator>;
	public function RandomUnitVectorInEllipticalConeInRadiansFromStream(ConeDir: cpp.Reference<Vector>, MaxYawInRadians: cpp.Float32, MaxPitchInRadians: cpp.Float32, Stream: cpp.Reference<RandomStream>): cpp.Reference<Vector>;
	public function RandomUnitVectorInEllipticalConeInRadians(ConeDir: Vector, MaxYawInRadians: cpp.Float32, MaxPitchInRadians: cpp.Float32): cpp.Reference<Vector>;
	public function RandomUnitVectorInEllipticalConeInDegreesFromStream(ConeDir: cpp.Reference<Vector>, MaxYawInDegrees: cpp.Float32, MaxPitchInDegrees: cpp.Float32, Stream: cpp.Reference<RandomStream>): cpp.Reference<Vector>;
	public function RandomUnitVectorInEllipticalConeInDegrees(ConeDir: Vector, MaxYawInDegrees: cpp.Float32, MaxPitchInDegrees: cpp.Float32): cpp.Reference<Vector>;
	public function RandomUnitVectorInConeInRadiansFromStream(ConeDir: cpp.Reference<Vector>, ConeHalfAngleInRadians: cpp.Float32, Stream: cpp.Reference<RandomStream>): cpp.Reference<Vector>;
	public function RandomUnitVectorInConeInRadians(ConeDir: Vector, ConeHalfAngleInRadians: cpp.Float32): cpp.Reference<Vector>;
	public function RandomUnitVectorInConeInDegreesFromStream(ConeDir: cpp.Reference<Vector>, ConeHalfAngleInDegrees: cpp.Float32, Stream: cpp.Reference<RandomStream>): cpp.Reference<Vector>;
	public function RandomUnitVectorInConeInDegrees(ConeDir: Vector, ConeHalfAngleInDegrees: cpp.Float32): cpp.Reference<Vector>;
	public function RandomUnitVectorFromStream(Stream: cpp.Reference<RandomStream>): cpp.Reference<Vector>;
	public function RandomUnitVector(): cpp.Reference<Vector>;
	public function RandomRotatorFromStream(bRoll: Bool, Stream: cpp.Reference<RandomStream>): cpp.Reference<Rotator>;
	public function RandomRotator(bRoll: Bool): cpp.Reference<Rotator>;
	public function RandomPointInBoundingBoxFromStream(Center: Vector, HalfSize: Vector, Stream: cpp.Reference<RandomStream>): cpp.Reference<Vector>;
	public function RandomPointInBoundingBox(Center: Vector, HalfSize: Vector): cpp.Reference<Vector>;
	public function RandomIntegerInRangeFromStream(Min: cpp.Int32, Max: cpp.Int32, Stream: cpp.Reference<RandomStream>): cpp.Reference<cpp.Int32>;
	public function RandomIntegerInRange(Min: cpp.Int32, Max: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function RandomIntegerFromStream(Max: cpp.Int32, Stream: cpp.Reference<RandomStream>): cpp.Reference<cpp.Int32>;
	public function RandomInteger64InRange(Min: cpp.Int64, Max: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function RandomInteger64(Max: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function RandomInteger(Max: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function RandomFloatInRangeFromStream(Min: cpp.Float32, Max: cpp.Float32, Stream: cpp.Reference<RandomStream>): cpp.Reference<cpp.Float32>;
	public function RandomFloatInRange(Min: cpp.Float64, Max: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function RandomFloatFromStream(Stream: cpp.Reference<RandomStream>): cpp.Reference<cpp.Float32>;
	public function RandomFloat(): cpp.Reference<cpp.Float64>;
	public function RandomBoolWithWeightFromStream(Weight: cpp.Float32, RandomStream: cpp.Reference<RandomStream>): cpp.Reference<Bool>;
	public function RandomBoolWithWeight(Weight: cpp.Float32): cpp.Reference<Bool>;
	public function RandomBoolFromStream(Stream: cpp.Reference<RandomStream>): cpp.Reference<Bool>;
	public function RandomBool(): cpp.Reference<Bool>;
	public function RadiansToDegrees(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function QuaternionSpringInterp(Current: Quat, Target: Quat, SpringState: cpp.Reference<QuaternionSpringState>, Stiffness: cpp.Float32, CriticalDampingFactor: cpp.Float32, DeltaTime: cpp.Float32, Mass: cpp.Float32, TargetVelocityAmount: cpp.Float32, bInitializeFromTarget: Bool): cpp.Reference<Quat>;
	public function Quat_VectorUp(Q: cpp.Reference<Quat>): cpp.Reference<Vector>;
	public function Quat_VectorRight(Q: cpp.Reference<Quat>): cpp.Reference<Vector>;
	public function Quat_VectorForward(Q: cpp.Reference<Quat>): cpp.Reference<Vector>;
	public function Quat_UnrotateVector(Q: cpp.Reference<Quat>, V: cpp.Reference<Vector>): cpp.Reference<Vector>;
	public function Quat_SizeSquared(Q: cpp.Reference<Quat>): cpp.Reference<cpp.Float32>;
	public function Quat_Size(Q: cpp.Reference<Quat>): cpp.Reference<cpp.Float32>;
	public function Quat_SetFromEuler(Q: cpp.Reference<Quat>, Euler: cpp.Reference<Vector>): Void;
	public function Quat_SetComponents(Q: cpp.Reference<Quat>, X: cpp.Float32, Y: cpp.Float32, Z: cpp.Float32, W: cpp.Float32): Void;
	public function Quat_Rotator(Q: cpp.Reference<Quat>): cpp.Reference<Rotator>;
	public function Quat_RotateVector(Q: cpp.Reference<Quat>, V: cpp.Reference<Vector>): cpp.Reference<Vector>;
	public function Quat_Normalized(Q: cpp.Reference<Quat>, Tolerance: cpp.Float32): cpp.Reference<Quat>;
	public function Quat_Normalize(Q: cpp.Reference<Quat>, Tolerance: cpp.Float32): Void;
	public function Quat_MakeFromEuler(Euler: cpp.Reference<Vector>): cpp.Reference<Quat>;
	public function Quat_Log(Q: cpp.Reference<Quat>): cpp.Reference<Quat>;
	public function Quat_IsNormalized(Q: cpp.Reference<Quat>): cpp.Reference<Bool>;
	public function Quat_IsNonFinite(Q: cpp.Reference<Quat>): cpp.Reference<Bool>;
	public function Quat_IsIdentity(Q: cpp.Reference<Quat>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function Quat_IsFinite(Q: cpp.Reference<Quat>): cpp.Reference<Bool>;
	public function Quat_Inversed(Q: cpp.Reference<Quat>): cpp.Reference<Quat>;
	public function Quat_Identity(): cpp.Reference<Quat>;
	public function Quat_GetRotationAxis(Q: cpp.Reference<Quat>): cpp.Reference<Vector>;
	public function Quat_GetAxisZ(Q: cpp.Reference<Quat>): cpp.Reference<Vector>;
	public function Quat_GetAxisY(Q: cpp.Reference<Quat>): cpp.Reference<Vector>;
	public function Quat_GetAxisX(Q: cpp.Reference<Quat>): cpp.Reference<Vector>;
	public function Quat_GetAngle(Q: cpp.Reference<Quat>): cpp.Reference<cpp.Float32>;
	public function Quat_Exp(Q: cpp.Reference<Quat>): cpp.Reference<Quat>;
	public function Quat_Euler(Q: cpp.Reference<Quat>): cpp.Reference<Vector>;
	public function Quat_EnforceShortestArcWith(A: cpp.Reference<Quat>, B: cpp.Reference<Quat>): Void;
	public function Quat_AngularDistance(A: cpp.Reference<Quat>, B: cpp.Reference<Quat>): cpp.Reference<cpp.Float32>;
	public function ProjectVectorOnToVector(V: Vector, Target: Vector): cpp.Reference<Vector>;
	public function ProjectVectorOnToPlane(V: Vector, PlaneNormal: Vector): cpp.Reference<Vector>;
	public function ProjectPointOnToPlane(Point: Vector, PlaneBase: Vector, PlaneNormal: Vector): cpp.Reference<Vector>;
	public function PointsAreCoplanar(Points: cpp.Reference<TArray<Vector>>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function PerlinNoise1D(Value: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function Percent_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Percent_FloatFloat(A: cpp.Float64, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Percent_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<cpp.UInt8>;
	public function Or_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Or_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Now(): cpp.Reference<DateTime>;
	public function NotEqualExactly_VectorVector(A: Vector, B: Vector): cpp.Reference<Bool>;
	public function NotEqualExactly_Vector4Vector4(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<Bool>;
	public function NotEqualExactly_Vector2DVector2D(A: Vector2D, B: Vector2D): cpp.Reference<Bool>;
	public function NotEqual_VectorVector(A: Vector, B: Vector, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function NotEqual_Vector4Vector4(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function NotEqual_Vector2DVector2D(A: Vector2D, B: Vector2D, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function NotEqual_TimespanTimespan(A: Timespan, B: Timespan): cpp.Reference<Bool>;
	public function NotEqual_RotatorRotator(A: Rotator, B: Rotator, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function NotEqual_QuatQuat(A: cpp.Reference<Quat>, B: cpp.Reference<Quat>, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function NotEqual_ObjectObject(A: cpp.Star<Object>, B: cpp.Star<Object>): cpp.Reference<Bool>;
	public function NotEqual_NameName(A: FName, B: FName): cpp.Reference<Bool>;
	public function NotEqual_MatrixMatrix(A: cpp.Reference<Matrix>, B: cpp.Reference<Matrix>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function NotEqual_LinearColorLinearColor(A: LinearColor, B: LinearColor): cpp.Reference<Bool>;
	public function NotEqual_IntPointIntPoint(A: IntPoint, B: IntPoint): cpp.Reference<Bool>;
	public function NotEqual_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<Bool>;
	public function NotEqual_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<Bool>;
	public function NotEqual_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<Bool>;
	public function NotEqual_DateTimeDateTime(A: DateTime, B: DateTime): cpp.Reference<Bool>;
	public function NotEqual_ClassClass(A: cpp.Star<Class>, B: cpp.Star<Class>): cpp.Reference<Bool>;
	public function NotEqual_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<Bool>;
	public function NotEqual_BoolBool(A: Bool, B: Bool): cpp.Reference<Bool>;
	public function Not_PreBool(A: Bool): cpp.Reference<Bool>;
	public function Not_Int64(A: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Not_Int(A: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function NormalSafe2D(A: Vector2D, Tolerance: cpp.Float32): cpp.Reference<Vector2D>;
	public function NormalizeToRange(Value: cpp.Float64, RangeMin: cpp.Float64, RangeMax: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function NormalizedDeltaRotator(A: Rotator, B: Rotator): cpp.Reference<Rotator>;
	public function NormalizeAxis(Angle: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function Normalize2D(A: cpp.Reference<Vector2D>, Tolerance: cpp.Float32): Void;
	public function Normal2D(A: Vector2D): cpp.Reference<Vector2D>;
	public function Normal(A: Vector, Tolerance: cpp.Float32): cpp.Reference<Vector>;
	public function NegateVector(A: Vector): cpp.Reference<Vector>;
	public function NegateRotator(A: Rotator): cpp.Reference<Rotator>;
	public function Negated2D(A: cpp.Reference<Vector2D>): cpp.Reference<Vector2D>;
	public function NearlyEqual_TransformTransform(A: cpp.Reference<Transform>, B: cpp.Reference<Transform>, LocationTolerance: cpp.Float32, RotationTolerance: cpp.Float32, Scale3DTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function NearlyEqual_FloatFloat(A: cpp.Float64, B: cpp.Float64, ErrorTolerance: cpp.Float64): cpp.Reference<Bool>;
	public function MultiplyMultiply_FloatFloat(Base: cpp.Float64, Exp: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function MultiplyByPi(Value: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Multiply_VectorVector(A: Vector, B: Vector): cpp.Reference<Vector>;
	public function Multiply_VectorInt(A: Vector, B: cpp.Int32): cpp.Reference<Vector>;
	public function Multiply_VectorFloat(A: Vector, B: cpp.Float64): cpp.Reference<Vector>;
	public function Multiply_Vector4Vector4(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function Multiply_Vector2DVector2D(A: Vector2D, B: Vector2D): cpp.Reference<Vector2D>;
	public function Multiply_Vector2DFloat(A: Vector2D, B: cpp.Float64): cpp.Reference<Vector2D>;
	public function Multiply_TimespanFloat(A: Timespan, Scalar: cpp.Float32): cpp.Reference<Timespan>;
	public function Multiply_RotatorInt(A: Rotator, B: cpp.Int32): cpp.Reference<Rotator>;
	public function Multiply_RotatorFloat(A: Rotator, B: cpp.Float32): cpp.Reference<Rotator>;
	public function Multiply_QuatQuat(A: cpp.Reference<Quat>, B: cpp.Reference<Quat>): cpp.Reference<Quat>;
	public function Multiply_MatrixMatrix(A: cpp.Reference<Matrix>, B: cpp.Reference<Matrix>): cpp.Reference<Matrix>;
	public function Multiply_MatrixFloat(A: cpp.Reference<Matrix>, B: cpp.Float64): cpp.Reference<Matrix>;
	public function Multiply_LinearColorLinearColor(A: LinearColor, B: LinearColor): cpp.Reference<LinearColor>;
	public function Multiply_LinearColorFloat(A: LinearColor, B: cpp.Float32): cpp.Reference<LinearColor>;
	public function Multiply_IntPointIntPoint(A: IntPoint, B: IntPoint): cpp.Reference<IntPoint>;
	public function Multiply_IntPointInt(A: IntPoint, B: cpp.Int32): cpp.Reference<IntPoint>;
	public function Multiply_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Multiply_IntFloat(A: cpp.Int32, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Multiply_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Multiply_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Multiply_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<cpp.UInt8>;
	public function MirrorVectorByNormal(InVect: Vector, InNormal: Vector): cpp.Reference<Vector>;
	public function MinOfIntArray(IntArray: cpp.Reference<TArray<cpp.Int32>>, IndexOfMinValue: cpp.Reference<cpp.Int32>, MinValue: cpp.Reference<cpp.Int32>): Void;
	public function MinOfFloatArray(FloatArray: cpp.Reference<TArray<cpp.Float32>>, IndexOfMinValue: cpp.Reference<cpp.Int32>, MinValue: cpp.Reference<cpp.Float32>): Void;
	public function MinOfByteArray(ByteArray: cpp.Reference<TArray<cpp.UInt8>>, IndexOfMinValue: cpp.Reference<cpp.Int32>, MinValue: cpp.Reference<cpp.UInt8>): Void;
	public function MinInt64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function MinimumAreaRectangle(WorldContextObject: cpp.Star<Object>, InVerts: cpp.Reference<TArray<Vector>>, SampleSurfaceNormal: cpp.Reference<Vector>, OutRectCenter: cpp.Reference<Vector>, OutRectRotation: cpp.Reference<Rotator>, OutSideLengthX: cpp.Reference<cpp.Float32>, OutSideLengthY: cpp.Reference<cpp.Float32>, bDebugDraw: Bool): Void;
	public function MinAreaRectangle(WorldContextObject: cpp.Star<Object>, InPoints: cpp.Reference<TArray<Vector>>, SampleSurfaceNormal: cpp.Reference<Vector>, OutRectCenter: cpp.Reference<Vector>, OutRectRotation: cpp.Reference<Rotator>, OutRectLengthX: cpp.Reference<cpp.Float32>, OutRectLengthY: cpp.Reference<cpp.Float32>, bDebugDraw: Bool): Void;
	public function Min(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function MaxOfIntArray(IntArray: cpp.Reference<TArray<cpp.Int32>>, IndexOfMaxValue: cpp.Reference<cpp.Int32>, MaxValue: cpp.Reference<cpp.Int32>): Void;
	public function MaxOfFloatArray(FloatArray: cpp.Reference<TArray<cpp.Float32>>, IndexOfMaxValue: cpp.Reference<cpp.Int32>, MaxValue: cpp.Reference<cpp.Float32>): Void;
	public function MaxOfByteArray(ByteArray: cpp.Reference<TArray<cpp.UInt8>>, IndexOfMaxValue: cpp.Reference<cpp.Int32>, MaxValue: cpp.Reference<cpp.UInt8>): Void;
	public function MaxInt64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Max(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Matrix_TransformVector4(M: cpp.Reference<Matrix>, V: Vector4): cpp.Reference<Vector4>;
	public function Matrix_TransformVector(M: cpp.Reference<Matrix>, V: Vector): cpp.Reference<Vector4>;
	public function Matrix_TransformPosition(M: cpp.Reference<Matrix>, V: Vector): cpp.Reference<Vector4>;
	public function Matrix_ToQuat(M: cpp.Reference<Matrix>): cpp.Reference<Quat>;
	public function Matrix_SetOrigin(M: cpp.Reference<Matrix>, NewOrigin: Vector): Void;
	public function Matrix_SetColumn(M: cpp.Reference<Matrix>, Column: EMatrixColumns, Value: Vector): Void;
	public function Matrix_SetAxis(M: cpp.Reference<Matrix>, Axis: EAxis, AxisVector: Vector): Void;
	public function Matrix_ScaleTranslation(M: cpp.Reference<Matrix>, Scale3D: Vector): cpp.Reference<Matrix>;
	public function Matrix_RemoveTranslation(M: cpp.Reference<Matrix>): cpp.Reference<Matrix>;
	public function Matrix_RemoveScaling(M: cpp.Reference<Matrix>, Tolerance: cpp.Float32): Void;
	public function Matrix_Mirror(M: cpp.Reference<Matrix>, MirrorAxis: EAxis, FlipAxis: EAxis): cpp.Reference<Matrix>;
	public function Matrix_InverseTransformVector(M: cpp.Reference<Matrix>, V: Vector): cpp.Reference<Vector>;
	public function Matrix_InverseTransformPosition(M: cpp.Reference<Matrix>, V: Vector): cpp.Reference<Vector>;
	public function Matrix_Identity(): cpp.Reference<Matrix>;
	public function Matrix_GetUnitAxis(M: cpp.Reference<Matrix>, Axis: EAxis): cpp.Reference<Vector>;
	public function Matrix_GetUnitAxes(M: cpp.Reference<Matrix>, X: cpp.Reference<Vector>, Y: cpp.Reference<Vector>, Z: cpp.Reference<Vector>): Void;
	public function Matrix_GetTransposed(M: cpp.Reference<Matrix>): cpp.Reference<Matrix>;
	public function Matrix_GetTransposeAdjoint(M: cpp.Reference<Matrix>): cpp.Reference<Matrix>;
	public function Matrix_GetScaleVector(M: cpp.Reference<Matrix>, Tolerance: cpp.Float32): cpp.Reference<Vector>;
	public function Matrix_GetScaledAxis(M: cpp.Reference<Matrix>, Axis: EAxis): cpp.Reference<Vector>;
	public function Matrix_GetScaledAxes(M: cpp.Reference<Matrix>, X: cpp.Reference<Vector>, Y: cpp.Reference<Vector>, Z: cpp.Reference<Vector>): Void;
	public function Matrix_GetRotDeterminant(M: cpp.Reference<Matrix>): cpp.Reference<cpp.Float32>;
	public function Matrix_GetRotator(M: cpp.Reference<Matrix>): cpp.Reference<Rotator>;
	public function Matrix_GetOrigin(InMatrix: cpp.Reference<Matrix>): cpp.Reference<Vector>;
	public function Matrix_GetMaximumAxisScale(M: cpp.Reference<Matrix>): cpp.Reference<cpp.Float32>;
	public function Matrix_GetMatrixWithoutScale(M: cpp.Reference<Matrix>, Tolerance: cpp.Float32): cpp.Reference<Matrix>;
	public function Matrix_GetInverse(M: cpp.Reference<Matrix>): cpp.Reference<Matrix>;
	public function Matrix_GetFrustumTopPlane(M: cpp.Reference<Matrix>, OutPlane: cpp.Reference<Plane>): cpp.Reference<Bool>;
	public function Matrix_GetFrustumRightPlane(M: cpp.Reference<Matrix>, OutPlane: cpp.Reference<Plane>): cpp.Reference<Bool>;
	public function Matrix_GetFrustumNearPlane(M: cpp.Reference<Matrix>, OutPlane: cpp.Reference<Plane>): cpp.Reference<Bool>;
	public function Matrix_GetFrustumLeftPlane(M: cpp.Reference<Matrix>, OutPlane: cpp.Reference<Plane>): cpp.Reference<Bool>;
	public function Matrix_GetFrustumFarPlane(M: cpp.Reference<Matrix>, OutPlane: cpp.Reference<Plane>): cpp.Reference<Bool>;
	public function Matrix_GetFrustumBottomPlane(M: cpp.Reference<Matrix>, OutPlane: cpp.Reference<Plane>): cpp.Reference<Bool>;
	public function Matrix_GetDeterminant(M: cpp.Reference<Matrix>): cpp.Reference<cpp.Float32>;
	public function Matrix_GetColumn(M: cpp.Reference<Matrix>, Column: EMatrixColumns): cpp.Reference<Vector>;
	public function Matrix_ContainsNaN(M: cpp.Reference<Matrix>): cpp.Reference<Bool>;
	public function Matrix_ConcatenateTranslation(M: cpp.Reference<Matrix>, Translation: Vector): cpp.Reference<Matrix>;
	public function Matrix_ApplyScale(M: cpp.Reference<Matrix>, Scale: cpp.Float32): cpp.Reference<Matrix>;
	public function MapRangeUnclamped(Value: cpp.Float64, InRangeA: cpp.Float64, InRangeB: cpp.Float64, OutRangeA: cpp.Float64, OutRangeB: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function MapRangeClamped(Value: cpp.Float64, InRangeA: cpp.Float64, InRangeB: cpp.Float64, OutRangeA: cpp.Float64, OutRangeB: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function MakeVector_NetQuantizeNormal(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): cpp.Reference<Vector_NetQuantizeNormal>;
	public function MakeVector_NetQuantize100(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): cpp.Reference<Vector_NetQuantize100>;
	public function MakeVector_NetQuantize10(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): cpp.Reference<Vector_NetQuantize10>;
	public function MakeVector_NetQuantize(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): cpp.Reference<Vector_NetQuantize>;
	public function MakeVector4(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64, W: cpp.Float64): cpp.Reference<Vector4>;
	public function MakeVector2D(X: cpp.Float64, Y: cpp.Float64): cpp.Reference<Vector2D>;
	public function MakeVector(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64): cpp.Reference<Vector>;
	public function MakeTransform(Location: Vector, Rotation: Rotator, Scale: Vector): cpp.Reference<Transform>;
	public function MakeTimespan2(Days: cpp.Int32, Hours: cpp.Int32, Minutes: cpp.Int32, Seconds: cpp.Int32, FractionNano: cpp.Int32): cpp.Reference<Timespan>;
	public function MakeTimespan(Days: cpp.Int32, Hours: cpp.Int32, Minutes: cpp.Int32, Seconds: cpp.Int32, Milliseconds: cpp.Int32): cpp.Reference<Timespan>;
	public function MakeRotFromZY(Z: cpp.Reference<Vector>, Y: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotFromZX(Z: cpp.Reference<Vector>, X: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotFromZ(Z: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotFromYZ(Y: cpp.Reference<Vector>, Z: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotFromYX(Y: cpp.Reference<Vector>, X: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotFromY(Y: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotFromXZ(X: cpp.Reference<Vector>, Z: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotFromXY(X: cpp.Reference<Vector>, Y: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotFromX(X: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function MakeRotator(Roll: cpp.Float32, Pitch: cpp.Float32, Yaw: cpp.Float32): cpp.Reference<Rotator>;
	public function MakeRotationFromAxes(Forward: Vector, Right: Vector, Up: Vector): cpp.Reference<Rotator>;
	public function MakeRelativeTransform(A: cpp.Reference<Transform>, RelativeTo: cpp.Reference<Transform>): cpp.Reference<Transform>;
	public function MakeRandomStream(InitialSeed: cpp.Int32): cpp.Reference<RandomStream>;
	public function MakeQuat(X: cpp.Float32, Y: cpp.Float32, Z: cpp.Float32, W: cpp.Float32): cpp.Reference<Quat>;
	public function MakeQualifiedFrameTime(Frame: FrameNumber, FrameRate: FrameRate, SubFrame: cpp.Float32): cpp.Reference<QualifiedFrameTime>;
	public function MakePulsatingValue(InCurrentTime: cpp.Float32, InPulsesPerSecond: cpp.Float32, InPhase: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function MakePlaneFromPointAndNormal(Point: Vector, Normal: Vector): cpp.Reference<Plane>;
	public function MakeFrameRate(Numerator: cpp.Int32, Denominator: cpp.Int32): cpp.Reference<FrameRate>;
	public function MakeDateTime(Year: cpp.Int32, Month: cpp.Int32, Day: cpp.Int32, Hour: cpp.Int32, Minute: cpp.Int32, Second: cpp.Int32, Millisecond: cpp.Int32): cpp.Reference<DateTime>;
	public function MakeColor(R: cpp.Float32, G: cpp.Float32, B: cpp.Float32, A: cpp.Float32): cpp.Reference<LinearColor>;
	public function MakeBoxSphereBounds(Origin: Vector, BoxExtent: Vector, SphereRadius: cpp.Float32): cpp.Reference<BoxSphereBounds>;
	public function MakeBox2D(Min: Vector2D, Max: Vector2D): cpp.Reference<Box2D>;
	public function MakeBox(Min: Vector, Max: Vector): cpp.Reference<Box>;
	public function Loge(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Log(A: cpp.Float64, Base: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function LinePlaneIntersection_OriginNormal(LineStart: cpp.Reference<Vector>, LineEnd: cpp.Reference<Vector>, PlaneOrigin: Vector, PlaneNormal: Vector, T: cpp.Reference<cpp.Float32>, Intersection: cpp.Reference<Vector>): cpp.Reference<Bool>;
	public function LinePlaneIntersection(LineStart: cpp.Reference<Vector>, LineEnd: cpp.Reference<Vector>, APlane: cpp.Reference<Plane>, T: cpp.Reference<cpp.Float32>, Intersection: cpp.Reference<Vector>): cpp.Reference<Bool>;
	public function LinearColorLerpUsingHSV(A: LinearColor, B: LinearColor, Alpha: cpp.Float32): cpp.Reference<LinearColor>;
	public function LinearColorLerp(A: LinearColor, B: LinearColor, Alpha: cpp.Float32): cpp.Reference<LinearColor>;
	public function LinearColor_Yellow(): cpp.Reference<LinearColor>;
	public function LinearColor_White(): cpp.Reference<LinearColor>;
	public function LinearColor_Transparent(): cpp.Reference<LinearColor>;
	public function LinearColor_ToRGBE(InLinearColor: LinearColor): cpp.Reference<Color>;
	public function LinearColor_ToNewOpacity(InColor: LinearColor, InOpacity: cpp.Float32): cpp.Reference<LinearColor>;
	public function LinearColor_SetTemperature(InOutColor: cpp.Reference<LinearColor>, InTemperature: cpp.Float32): Void;
	public function LinearColor_SetRGBA(InOutColor: cpp.Reference<LinearColor>, R: cpp.Float32, G: cpp.Float32, B: cpp.Float32, A: cpp.Float32): Void;
	public function LinearColor_SetRandomHue(InOutColor: cpp.Reference<LinearColor>): Void;
	public function LinearColor_SetFromSRGB(InOutColor: cpp.Reference<LinearColor>, InSRGB: cpp.Reference<Color>): Void;
	public function LinearColor_SetFromPow22(InOutColor: cpp.Reference<LinearColor>, InColor: cpp.Reference<Color>): Void;
	public function LinearColor_SetFromHSV(InOutColor: cpp.Reference<LinearColor>, H: cpp.Float32, S: cpp.Float32, V: cpp.Float32, A: cpp.Float32): Void;
	public function LinearColor_Set(InOutColor: cpp.Reference<LinearColor>, InColor: LinearColor): Void;
	public function LinearColor_Red(): cpp.Reference<LinearColor>;
	public function LinearColor_QuantizeRound(InColor: LinearColor): cpp.Reference<Color>;
	public function LinearColor_Quantize(InColor: LinearColor): cpp.Reference<Color>;
	public function LinearColor_IsNearEqual(A: LinearColor, B: LinearColor, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function LinearColor_Green(): cpp.Reference<LinearColor>;
	public function LinearColor_Gray(): cpp.Reference<LinearColor>;
	public function LinearColor_GetMin(InColor: LinearColor): cpp.Reference<cpp.Float32>;
	public function LinearColor_GetMax(InColor: LinearColor): cpp.Reference<cpp.Float32>;
	public function LinearColor_GetLuminance(InColor: LinearColor): cpp.Reference<cpp.Float32>;
	public function LinearColor_Distance(C1: LinearColor, C2: LinearColor): cpp.Reference<cpp.Float32>;
	public function LinearColor_Desaturated(InColor: LinearColor, InDesaturation: cpp.Float32): cpp.Reference<LinearColor>;
	public function LinearColor_Blue(): cpp.Reference<LinearColor>;
	public function LinearColor_Black(): cpp.Reference<LinearColor>;
	public function LessLess_VectorRotator(A: Vector, B: Rotator): cpp.Reference<Vector>;
	public function LessEqual_TimespanTimespan(A: Timespan, B: Timespan): cpp.Reference<Bool>;
	public function LessEqual_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<Bool>;
	public function LessEqual_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<Bool>;
	public function LessEqual_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<Bool>;
	public function LessEqual_DateTimeDateTime(A: DateTime, B: DateTime): cpp.Reference<Bool>;
	public function LessEqual_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<Bool>;
	public function Less_TimespanTimespan(A: Timespan, B: Timespan): cpp.Reference<Bool>;
	public function Less_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<Bool>;
	public function Less_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<Bool>;
	public function Less_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<Bool>;
	public function Less_DateTimeDateTime(A: DateTime, B: DateTime): cpp.Reference<Bool>;
	public function Less_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<Bool>;
	public function Lerp(A: cpp.Float64, B: cpp.Float64, Alpha: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function IsZero2D(A: cpp.Reference<Vector2D>): cpp.Reference<Bool>;
	public function IsPointInBoxWithTransform(Point: Vector, BoxWorldTransform: cpp.Reference<Transform>, BoxExtent: Vector): cpp.Reference<Bool>;
	public function IsPointInBox(Point: Vector, BoxOrigin: Vector, BoxExtent: Vector): cpp.Reference<Bool>;
	public function IsNearlyZero2D(A: cpp.Reference<Vector2D>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function IsMorning(A: DateTime): cpp.Reference<Bool>;
	public function IsLeapYear(Year: cpp.Int32): cpp.Reference<Bool>;
	public function IsAfternoon(A: DateTime): cpp.Reference<Bool>;
	public function InvertTransform(T: cpp.Reference<Transform>): cpp.Reference<Transform>;
	public function InverseTransformRotation(T: cpp.Reference<Transform>, Rotation: Rotator): cpp.Reference<Rotator>;
	public function InverseTransformLocation(T: cpp.Reference<Transform>, Location: Vector): cpp.Reference<Vector>;
	public function InverseTransformDirection(T: cpp.Reference<Transform>, Direction: Vector): cpp.Reference<Vector>;
	public function IntPoint_Zero(): cpp.Reference<IntPoint>;
	public function IntPoint_Up(): cpp.Reference<IntPoint>;
	public function IntPoint_Right(): cpp.Reference<IntPoint>;
	public function IntPoint_One(): cpp.Reference<IntPoint>;
	public function IntPoint_Left(): cpp.Reference<IntPoint>;
	public function IntPoint_Down(): cpp.Reference<IntPoint>;
	public function InRange_IntInt(Value: cpp.Int32, Min: cpp.Int32, Max: cpp.Int32, InclusiveMin: Bool, InclusiveMax: Bool): cpp.Reference<Bool>;
	public function InRange_Int64Int64(Value: cpp.Int64, Min: cpp.Int64, Max: cpp.Int64, InclusiveMin: Bool, InclusiveMax: Bool): cpp.Reference<Bool>;
	public function InRange_FloatFloat(Value: cpp.Float64, Min: cpp.Float64, Max: cpp.Float64, InclusiveMin: Bool, InclusiveMax: Bool): cpp.Reference<Bool>;
	public function Hypotenuse(Width: cpp.Float64, Height: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function HSVToRGBLinear(HSV: LinearColor): cpp.Reference<LinearColor>;
	public function HSVToRGB_Vector(HSV: LinearColor, RGB: cpp.Reference<LinearColor>): Void;
	public function HSVToRGB(H: cpp.Float32, S: cpp.Float32, V: cpp.Float32, A: cpp.Float32): cpp.Reference<LinearColor>;
	public function GridSnap_Float(Location: cpp.Float64, GridSize: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function GreaterGreater_VectorRotator(A: Vector, B: Rotator): cpp.Reference<Vector>;
	public function GreaterEqual_TimespanTimespan(A: Timespan, B: Timespan): cpp.Reference<Bool>;
	public function GreaterEqual_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<Bool>;
	public function GreaterEqual_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<Bool>;
	public function GreaterEqual_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<Bool>;
	public function GreaterEqual_DateTimeDateTime(A: DateTime, B: DateTime): cpp.Reference<Bool>;
	public function GreaterEqual_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<Bool>;
	public function Greater_TimespanTimespan(A: Timespan, B: Timespan): cpp.Reference<Bool>;
	public function Greater_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<Bool>;
	public function Greater_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<Bool>;
	public function Greater_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<Bool>;
	public function Greater_DateTimeDateTime(A: DateTime, B: DateTime): cpp.Reference<Bool>;
	public function Greater_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<Bool>;
	public function GetYear(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetYawPitchFromVector(InVec: Vector, Yaw: cpp.Reference<cpp.Float32>, Pitch: cpp.Reference<cpp.Float32>): Void;
	public function GetVectorArrayAverage(Vectors: cpp.Reference<TArray<Vector>>): cpp.Reference<Vector>;
	public function GetUpVector(InRot: Rotator): cpp.Reference<Vector>;
	public function GetTotalSeconds(A: Timespan): cpp.Reference<cpp.Float32>;
	public function GetTotalMinutes(A: Timespan): cpp.Reference<cpp.Float32>;
	public function GetTotalMilliseconds(A: Timespan): cpp.Reference<cpp.Float32>;
	public function GetTotalHours(A: Timespan): cpp.Reference<cpp.Float32>;
	public function GetTotalDays(A: Timespan): cpp.Reference<cpp.Float32>;
	public function GetTimeOfDay(A: DateTime): cpp.Reference<Timespan>;
	public function GetTAU(): cpp.Reference<cpp.Float64>;
	public function GetSlopeDegreeAngles(MyRightYAxis: cpp.Reference<Vector>, FloorNormal: cpp.Reference<Vector>, UpVector: cpp.Reference<Vector>, OutSlopePitchDegreeAngle: cpp.Reference<cpp.Float32>, OutSlopeRollDegreeAngle: cpp.Reference<cpp.Float32>): Void;
	public function GetSeconds(A: Timespan): cpp.Reference<cpp.Int32>;
	public function GetSecond(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetRotated2D(A: Vector2D, AngleDeg: cpp.Float32): cpp.Reference<Vector2D>;
	public function GetRightVector(InRot: Rotator): cpp.Reference<Vector>;
	public function GetReflectionVector(Direction: Vector, SurfaceNormal: Vector): cpp.Reference<Vector>;
	public function GetPointDistanceToSegment(Point: Vector, SegmentStart: Vector, SegmentEnd: Vector): cpp.Reference<cpp.Float32>;
	public function GetPointDistanceToLine(Point: Vector, LineOrigin: Vector, LineDirection: Vector): cpp.Reference<cpp.Float32>;
	public function GetPI(): cpp.Reference<cpp.Float64>;
	public function GetMonth(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetMinutes(A: Timespan): cpp.Reference<cpp.Int32>;
	public function GetMinute(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetMinElement(A: Vector): cpp.Reference<cpp.Float64>;
	public function GetMin2D(A: Vector2D): cpp.Reference<cpp.Float64>;
	public function GetMilliseconds(A: Timespan): cpp.Reference<cpp.Int32>;
	public function GetMillisecond(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetMaxElement(A: Vector): cpp.Reference<cpp.Float64>;
	public function GetMax2D(A: Vector2D): cpp.Reference<cpp.Float64>;
	public function GetHours(A: Timespan): cpp.Reference<cpp.Int32>;
	public function GetHour12(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetHour(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetForwardVector(InRot: Rotator): cpp.Reference<Vector>;
	public function GetDuration(A: Timespan): cpp.Reference<Timespan>;
	public function GetDirectionUnitVector(From: Vector, To: Vector): cpp.Reference<Vector>;
	public function GetDays(A: Timespan): cpp.Reference<cpp.Int32>;
	public function GetDayOfYear(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetDay(A: DateTime): cpp.Reference<cpp.Int32>;
	public function GetDate(A: DateTime): cpp.Reference<DateTime>;
	public function GetAzimuthAndElevation(InDirection: Vector, ReferenceFrame: cpp.Reference<Transform>, Azimuth: cpp.Reference<cpp.Float32>, Elevation: cpp.Reference<cpp.Float32>): Void;
	public function GetAxes(A: Rotator, X: cpp.Reference<Vector>, Y: cpp.Reference<Vector>, Z: cpp.Reference<Vector>): Void;
	public function GetAbsMax2D(A: Vector2D): cpp.Reference<cpp.Float64>;
	public function GetAbs2D(A: Vector2D): cpp.Reference<Vector2D>;
	public function FWrap(Value: cpp.Float64, Min: cpp.Float64, Max: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function FTruncVector(InVector: cpp.Reference<Vector>): cpp.Reference<IntVector>;
	public function FTrunc64(A: cpp.Float64): cpp.Reference<cpp.Int64>;
	public function FTrunc(A: cpp.Float64): cpp.Reference<cpp.Int32>;
	public function FromSeconds(Seconds: cpp.Float32): cpp.Reference<Timespan>;
	public function FromMinutes(Minutes: cpp.Float32): cpp.Reference<Timespan>;
	public function FromMilliseconds(Milliseconds: cpp.Float32): cpp.Reference<Timespan>;
	public function FromHours(Hours: cpp.Float32): cpp.Reference<Timespan>;
	public function FromDays(Days: cpp.Float32): cpp.Reference<Timespan>;
	public function Fraction(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function FMod64(Dividend: cpp.Float64, Divisor: cpp.Float64, Remainder: cpp.Reference<cpp.Float64>): cpp.Reference<cpp.Int64>;
	public function FMod(Dividend: cpp.Float64, Divisor: cpp.Float64, Remainder: cpp.Reference<cpp.Float64>): cpp.Reference<cpp.Int32>;
	public function FMin(A: cpp.Float64, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function FMax(A: cpp.Float64, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function FloatSpringInterp(Current: cpp.Float32, Target: cpp.Float32, SpringState: cpp.Reference<FloatSpringState>, Stiffness: cpp.Float32, CriticalDampingFactor: cpp.Float32, DeltaTime: cpp.Float32, Mass: cpp.Float32, TargetVelocityAmount: cpp.Float32, bClamp: Bool, MinValue: cpp.Float32, MaxValue: cpp.Float32, bInitializeFromTarget: Bool): cpp.Reference<cpp.Float32>;
	public function FixedTurn(InCurrent: cpp.Float32, InDesired: cpp.Float32, InDeltaRate: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function FInterpTo_Constant(Current: cpp.Float64, Target: cpp.Float64, DeltaTime: cpp.Float64, InterpSpeed: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function FInterpTo(Current: cpp.Float64, Target: cpp.Float64, DeltaTime: cpp.Float64, InterpSpeed: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function FInterpEaseInOut(A: cpp.Float64, B: cpp.Float64, Alpha: cpp.Float64, Exponent: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function FindRelativeLookAtRotation(StartTransform: cpp.Reference<Transform>, TargetLocation: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function FindNearestPointsOnLineSegments(Segment1Start: Vector, Segment1End: Vector, Segment2Start: Vector, Segment2End: Vector, Segment1Point: cpp.Reference<Vector>, Segment2Point: cpp.Reference<Vector>): Void;
	public function FindLookAtRotation(Start: cpp.Reference<Vector>, Target: cpp.Reference<Vector>): cpp.Reference<Rotator>;
	public function FindClosestPointOnSegment(Point: Vector, SegmentStart: Vector, SegmentEnd: Vector): cpp.Reference<Vector>;
	public function FindClosestPointOnLine(Point: Vector, LineOrigin: Vector, LineDirection: Vector): cpp.Reference<Vector>;
	public function FFloor64(A: cpp.Float64): cpp.Reference<cpp.Int64>;
	public function FFloor(A: cpp.Float64): cpp.Reference<cpp.Int32>;
	public function FClamp(Value: cpp.Float64, Min: cpp.Float64, Max: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function FCeil64(A: cpp.Float64): cpp.Reference<cpp.Int64>;
	public function FCeil(A: cpp.Float64): cpp.Reference<cpp.Int32>;
	public function Exp(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function EqualExactly_VectorVector(A: Vector, B: Vector): cpp.Reference<Bool>;
	public function EqualExactly_Vector4Vector4(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<Bool>;
	public function EqualExactly_Vector2DVector2D(A: Vector2D, B: Vector2D): cpp.Reference<Bool>;
	public function EqualEqual_VectorVector(A: Vector, B: Vector, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function EqualEqual_Vector4Vector4(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function EqualEqual_Vector2DVector2D(A: Vector2D, B: Vector2D, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function EqualEqual_TransformTransform(A: cpp.Reference<Transform>, B: cpp.Reference<Transform>): cpp.Reference<Bool>;
	public function EqualEqual_TimespanTimespan(A: Timespan, B: Timespan): cpp.Reference<Bool>;
	public function EqualEqual_RotatorRotator(A: Rotator, B: Rotator, ErrorTolerance: cpp.Float32): cpp.Reference<Bool>;
	public function EqualEqual_QuatQuat(A: cpp.Reference<Quat>, B: cpp.Reference<Quat>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function EqualEqual_ObjectObject(A: cpp.Star<Object>, B: cpp.Star<Object>): cpp.Reference<Bool>;
	public function EqualEqual_NameName(A: FName, B: FName): cpp.Reference<Bool>;
	public function EqualEqual_MatrixMatrix(A: cpp.Reference<Matrix>, B: cpp.Reference<Matrix>, Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function EqualEqual_LinearColorLinearColor(A: LinearColor, B: LinearColor): cpp.Reference<Bool>;
	public function EqualEqual_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<Bool>;
	public function EqualEqual_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<Bool>;
	public function EqualEqual_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<Bool>;
	public function EqualEqual_DateTimeDateTime(A: DateTime, B: DateTime): cpp.Reference<Bool>;
	public function EqualEqual_ClassClass(A: cpp.Star<Class>, B: cpp.Star<Class>): cpp.Reference<Bool>;
	public function EqualEqual_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<Bool>;
	public function EqualEqual_BoolBool(A: Bool, B: Bool): cpp.Reference<Bool>;
	public function Equal_IntPointIntPoint(A: IntPoint, B: IntPoint): cpp.Reference<Bool>;
	public function Ease(A: cpp.Float64, B: cpp.Float64, Alpha: cpp.Float64, EasingFunc: EEasingFunc, BlendExp: cpp.Float64, Steps: cpp.Int32): cpp.Reference<cpp.Float64>;
	public function DynamicWeightedMovingAverage_FVector(CurrentSample: Vector, PreviousSample: Vector, MaxDistance: cpp.Float32, MinWeight: cpp.Float32, MaxWeight: cpp.Float32): cpp.Reference<Vector>;
	public function DynamicWeightedMovingAverage_FRotator(CurrentSample: Rotator, PreviousSample: Rotator, MaxDistance: cpp.Float32, MinWeight: cpp.Float32, MaxWeight: cpp.Float32): cpp.Reference<Rotator>;
	public function DynamicWeightedMovingAverage_Float(CurrentSample: cpp.Float32, PreviousSample: cpp.Float32, MaxDistance: cpp.Float32, MinWeight: cpp.Float32, MaxWeight: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function DotProduct2D(A: Vector2D, B: Vector2D): cpp.Reference<cpp.Float64>;
	public function Dot_VectorVector(A: Vector, B: Vector): cpp.Reference<cpp.Float64>;
	public function Divide_VectorVector(A: Vector, B: Vector): cpp.Reference<Vector>;
	public function Divide_VectorInt(A: Vector, B: cpp.Int32): cpp.Reference<Vector>;
	public function Divide_VectorFloat(A: Vector, B: cpp.Float64): cpp.Reference<Vector>;
	public function Divide_Vector4Vector4(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function Divide_Vector2DVector2D(A: Vector2D, B: Vector2D): cpp.Reference<Vector2D>;
	public function Divide_Vector2DFloat(A: Vector2D, B: cpp.Float64): cpp.Reference<Vector2D>;
	public function Divide_TimespanFloat(A: Timespan, Scalar: cpp.Float32): cpp.Reference<Timespan>;
	public function Divide_LinearColorLinearColor(A: LinearColor, B: LinearColor): cpp.Reference<LinearColor>;
	public function Divide_IntPointIntPoint(A: IntPoint, B: IntPoint): cpp.Reference<IntPoint>;
	public function Divide_IntPointInt(A: IntPoint, B: cpp.Int32): cpp.Reference<IntPoint>;
	public function Divide_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Divide_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Divide_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Divide_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<cpp.UInt8>;
	public function DistanceSquared2D(V1: Vector2D, V2: Vector2D): cpp.Reference<cpp.Float64>;
	public function Distance2D(V1: Vector2D, V2: Vector2D): cpp.Reference<cpp.Float64>;
	public function DegTan(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function DegSin(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function DegreesToRadians(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function DegCos(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function DegAtan2(Y: cpp.Float64, X: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function DegAtan(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function DegAsin(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function DegAcos(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function DaysInYear(Year: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function DaysInMonth(Year: cpp.Int32, Month: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function DateTimeMinValue(): cpp.Reference<DateTime>;
	public function DateTimeMaxValue(): cpp.Reference<DateTime>;
	public function DateTimeFromString(DateTimeString: FString, Result: cpp.Reference<DateTime>): cpp.Reference<Bool>;
	public function DateTimeFromIsoString(IsoString: FString, Result: cpp.Reference<DateTime>): cpp.Reference<Bool>;
	public function CrossProduct2D(A: Vector2D, B: Vector2D): cpp.Reference<cpp.Float64>;
	public function Cross_VectorVector(A: Vector, B: Vector): cpp.Reference<Vector>;
	public function CreateVectorFromYawPitch(Yaw: cpp.Float32, Pitch: cpp.Float32, Length: cpp.Float32): cpp.Reference<Vector>;
	public function Cos(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function ConvertTransformToRelative(Transform: cpp.Reference<Transform>, ParentTransform: cpp.Reference<Transform>): cpp.Reference<Transform>;
	public function Conv_VectorToVector2D(InVector: Vector): cpp.Reference<Vector2D>;
	public function Conv_VectorToTransform(InLocation: Vector): cpp.Reference<Transform>;
	public function Conv_VectorToRotator(InVec: Vector): cpp.Reference<Rotator>;
	public function Conv_VectorToQuaternion(InVec: Vector): cpp.Reference<Quat>;
	public function Conv_VectorToLinearColor(InVec: Vector): cpp.Reference<LinearColor>;
	public function Conv_Vector4ToVector(InVector4: cpp.Reference<Vector4>): cpp.Reference<Vector>;
	public function Conv_Vector4ToRotator(InVec: cpp.Reference<Vector4>): cpp.Reference<Rotator>;
	public function Conv_Vector4ToQuaternion(InVec: cpp.Reference<Vector4>): cpp.Reference<Quat>;
	public function Conv_Vector2DToVector(InVector2D: Vector2D, Z: cpp.Float32): cpp.Reference<Vector>;
	public function Conv_Vector2DToIntPoint(InVector2D: Vector2D): cpp.Reference<IntPoint>;
	public function Conv_TransformToMatrix(Transform: cpp.Reference<Transform>): cpp.Reference<Matrix>;
	public function Conv_RotatorToVector(InRot: Rotator): cpp.Reference<Vector>;
	public function Conv_RotatorToTransform(InRotator: cpp.Reference<Rotator>): cpp.Reference<Transform>;
	public function Conv_RotatorToQuaternion(InRot: Rotator): cpp.Reference<Quat>;
	public function Conv_MatrixToTransform(InMatrix: cpp.Reference<Matrix>): cpp.Reference<Transform>;
	public function Conv_MatrixToRotator(InMatrix: cpp.Reference<Matrix>): cpp.Reference<Rotator>;
	public function Conv_LinearColorToVector(InLinearColor: LinearColor): cpp.Reference<Vector>;
	public function Conv_LinearColorToColor(InLinearColor: LinearColor, InUseSRGB: Bool): cpp.Reference<Color>;
	public function Conv_IntVectorToVector(InIntVector: cpp.Reference<IntVector>): cpp.Reference<Vector>;
	public function Conv_IntToVector(InInt: cpp.Int32): cpp.Reference<Vector>;
	public function Conv_IntToIntVector(InInt: cpp.Int32): cpp.Reference<IntVector>;
	public function Conv_IntToInt64(InInt: cpp.Int32): cpp.Reference<cpp.Int64>;
	public function Conv_IntToFloat(InInt: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function Conv_IntToDouble(InInt: cpp.Int32): cpp.Reference<cpp.Float64>;
	public function Conv_IntToByte(InInt: cpp.Int32): cpp.Reference<cpp.UInt8>;
	public function Conv_IntToBool(InInt: cpp.Int32): cpp.Reference<Bool>;
	public function Conv_IntPointToVector2D(InIntPoint: IntPoint): cpp.Reference<Vector2D>;
	public function Conv_Int64ToInt(InInt: cpp.Int64): cpp.Reference<cpp.Int32>;
	public function Conv_Int64ToDouble(InInt: cpp.Int64): cpp.Reference<cpp.Float64>;
	public function Conv_Int64ToByte(InInt: cpp.Int64): cpp.Reference<cpp.UInt8>;
	public function Conv_FloatToVector(InFloat: cpp.Float32): cpp.Reference<Vector>;
	public function Conv_FloatToLinearColor(InFloat: cpp.Float32): cpp.Reference<LinearColor>;
	public function Conv_FloatToDouble(InFloat: cpp.Float32): cpp.Reference<cpp.Float64>;
	public function Conv_DoubleToVector(InDouble: cpp.Float64): cpp.Reference<Vector>;
	public function Conv_DoubleToLinearColor(InDouble: cpp.Float64): cpp.Reference<LinearColor>;
	public function Conv_DoubleToInt64(InDouble: cpp.Float64): cpp.Reference<cpp.Int64>;
	public function Conv_DoubleToFloat(InDouble: cpp.Float64): cpp.Reference<cpp.Float32>;
	public function Conv_ColorToLinearColor(InColor: Color): cpp.Reference<LinearColor>;
	public function Conv_ByteToInt64(InByte: cpp.UInt8): cpp.Reference<cpp.Int64>;
	public function Conv_ByteToInt(InByte: cpp.UInt8): cpp.Reference<cpp.Int32>;
	public function Conv_ByteToFloat(InByte: cpp.UInt8): cpp.Reference<cpp.Float32>;
	public function Conv_ByteToDouble(InByte: cpp.UInt8): cpp.Reference<cpp.Float64>;
	public function Conv_BoolToInt(InBool: Bool): cpp.Reference<cpp.Int32>;
	public function Conv_BoolToFloat(InBool: Bool): cpp.Reference<cpp.Float32>;
	public function Conv_BoolToByte(InBool: Bool): cpp.Reference<cpp.UInt8>;
	public function ComposeTransforms(A: cpp.Reference<Transform>, B: cpp.Reference<Transform>): cpp.Reference<Transform>;
	public function ComposeRotators(A: Rotator, B: Rotator): cpp.Reference<Rotator>;
	public function ClassIsChildOf(TestClass: TSubclassOf<Object>, ParentClass: TSubclassOf<Object>): cpp.Reference<Bool>;
	public function ClampVectorSize(A: Vector, Min: cpp.Float64, Max: cpp.Float64): cpp.Reference<Vector>;
	public function ClampInt64(Value: cpp.Int64, Min: cpp.Int64, Max: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function ClampAxis(Angle: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function ClampAxes2D(A: Vector2D, MinAxisVal: cpp.Float64, MaxAxisVal: cpp.Float64): cpp.Reference<Vector2D>;
	public function ClampAngle(AngleDegrees: cpp.Float64, MinAngleDegrees: cpp.Float64, MaxAngleDegrees: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Clamp(Value: cpp.Int32, Min: cpp.Int32, Max: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function CInterpTo(Current: LinearColor, Target: LinearColor, DeltaTime: cpp.Float32, InterpSpeed: cpp.Float32): cpp.Reference<LinearColor>;
	public function BreakVector_NetQuantizeNormal(InVec: Vector_NetQuantizeNormal, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector_NetQuantize100(InVec: Vector_NetQuantize100, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector_NetQuantize10(InVec: Vector_NetQuantize10, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector_NetQuantize(InVec: Vector_NetQuantize, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector4(InVec: cpp.Reference<Vector4>, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>, W: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector3f(InVec: Vector3f, X: cpp.Reference<cpp.Float32>, Y: cpp.Reference<cpp.Float32>, Z: cpp.Reference<cpp.Float32>): Void;
	public function BreakVector2D(InVec: Vector2D, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>): Void;
	public function BreakVector(InVec: Vector, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>): Void;
	public function BreakTransform(InTransform: cpp.Reference<Transform>, Location: cpp.Reference<Vector>, Rotation: cpp.Reference<Rotator>, Scale: cpp.Reference<Vector>): Void;
	public function BreakTimespan2(InTimespan: Timespan, Days: cpp.Reference<cpp.Int32>, Hours: cpp.Reference<cpp.Int32>, Minutes: cpp.Reference<cpp.Int32>, Seconds: cpp.Reference<cpp.Int32>, FractionNano: cpp.Reference<cpp.Int32>): Void;
	public function BreakTimespan(InTimespan: Timespan, Days: cpp.Reference<cpp.Int32>, Hours: cpp.Reference<cpp.Int32>, Minutes: cpp.Reference<cpp.Int32>, Seconds: cpp.Reference<cpp.Int32>, Milliseconds: cpp.Reference<cpp.Int32>): Void;
	public function BreakRotIntoAxes(InRot: cpp.Reference<Rotator>, X: cpp.Reference<Vector>, Y: cpp.Reference<Vector>, Z: cpp.Reference<Vector>): Void;
	public function BreakRotator(InRot: Rotator, Roll: cpp.Reference<cpp.Float32>, Pitch: cpp.Reference<cpp.Float32>, Yaw: cpp.Reference<cpp.Float32>): Void;
	public function BreakRandomStream(InRandomStream: cpp.Reference<RandomStream>, InitialSeed: cpp.Reference<cpp.Int32>): Void;
	public function BreakQuat(InQuat: cpp.Reference<Quat>, X: cpp.Reference<cpp.Float32>, Y: cpp.Reference<cpp.Float32>, Z: cpp.Reference<cpp.Float32>, W: cpp.Reference<cpp.Float32>): Void;
	public function BreakQualifiedFrameTime(InFrameTime: cpp.Reference<QualifiedFrameTime>, Frame: cpp.Reference<FrameNumber>, FrameRate: cpp.Reference<FrameRate>, SubFrame: cpp.Reference<cpp.Float32>): Void;
	public function BreakFrameRate(InFrameRate: cpp.Reference<FrameRate>, Numerator: cpp.Reference<cpp.Int32>, Denominator: cpp.Reference<cpp.Int32>): Void;
	public function BreakDateTime(InDateTime: DateTime, Year: cpp.Reference<cpp.Int32>, Month: cpp.Reference<cpp.Int32>, Day: cpp.Reference<cpp.Int32>, Hour: cpp.Reference<cpp.Int32>, Minute: cpp.Reference<cpp.Int32>, Second: cpp.Reference<cpp.Int32>, Millisecond: cpp.Reference<cpp.Int32>): Void;
	public function BreakColor(InColor: LinearColor, R: cpp.Reference<cpp.Float32>, G: cpp.Reference<cpp.Float32>, B: cpp.Reference<cpp.Float32>, A: cpp.Reference<cpp.Float32>): Void;
	public function BreakBoxSphereBounds(InBoxSphereBounds: cpp.Reference<BoxSphereBounds>, Origin: cpp.Reference<Vector>, BoxExtent: cpp.Reference<Vector>, SphereRadius: cpp.Reference<cpp.Float32>): Void;
	public function BooleanXOR(A: Bool, B: Bool): cpp.Reference<Bool>;
	public function BooleanOR(A: Bool, B: Bool): cpp.Reference<Bool>;
	public function BooleanNOR(A: Bool, B: Bool): cpp.Reference<Bool>;
	public function BooleanNAND(A: Bool, B: Bool): cpp.Reference<Bool>;
	public function BooleanAND(A: Bool, B: Bool): cpp.Reference<Bool>;
	public function BMin(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<cpp.UInt8>;
	public function BMax(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<cpp.UInt8>;
	public function Atan2(Y: cpp.Float64, X: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Atan(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Asin(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function And_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function And_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Add_VectorVector(A: Vector, B: Vector): cpp.Reference<Vector>;
	public function Add_VectorInt(A: Vector, B: cpp.Int32): cpp.Reference<Vector>;
	public function Add_VectorFloat(A: Vector, B: cpp.Float64): cpp.Reference<Vector>;
	public function Add_Vector4Vector4(A: cpp.Reference<Vector4>, B: cpp.Reference<Vector4>): cpp.Reference<Vector4>;
	public function Add_Vector2DVector2D(A: Vector2D, B: Vector2D): cpp.Reference<Vector2D>;
	public function Add_Vector2DFloat(A: Vector2D, B: cpp.Float64): cpp.Reference<Vector2D>;
	public function Add_TimespanTimespan(A: Timespan, B: Timespan): cpp.Reference<Timespan>;
	public function Add_QuatQuat(A: cpp.Reference<Quat>, B: cpp.Reference<Quat>): cpp.Reference<Quat>;
	public function Add_MatrixMatrix(A: cpp.Reference<Matrix>, B: cpp.Reference<Matrix>): cpp.Reference<Matrix>;
	public function Add_LinearColorLinearColor(A: LinearColor, B: LinearColor): cpp.Reference<LinearColor>;
	public function Add_IntPointIntPoint(A: IntPoint, B: IntPoint): cpp.Reference<IntPoint>;
	public function Add_IntPointInt(A: IntPoint, B: cpp.Int32): cpp.Reference<IntPoint>;
	public function Add_IntInt(A: cpp.Int32, B: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Add_Int64Int64(A: cpp.Int64, B: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Add_DoubleDouble(A: cpp.Float64, B: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Add_DateTimeTimespan(A: DateTime, B: Timespan): cpp.Reference<DateTime>;
	public function Add_DateTimeDateTime(A: DateTime, B: DateTime): cpp.Reference<DateTime>;
	public function Add_ByteByte(A: cpp.UInt8, B: cpp.UInt8): cpp.Reference<cpp.UInt8>;
	public function Acos(A: cpp.Float64): cpp.Reference<cpp.Float64>;
	public function Abs_Int64(A: cpp.Int64): cpp.Reference<cpp.Int64>;
	public function Abs_Int(A: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function Abs(A: cpp.Float64): cpp.Reference<cpp.Float64>;
}

@:forward()
@:nativeGen
abstract ConstKismetMathLibrary(KismetMathLibrary) from KismetMathLibrary {
}