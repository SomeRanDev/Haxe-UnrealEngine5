// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEnvQueryGenerator_Composite")
@:include("EnvironmentQuery/Generators/EnvQueryGenerator_Composite.h")
@:structAccess
extern class EnvQueryGenerator_Composite extends EnvQueryGenerator {
	public var Generators: TArray<cpp.Star<EnvQueryGenerator>>;
	public var bAllowDifferentItemTypes: Bool;
	public var bHasMatchingItemType: Bool;
	public var ForcedItemType: TSubclassOf<EnvQueryItemType>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstEnvQueryGenerator_Composite(EnvQueryGenerator_Composite) from EnvQueryGenerator_Composite {
	public extern var Generators(get, never): TArray<cpp.Star<EnvQueryGenerator.ConstEnvQueryGenerator>>;
	public inline extern function get_Generators(): TArray<cpp.Star<EnvQueryGenerator.ConstEnvQueryGenerator>> return this.Generators;
	public extern var bAllowDifferentItemTypes(get, never): Bool;
	public inline extern function get_bAllowDifferentItemTypes(): Bool return this.bAllowDifferentItemTypes;
	public extern var bHasMatchingItemType(get, never): Bool;
	public inline extern function get_bHasMatchingItemType(): Bool return this.bHasMatchingItemType;
	public extern var ForcedItemType(get, never): TSubclassOf<EnvQueryItemType.ConstEnvQueryItemType>;
	public inline extern function get_ForcedItemType(): TSubclassOf<EnvQueryItemType.ConstEnvQueryItemType> return this.ForcedItemType;
}

@:forward
@:nativeGen
@:native("EnvQueryGenerator_Composite*")
abstract EnvQueryGenerator_CompositePtr(cpp.Star<EnvQueryGenerator_Composite>) from cpp.Star<EnvQueryGenerator_Composite> to cpp.Star<EnvQueryGenerator_Composite>{
	@:from
	public static extern inline function fromValue(v: EnvQueryGenerator_Composite): EnvQueryGenerator_CompositePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EnvQueryGenerator_Composite {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}