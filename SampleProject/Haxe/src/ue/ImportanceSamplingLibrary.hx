// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UImportanceSamplingLibrary")
@:include("Kismet/ImportanceSamplingLibrary.h")
@:valueType
extern class ImportanceSamplingLibrary extends BlueprintFunctionLibrary {
	public function RandomSobolFloat(Index: ucpp.num.Int32, Dimension: ucpp.num.Int32, Seed: ucpp.num.Float32): ucpp.num.Float32;
	public function RandomSobolCell3D(Index: ucpp.num.Int32, NumCells: ucpp.num.Int32, Cell: Vector, Seed: Vector): Vector;
	public function RandomSobolCell2D(Index: ucpp.num.Int32, NumCells: ucpp.num.Int32, Cell: Vector2D, Seed: Vector2D): Vector2D;
	public function NextSobolFloat(Index: ucpp.num.Int32, Dimension: ucpp.num.Int32, PreviousValue: ucpp.num.Float32): ucpp.num.Float32;
	public function NextSobolCell3D(Index: ucpp.num.Int32, NumCells: ucpp.num.Int32, PreviousValue: Vector): Vector;
	public function NextSobolCell2D(Index: ucpp.num.Int32, NumCells: ucpp.num.Int32, PreviousValue: Vector2D): Vector2D;
	public function MakeImportanceTexture(Texture: ucpp.Ptr<Texture2D>, WeightingFunc: TEnumAsByte<EImportanceWeight>): ImportanceTexture;
	public function ImportanceSample(Texture: ucpp.Ref<ImportanceTexture>, Rand: ucpp.Ref<Vector2D>, Samples: ucpp.num.Int32, Intensity: ucpp.num.Float32, SamplePosition: ucpp.Ref<Vector2D>, SampleColor: ucpp.Ref<LinearColor>, SampleIntensity: ucpp.Ref<ucpp.num.Float32>, SampleSize: ucpp.Ref<ucpp.num.Float32>): Void;
	public function BreakImportanceTexture(ImportanceTexture: ucpp.Ref<ImportanceTexture>, Texture: ucpp.Ref<ucpp.Ptr<Texture2D>>, WeightingFunc: ucpp.Ref<TEnumAsByte<EImportanceWeight>>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstImportanceSamplingLibrary(ImportanceSamplingLibrary) from ImportanceSamplingLibrary {
}

@:forward
@:nativeGen
@:native("ImportanceSamplingLibrary*")
abstract ImportanceSamplingLibraryPtr(ucpp.Ptr<ImportanceSamplingLibrary>) from ucpp.Ptr<ImportanceSamplingLibrary> to ucpp.Ptr<ImportanceSamplingLibrary>{
	@:from
	public static extern inline function fromValue(v: ImportanceSamplingLibrary): ImportanceSamplingLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ImportanceSamplingLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}