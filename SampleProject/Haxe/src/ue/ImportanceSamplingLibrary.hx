// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UImportanceSamplingLibrary")
@:include("Kismet/ImportanceSamplingLibrary.h")
@:structAccess
extern class ImportanceSamplingLibrary extends BlueprintFunctionLibrary {
	public function RandomSobolFloat(Index: cpp.Int32, Dimension: cpp.Int32, Seed: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function RandomSobolCell3D(Index: cpp.Int32, NumCells: cpp.Int32, Cell: Vector, Seed: Vector): cpp.Reference<Vector>;
	public function RandomSobolCell2D(Index: cpp.Int32, NumCells: cpp.Int32, Cell: Vector2D, Seed: Vector2D): cpp.Reference<Vector2D>;
	public function NextSobolFloat(Index: cpp.Int32, Dimension: cpp.Int32, PreviousValue: cpp.Float32): cpp.Reference<cpp.Float32>;
	public function NextSobolCell3D(Index: cpp.Int32, NumCells: cpp.Int32, PreviousValue: Vector): cpp.Reference<Vector>;
	public function NextSobolCell2D(Index: cpp.Int32, NumCells: cpp.Int32, PreviousValue: Vector2D): cpp.Reference<Vector2D>;
	public function MakeImportanceTexture(Texture: cpp.Star<Texture2D>, WeightingFunc: EImportanceWeight): cpp.Reference<ImportanceTexture>;
	public function ImportanceSample(Texture: cpp.Reference<ImportanceTexture>, Rand: cpp.Reference<Vector2D>, Samples: cpp.Int32, Intensity: cpp.Float32, SamplePosition: cpp.Reference<Vector2D>, SampleColor: cpp.Reference<LinearColor>, SampleIntensity: cpp.Reference<cpp.Float32>, SampleSize: cpp.Reference<cpp.Float32>): Void;
	public function BreakImportanceTexture(ImportanceTexture: cpp.Reference<ImportanceTexture>, Texture: cpp.Reference<cpp.Star<Texture2D>>, WeightingFunc: cpp.Reference<EImportanceWeight>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstImportanceSamplingLibrary(ImportanceSamplingLibrary) from ImportanceSamplingLibrary {
}

@:forward
@:nativeGen
@:native("ImportanceSamplingLibrary*")
abstract ImportanceSamplingLibraryPtr(cpp.Star<ImportanceSamplingLibrary>) from cpp.Star<ImportanceSamplingLibrary> to cpp.Star<ImportanceSamplingLibrary>{
	@:from
	public static extern inline function fromValue(v: ImportanceSamplingLibrary): ImportanceSamplingLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ImportanceSamplingLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}