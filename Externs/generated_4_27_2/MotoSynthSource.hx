// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMotoSynthSource")
@:include("MotoSynthSourceAsset.h")
extern class MotoSynthSource extends Object {
	public var SoundWaveSource: cpp.Star<SoundWave>;
	public var bConvertTo8Bit: Bool;
	public var DownSampleFactor: cpp.Float32;
	public var RPMCurve: RuntimeFloatCurve;
	public var RPMSynthVolume: cpp.Float32;
	public var bEnableFilteringForAnalysis: Bool;
	public var LowPassFilterFrequency: cpp.Float32;
	public var HighPassFilterFrequency: cpp.Float32;
	public var bEnableDynamicsProcessorForAnalysis: Bool;
	public var DynamicsProcessorLookahead: cpp.Float32;
	public var DynamicsProcessorInputGainDb: cpp.Float32;
	public var DynamicsProcessorRatio: cpp.Float32;
	public var DynamicsKneeBandwidth: cpp.Float32;
	public var DynamicsProcessorThreshold: cpp.Float32;
	public var DynamicsProcessorAttackTimeMsec: cpp.Float32;
	public var DynamicsProcessorReleaseTimeMsec: cpp.Float32;
	public var bEnableNormalizationForAnalysis: Bool;
	public var SampleShiftOffset: cpp.Int32;
	public var RPMCycleCalibrationSample: cpp.Int32;
	public var RPMFirstCycleSampleEnd: cpp.Int32;
	public var RPMEstimationOctaveOffset: cpp.Int32;
	public var bWriteAnalysisInputToFile: Bool;
	public var AnalysisInputFilePath: FString;
	public var SourceData_DEPRECATED: TArray<cpp.Float32>;
	public var SourceDataPCM: TArray<cpp.Int16>;
	public var SourceSampleRate: cpp.Int32;
	public var GrainTable: TArray<GrainTableEntry>;

	public function StopToneMatch(): Void;
	public function PlayToneMatch(): Void;
	public function PerformGrainTableAnalysis(): Void;
}

@:forward()
@:nativeGen
abstract ConstMotoSynthSource(MotoSynthSource) from MotoSynthSource {
	public extern var SoundWaveSource(get, never): cpp.Star<SoundWave.ConstSoundWave>;
	public inline extern function get_SoundWaveSource(): cpp.Star<SoundWave.ConstSoundWave> return this.SoundWaveSource;
	public extern var bConvertTo8Bit(get, never): Bool;
	public inline extern function get_bConvertTo8Bit(): Bool return this.bConvertTo8Bit;
	public extern var DownSampleFactor(get, never): cpp.Float32;
	public inline extern function get_DownSampleFactor(): cpp.Float32 return this.DownSampleFactor;
	public extern var RPMCurve(get, never): RuntimeFloatCurve;
	public inline extern function get_RPMCurve(): RuntimeFloatCurve return this.RPMCurve;
	public extern var RPMSynthVolume(get, never): cpp.Float32;
	public inline extern function get_RPMSynthVolume(): cpp.Float32 return this.RPMSynthVolume;
	public extern var bEnableFilteringForAnalysis(get, never): Bool;
	public inline extern function get_bEnableFilteringForAnalysis(): Bool return this.bEnableFilteringForAnalysis;
	public extern var LowPassFilterFrequency(get, never): cpp.Float32;
	public inline extern function get_LowPassFilterFrequency(): cpp.Float32 return this.LowPassFilterFrequency;
	public extern var HighPassFilterFrequency(get, never): cpp.Float32;
	public inline extern function get_HighPassFilterFrequency(): cpp.Float32 return this.HighPassFilterFrequency;
	public extern var bEnableDynamicsProcessorForAnalysis(get, never): Bool;
	public inline extern function get_bEnableDynamicsProcessorForAnalysis(): Bool return this.bEnableDynamicsProcessorForAnalysis;
	public extern var DynamicsProcessorLookahead(get, never): cpp.Float32;
	public inline extern function get_DynamicsProcessorLookahead(): cpp.Float32 return this.DynamicsProcessorLookahead;
	public extern var DynamicsProcessorInputGainDb(get, never): cpp.Float32;
	public inline extern function get_DynamicsProcessorInputGainDb(): cpp.Float32 return this.DynamicsProcessorInputGainDb;
	public extern var DynamicsProcessorRatio(get, never): cpp.Float32;
	public inline extern function get_DynamicsProcessorRatio(): cpp.Float32 return this.DynamicsProcessorRatio;
	public extern var DynamicsKneeBandwidth(get, never): cpp.Float32;
	public inline extern function get_DynamicsKneeBandwidth(): cpp.Float32 return this.DynamicsKneeBandwidth;
	public extern var DynamicsProcessorThreshold(get, never): cpp.Float32;
	public inline extern function get_DynamicsProcessorThreshold(): cpp.Float32 return this.DynamicsProcessorThreshold;
	public extern var DynamicsProcessorAttackTimeMsec(get, never): cpp.Float32;
	public inline extern function get_DynamicsProcessorAttackTimeMsec(): cpp.Float32 return this.DynamicsProcessorAttackTimeMsec;
	public extern var DynamicsProcessorReleaseTimeMsec(get, never): cpp.Float32;
	public inline extern function get_DynamicsProcessorReleaseTimeMsec(): cpp.Float32 return this.DynamicsProcessorReleaseTimeMsec;
	public extern var bEnableNormalizationForAnalysis(get, never): Bool;
	public inline extern function get_bEnableNormalizationForAnalysis(): Bool return this.bEnableNormalizationForAnalysis;
	public extern var SampleShiftOffset(get, never): cpp.Int32;
	public inline extern function get_SampleShiftOffset(): cpp.Int32 return this.SampleShiftOffset;
	public extern var RPMCycleCalibrationSample(get, never): cpp.Int32;
	public inline extern function get_RPMCycleCalibrationSample(): cpp.Int32 return this.RPMCycleCalibrationSample;
	public extern var RPMFirstCycleSampleEnd(get, never): cpp.Int32;
	public inline extern function get_RPMFirstCycleSampleEnd(): cpp.Int32 return this.RPMFirstCycleSampleEnd;
	public extern var RPMEstimationOctaveOffset(get, never): cpp.Int32;
	public inline extern function get_RPMEstimationOctaveOffset(): cpp.Int32 return this.RPMEstimationOctaveOffset;
	public extern var bWriteAnalysisInputToFile(get, never): Bool;
	public inline extern function get_bWriteAnalysisInputToFile(): Bool return this.bWriteAnalysisInputToFile;
	public extern var AnalysisInputFilePath(get, never): FString;
	public inline extern function get_AnalysisInputFilePath(): FString return this.AnalysisInputFilePath;
	public extern var SourceData_DEPRECATED(get, never): TArray<cpp.Float32>;
	public inline extern function get_SourceData_DEPRECATED(): TArray<cpp.Float32> return this.SourceData_DEPRECATED;
	public extern var SourceDataPCM(get, never): TArray<cpp.Int16>;
	public inline extern function get_SourceDataPCM(): TArray<cpp.Int16> return this.SourceDataPCM;
	public extern var SourceSampleRate(get, never): cpp.Int32;
	public inline extern function get_SourceSampleRate(): cpp.Int32 return this.SourceSampleRate;
	public extern var GrainTable(get, never): TArray<GrainTableEntry>;
	public inline extern function get_GrainTable(): TArray<GrainTableEntry> return this.GrainTable;
}