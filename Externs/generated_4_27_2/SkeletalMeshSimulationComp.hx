// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USkeletalMeshSimulationComponent")
@:include("GeometryCollection/SkeletalMeshSimulationComponent.h")
extern class SkeletalMeshSimulationComp extends ActorComp {
	public var PhysicalMaterial: cpp.Star<ChaosPhysicalMaterial>;
	public var ChaosSolverActor: cpp.Star<ChaosSolverActor>;
	public var OverridePhysicsAsset: cpp.Star<PhysicsAsset>;
	public var bSimulating: Bool;
	public var bNotifyCollisions: Bool;
	public var ObjectType: EObjectStateTypeEnum;
	public var Density: cpp.Float32;
	public var MinMass: cpp.Float32;
	public var MaxMass: cpp.Float32;
	public var CollisionType: ECollisionTypeEnum;
	public var ImplicitShapeParticlesPerUnitArea: cpp.Float32;
	public var ImplicitShapeMinNumParticles: cpp.Int32;
	public var ImplicitShapeMaxNumParticles: cpp.Int32;
	public var MinLevelSetResolution: cpp.Int32;
	public var MaxLevelSetResolution: cpp.Int32;
	public var CollisionGroup: cpp.Int32;
	public var InitialVelocityType: EInitialVelocityTypeEnum;
	public var InitialLinearVelocity: Vector;
	public var InitialAngularVelocity: Vector;
	public var OnChaosPhysicsCollision: HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosPhysicsCollisionInfo>) -> Void>;

	public function ReceivePhysicsCollision(CollisionInfo: cpp.Reference<ChaosPhysicsCollisionInfo>): Void;
}

@:forward()
@:nativeGen
abstract ConstSkeletalMeshSimulationComp(SkeletalMeshSimulationComp) from SkeletalMeshSimulationComp {
	public extern var PhysicalMaterial(get, never): cpp.Star<ChaosPhysicalMaterial.ConstChaosPhysicalMaterial>;
	public inline extern function get_PhysicalMaterial(): cpp.Star<ChaosPhysicalMaterial.ConstChaosPhysicalMaterial> return this.PhysicalMaterial;
	public extern var ChaosSolverActor(get, never): cpp.Star<ChaosSolverActor.ConstChaosSolverActor>;
	public inline extern function get_ChaosSolverActor(): cpp.Star<ChaosSolverActor.ConstChaosSolverActor> return this.ChaosSolverActor;
	public extern var OverridePhysicsAsset(get, never): cpp.Star<PhysicsAsset.ConstPhysicsAsset>;
	public inline extern function get_OverridePhysicsAsset(): cpp.Star<PhysicsAsset.ConstPhysicsAsset> return this.OverridePhysicsAsset;
	public extern var bSimulating(get, never): Bool;
	public inline extern function get_bSimulating(): Bool return this.bSimulating;
	public extern var bNotifyCollisions(get, never): Bool;
	public inline extern function get_bNotifyCollisions(): Bool return this.bNotifyCollisions;
	public extern var ObjectType(get, never): EObjectStateTypeEnum;
	public inline extern function get_ObjectType(): EObjectStateTypeEnum return this.ObjectType;
	public extern var Density(get, never): cpp.Float32;
	public inline extern function get_Density(): cpp.Float32 return this.Density;
	public extern var MinMass(get, never): cpp.Float32;
	public inline extern function get_MinMass(): cpp.Float32 return this.MinMass;
	public extern var MaxMass(get, never): cpp.Float32;
	public inline extern function get_MaxMass(): cpp.Float32 return this.MaxMass;
	public extern var CollisionType(get, never): ECollisionTypeEnum;
	public inline extern function get_CollisionType(): ECollisionTypeEnum return this.CollisionType;
	public extern var ImplicitShapeParticlesPerUnitArea(get, never): cpp.Float32;
	public inline extern function get_ImplicitShapeParticlesPerUnitArea(): cpp.Float32 return this.ImplicitShapeParticlesPerUnitArea;
	public extern var ImplicitShapeMinNumParticles(get, never): cpp.Int32;
	public inline extern function get_ImplicitShapeMinNumParticles(): cpp.Int32 return this.ImplicitShapeMinNumParticles;
	public extern var ImplicitShapeMaxNumParticles(get, never): cpp.Int32;
	public inline extern function get_ImplicitShapeMaxNumParticles(): cpp.Int32 return this.ImplicitShapeMaxNumParticles;
	public extern var MinLevelSetResolution(get, never): cpp.Int32;
	public inline extern function get_MinLevelSetResolution(): cpp.Int32 return this.MinLevelSetResolution;
	public extern var MaxLevelSetResolution(get, never): cpp.Int32;
	public inline extern function get_MaxLevelSetResolution(): cpp.Int32 return this.MaxLevelSetResolution;
	public extern var CollisionGroup(get, never): cpp.Int32;
	public inline extern function get_CollisionGroup(): cpp.Int32 return this.CollisionGroup;
	public extern var InitialVelocityType(get, never): EInitialVelocityTypeEnum;
	public inline extern function get_InitialVelocityType(): EInitialVelocityTypeEnum return this.InitialVelocityType;
	public extern var InitialLinearVelocity(get, never): Vector;
	public inline extern function get_InitialLinearVelocity(): Vector return this.InitialLinearVelocity;
	public extern var InitialAngularVelocity(get, never): Vector;
	public inline extern function get_InitialAngularVelocity(): Vector return this.InitialAngularVelocity;
	public extern var OnChaosPhysicsCollision(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosPhysicsCollisionInfo>) -> Void>;
	public inline extern function get_OnChaosPhysicsCollision(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosPhysicsCollisionInfo>) -> Void> return this.OnChaosPhysicsCollision;
}