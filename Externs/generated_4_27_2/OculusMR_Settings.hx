// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UOculusMR_Settings")
@:include("OculusMR_Settings.h")
extern class OculusMR_Settings extends Object {
	public var ClippingReference: EOculusMR_ClippingReference;
	public var bUseTrackedCameraResolution: Bool;
	public var WidthPerView: cpp.Int32;
	public var HeightPerView: cpp.Int32;
	public var CastingLatency: cpp.Float32;
	public var BackdropColor: Color;
	public var HandPoseStateLatency: cpp.Float32;
	public var ChromaKeyColor: Color;
	public var ChromaKeySimilarity: cpp.Float32;
	public var ChromaKeySmoothRange: cpp.Float32;
	public var ChromaKeySpillRange: cpp.Float32;
	public var ExternalCompositionPostProcessEffects: EOculusMR_PostProcessEffects;
	public var bIsCasting: Bool;
	public var CompositionMethod: EOculusMR_CompositionMethod;
	public var CapturingCamera: EOculusMR_CameraDeviceEnum;

	public function SetIsCasting(val: Bool): Void;
	public function SetCompositionMethod(val: EOculusMR_CompositionMethod): Void;
	public function SetCapturingCamera(val: EOculusMR_CameraDeviceEnum): Void;
	public function SaveToIni(): Void;
	public function LoadFromIni(): Void;
	public function GetIsCasting(): cpp.Reference<Bool>;
	public function GetCompositionMethod(): cpp.Reference<EOculusMR_CompositionMethod>;
	public function GetCapturingCamera(): cpp.Reference<EOculusMR_CameraDeviceEnum>;
	public function GetBindToTrackedCameraIndex(): cpp.Reference<cpp.Int32>;
	public function BindToTrackedCameraIndexIfAvailable(InTrackedCameraIndex: cpp.Int32): Void;
}

@:forward(SaveToIni)
@:nativeGen
abstract ConstOculusMR_Settings(OculusMR_Settings) from OculusMR_Settings {
	public extern var ClippingReference(get, never): EOculusMR_ClippingReference;
	public inline extern function get_ClippingReference(): EOculusMR_ClippingReference return this.ClippingReference;
	public extern var bUseTrackedCameraResolution(get, never): Bool;
	public inline extern function get_bUseTrackedCameraResolution(): Bool return this.bUseTrackedCameraResolution;
	public extern var WidthPerView(get, never): cpp.Int32;
	public inline extern function get_WidthPerView(): cpp.Int32 return this.WidthPerView;
	public extern var HeightPerView(get, never): cpp.Int32;
	public inline extern function get_HeightPerView(): cpp.Int32 return this.HeightPerView;
	public extern var CastingLatency(get, never): cpp.Float32;
	public inline extern function get_CastingLatency(): cpp.Float32 return this.CastingLatency;
	public extern var BackdropColor(get, never): Color;
	public inline extern function get_BackdropColor(): Color return this.BackdropColor;
	public extern var HandPoseStateLatency(get, never): cpp.Float32;
	public inline extern function get_HandPoseStateLatency(): cpp.Float32 return this.HandPoseStateLatency;
	public extern var ChromaKeyColor(get, never): Color;
	public inline extern function get_ChromaKeyColor(): Color return this.ChromaKeyColor;
	public extern var ChromaKeySimilarity(get, never): cpp.Float32;
	public inline extern function get_ChromaKeySimilarity(): cpp.Float32 return this.ChromaKeySimilarity;
	public extern var ChromaKeySmoothRange(get, never): cpp.Float32;
	public inline extern function get_ChromaKeySmoothRange(): cpp.Float32 return this.ChromaKeySmoothRange;
	public extern var ChromaKeySpillRange(get, never): cpp.Float32;
	public inline extern function get_ChromaKeySpillRange(): cpp.Float32 return this.ChromaKeySpillRange;
	public extern var ExternalCompositionPostProcessEffects(get, never): EOculusMR_PostProcessEffects;
	public inline extern function get_ExternalCompositionPostProcessEffects(): EOculusMR_PostProcessEffects return this.ExternalCompositionPostProcessEffects;
	public extern var bIsCasting(get, never): Bool;
	public inline extern function get_bIsCasting(): Bool return this.bIsCasting;
	public extern var CompositionMethod(get, never): EOculusMR_CompositionMethod;
	public inline extern function get_CompositionMethod(): EOculusMR_CompositionMethod return this.CompositionMethod;
	public extern var CapturingCamera(get, never): EOculusMR_CameraDeviceEnum;
	public inline extern function get_CapturingCamera(): EOculusMR_CameraDeviceEnum return this.CapturingCamera;
}