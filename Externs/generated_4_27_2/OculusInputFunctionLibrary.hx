// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UOculusInputFunctionLibrary")
@:include("OculusInputFunctionLibrary.h")
extern class OculusInputFunctionLibrary extends BlueprintFunctionLibrary {
	public function IsPointerPoseValid(DeviceHand: EOculusHandType, ControllerIndex: cpp.Int32): cpp.Reference<Bool>;
	public function IsHandTrackingEnabled(): cpp.Reference<Bool>;
	public function InitializeHandPhysics(SkeletonType: EOculusHandType, HandComponent: cpp.Star<SkinnedMeshComp>, WorldToMeters: cpp.Float32): cpp.Reference<TArray<OculusCapsuleCollider>>;
	public function GetTrackingConfidence(DeviceHand: EOculusHandType, ControllerIndex: cpp.Int32): cpp.Reference<ETrackingConfidence>;
	public function GetPointerPose(DeviceHand: EOculusHandType, ControllerIndex: cpp.Int32): cpp.Reference<Transform>;
	public function GetHandSkeletalMesh(HandSkeletalMesh: cpp.Star<SkeletalMesh>, SkeletonType: EOculusHandType, MeshType: EOculusHandType, WorldToMeters: cpp.Float32): cpp.Reference<Bool>;
	public function GetHandScale(DeviceHand: EOculusHandType, ControllerIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetDominantHand(ControllerIndex: cpp.Int32): cpp.Reference<EOculusHandType>;
	public function GetBoneRotation(DeviceHand: EOculusHandType, BoneId: EBone, ControllerIndex: cpp.Int32): cpp.Reference<Quat>;
	public function GetBoneName(BoneId: EBone): cpp.Reference<FString>;
}

@:forward()
@:nativeGen
abstract ConstOculusInputFunctionLibrary(OculusInputFunctionLibrary) from OculusInputFunctionLibrary {
}