// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimClassData")
@:include("Animation/AnimClassData.h")
extern class AnimClassData extends Object {
	public var BakedStateMachines: TArray<BakedAnimationStateMachine>;
	public var TargetSkeleton: cpp.Star<Skeleton>;
	public var AnimNotifies: TArray<AnimNotifyEvent>;
	public var OrderedSavedPoseIndicesMap: TMap<FName, CachedPoseIndices>;
	public var AnimBlueprintFunctions: TArray<AnimBlueprintFunction>;
	public var AnimBlueprintFunctionData: TArray<AnimBlueprintFunctionData>;
	public var AnimNodeProperties: TArray<TFieldPath<FStructProperty>>;
	public var LinkedAnimGraphNodeProperties: TArray<TFieldPath<FStructProperty>>;
	public var LinkedAnimLayerNodeProperties: TArray<TFieldPath<FStructProperty>>;
	public var PreUpdateNodeProperties: TArray<TFieldPath<FStructProperty>>;
	public var DynamicResetNodeProperties: TArray<TFieldPath<FStructProperty>>;
	public var StateMachineNodeProperties: TArray<TFieldPath<FStructProperty>>;
	public var InitializationNodeProperties: TArray<TFieldPath<FStructProperty>>;
	public var GraphNameAssetPlayers: TMap<FName, GraphAssetPlayerInformation>;
	public var SyncGroupNames: TArray<FName>;
	public var EvaluateGraphExposedInputs: TArray<ExposedValueHandler>;
	public var GraphBlendOptions: TMap<FName, AnimGraphBlendOptions>;
	public var PropertyAccessLibrary: PropertyAccessLibrary;
}

@:forward()
@:nativeGen
abstract ConstAnimClassData(AnimClassData) from AnimClassData {
	public extern var BakedStateMachines(get, never): TArray<BakedAnimationStateMachine>;
	public inline extern function get_BakedStateMachines(): TArray<BakedAnimationStateMachine> return this.BakedStateMachines;
	public extern var TargetSkeleton(get, never): cpp.Star<Skeleton.ConstSkeleton>;
	public inline extern function get_TargetSkeleton(): cpp.Star<Skeleton.ConstSkeleton> return this.TargetSkeleton;
	public extern var AnimNotifies(get, never): TArray<AnimNotifyEvent>;
	public inline extern function get_AnimNotifies(): TArray<AnimNotifyEvent> return this.AnimNotifies;
	public extern var OrderedSavedPoseIndicesMap(get, never): TMap<FName, CachedPoseIndices>;
	public inline extern function get_OrderedSavedPoseIndicesMap(): TMap<FName, CachedPoseIndices> return this.OrderedSavedPoseIndicesMap;
	public extern var AnimBlueprintFunctions(get, never): TArray<AnimBlueprintFunction>;
	public inline extern function get_AnimBlueprintFunctions(): TArray<AnimBlueprintFunction> return this.AnimBlueprintFunctions;
	public extern var AnimBlueprintFunctionData(get, never): TArray<AnimBlueprintFunctionData>;
	public inline extern function get_AnimBlueprintFunctionData(): TArray<AnimBlueprintFunctionData> return this.AnimBlueprintFunctionData;
	public extern var AnimNodeProperties(get, never): TArray<TFieldPath<FStructProperty>>;
	public inline extern function get_AnimNodeProperties(): TArray<TFieldPath<FStructProperty>> return this.AnimNodeProperties;
	public extern var LinkedAnimGraphNodeProperties(get, never): TArray<TFieldPath<FStructProperty>>;
	public inline extern function get_LinkedAnimGraphNodeProperties(): TArray<TFieldPath<FStructProperty>> return this.LinkedAnimGraphNodeProperties;
	public extern var LinkedAnimLayerNodeProperties(get, never): TArray<TFieldPath<FStructProperty>>;
	public inline extern function get_LinkedAnimLayerNodeProperties(): TArray<TFieldPath<FStructProperty>> return this.LinkedAnimLayerNodeProperties;
	public extern var PreUpdateNodeProperties(get, never): TArray<TFieldPath<FStructProperty>>;
	public inline extern function get_PreUpdateNodeProperties(): TArray<TFieldPath<FStructProperty>> return this.PreUpdateNodeProperties;
	public extern var DynamicResetNodeProperties(get, never): TArray<TFieldPath<FStructProperty>>;
	public inline extern function get_DynamicResetNodeProperties(): TArray<TFieldPath<FStructProperty>> return this.DynamicResetNodeProperties;
	public extern var StateMachineNodeProperties(get, never): TArray<TFieldPath<FStructProperty>>;
	public inline extern function get_StateMachineNodeProperties(): TArray<TFieldPath<FStructProperty>> return this.StateMachineNodeProperties;
	public extern var InitializationNodeProperties(get, never): TArray<TFieldPath<FStructProperty>>;
	public inline extern function get_InitializationNodeProperties(): TArray<TFieldPath<FStructProperty>> return this.InitializationNodeProperties;
	public extern var GraphNameAssetPlayers(get, never): TMap<FName, GraphAssetPlayerInformation>;
	public inline extern function get_GraphNameAssetPlayers(): TMap<FName, GraphAssetPlayerInformation> return this.GraphNameAssetPlayers;
	public extern var SyncGroupNames(get, never): TArray<FName>;
	public inline extern function get_SyncGroupNames(): TArray<FName> return this.SyncGroupNames;
	public extern var EvaluateGraphExposedInputs(get, never): TArray<ExposedValueHandler>;
	public inline extern function get_EvaluateGraphExposedInputs(): TArray<ExposedValueHandler> return this.EvaluateGraphExposedInputs;
	public extern var GraphBlendOptions(get, never): TMap<FName, AnimGraphBlendOptions>;
	public inline extern function get_GraphBlendOptions(): TMap<FName, AnimGraphBlendOptions> return this.GraphBlendOptions;
	public extern var PropertyAccessLibrary(get, never): PropertyAccessLibrary;
	public inline extern function get_PropertyAccessLibrary(): PropertyAccessLibrary return this.PropertyAccessLibrary;
}