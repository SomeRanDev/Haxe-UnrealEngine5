// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMagicLeapImageTrackerComponent")
@:include("MagicLeapImageTrackerComponent.h")
extern class MagicLeapImageTrackerComp extends SceneComp {
	public var TargetImageTexture: cpp.Star<Texture2D>;
	public var Name: FString;
	public var LongerDimension: cpp.Float32;
	public var bIsStationary: Bool;
	public var bUseUnreliablePose: Bool;
	public var AxisOrientation: EMagicLeapImageTargetOrientation;
	public var OnSetImageTargetSucceeded: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnSetImageTargetFailed: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnImageTargetFound: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnImageTargetLost: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnImageTargetUnreliableTracking: HaxeMulticastSparseDelegateProperty<(cpp.Reference<Vector>, cpp.Reference<Rotator>, cpp.Reference<Vector>, cpp.Reference<Rotator>) -> Void>;

	public function SetTargetAsync(ImageTarget: cpp.Star<Texture2D>): cpp.Reference<Bool>;
	public function RemoveTargetAsync(): cpp.Reference<Bool>;
}

@:forward()
@:nativeGen
abstract ConstMagicLeapImageTrackerComp(MagicLeapImageTrackerComp) from MagicLeapImageTrackerComp {
	public extern var TargetImageTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_TargetImageTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.TargetImageTexture;
	public extern var Name(get, never): FString;
	public inline extern function get_Name(): FString return this.Name;
	public extern var LongerDimension(get, never): cpp.Float32;
	public inline extern function get_LongerDimension(): cpp.Float32 return this.LongerDimension;
	public extern var bIsStationary(get, never): Bool;
	public inline extern function get_bIsStationary(): Bool return this.bIsStationary;
	public extern var bUseUnreliablePose(get, never): Bool;
	public inline extern function get_bUseUnreliablePose(): Bool return this.bUseUnreliablePose;
	public extern var AxisOrientation(get, never): EMagicLeapImageTargetOrientation;
	public inline extern function get_AxisOrientation(): EMagicLeapImageTargetOrientation return this.AxisOrientation;
	public extern var OnSetImageTargetSucceeded(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnSetImageTargetSucceeded(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnSetImageTargetSucceeded;
	public extern var OnSetImageTargetFailed(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnSetImageTargetFailed(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnSetImageTargetFailed;
	public extern var OnImageTargetFound(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnImageTargetFound(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnImageTargetFound;
	public extern var OnImageTargetLost(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnImageTargetLost(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnImageTargetLost;
	public extern var OnImageTargetUnreliableTracking(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<Vector>, cpp.Reference<Rotator>, cpp.Reference<Vector>, cpp.Reference<Rotator>) -> Void>;
	public inline extern function get_OnImageTargetUnreliableTracking(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<Vector>, cpp.Reference<Rotator>, cpp.Reference<Vector>, cpp.Reference<Rotator>) -> Void> return this.OnImageTargetUnreliableTracking;
}