// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("APlayerState")
@:include("GameFramework/PlayerState.h")
extern class PlayerState extends Info {
	public var Score: cpp.Float32;
	public var PlayerId: cpp.Int32;
	public var Ping: cpp.UInt8;
	public var bShouldUpdateReplicatedPing: Bool;
	public var bIsSpectator: Bool;
	public var bOnlySpectator: Bool;
	public var bIsABot: Bool;
	public var bIsInactive: Bool;
	public var bFromPreviousLevel: Bool;
	public var StartTime: cpp.Int32;
	public var EngineMessageClass: TSubclassOf<LocalMessage>;
	public var SavedNetworkAddress: FString;
	public var UniqueId: UniqueNetIdRepl;
	public var PawnPrivate: cpp.Star<Pawn>;
	public var PlayerNamePrivate: FString;

	public function ReceiveOverrideWith(OldPlayerState: cpp.Star<PlayerState>): Void;
	public function ReceiveCopyProperties(NewPlayerState: cpp.Star<PlayerState>): Void;
	public function OnRep_UniqueId(): Void;
	public function OnRep_Score(): Void;
	public function OnRep_PlayerName(): Void;
	public function OnRep_PlayerId(): Void;
	public function OnRep_bIsInactive(): Void;
	public function IsOnlyASpectator(): cpp.Reference<Bool>;
	public function GetPlayerName(): cpp.Reference<FString>;
}

@:forward(IsOnlyASpectator, GetPlayerName)
@:nativeGen
abstract ConstPlayerState(PlayerState) from PlayerState {
	public extern var Score(get, never): cpp.Float32;
	public inline extern function get_Score(): cpp.Float32 return this.Score;
	public extern var PlayerId(get, never): cpp.Int32;
	public inline extern function get_PlayerId(): cpp.Int32 return this.PlayerId;
	public extern var Ping(get, never): cpp.UInt8;
	public inline extern function get_Ping(): cpp.UInt8 return this.Ping;
	public extern var bShouldUpdateReplicatedPing(get, never): Bool;
	public inline extern function get_bShouldUpdateReplicatedPing(): Bool return this.bShouldUpdateReplicatedPing;
	public extern var bIsSpectator(get, never): Bool;
	public inline extern function get_bIsSpectator(): Bool return this.bIsSpectator;
	public extern var bOnlySpectator(get, never): Bool;
	public inline extern function get_bOnlySpectator(): Bool return this.bOnlySpectator;
	public extern var bIsABot(get, never): Bool;
	public inline extern function get_bIsABot(): Bool return this.bIsABot;
	public extern var bIsInactive(get, never): Bool;
	public inline extern function get_bIsInactive(): Bool return this.bIsInactive;
	public extern var bFromPreviousLevel(get, never): Bool;
	public inline extern function get_bFromPreviousLevel(): Bool return this.bFromPreviousLevel;
	public extern var StartTime(get, never): cpp.Int32;
	public inline extern function get_StartTime(): cpp.Int32 return this.StartTime;
	public extern var EngineMessageClass(get, never): TSubclassOf<LocalMessage.ConstLocalMessage>;
	public inline extern function get_EngineMessageClass(): TSubclassOf<LocalMessage.ConstLocalMessage> return this.EngineMessageClass;
	public extern var SavedNetworkAddress(get, never): FString;
	public inline extern function get_SavedNetworkAddress(): FString return this.SavedNetworkAddress;
	public extern var UniqueId(get, never): UniqueNetIdRepl;
	public inline extern function get_UniqueId(): UniqueNetIdRepl return this.UniqueId;
	public extern var PawnPrivate(get, never): cpp.Star<Pawn.ConstPawn>;
	public inline extern function get_PawnPrivate(): cpp.Star<Pawn.ConstPawn> return this.PawnPrivate;
	public extern var PlayerNamePrivate(get, never): FString;
	public inline extern function get_PlayerNamePrivate(): FString return this.PlayerNamePrivate;
}