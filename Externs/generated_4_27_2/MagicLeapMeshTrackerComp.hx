// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMagicLeapMeshTrackerComponent")
@:include("MagicLeapMeshTrackerComponent.h")
extern class MagicLeapMeshTrackerComp extends SceneComp {
	public var OnMeshTrackerUpdated: HaxeMulticastSparseDelegateProperty<(Guid, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Int32>>, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Float32>>) -> Void>;
	public var ScanWorld: Bool;
	public var MeshType: EMagicLeapMeshType;
	public var BoundingVolume: cpp.Star<BoxComp>;
	public var LevelOfDetail: EMagicLeapMeshLOD;
	public var PerimeterOfGapsToFill: cpp.Float32;
	public var Planarize: Bool;
	public var DisconnectedSectionArea: cpp.Float32;
	public var RequestNormals: Bool;
	public var RequestVertexConfidence: Bool;
	public var VertexColorMode: EMagicLeapMeshVertexColorMode;
	public var BlockVertexColors: TArray<Color>;
	public var VertexColorFromConfidenceZero: LinearColor;
	public var VertexColorFromConfidenceOne: LinearColor;
	public var RemoveOverlappingTriangles: Bool;
	public var MRMesh: cpp.Star<MRMeshComp>;
	public var BricksPerFrame: cpp.Int32;

	public function SelectMeshBlocks(NewMeshInfo: cpp.Reference<MagicLeapTrackingMeshInfo>, RequestedMesh: cpp.Reference<TArray<MagicLeapMeshBlockRequest>>): Void;
	public function OnMeshTrackerUpdated__DelegateSignature(ID: Guid, Vertices: cpp.Reference<TArray<Vector>>, Triangles: cpp.Reference<TArray<cpp.Int32>>, Normals: cpp.Reference<TArray<Vector>>, Confidence: cpp.Reference<TArray<cpp.Float32>>): Void;
	public function GetNumQueuedBlockUpdates(): cpp.Reference<cpp.Int32>;
	public function DisconnectMRMesh(InMRMeshPtr: cpp.Star<MRMeshComp>): Void;
	public function DisconnectBlockSelector(): Void;
	public function ConnectMRMesh(InMRMeshPtr: cpp.Star<MRMeshComp>): Void;
	public function ConnectBlockSelector(Selector: MagicLeapMeshBlockSelectorInterface): Void;
}

@:forward()
@:nativeGen
abstract ConstMagicLeapMeshTrackerComp(MagicLeapMeshTrackerComp) from MagicLeapMeshTrackerComp {
	public extern var OnMeshTrackerUpdated(get, never): HaxeMulticastSparseDelegateProperty<(Guid, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Int32>>, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Float32>>) -> Void>;
	public inline extern function get_OnMeshTrackerUpdated(): HaxeMulticastSparseDelegateProperty<(Guid, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Int32>>, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Float32>>) -> Void> return this.OnMeshTrackerUpdated;
	public extern var ScanWorld(get, never): Bool;
	public inline extern function get_ScanWorld(): Bool return this.ScanWorld;
	public extern var MeshType(get, never): EMagicLeapMeshType;
	public inline extern function get_MeshType(): EMagicLeapMeshType return this.MeshType;
	public extern var BoundingVolume(get, never): cpp.Star<BoxComp.ConstBoxComp>;
	public inline extern function get_BoundingVolume(): cpp.Star<BoxComp.ConstBoxComp> return this.BoundingVolume;
	public extern var LevelOfDetail(get, never): EMagicLeapMeshLOD;
	public inline extern function get_LevelOfDetail(): EMagicLeapMeshLOD return this.LevelOfDetail;
	public extern var PerimeterOfGapsToFill(get, never): cpp.Float32;
	public inline extern function get_PerimeterOfGapsToFill(): cpp.Float32 return this.PerimeterOfGapsToFill;
	public extern var Planarize(get, never): Bool;
	public inline extern function get_Planarize(): Bool return this.Planarize;
	public extern var DisconnectedSectionArea(get, never): cpp.Float32;
	public inline extern function get_DisconnectedSectionArea(): cpp.Float32 return this.DisconnectedSectionArea;
	public extern var RequestNormals(get, never): Bool;
	public inline extern function get_RequestNormals(): Bool return this.RequestNormals;
	public extern var RequestVertexConfidence(get, never): Bool;
	public inline extern function get_RequestVertexConfidence(): Bool return this.RequestVertexConfidence;
	public extern var VertexColorMode(get, never): EMagicLeapMeshVertexColorMode;
	public inline extern function get_VertexColorMode(): EMagicLeapMeshVertexColorMode return this.VertexColorMode;
	public extern var BlockVertexColors(get, never): TArray<Color>;
	public inline extern function get_BlockVertexColors(): TArray<Color> return this.BlockVertexColors;
	public extern var VertexColorFromConfidenceZero(get, never): LinearColor;
	public inline extern function get_VertexColorFromConfidenceZero(): LinearColor return this.VertexColorFromConfidenceZero;
	public extern var VertexColorFromConfidenceOne(get, never): LinearColor;
	public inline extern function get_VertexColorFromConfidenceOne(): LinearColor return this.VertexColorFromConfidenceOne;
	public extern var RemoveOverlappingTriangles(get, never): Bool;
	public inline extern function get_RemoveOverlappingTriangles(): Bool return this.RemoveOverlappingTriangles;
	public extern var MRMesh(get, never): cpp.Star<MRMeshComp.ConstMRMeshComp>;
	public inline extern function get_MRMesh(): cpp.Star<MRMeshComp.ConstMRMeshComp> return this.MRMesh;
	public extern var BricksPerFrame(get, never): cpp.Int32;
	public inline extern function get_BricksPerFrame(): cpp.Int32 return this.BricksPerFrame;
}