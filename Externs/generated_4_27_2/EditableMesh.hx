// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditableMesh")
@:include("EditableMesh.h")
extern class EditableMesh extends Object {
	public var Adapters: TArray<cpp.Star<EditableMeshAdapter>>;
	public var TextureCoordinateCount: cpp.Int32;
	public var PendingCompactCounter: cpp.Int32;
	public var SubdivisionCount: cpp.Int32;

	public function WeldVertices(VertexIDs: cpp.Reference<TArray<VertexID>>, OutNewVertexID: cpp.Reference<VertexID>): Void;
	public function TryToRemoveVertex(VertexID: VertexID, bOutWasVertexRemoved: cpp.Reference<Bool>, OutNewEdgeID: cpp.Reference<EdgeID>): Void;
	public function TryToRemovePolygonEdge(EdgeID: EdgeID, bOutWasEdgeRemoved: cpp.Reference<Bool>, OutNewPolygonID: cpp.Reference<PolygonID>): Void;
	public function TriangulatePolygons(PolygonIDs: cpp.Reference<TArray<PolygonID>>, OutNewTrianglePolygons: cpp.Reference<TArray<PolygonID>>): Void;
	public function TessellatePolygons(PolygonIDs: cpp.Reference<TArray<PolygonID>>, TriangleTessellationMode: ETriangleTessellationMode, OutNewPolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function StartModification(MeshModificationType: EMeshModificationType, MeshTopologyChange: EMeshTopologyChange): Void;
	public function SplitPolygons(PolygonsToSplit: cpp.Reference<TArray<PolygonToSplit>>, OutNewEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function SplitPolygonalMesh(InPlane: cpp.Reference<Plane>, PolygonIDs1: cpp.Reference<TArray<PolygonID>>, PolygonIDs2: cpp.Reference<TArray<PolygonID>>, BoundaryIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function SplitEdge(EdgeID: EdgeID, Splits: cpp.Reference<TArray<cpp.Float32>>, OutNewVertexIDs: cpp.Reference<TArray<VertexID>>): Void;
	public function SetVerticesCornerSharpness(VertexIDs: cpp.Reference<TArray<VertexID>>, VerticesNewCornerSharpness: cpp.Reference<TArray<cpp.Float32>>): Void;
	public function SetVerticesAttributes(AttributesForVertices: cpp.Reference<TArray<AttributesForVertex>>): Void;
	public function SetVertexInstancesAttributes(AttributesForVertexInstances: cpp.Reference<TArray<AttributesForVertexInstance>>): Void;
	public function SetTextureCoordinateCount(NumTexCoords: cpp.Int32): Void;
	public function SetSubdivisionCount(NewSubdivisionCount: cpp.Int32): Void;
	public function SetPolygonsVertexAttributes(VertexAttributesForPolygons: cpp.Reference<TArray<VertexAttributesForPolygon>>): Void;
	public function SetEdgesHardnessAutomatically(EdgeIDs: cpp.Reference<TArray<EdgeID>>, MaxDotProductForSoftEdge: cpp.Float32): Void;
	public function SetEdgesHardness(EdgeIDs: cpp.Reference<TArray<EdgeID>>, EdgesNewIsHard: cpp.Reference<TArray<Bool>>): Void;
	public function SetEdgesCreaseSharpness(EdgeIDs: cpp.Reference<TArray<EdgeID>>, EdgesNewCreaseSharpness: cpp.Reference<TArray<cpp.Float32>>): Void;
	public function SetEdgesAttributes(AttributesForEdges: cpp.Reference<TArray<AttributesForEdge>>): Void;
	public function SetAllowUndo(bInAllowUndo: Bool): Void;
	public function SetAllowSpatialDatabase(bInAllowSpatialDatabase: Bool): Void;
	public function SetAllowCompact(bInAllowCompact: Bool): Void;
	public function SearchSpatialDatabaseForPolygonsPotentiallyIntersectingPlane(InPlane: cpp.Reference<Plane>, OutPolygons: cpp.Reference<TArray<PolygonID>>): Void;
	public function SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment(LineSegmentStart: Vector, LineSegmentEnd: Vector, OutPolygons: cpp.Reference<TArray<PolygonID>>): Void;
	public function SearchSpatialDatabaseForPolygonsInVolume(Planes: cpp.Reference<TArray<Plane>>, OutPolygons: cpp.Reference<TArray<PolygonID>>): Void;
	public function RevertInstance(): cpp.Reference<cpp.Star<EditableMesh>>;
	public function Revert(): Void;
	public function RebuildRenderMesh(): Void;
	public function QuadrangulateMesh(OutNewPolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function PropagateInstanceChanges(): Void;
	public function MoveVertices(VerticesToMove: cpp.Reference<TArray<VertexToMove>>): Void;
	public function MakeVertexID(VertexIndex: cpp.Int32): cpp.Reference<VertexID>;
	public function MakePolygonID(PolygonIndex: cpp.Int32): cpp.Reference<PolygonID>;
	public function MakePolygonGroupID(PolygonGroupIndex: cpp.Int32): cpp.Reference<PolygonGroupID>;
	public function MakeEdgeID(EdgeIndex: cpp.Int32): cpp.Reference<EdgeID>;
	public function IsValidVertex(VertexID: VertexID): cpp.Reference<Bool>;
	public function IsValidPolygonGroup(PolygonGroupID: PolygonGroupID): cpp.Reference<Bool>;
	public function IsValidPolygon(PolygonID: PolygonID): cpp.Reference<Bool>;
	public function IsValidEdge(EdgeID: EdgeID): cpp.Reference<Bool>;
	public function IsUndoAllowed(): cpp.Reference<Bool>;
	public function IsSpatialDatabaseAllowed(): cpp.Reference<Bool>;
	public function IsPreviewingSubdivisions(): cpp.Reference<Bool>;
	public function IsOrphanedVertex(VertexID: VertexID): cpp.Reference<Bool>;
	public function IsCompactAllowed(): cpp.Reference<Bool>;
	public function IsCommittedAsInstance(): cpp.Reference<Bool>;
	public function IsCommitted(): cpp.Reference<Bool>;
	public function IsBeingModified(): cpp.Reference<Bool>;
	public function InvalidVertexID(): cpp.Reference<VertexID>;
	public function InvalidPolygonID(): cpp.Reference<PolygonID>;
	public function InvalidPolygonGroupID(): cpp.Reference<PolygonGroupID>;
	public function InvalidEdgeID(): cpp.Reference<EdgeID>;
	public function InsetPolygons(PolygonIDs: cpp.Reference<TArray<PolygonID>>, InsetFixedDistance: cpp.Float32, InsetProgressTowardCenter: cpp.Float32, Mode: EInsetPolygonsMode, OutNewCenterPolygonIDs: cpp.Reference<TArray<PolygonID>>, OutNewSidePolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function InsertEdgeLoop(EdgeID: EdgeID, Splits: cpp.Reference<TArray<cpp.Float32>>, OutNewEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function InitializeAdapters(): Void;
	public function GetVertexPairEdge(VertexID: VertexID, NextVertexID: VertexID, bOutEdgeWindingIsReversed: cpp.Reference<Bool>): cpp.Reference<EdgeID>;
	public function GetVertexInstanceVertex(VertexInstanceID: VertexInstanceID): cpp.Reference<VertexID>;
	public function GetVertexInstanceCount(): cpp.Reference<cpp.Int32>;
	public function GetVertexInstanceConnectedPolygons(VertexInstanceID: VertexInstanceID, OutConnectedPolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function GetVertexInstanceConnectedPolygonCount(VertexInstanceID: VertexInstanceID): cpp.Reference<cpp.Int32>;
	public function GetVertexInstanceConnectedPolygon(VertexInstanceID: VertexInstanceID, ConnectedPolygonNumber: cpp.Int32): cpp.Reference<PolygonID>;
	public function GetVertexCount(): cpp.Reference<cpp.Int32>;
	public function GetVertexConnectedPolygons(VertexID: VertexID, OutConnectedPolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function GetVertexConnectedEdges(VertexID: VertexID, OutConnectedEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function GetVertexConnectedEdgeCount(VertexID: VertexID): cpp.Reference<cpp.Int32>;
	public function GetVertexConnectedEdge(VertexID: VertexID, ConnectedEdgeNumber: cpp.Int32): cpp.Reference<EdgeID>;
	public function GetVertexAdjacentVertices(VertexID: VertexID, OutAdjacentVertexIDs: cpp.Reference<TArray<VertexID>>): Void;
	public function GetTextureCoordinateCount(): cpp.Reference<cpp.Int32>;
	public function GetSubdivisionLimitData(): cpp.Reference<SubdivisionLimitData>;
	public function GetSubdivisionCount(): cpp.Reference<cpp.Int32>;
	public function GetPolygonTriangulatedTriangleCount(PolygonID: PolygonID): cpp.Reference<cpp.Int32>;
	public function GetPolygonTriangulatedTriangle(PolygonID: PolygonID, PolygonTriangleNumber: cpp.Int32): cpp.Reference<TriangleID>;
	public function GetPolygonPerimeterVertices(PolygonID: PolygonID, OutPolygonPerimeterVertexIDs: cpp.Reference<TArray<VertexID>>): Void;
	public function GetPolygonPerimeterVertexInstances(PolygonID: PolygonID, OutPolygonPerimeterVertexInstanceIDs: cpp.Reference<TArray<VertexInstanceID>>): Void;
	public function GetPolygonPerimeterVertexInstance(PolygonID: PolygonID, PolygonVertexNumber: cpp.Int32): cpp.Reference<VertexInstanceID>;
	public function GetPolygonPerimeterVertexCount(PolygonID: PolygonID): cpp.Reference<cpp.Int32>;
	public function GetPolygonPerimeterVertex(PolygonID: PolygonID, PolygonVertexNumber: cpp.Int32): cpp.Reference<VertexID>;
	public function GetPolygonPerimeterEdges(PolygonID: PolygonID, OutPolygonPerimeterEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function GetPolygonPerimeterEdgeCount(PolygonID: PolygonID): cpp.Reference<cpp.Int32>;
	public function GetPolygonPerimeterEdge(PolygonID: PolygonID, PerimeterEdgeNumber: cpp.Int32, bOutEdgeWindingIsReversedForPolygon: cpp.Reference<Bool>): cpp.Reference<EdgeID>;
	public function GetPolygonInGroup(PolygonGroupID: PolygonGroupID, PolygonNumber: cpp.Int32): cpp.Reference<PolygonID>;
	public function GetPolygonGroupCount(): cpp.Reference<cpp.Int32>;
	public function GetPolygonCountInGroup(PolygonGroupID: PolygonGroupID): cpp.Reference<cpp.Int32>;
	public function GetPolygonCount(): cpp.Reference<cpp.Int32>;
	public function GetPolygonAdjacentPolygons(PolygonID: PolygonID, OutAdjacentPolygons: cpp.Reference<TArray<PolygonID>>): Void;
	public function GetGroupForPolygon(PolygonID: PolygonID): cpp.Reference<PolygonGroupID>;
	public function GetFirstValidPolygonGroup(): cpp.Reference<PolygonGroupID>;
	public function GetEdgeVertices(EdgeID: EdgeID, OutEdgeVertexID0: cpp.Reference<VertexID>, OutEdgeVertexID1: cpp.Reference<VertexID>): Void;
	public function GetEdgeVertex(EdgeID: EdgeID, EdgeVertexNumber: cpp.Int32): cpp.Reference<VertexID>;
	public function GetEdgeThatConnectsVertices(VertexID0: VertexID, VertexID1: VertexID): cpp.Reference<EdgeID>;
	public function GetEdgeLoopElements(EdgeID: EdgeID, EdgeLoopIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function GetEdgeCount(): cpp.Reference<cpp.Int32>;
	public function GetEdgeConnectedPolygons(EdgeID: EdgeID, OutConnectedPolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function GetEdgeConnectedPolygonCount(EdgeID: EdgeID): cpp.Reference<cpp.Int32>;
	public function GetEdgeConnectedPolygon(EdgeID: EdgeID, ConnectedPolygonNumber: cpp.Int32): cpp.Reference<PolygonID>;
	public function GeneratePolygonTangentsAndNormals(PolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function FlipPolygons(PolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function FindPolygonPerimeterVertexNumberForVertex(PolygonID: PolygonID, VertexID: VertexID): cpp.Reference<cpp.Int32>;
	public function FindPolygonPerimeterEdgeNumberForVertices(PolygonID: PolygonID, EdgeVertexID0: VertexID, EdgeVertexID1: VertexID): cpp.Reference<cpp.Int32>;
	public function FindPolygonLoop(EdgeID: EdgeID, OutEdgeLoopEdgeIDs: cpp.Reference<TArray<EdgeID>>, OutFlippedEdgeIDs: cpp.Reference<TArray<EdgeID>>, OutReversedEdgeIDPathToTake: cpp.Reference<TArray<EdgeID>>, OutPolygonIDsToSplit: cpp.Reference<TArray<PolygonID>>): Void;
	public function ExtrudePolygons(Polygons: cpp.Reference<TArray<PolygonID>>, ExtrudeDistance: cpp.Float32, bKeepNeighborsTogether: Bool, OutNewExtrudedFrontPolygons: cpp.Reference<TArray<PolygonID>>): Void;
	public function ExtendVertices(VertexIDs: cpp.Reference<TArray<VertexID>>, bOnlyExtendClosestEdge: Bool, ReferencePosition: Vector, OutNewExtendedVertexIDs: cpp.Reference<TArray<VertexID>>): Void;
	public function ExtendEdges(EdgeIDs: cpp.Reference<TArray<EdgeID>>, bWeldNeighbors: Bool, OutNewExtendedEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function EndModification(bFromUndo: Bool): Void;
	public function DeleteVertexInstances(VertexInstanceIDsToDelete: cpp.Reference<TArray<VertexInstanceID>>, bDeleteOrphanedVertices: Bool): Void;
	public function DeleteVertexAndConnectedEdgesAndPolygons(VertexID: VertexID, bDeleteOrphanedEdges: Bool, bDeleteOrphanedVertices: Bool, bDeleteOrphanedVertexInstances: Bool, bDeleteEmptyPolygonGroups: Bool): Void;
	public function DeletePolygons(PolygonIDsToDelete: cpp.Reference<TArray<PolygonID>>, bDeleteOrphanedEdges: Bool, bDeleteOrphanedVertices: Bool, bDeleteOrphanedVertexInstances: Bool, bDeleteEmptyPolygonGroups: Bool): Void;
	public function DeletePolygonGroups(PolygonGroupIDs: cpp.Reference<TArray<PolygonGroupID>>): Void;
	public function DeleteOrphanVertices(VertexIDsToDelete: cpp.Reference<TArray<VertexID>>): Void;
	public function DeleteEdges(EdgeIDsToDelete: cpp.Reference<TArray<EdgeID>>, bDeleteOrphanedVertices: Bool): Void;
	public function DeleteEdgeAndConnectedPolygons(EdgeID: EdgeID, bDeleteOrphanedEdges: Bool, bDeleteOrphanedVertices: Bool, bDeleteOrphanedVertexInstances: Bool, bDeleteEmptyPolygonGroups: Bool): Void;
	public function CreateVertices(VerticesToCreate: cpp.Reference<TArray<VertexToCreate>>, OutNewVertexIDs: cpp.Reference<TArray<VertexID>>): Void;
	public function CreateVertexInstances(VertexInstancesToCreate: cpp.Reference<TArray<VertexInstanceToCreate>>, OutNewVertexInstanceIDs: cpp.Reference<TArray<VertexInstanceID>>): Void;
	public function CreatePolygons(PolygonsToCreate: cpp.Reference<TArray<PolygonToCreate>>, OutNewPolygonIDs: cpp.Reference<TArray<PolygonID>>, OutNewEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function CreatePolygonGroups(PolygonGroupsToCreate: cpp.Reference<TArray<PolygonGroupToCreate>>, OutNewPolygonGroupIDs: cpp.Reference<TArray<PolygonGroupID>>): Void;
	public function CreateMissingPolygonPerimeterEdges(PolygonID: PolygonID, OutNewEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function CreateEmptyVertexRange(NumVerticesToCreate: cpp.Int32, OutNewVertexIDs: cpp.Reference<TArray<VertexID>>): Void;
	public function CreateEdges(EdgesToCreate: cpp.Reference<TArray<EdgeToCreate>>, OutNewEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function ComputePolygonsSharedEdges(PolygonIDs: cpp.Reference<TArray<PolygonID>>, OutSharedEdgeIDs: cpp.Reference<TArray<EdgeID>>): Void;
	public function ComputePolygonPlane(PolygonID: PolygonID): cpp.Reference<Plane>;
	public function ComputePolygonNormal(PolygonID: PolygonID): cpp.Reference<Vector>;
	public function ComputePolygonCenter(PolygonID: PolygonID): cpp.Reference<Vector>;
	public function ComputeBoundingBoxAndSphere(): cpp.Reference<BoxSphereBounds>;
	public function ComputeBoundingBox(): cpp.Reference<Box>;
	public function CommitInstance(ComponentToInstanceTo: cpp.Star<PrimitiveComp>): cpp.Reference<cpp.Star<EditableMesh>>;
	public function Commit(): Void;
	public function ChangePolygonsVertexInstances(VertexInstancesForPolygons: cpp.Reference<TArray<ChangeVertexInstancesForPolygon>>): Void;
	public function BevelPolygons(PolygonIDs: cpp.Reference<TArray<PolygonID>>, BevelFixedDistance: cpp.Float32, BevelProgressTowardCenter: cpp.Float32, OutNewCenterPolygonIDs: cpp.Reference<TArray<PolygonID>>, OutNewSidePolygonIDs: cpp.Reference<TArray<PolygonID>>): Void;
	public function AssignPolygonsToPolygonGroups(PolygonGroupForPolygons: cpp.Reference<TArray<PolygonGroupForPolygon>>, bDeleteOrphanedPolygonGroups: Bool): Void;
	public function AnyChangesToUndo(): cpp.Reference<Bool>;
}

@:forward(
	SearchSpatialDatabaseForPolygonsPotentiallyIntersectingPlane, SearchSpatialDatabaseForPolygonsPotentiallyIntersectingLineSegment, SearchSpatialDatabaseForPolygonsInVolume, IsValidVertex, IsValidPolygonGroup,
	IsValidPolygon, IsValidEdge, IsUndoAllowed, IsSpatialDatabaseAllowed, IsPreviewingSubdivisions,
	IsOrphanedVertex, IsCompactAllowed, IsCommittedAsInstance, IsCommitted, IsBeingModified,
	GetVertexPairEdge, GetVertexInstanceVertex, GetVertexInstanceCount, GetVertexInstanceConnectedPolygons, GetVertexInstanceConnectedPolygonCount,
	GetVertexInstanceConnectedPolygon, GetVertexCount, GetVertexConnectedPolygons, GetVertexConnectedEdges, GetVertexConnectedEdgeCount,
	GetVertexConnectedEdge, GetVertexAdjacentVertices, GetTextureCoordinateCount, GetSubdivisionLimitData, GetSubdivisionCount,
	GetPolygonTriangulatedTriangleCount, GetPolygonTriangulatedTriangle, GetPolygonPerimeterVertices, GetPolygonPerimeterVertexInstances, GetPolygonPerimeterVertexInstance,
	GetPolygonPerimeterVertexCount, GetPolygonPerimeterVertex, GetPolygonPerimeterEdges, GetPolygonPerimeterEdgeCount, GetPolygonPerimeterEdge,
	GetPolygonInGroup, GetPolygonGroupCount, GetPolygonCountInGroup, GetPolygonCount, GetPolygonAdjacentPolygons,
	GetGroupForPolygon, GetFirstValidPolygonGroup, GetEdgeVertices, GetEdgeVertex, GetEdgeThatConnectsVertices,
	GetEdgeLoopElements, GetEdgeCount, GetEdgeConnectedPolygons, GetEdgeConnectedPolygonCount, GetEdgeConnectedPolygon,
	FindPolygonPerimeterVertexNumberForVertex, FindPolygonPerimeterEdgeNumberForVertices, FindPolygonLoop, ComputePolygonsSharedEdges, ComputePolygonPlane,
	ComputePolygonNormal, ComputePolygonCenter, ComputeBoundingBoxAndSphere, ComputeBoundingBox, AnyChangesToUndo
)
@:nativeGen
abstract ConstEditableMesh(EditableMesh) from EditableMesh {
	public extern var Adapters(get, never): TArray<cpp.Star<EditableMeshAdapter.ConstEditableMeshAdapter>>;
	public inline extern function get_Adapters(): TArray<cpp.Star<EditableMeshAdapter.ConstEditableMeshAdapter>> return this.Adapters;
	public extern var TextureCoordinateCount(get, never): cpp.Int32;
	public inline extern function get_TextureCoordinateCount(): cpp.Int32 return this.TextureCoordinateCount;
	public extern var PendingCompactCounter(get, never): cpp.Int32;
	public inline extern function get_PendingCompactCounter(): cpp.Int32 return this.PendingCompactCounter;
	public extern var SubdivisionCount(get, never): cpp.Int32;
	public inline extern function get_SubdivisionCount(): cpp.Int32 return this.SubdivisionCount;
}