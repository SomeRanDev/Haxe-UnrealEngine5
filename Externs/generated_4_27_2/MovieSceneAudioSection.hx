// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovieSceneAudioSection")
@:include("Sections/MovieSceneAudioSection.h")
extern class MovieSceneAudioSection extends MovieSceneSection {
	public var Sound: cpp.Star<SoundBase>;
	public var StartFrameOffset: FrameNumber;
	public var StartOffset_DEPRECATED: cpp.Float32;
	public var AudioStartTime_DEPRECATED: cpp.Float32;
	public var AudioDilationFactor_DEPRECATED: cpp.Float32;
	public var AudioVolume_DEPRECATED: cpp.Float32;
	public var SoundVolume: MovieSceneFloatChannel;
	public var PitchMultiplier: MovieSceneFloatChannel;
	public var AttachActorData: MovieSceneActorReferenceData;
	public var bLooping: Bool;
	public var bSuppressSubtitles: Bool;
	public var bOverrideAttenuation: Bool;
	public var AttenuationSettings: cpp.Star<SoundAttenuation>;
	public var OnQueueSubtitles: HaxeDelegateProperty<(cpp.Reference<TArray<SubtitleCue>>, cpp.Float32) -> Void>;
	public var OnAudioFinished: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnAudioPlaybackPercent: HaxeMulticastSparseDelegateProperty<(cpp.Star<SoundWave.ConstSoundWave>, cpp.Float32) -> Void>;

	public function SetStartOffset(InStartOffset: FrameNumber): Void;
	public function SetSound(InSound: cpp.Star<SoundBase>): Void;
	public function GetStartOffset(): cpp.Reference<FrameNumber>;
	public function GetSound(): cpp.Reference<cpp.Star<SoundBase>>;
}

@:forward(GetStartOffset, GetSound)
@:nativeGen
abstract ConstMovieSceneAudioSection(MovieSceneAudioSection) from MovieSceneAudioSection {
	public extern var Sound(get, never): cpp.Star<SoundBase.ConstSoundBase>;
	public inline extern function get_Sound(): cpp.Star<SoundBase.ConstSoundBase> return this.Sound;
	public extern var StartFrameOffset(get, never): FrameNumber;
	public inline extern function get_StartFrameOffset(): FrameNumber return this.StartFrameOffset;
	public extern var StartOffset_DEPRECATED(get, never): cpp.Float32;
	public inline extern function get_StartOffset_DEPRECATED(): cpp.Float32 return this.StartOffset_DEPRECATED;
	public extern var AudioStartTime_DEPRECATED(get, never): cpp.Float32;
	public inline extern function get_AudioStartTime_DEPRECATED(): cpp.Float32 return this.AudioStartTime_DEPRECATED;
	public extern var AudioDilationFactor_DEPRECATED(get, never): cpp.Float32;
	public inline extern function get_AudioDilationFactor_DEPRECATED(): cpp.Float32 return this.AudioDilationFactor_DEPRECATED;
	public extern var AudioVolume_DEPRECATED(get, never): cpp.Float32;
	public inline extern function get_AudioVolume_DEPRECATED(): cpp.Float32 return this.AudioVolume_DEPRECATED;
	public extern var SoundVolume(get, never): MovieSceneFloatChannel;
	public inline extern function get_SoundVolume(): MovieSceneFloatChannel return this.SoundVolume;
	public extern var PitchMultiplier(get, never): MovieSceneFloatChannel;
	public inline extern function get_PitchMultiplier(): MovieSceneFloatChannel return this.PitchMultiplier;
	public extern var AttachActorData(get, never): MovieSceneActorReferenceData;
	public inline extern function get_AttachActorData(): MovieSceneActorReferenceData return this.AttachActorData;
	public extern var bLooping(get, never): Bool;
	public inline extern function get_bLooping(): Bool return this.bLooping;
	public extern var bSuppressSubtitles(get, never): Bool;
	public inline extern function get_bSuppressSubtitles(): Bool return this.bSuppressSubtitles;
	public extern var bOverrideAttenuation(get, never): Bool;
	public inline extern function get_bOverrideAttenuation(): Bool return this.bOverrideAttenuation;
	public extern var AttenuationSettings(get, never): cpp.Star<SoundAttenuation.ConstSoundAttenuation>;
	public inline extern function get_AttenuationSettings(): cpp.Star<SoundAttenuation.ConstSoundAttenuation> return this.AttenuationSettings;
	public extern var OnQueueSubtitles(get, never): HaxeDelegateProperty<(cpp.Reference<TArray<SubtitleCue>>, cpp.Float32) -> Void>;
	public inline extern function get_OnQueueSubtitles(): HaxeDelegateProperty<(cpp.Reference<TArray<SubtitleCue>>, cpp.Float32) -> Void> return this.OnQueueSubtitles;
	public extern var OnAudioFinished(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnAudioFinished(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnAudioFinished;
	public extern var OnAudioPlaybackPercent(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<SoundWave.ConstSoundWave>, cpp.Float32) -> Void>;
	public inline extern function get_OnAudioPlaybackPercent(): HaxeMulticastSparseDelegateProperty<(cpp.Star<SoundWave.ConstSoundWave>, cpp.Float32) -> Void> return this.OnAudioPlaybackPercent;
}