// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimBlueprintGeneratedClass")
@:include("Animation/AnimBlueprintGeneratedClass.h")
extern class AnimBlueprintGeneratedClass extends BlueprintGeneratedClass {
	public var BakedStateMachines: TArray<BakedAnimationStateMachine>;
	public var TargetSkeleton: cpp.Star<Skeleton>;
	public var AnimNotifies: TArray<AnimNotifyEvent>;
	public var OrderedSavedPoseIndicesMap: TMap<FName, CachedPoseIndices>;
	public var SyncGroupNames: TArray<FName>;
	public var EvaluateGraphExposedInputs: TArray<ExposedValueHandler>;
	public var GraphAssetPlayerInformation: TMap<FName, GraphAssetPlayerInformation>;
	public var GraphBlendOptions: TMap<FName, AnimGraphBlendOptions>;
	public var PropertyAccessLibrary: PropertyAccessLibrary;
}

@:forward()
@:nativeGen
abstract ConstAnimBlueprintGeneratedClass(AnimBlueprintGeneratedClass) from AnimBlueprintGeneratedClass {
	public extern var BakedStateMachines(get, never): TArray<BakedAnimationStateMachine>;
	public inline extern function get_BakedStateMachines(): TArray<BakedAnimationStateMachine> return this.BakedStateMachines;
	public extern var TargetSkeleton(get, never): cpp.Star<Skeleton.ConstSkeleton>;
	public inline extern function get_TargetSkeleton(): cpp.Star<Skeleton.ConstSkeleton> return this.TargetSkeleton;
	public extern var AnimNotifies(get, never): TArray<AnimNotifyEvent>;
	public inline extern function get_AnimNotifies(): TArray<AnimNotifyEvent> return this.AnimNotifies;
	public extern var OrderedSavedPoseIndicesMap(get, never): TMap<FName, CachedPoseIndices>;
	public inline extern function get_OrderedSavedPoseIndicesMap(): TMap<FName, CachedPoseIndices> return this.OrderedSavedPoseIndicesMap;
	public extern var SyncGroupNames(get, never): TArray<FName>;
	public inline extern function get_SyncGroupNames(): TArray<FName> return this.SyncGroupNames;
	public extern var EvaluateGraphExposedInputs(get, never): TArray<ExposedValueHandler>;
	public inline extern function get_EvaluateGraphExposedInputs(): TArray<ExposedValueHandler> return this.EvaluateGraphExposedInputs;
	public extern var GraphAssetPlayerInformation(get, never): TMap<FName, GraphAssetPlayerInformation>;
	public inline extern function get_GraphAssetPlayerInformation(): TMap<FName, GraphAssetPlayerInformation> return this.GraphAssetPlayerInformation;
	public extern var GraphBlendOptions(get, never): TMap<FName, AnimGraphBlendOptions>;
	public inline extern function get_GraphBlendOptions(): TMap<FName, AnimGraphBlendOptions> return this.GraphBlendOptions;
	public extern var PropertyAccessLibrary(get, never): PropertyAccessLibrary;
	public inline extern function get_PropertyAccessLibrary(): PropertyAccessLibrary return this.PropertyAccessLibrary;
}