// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UOculusFunctionLibrary")
@:include("OculusFunctionLibrary.h")
extern class OculusFunctionLibrary extends BlueprintFunctionLibrary {
	public function SetReorientHMDOnControllerRecenter(recenterMode: Bool): Void;
	public function SetPositionScale3D(PosScale3D: Vector): Void;
	public function SetGuardianVisibility(GuardianVisible: Bool): Void;
	public function SetFixedFoveatedRenderingLevel(level: EFixedFoveatedRenderingLevel, isDynamic: Bool): Void;
	public function SetDisplayFrequency(RequestedFrequency: cpp.Float32): Void;
	public function SetCPUAndGPULevels(CPULevel: cpp.Int32, GPULevel: cpp.Int32): Void;
	public function SetColorScaleAndOffset(ColorScale: LinearColor, ColorOffset: LinearColor, bApplyToAllLayers: Bool): Void;
	public function SetClientColorDesc(ColorSpace: EColorSpace): Void;
	public function SetBaseRotationAndPositionOffset(BaseRot: Rotator, PosOffset: Vector, Options: EOrientPositionSelector): Void;
	public function SetBaseRotationAndBaseOffsetInMeters(Rotation: Rotator, BaseOffsetInMeters: Vector, Options: EOrientPositionSelector): Void;
	public function IsGuardianDisplayed(): cpp.Reference<Bool>;
	public function IsGuardianConfigured(): cpp.Reference<Bool>;
	public function IsDeviceTracked(DeviceType: ETrackedDeviceType): cpp.Reference<Bool>;
	public function HasSystemOverlayPresent(): cpp.Reference<Bool>;
	public function HasInputFocus(): cpp.Reference<Bool>;
	public function GetUserProfile(Profile: cpp.Reference<HmdUserProfile>): cpp.Reference<Bool>;
	public function GetSystemHmd3DofModeEnabled(): cpp.Reference<Bool>;
	public function GetRawSensorData(AngularAcceleration: cpp.Reference<Vector>, LinearAcceleration: cpp.Reference<Vector>, AngularVelocity: cpp.Reference<Vector>, LinearVelocity: cpp.Reference<Vector>, TimeInSeconds: cpp.Reference<cpp.Float32>, DeviceType: ETrackedDeviceType): Void;
	public function GetPose(DeviceRotation: cpp.Reference<Rotator>, DevicePosition: cpp.Reference<Vector>, NeckPosition: cpp.Reference<Vector>, bUseOrienationForPlayerCamera: Bool, bUsePositionForPlayerCamera: Bool, PositionScale: Vector): Void;
	public function GetPointGuardianIntersection(Point: Vector, BoundaryType: EBoundaryType): cpp.Reference<GuardianTestResult>;
	public function GetPlayAreaTransform(): cpp.Reference<Transform>;
	public function GetNodeGuardianIntersection(DeviceType: ETrackedDeviceType, BoundaryType: EBoundaryType): cpp.Reference<GuardianTestResult>;
	public function GetHmdColorDesc(): cpp.Reference<EColorSpace>;
	public function GetGuardianPoints(BoundaryType: EBoundaryType, UsePawnSpace: Bool): cpp.Reference<TArray<Vector>>;
	public function GetGuardianDimensions(BoundaryType: EBoundaryType): cpp.Reference<Vector>;
	public function GetGPUUtilization(IsGPUAvailable: cpp.Reference<Bool>, GPUUtilization: cpp.Reference<cpp.Float32>): Void;
	public function GetGPUFrameTime(): cpp.Reference<cpp.Float32>;
	public function GetFixedFoveatedRenderingLevel(): cpp.Reference<EFixedFoveatedRenderingLevel>;
	public function GetDeviceType(): cpp.Reference<EOculusDeviceType>;
	public function GetDeviceName(): cpp.Reference<FString>;
	public function GetCurrentDisplayFrequency(): cpp.Reference<cpp.Float32>;
	public function GetBaseRotationAndPositionOffset(OutRot: cpp.Reference<Rotator>, OutPosOffset: cpp.Reference<Vector>): Void;
	public function GetBaseRotationAndBaseOffsetInMeters(OutRotation: cpp.Reference<Rotator>, OutBaseOffsetInMeters: cpp.Reference<Vector>): Void;
	public function GetAvailableDisplayFrequencies(): cpp.Reference<TArray<cpp.Float32>>;
	public function EnablePositionTracking(bPositionTracking: Bool): Void;
	public function EnableOrientationTracking(bOrientationTracking: Bool): Void;
	public function ClearLoadingSplashScreens(): Void;
	public function AddLoadingSplashScreen(Texture: cpp.Star<Texture2D>, TranslationInMeters: Vector, Rotation: Rotator, SizeInMeters: Vector2D, DeltaRotation: Rotator, bClearBeforeAdd: Bool): Void;
}

@:forward()
@:nativeGen
abstract ConstOculusFunctionLibrary(OculusFunctionLibrary) from OculusFunctionLibrary {
}