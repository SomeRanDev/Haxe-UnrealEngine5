// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UVolumetricCloudComponent")
@:include("Components/VolumetricCloudComponent.h")
extern class VolumetricCloudComp extends SceneComp {
	public var LayerBottomAltitude: cpp.Float32;
	public var LayerHeight: cpp.Float32;
	public var TracingStartMaxDistance: cpp.Float32;
	public var TracingMaxDistance: cpp.Float32;
	public var PlanetRadius: cpp.Float32;
	public var GroundAlbedo: Color;
	public var Material: cpp.Star<MaterialInterface>;
	public var bUsePerSampleAtmosphericLightTransmittance: Bool;
	public var SkyLightCloudBottomOcclusion: cpp.Float32;
	public var ViewSampleCountScale: cpp.Float32;
	public var ReflectionSampleCountScale: cpp.Float32;
	public var ShadowViewSampleCountScale: cpp.Float32;
	public var ShadowReflectionSampleCountScale: cpp.Float32;
	public var ShadowTracingDistance: cpp.Float32;
	public var StopTracingTransmittanceThreshold: cpp.Float32;

	public function SetViewSampleCountScale(NewValue: cpp.Float32): Void;
	public function SetTracingStartMaxDistance(NewValue: cpp.Float32): Void;
	public function SetTracingMaxDistance(NewValue: cpp.Float32): Void;
	public function SetStopTracingTransmittanceThreshold(NewValue: cpp.Float32): Void;
	public function SetSkyLightCloudBottomOcclusion(NewValue: cpp.Float32): Void;
	public function SetShadowViewSampleCountScale(NewValue: cpp.Float32): Void;
	public function SetShadowTracingDistance(NewValue: cpp.Float32): Void;
	public function SetShadowReflectionSampleCountScale(NewValue: cpp.Float32): Void;
	public function SetReflectionSampleCountScale(NewValue: cpp.Float32): Void;
	public function SetPlanetRadius(NewValue: cpp.Float32): Void;
	public function SetMaterial(NewValue: cpp.Star<MaterialInterface>): Void;
	public function SetLayerHeight(NewValue: cpp.Float32): Void;
	public function SetLayerBottomAltitude(NewValue: cpp.Float32): Void;
	public function SetGroundAlbedo(NewValue: Color): Void;
	public function SetbUsePerSampleAtmosphericLightTransmittance(NewValue: Bool): Void;
}

@:forward()
@:nativeGen
abstract ConstVolumetricCloudComp(VolumetricCloudComp) from VolumetricCloudComp {
	public extern var LayerBottomAltitude(get, never): cpp.Float32;
	public inline extern function get_LayerBottomAltitude(): cpp.Float32 return this.LayerBottomAltitude;
	public extern var LayerHeight(get, never): cpp.Float32;
	public inline extern function get_LayerHeight(): cpp.Float32 return this.LayerHeight;
	public extern var TracingStartMaxDistance(get, never): cpp.Float32;
	public inline extern function get_TracingStartMaxDistance(): cpp.Float32 return this.TracingStartMaxDistance;
	public extern var TracingMaxDistance(get, never): cpp.Float32;
	public inline extern function get_TracingMaxDistance(): cpp.Float32 return this.TracingMaxDistance;
	public extern var PlanetRadius(get, never): cpp.Float32;
	public inline extern function get_PlanetRadius(): cpp.Float32 return this.PlanetRadius;
	public extern var GroundAlbedo(get, never): Color;
	public inline extern function get_GroundAlbedo(): Color return this.GroundAlbedo;
	public extern var Material(get, never): cpp.Star<MaterialInterface.ConstMaterialInterface>;
	public inline extern function get_Material(): cpp.Star<MaterialInterface.ConstMaterialInterface> return this.Material;
	public extern var bUsePerSampleAtmosphericLightTransmittance(get, never): Bool;
	public inline extern function get_bUsePerSampleAtmosphericLightTransmittance(): Bool return this.bUsePerSampleAtmosphericLightTransmittance;
	public extern var SkyLightCloudBottomOcclusion(get, never): cpp.Float32;
	public inline extern function get_SkyLightCloudBottomOcclusion(): cpp.Float32 return this.SkyLightCloudBottomOcclusion;
	public extern var ViewSampleCountScale(get, never): cpp.Float32;
	public inline extern function get_ViewSampleCountScale(): cpp.Float32 return this.ViewSampleCountScale;
	public extern var ReflectionSampleCountScale(get, never): cpp.Float32;
	public inline extern function get_ReflectionSampleCountScale(): cpp.Float32 return this.ReflectionSampleCountScale;
	public extern var ShadowViewSampleCountScale(get, never): cpp.Float32;
	public inline extern function get_ShadowViewSampleCountScale(): cpp.Float32 return this.ShadowViewSampleCountScale;
	public extern var ShadowReflectionSampleCountScale(get, never): cpp.Float32;
	public inline extern function get_ShadowReflectionSampleCountScale(): cpp.Float32 return this.ShadowReflectionSampleCountScale;
	public extern var ShadowTracingDistance(get, never): cpp.Float32;
	public inline extern function get_ShadowTracingDistance(): cpp.Float32 return this.ShadowTracingDistance;
	public extern var StopTracingTransmittanceThreshold(get, never): cpp.Float32;
	public inline extern function get_StopTracingTransmittanceThreshold(): cpp.Float32 return this.StopTracingTransmittanceThreshold;
}