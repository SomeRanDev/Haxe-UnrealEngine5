// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMagicLeapARPinFunctionLibrary")
@:include("MagicLeapARPinFunctionLibrary.h")
extern class MagicLeapARPinFunctionLibrary extends BlueprintFunctionLibrary {
	public function UnBindToOnMagicLeapContentBindingFoundDelegate(Delegate: cpp.Reference<HaxeDelegateProperty<(cpp.Reference<Guid>, cpp.Reference<TSet<FString>>) -> Void>>): Void;
	public function UnBindToOnMagicLeapARPinUpdatedDelegate(Delegate: cpp.Reference<HaxeDelegateProperty<(cpp.Reference<TArray<Guid>>, cpp.Reference<TArray<Guid>>, cpp.Reference<TArray<Guid>>) -> Void>>): Void;
	public function SetGlobalQueryFilter(InGlobalFilter: cpp.Reference<MagicLeapARPinQuery>): cpp.Reference<EMagicLeapPassableWorldError>;
	public function SetContentBindingSaveGameUserIndex(UserIndex: cpp.Int32): Void;
	public function QueryARPins(Query: cpp.Reference<MagicLeapARPinQuery>, Pins: cpp.Reference<TArray<Guid>>): cpp.Reference<EMagicLeapPassableWorldError>;
	public function ParseStringToARPinId(PinIdString: FString, ARPinId: cpp.Reference<Guid>): cpp.Reference<Bool>;
	public function IsTrackerValid(): cpp.Reference<Bool>;
	public function GetNumAvailableARPins(Count: cpp.Reference<cpp.Int32>): cpp.Reference<EMagicLeapPassableWorldError>;
	public function GetGlobalQueryFilter(CurrentGlobalFilter: cpp.Reference<MagicLeapARPinQuery>): cpp.Reference<EMagicLeapPassableWorldError>;
	public function GetContentBindingSaveGameUserIndex(): cpp.Reference<cpp.Int32>;
	public function GetClosestARPin(SearchPoint: cpp.Reference<Vector>, PinID: cpp.Reference<Guid>): cpp.Reference<EMagicLeapPassableWorldError>;
	public function GetAvailableARPins(NumRequested: cpp.Int32, Pins: cpp.Reference<TArray<Guid>>): cpp.Reference<EMagicLeapPassableWorldError>;
	public function GetARPinStateToString(State: cpp.Reference<MagicLeapARPinState>): cpp.Reference<FString>;
	public function GetARPinState(PinID: cpp.Reference<Guid>, State: cpp.Reference<MagicLeapARPinState>): cpp.Reference<EMagicLeapPassableWorldError>;
	public function GetARPinPositionAndOrientation_TrackingSpace(PinID: cpp.Reference<Guid>, Position: cpp.Reference<Vector>, Orientation: cpp.Reference<Rotator>, PinFoundInEnvironment: cpp.Reference<Bool>): cpp.Reference<Bool>;
	public function GetARPinPositionAndOrientation(PinID: cpp.Reference<Guid>, Position: cpp.Reference<Vector>, Orientation: cpp.Reference<Rotator>, PinFoundInEnvironment: cpp.Reference<Bool>): cpp.Reference<Bool>;
	public function DestroyTracker(): cpp.Reference<EMagicLeapPassableWorldError>;
	public function CreateTracker(): cpp.Reference<EMagicLeapPassableWorldError>;
	public function BindToOnMagicLeapContentBindingFoundDelegate(Delegate: cpp.Reference<HaxeDelegateProperty<(cpp.Reference<Guid>, cpp.Reference<TSet<FString>>) -> Void>>): Void;
	public function BindToOnMagicLeapARPinUpdatedDelegate(Delegate: cpp.Reference<HaxeDelegateProperty<(cpp.Reference<TArray<Guid>>, cpp.Reference<TArray<Guid>>, cpp.Reference<TArray<Guid>>) -> Void>>): Void;
	public function ARPinIdToString(ARPinId: cpp.Reference<Guid>): cpp.Reference<FString>;
}

@:forward()
@:nativeGen
abstract ConstMagicLeapARPinFunctionLibrary(MagicLeapARPinFunctionLibrary) from MagicLeapARPinFunctionLibrary {
}