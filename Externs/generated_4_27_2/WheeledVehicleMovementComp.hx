// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWheeledVehicleMovementComponent")
@:include("WheeledVehicleMovementComponent.h")
extern class WheeledVehicleMovementComp extends PawnMovementComp {
	public var bDeprecatedSpringOffsetMode: Bool;
	public var bReverseAsBrake: Bool;
	public var bUseRVOAvoidance: Bool;
	public var bRawHandbrakeInput: Bool;
	public var bRawGearUpInput: Bool;
	public var bRawGearDownInput: Bool;
	public var bWasAvoidanceUpdated: Bool;
	public var Mass: cpp.Float32;
	public var WheelSetups: TArray<WheelSetup>;
	public var DragCoefficient: cpp.Float32;
	public var ChassisWidth: cpp.Float32;
	public var ChassisHeight: cpp.Float32;
	public var DragArea: cpp.Float32;
	public var EstimatedMaxEngineSpeed: cpp.Float32;
	public var MaxEngineRPM: cpp.Float32;
	public var DebugDragMagnitude: cpp.Float32;
	public var InertiaTensorScale: Vector;
	public var MinNormalizedTireLoad: cpp.Float32;
	public var MinNormalizedTireLoadFiltered: cpp.Float32;
	public var MaxNormalizedTireLoad: cpp.Float32;
	public var MaxNormalizedTireLoadFiltered: cpp.Float32;
	public var ThresholdLongitudinalSpeed: cpp.Float32;
	public var LowForwardSpeedSubStepCount: cpp.Int32;
	public var HighForwardSpeedSubStepCount: cpp.Int32;
	public var Wheels: TArray<cpp.Star<VehicleWheel>>;
	public var RVOAvoidanceRadius: cpp.Float32;
	public var RVOAvoidanceHeight: cpp.Float32;
	public var AvoidanceConsiderationRadius: cpp.Float32;
	public var RVOSteeringStep: cpp.Float32;
	public var RVOThrottleStep: cpp.Float32;
	public var AvoidanceUID: cpp.Int32;
	public var AvoidanceGroup: NavAvoidanceMask;
	public var GroupsToAvoid: NavAvoidanceMask;
	public var GroupsToIgnore: NavAvoidanceMask;
	public var AvoidanceWeight: cpp.Float32;
	public var PendingLaunchVelocity: Vector;
	public var ReplicatedState: ReplicatedVehicleState;
	public var RawSteeringInput: cpp.Float32;
	public var RawThrottleInput: cpp.Float32;
	public var RawBrakeInput: cpp.Float32;
	public var SteeringInput: cpp.Float32;
	public var ThrottleInput: cpp.Float32;
	public var BrakeInput: cpp.Float32;
	public var HandbrakeInput: cpp.Float32;
	public var IdleBrakeInput: cpp.Float32;
	public var StopThreshold: cpp.Float32;
	public var WrongDirectionThreshold: cpp.Float32;
	public var ThrottleInputRate: VehicleInputRate;
	public var BrakeInputRate: VehicleInputRate;
	public var HandbrakeInputRate: VehicleInputRate;
	public var SteeringInputRate: VehicleInputRate;
	public var OverrideController: cpp.Star<Controller>;

	public function SetUseAutoGears(bUseAuto: Bool): Void;
	public function SetThrottleInput(Throttle: cpp.Float32): Void;
	public function SetTargetGear(GearNum: cpp.Int32, bImmediate: Bool): Void;
	public function SetSteeringInput(Steering: cpp.Float32): Void;
	public function SetHandbrakeInput(bNewHandbrake: Bool): Void;
	public function SetGroupsToIgnoreMask(GroupMask: cpp.Reference<NavAvoidanceMask>): Void;
	public function SetGroupsToIgnore(GroupFlags: cpp.Int32): Void;
	public function SetGroupsToAvoidMask(GroupMask: cpp.Reference<NavAvoidanceMask>): Void;
	public function SetGroupsToAvoid(GroupFlags: cpp.Int32): Void;
	public function SetGearUp(bNewGearUp: Bool): Void;
	public function SetGearDown(bNewGearDown: Bool): Void;
	public function SetBrakeInput(Brake: cpp.Float32): Void;
	public function SetAvoidanceGroupMask(GroupMask: cpp.Reference<NavAvoidanceMask>): Void;
	public function SetAvoidanceGroup(GroupFlags: cpp.Int32): Void;
	public function SetAvoidanceEnabled(bEnable: Bool): Void;
	public function ServerUpdateState(InSteeringInput: cpp.Float32, InThrottleInput: cpp.Float32, InBrakeInput: cpp.Float32, InHandbrakeInput: cpp.Float32, CurrentGear: cpp.Int32): Void;
	public function GetUseAutoGears(): cpp.Reference<Bool>;
	public function GetTargetGear(): cpp.Reference<cpp.Int32>;
	public function GetForwardSpeed(): cpp.Reference<cpp.Float32>;
	public function GetEngineRotationSpeed(): cpp.Reference<cpp.Float32>;
	public function GetEngineMaxRotationSpeed(): cpp.Reference<cpp.Float32>;
	public function GetCurrentGear(): cpp.Reference<cpp.Int32>;
}

@:forward(GetUseAutoGears, GetTargetGear, GetForwardSpeed, GetEngineRotationSpeed, GetEngineMaxRotationSpeed, GetCurrentGear)
@:nativeGen
abstract ConstWheeledVehicleMovementComp(WheeledVehicleMovementComp) from WheeledVehicleMovementComp {
	public extern var bDeprecatedSpringOffsetMode(get, never): Bool;
	public inline extern function get_bDeprecatedSpringOffsetMode(): Bool return this.bDeprecatedSpringOffsetMode;
	public extern var bReverseAsBrake(get, never): Bool;
	public inline extern function get_bReverseAsBrake(): Bool return this.bReverseAsBrake;
	public extern var bUseRVOAvoidance(get, never): Bool;
	public inline extern function get_bUseRVOAvoidance(): Bool return this.bUseRVOAvoidance;
	public extern var bRawHandbrakeInput(get, never): Bool;
	public inline extern function get_bRawHandbrakeInput(): Bool return this.bRawHandbrakeInput;
	public extern var bRawGearUpInput(get, never): Bool;
	public inline extern function get_bRawGearUpInput(): Bool return this.bRawGearUpInput;
	public extern var bRawGearDownInput(get, never): Bool;
	public inline extern function get_bRawGearDownInput(): Bool return this.bRawGearDownInput;
	public extern var bWasAvoidanceUpdated(get, never): Bool;
	public inline extern function get_bWasAvoidanceUpdated(): Bool return this.bWasAvoidanceUpdated;
	public extern var Mass(get, never): cpp.Float32;
	public inline extern function get_Mass(): cpp.Float32 return this.Mass;
	public extern var WheelSetups(get, never): TArray<WheelSetup>;
	public inline extern function get_WheelSetups(): TArray<WheelSetup> return this.WheelSetups;
	public extern var DragCoefficient(get, never): cpp.Float32;
	public inline extern function get_DragCoefficient(): cpp.Float32 return this.DragCoefficient;
	public extern var ChassisWidth(get, never): cpp.Float32;
	public inline extern function get_ChassisWidth(): cpp.Float32 return this.ChassisWidth;
	public extern var ChassisHeight(get, never): cpp.Float32;
	public inline extern function get_ChassisHeight(): cpp.Float32 return this.ChassisHeight;
	public extern var DragArea(get, never): cpp.Float32;
	public inline extern function get_DragArea(): cpp.Float32 return this.DragArea;
	public extern var EstimatedMaxEngineSpeed(get, never): cpp.Float32;
	public inline extern function get_EstimatedMaxEngineSpeed(): cpp.Float32 return this.EstimatedMaxEngineSpeed;
	public extern var MaxEngineRPM(get, never): cpp.Float32;
	public inline extern function get_MaxEngineRPM(): cpp.Float32 return this.MaxEngineRPM;
	public extern var DebugDragMagnitude(get, never): cpp.Float32;
	public inline extern function get_DebugDragMagnitude(): cpp.Float32 return this.DebugDragMagnitude;
	public extern var InertiaTensorScale(get, never): Vector;
	public inline extern function get_InertiaTensorScale(): Vector return this.InertiaTensorScale;
	public extern var MinNormalizedTireLoad(get, never): cpp.Float32;
	public inline extern function get_MinNormalizedTireLoad(): cpp.Float32 return this.MinNormalizedTireLoad;
	public extern var MinNormalizedTireLoadFiltered(get, never): cpp.Float32;
	public inline extern function get_MinNormalizedTireLoadFiltered(): cpp.Float32 return this.MinNormalizedTireLoadFiltered;
	public extern var MaxNormalizedTireLoad(get, never): cpp.Float32;
	public inline extern function get_MaxNormalizedTireLoad(): cpp.Float32 return this.MaxNormalizedTireLoad;
	public extern var MaxNormalizedTireLoadFiltered(get, never): cpp.Float32;
	public inline extern function get_MaxNormalizedTireLoadFiltered(): cpp.Float32 return this.MaxNormalizedTireLoadFiltered;
	public extern var ThresholdLongitudinalSpeed(get, never): cpp.Float32;
	public inline extern function get_ThresholdLongitudinalSpeed(): cpp.Float32 return this.ThresholdLongitudinalSpeed;
	public extern var LowForwardSpeedSubStepCount(get, never): cpp.Int32;
	public inline extern function get_LowForwardSpeedSubStepCount(): cpp.Int32 return this.LowForwardSpeedSubStepCount;
	public extern var HighForwardSpeedSubStepCount(get, never): cpp.Int32;
	public inline extern function get_HighForwardSpeedSubStepCount(): cpp.Int32 return this.HighForwardSpeedSubStepCount;
	public extern var Wheels(get, never): TArray<cpp.Star<VehicleWheel.ConstVehicleWheel>>;
	public inline extern function get_Wheels(): TArray<cpp.Star<VehicleWheel.ConstVehicleWheel>> return this.Wheels;
	public extern var RVOAvoidanceRadius(get, never): cpp.Float32;
	public inline extern function get_RVOAvoidanceRadius(): cpp.Float32 return this.RVOAvoidanceRadius;
	public extern var RVOAvoidanceHeight(get, never): cpp.Float32;
	public inline extern function get_RVOAvoidanceHeight(): cpp.Float32 return this.RVOAvoidanceHeight;
	public extern var AvoidanceConsiderationRadius(get, never): cpp.Float32;
	public inline extern function get_AvoidanceConsiderationRadius(): cpp.Float32 return this.AvoidanceConsiderationRadius;
	public extern var RVOSteeringStep(get, never): cpp.Float32;
	public inline extern function get_RVOSteeringStep(): cpp.Float32 return this.RVOSteeringStep;
	public extern var RVOThrottleStep(get, never): cpp.Float32;
	public inline extern function get_RVOThrottleStep(): cpp.Float32 return this.RVOThrottleStep;
	public extern var AvoidanceUID(get, never): cpp.Int32;
	public inline extern function get_AvoidanceUID(): cpp.Int32 return this.AvoidanceUID;
	public extern var AvoidanceGroup(get, never): NavAvoidanceMask;
	public inline extern function get_AvoidanceGroup(): NavAvoidanceMask return this.AvoidanceGroup;
	public extern var GroupsToAvoid(get, never): NavAvoidanceMask;
	public inline extern function get_GroupsToAvoid(): NavAvoidanceMask return this.GroupsToAvoid;
	public extern var GroupsToIgnore(get, never): NavAvoidanceMask;
	public inline extern function get_GroupsToIgnore(): NavAvoidanceMask return this.GroupsToIgnore;
	public extern var AvoidanceWeight(get, never): cpp.Float32;
	public inline extern function get_AvoidanceWeight(): cpp.Float32 return this.AvoidanceWeight;
	public extern var PendingLaunchVelocity(get, never): Vector;
	public inline extern function get_PendingLaunchVelocity(): Vector return this.PendingLaunchVelocity;
	public extern var ReplicatedState(get, never): ReplicatedVehicleState;
	public inline extern function get_ReplicatedState(): ReplicatedVehicleState return this.ReplicatedState;
	public extern var RawSteeringInput(get, never): cpp.Float32;
	public inline extern function get_RawSteeringInput(): cpp.Float32 return this.RawSteeringInput;
	public extern var RawThrottleInput(get, never): cpp.Float32;
	public inline extern function get_RawThrottleInput(): cpp.Float32 return this.RawThrottleInput;
	public extern var RawBrakeInput(get, never): cpp.Float32;
	public inline extern function get_RawBrakeInput(): cpp.Float32 return this.RawBrakeInput;
	public extern var SteeringInput(get, never): cpp.Float32;
	public inline extern function get_SteeringInput(): cpp.Float32 return this.SteeringInput;
	public extern var ThrottleInput(get, never): cpp.Float32;
	public inline extern function get_ThrottleInput(): cpp.Float32 return this.ThrottleInput;
	public extern var BrakeInput(get, never): cpp.Float32;
	public inline extern function get_BrakeInput(): cpp.Float32 return this.BrakeInput;
	public extern var HandbrakeInput(get, never): cpp.Float32;
	public inline extern function get_HandbrakeInput(): cpp.Float32 return this.HandbrakeInput;
	public extern var IdleBrakeInput(get, never): cpp.Float32;
	public inline extern function get_IdleBrakeInput(): cpp.Float32 return this.IdleBrakeInput;
	public extern var StopThreshold(get, never): cpp.Float32;
	public inline extern function get_StopThreshold(): cpp.Float32 return this.StopThreshold;
	public extern var WrongDirectionThreshold(get, never): cpp.Float32;
	public inline extern function get_WrongDirectionThreshold(): cpp.Float32 return this.WrongDirectionThreshold;
	public extern var ThrottleInputRate(get, never): VehicleInputRate;
	public inline extern function get_ThrottleInputRate(): VehicleInputRate return this.ThrottleInputRate;
	public extern var BrakeInputRate(get, never): VehicleInputRate;
	public inline extern function get_BrakeInputRate(): VehicleInputRate return this.BrakeInputRate;
	public extern var HandbrakeInputRate(get, never): VehicleInputRate;
	public inline extern function get_HandbrakeInputRate(): VehicleInputRate return this.HandbrakeInputRate;
	public extern var SteeringInputRate(get, never): VehicleInputRate;
	public inline extern function get_SteeringInputRate(): VehicleInputRate return this.SteeringInputRate;
	public extern var OverrideController(get, never): cpp.Star<Controller.ConstController>;
	public inline extern function get_OverrideController(): cpp.Star<Controller.ConstController> return this.OverrideController;
}