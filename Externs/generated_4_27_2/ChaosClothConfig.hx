// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UChaosClothConfig")
@:include("ChaosCloth/ChaosClothConfig.h")
extern class ChaosClothConfig extends ClothConfigCommon {
	public var MassMode: EClothMassMode;
	public var UniformMass: cpp.Float32;
	public var TotalMass: cpp.Float32;
	public var Density: cpp.Float32;
	public var MinPerParticleMass: cpp.Float32;
	public var EdgeStiffness: cpp.Float32;
	public var BendingStiffness: cpp.Float32;
	public var bUseBendingElements: Bool;
	public var AreaStiffness: cpp.Float32;
	public var VolumeStiffness: cpp.Float32;
	public var TetherStiffness: ChaosClothWeightedValue;
	public var LimitScale: cpp.Float32;
	public var bUseGeodesicDistance: Bool;
	public var ShapeTargetStiffness: cpp.Float32;
	public var CollisionThickness: cpp.Float32;
	public var FrictionCoefficient: cpp.Float32;
	public var bUseCCD: Bool;
	public var bUseSelfCollisions: Bool;
	public var SelfCollisionThickness: cpp.Float32;
	public var bUseLegacyBackstop: Bool;
	public var DampingCoefficient: cpp.Float32;
	public var bUsePointBasedWindModel: Bool;
	public var DragCoefficient: cpp.Float32;
	public var LiftCoefficient: cpp.Float32;
	public var bUseGravityOverride: Bool;
	public var GravityScale: cpp.Float32;
	public var Gravity: Vector;
	public var AnimDriveStiffness: ChaosClothWeightedValue;
	public var AnimDriveDamping: ChaosClothWeightedValue;
	public var LinearVelocityScale: Vector;
	public var AngularVelocityScale: cpp.Float32;
	public var FictitiousAngularScale: cpp.Float32;
	public var bUseTetrahedralConstraints: Bool;
	public var bUseThinShellVolumeConstraints: Bool;
	public var bUseContinuousCollisionDetection: Bool;
	public var TetherMode_DEPRECATED: EChaosClothTetherMode;
	public var AnimDriveSpringStiffness_DEPRECATED: cpp.Float32;
	public var StrainLimitingStiffness_DEPRECATED: cpp.Float32;
}

@:forward()
@:nativeGen
abstract ConstChaosClothConfig(ChaosClothConfig) from ChaosClothConfig {
	public extern var MassMode(get, never): EClothMassMode;
	public inline extern function get_MassMode(): EClothMassMode return this.MassMode;
	public extern var UniformMass(get, never): cpp.Float32;
	public inline extern function get_UniformMass(): cpp.Float32 return this.UniformMass;
	public extern var TotalMass(get, never): cpp.Float32;
	public inline extern function get_TotalMass(): cpp.Float32 return this.TotalMass;
	public extern var Density(get, never): cpp.Float32;
	public inline extern function get_Density(): cpp.Float32 return this.Density;
	public extern var MinPerParticleMass(get, never): cpp.Float32;
	public inline extern function get_MinPerParticleMass(): cpp.Float32 return this.MinPerParticleMass;
	public extern var EdgeStiffness(get, never): cpp.Float32;
	public inline extern function get_EdgeStiffness(): cpp.Float32 return this.EdgeStiffness;
	public extern var BendingStiffness(get, never): cpp.Float32;
	public inline extern function get_BendingStiffness(): cpp.Float32 return this.BendingStiffness;
	public extern var bUseBendingElements(get, never): Bool;
	public inline extern function get_bUseBendingElements(): Bool return this.bUseBendingElements;
	public extern var AreaStiffness(get, never): cpp.Float32;
	public inline extern function get_AreaStiffness(): cpp.Float32 return this.AreaStiffness;
	public extern var VolumeStiffness(get, never): cpp.Float32;
	public inline extern function get_VolumeStiffness(): cpp.Float32 return this.VolumeStiffness;
	public extern var TetherStiffness(get, never): ChaosClothWeightedValue;
	public inline extern function get_TetherStiffness(): ChaosClothWeightedValue return this.TetherStiffness;
	public extern var LimitScale(get, never): cpp.Float32;
	public inline extern function get_LimitScale(): cpp.Float32 return this.LimitScale;
	public extern var bUseGeodesicDistance(get, never): Bool;
	public inline extern function get_bUseGeodesicDistance(): Bool return this.bUseGeodesicDistance;
	public extern var ShapeTargetStiffness(get, never): cpp.Float32;
	public inline extern function get_ShapeTargetStiffness(): cpp.Float32 return this.ShapeTargetStiffness;
	public extern var CollisionThickness(get, never): cpp.Float32;
	public inline extern function get_CollisionThickness(): cpp.Float32 return this.CollisionThickness;
	public extern var FrictionCoefficient(get, never): cpp.Float32;
	public inline extern function get_FrictionCoefficient(): cpp.Float32 return this.FrictionCoefficient;
	public extern var bUseCCD(get, never): Bool;
	public inline extern function get_bUseCCD(): Bool return this.bUseCCD;
	public extern var bUseSelfCollisions(get, never): Bool;
	public inline extern function get_bUseSelfCollisions(): Bool return this.bUseSelfCollisions;
	public extern var SelfCollisionThickness(get, never): cpp.Float32;
	public inline extern function get_SelfCollisionThickness(): cpp.Float32 return this.SelfCollisionThickness;
	public extern var bUseLegacyBackstop(get, never): Bool;
	public inline extern function get_bUseLegacyBackstop(): Bool return this.bUseLegacyBackstop;
	public extern var DampingCoefficient(get, never): cpp.Float32;
	public inline extern function get_DampingCoefficient(): cpp.Float32 return this.DampingCoefficient;
	public extern var bUsePointBasedWindModel(get, never): Bool;
	public inline extern function get_bUsePointBasedWindModel(): Bool return this.bUsePointBasedWindModel;
	public extern var DragCoefficient(get, never): cpp.Float32;
	public inline extern function get_DragCoefficient(): cpp.Float32 return this.DragCoefficient;
	public extern var LiftCoefficient(get, never): cpp.Float32;
	public inline extern function get_LiftCoefficient(): cpp.Float32 return this.LiftCoefficient;
	public extern var bUseGravityOverride(get, never): Bool;
	public inline extern function get_bUseGravityOverride(): Bool return this.bUseGravityOverride;
	public extern var GravityScale(get, never): cpp.Float32;
	public inline extern function get_GravityScale(): cpp.Float32 return this.GravityScale;
	public extern var Gravity(get, never): Vector;
	public inline extern function get_Gravity(): Vector return this.Gravity;
	public extern var AnimDriveStiffness(get, never): ChaosClothWeightedValue;
	public inline extern function get_AnimDriveStiffness(): ChaosClothWeightedValue return this.AnimDriveStiffness;
	public extern var AnimDriveDamping(get, never): ChaosClothWeightedValue;
	public inline extern function get_AnimDriveDamping(): ChaosClothWeightedValue return this.AnimDriveDamping;
	public extern var LinearVelocityScale(get, never): Vector;
	public inline extern function get_LinearVelocityScale(): Vector return this.LinearVelocityScale;
	public extern var AngularVelocityScale(get, never): cpp.Float32;
	public inline extern function get_AngularVelocityScale(): cpp.Float32 return this.AngularVelocityScale;
	public extern var FictitiousAngularScale(get, never): cpp.Float32;
	public inline extern function get_FictitiousAngularScale(): cpp.Float32 return this.FictitiousAngularScale;
	public extern var bUseTetrahedralConstraints(get, never): Bool;
	public inline extern function get_bUseTetrahedralConstraints(): Bool return this.bUseTetrahedralConstraints;
	public extern var bUseThinShellVolumeConstraints(get, never): Bool;
	public inline extern function get_bUseThinShellVolumeConstraints(): Bool return this.bUseThinShellVolumeConstraints;
	public extern var bUseContinuousCollisionDetection(get, never): Bool;
	public inline extern function get_bUseContinuousCollisionDetection(): Bool return this.bUseContinuousCollisionDetection;
	public extern var TetherMode_DEPRECATED(get, never): EChaosClothTetherMode;
	public inline extern function get_TetherMode_DEPRECATED(): EChaosClothTetherMode return this.TetherMode_DEPRECATED;
	public extern var AnimDriveSpringStiffness_DEPRECATED(get, never): cpp.Float32;
	public inline extern function get_AnimDriveSpringStiffness_DEPRECATED(): cpp.Float32 return this.AnimDriveSpringStiffness_DEPRECATED;
	public extern var StrainLimitingStiffness_DEPRECATED(get, never): cpp.Float32;
	public inline extern function get_StrainLimitingStiffness_DEPRECATED(): cpp.Float32 return this.StrainLimitingStiffness_DEPRECATED;
}