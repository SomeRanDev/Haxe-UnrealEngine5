// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovieSceneSequencePlayer")
@:include("MovieSceneSequencePlayer.h")
extern class MovieSceneSequencePlayer extends Object {
	public var OnPlay: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnPlayReverse: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnStop: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnPause: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnFinished: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var Status: EMovieScenePlayerStatus;
	public var bReversePlayback: Bool;
	public var Sequence: cpp.Star<MovieSceneSequence>;
	public var StartTime: FrameNumber;
	public var DurationFrames: cpp.Int32;
	public var DurationSubFrames: cpp.Float32;
	public var CurrentNumLoops: cpp.Int32;
	public var PlaybackSettings: MovieSceneSequencePlaybackSettings;
	public var RootTemplateInstance: MovieSceneRootEvaluationTemplateInstance;
	public var NetSyncProps: MovieSceneSequenceReplProperties;
	public var PlaybackClient: MovieScenePlaybackClient;
	public var TickManager: cpp.Star<MovieSceneSequenceTickManager>;

	public function StopAtCurrentTime(): Void;
	public function Stop(): Void;
	public function SetTimeRange(StartTime: cpp.Float32, Duration: cpp.Float32): Void;
	public function SetPlayRate(PlayRate: cpp.Float32): Void;
	public function SetPlaybackPosition(PlaybackParams: MovieSceneSequencePlaybackParams): Void;
	public function SetFrameRate(FrameRate: FrameRate): Void;
	public function SetFrameRange(StartFrame: cpp.Int32, Duration: cpp.Int32, SubFrames: cpp.Float32): Void;
	public function SetDisableCameraCuts(bInDisableCameraCuts: Bool): Void;
	public function ScrubToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function ScrubToMarkedFrame(InLabel: FString): cpp.Reference<Bool>;
	public function ScrubToFrame(NewPosition: FrameTime): Void;
	public function Scrub(): Void;
	public function RPC_OnStopEvent(StoppedTime: FrameTime): Void;
	public function RPC_ExplicitServerUpdateEvent(Method: EUpdatePositionMethod, RelevantTime: FrameTime): Void;
	public function RestoreState(): Void;
	public function PlayToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function PlayToMarkedFrame(InLabel: FString): cpp.Reference<Bool>;
	public function PlayToFrame(NewPosition: FrameTime): Void;
	public function PlayTo(PlaybackParams: MovieSceneSequencePlaybackParams): Void;
	public function PlayReverse(): Void;
	public function PlayLooping(NumLoops: cpp.Int32): Void;
	public function Play(): Void;
	public function Pause(): Void;
	public function JumpToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function JumpToMarkedFrame(InLabel: FString): cpp.Reference<Bool>;
	public function JumpToFrame(NewPosition: FrameTime): Void;
	public function IsReversed(): cpp.Reference<Bool>;
	public function IsPlaying(): cpp.Reference<Bool>;
	public function IsPaused(): cpp.Reference<Bool>;
	public function GoToEndAndStop(): Void;
	public function GetStartTime(): cpp.Reference<QualifiedFrameTime>;
	public function GetSequence(): cpp.Reference<cpp.Star<MovieSceneSequence>>;
	public function GetPlayRate(): cpp.Reference<cpp.Float32>;
	public function GetObjectBindings(InObject: cpp.Star<Object>): cpp.Reference<TArray<MovieSceneObjectBindingID>>;
	public function GetFrameRate(): cpp.Reference<FrameRate>;
	public function GetFrameDuration(): cpp.Reference<cpp.Int32>;
	public function GetEndTime(): cpp.Reference<QualifiedFrameTime>;
	public function GetDuration(): cpp.Reference<QualifiedFrameTime>;
	public function GetDisableCameraCuts(): cpp.Reference<Bool>;
	public function GetCurrentTime(): cpp.Reference<QualifiedFrameTime>;
	public function GetBoundObjects(ObjectBinding: MovieSceneObjectBindingID): cpp.Reference<TArray<cpp.Star<Object>>>;
	public function ChangePlaybackDirection(): Void;
}

@:forward(
	IsReversed, IsPlaying, IsPaused, GetStartTime, GetSequence,
	GetPlayRate, GetFrameRate, GetFrameDuration, GetEndTime, GetDuration,
	GetCurrentTime
)
@:nativeGen
abstract ConstMovieSceneSequencePlayer(MovieSceneSequencePlayer) from MovieSceneSequencePlayer {
	public extern var OnPlay(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnPlay(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnPlay;
	public extern var OnPlayReverse(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnPlayReverse(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnPlayReverse;
	public extern var OnStop(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnStop(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnStop;
	public extern var OnPause(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnPause(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnPause;
	public extern var OnFinished(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnFinished(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnFinished;
	public extern var Status(get, never): EMovieScenePlayerStatus;
	public inline extern function get_Status(): EMovieScenePlayerStatus return this.Status;
	public extern var bReversePlayback(get, never): Bool;
	public inline extern function get_bReversePlayback(): Bool return this.bReversePlayback;
	public extern var Sequence(get, never): cpp.Star<MovieSceneSequence.ConstMovieSceneSequence>;
	public inline extern function get_Sequence(): cpp.Star<MovieSceneSequence.ConstMovieSceneSequence> return this.Sequence;
	public extern var StartTime(get, never): FrameNumber;
	public inline extern function get_StartTime(): FrameNumber return this.StartTime;
	public extern var DurationFrames(get, never): cpp.Int32;
	public inline extern function get_DurationFrames(): cpp.Int32 return this.DurationFrames;
	public extern var DurationSubFrames(get, never): cpp.Float32;
	public inline extern function get_DurationSubFrames(): cpp.Float32 return this.DurationSubFrames;
	public extern var CurrentNumLoops(get, never): cpp.Int32;
	public inline extern function get_CurrentNumLoops(): cpp.Int32 return this.CurrentNumLoops;
	public extern var PlaybackSettings(get, never): MovieSceneSequencePlaybackSettings;
	public inline extern function get_PlaybackSettings(): MovieSceneSequencePlaybackSettings return this.PlaybackSettings;
	public extern var RootTemplateInstance(get, never): MovieSceneRootEvaluationTemplateInstance;
	public inline extern function get_RootTemplateInstance(): MovieSceneRootEvaluationTemplateInstance return this.RootTemplateInstance;
	public extern var NetSyncProps(get, never): MovieSceneSequenceReplProperties;
	public inline extern function get_NetSyncProps(): MovieSceneSequenceReplProperties return this.NetSyncProps;
	public extern var PlaybackClient(get, never): MovieScenePlaybackClient.ConstMovieScenePlaybackClient;
	public inline extern function get_PlaybackClient(): MovieScenePlaybackClient.ConstMovieScenePlaybackClient return this.PlaybackClient;
	public extern var TickManager(get, never): cpp.Star<MovieSceneSequenceTickManager.ConstMovieSceneSequenceTickManager>;
	public inline extern function get_TickManager(): cpp.Star<MovieSceneSequenceTickManager.ConstMovieSceneSequenceTickManager> return this.TickManager;
}