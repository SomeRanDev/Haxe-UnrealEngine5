// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetAnimationLibrary")
@:include("KismetAnimationLibrary.h")
@:valueType
extern class KismetAnimationLibrary extends BlueprintFunctionLibrary {
	public function K2_TwoBoneIK(RootPos: ucpp.Ref<Vector>, JointPos: ucpp.Ref<Vector>, EndPos: ucpp.Ref<Vector>, JointTarget: ucpp.Ref<Vector>, Effector: ucpp.Ref<Vector>, OutJointPos: ucpp.Ref<Vector>, OutEndPos: ucpp.Ref<Vector>, bAllowStretching: Bool, StartStretchRatio: ucpp.num.Float32, MaxStretchScale: ucpp.num.Float32): Void;
	public function K2_StartProfilingTimer(): Void;
	public function K2_MakePerlinNoiseVectorAndRemap(X: ucpp.num.Float32, Y: ucpp.num.Float32, Z: ucpp.num.Float32, RangeOutMinX: ucpp.num.Float32, RangeOutMaxX: ucpp.num.Float32, RangeOutMinY: ucpp.num.Float32, RangeOutMaxY: ucpp.num.Float32, RangeOutMinZ: ucpp.num.Float32, RangeOutMaxZ: ucpp.num.Float32): Vector;
	public function K2_MakePerlinNoiseAndRemap(Value: ucpp.num.Float32, RangeOutMin: ucpp.num.Float32, RangeOutMax: ucpp.num.Float32): ucpp.num.Float32;
	public function K2_LookAt(CurrentTransform: ucpp.Ref<Transform>, TargetPosition: ucpp.Ref<Vector>, LookAtVector: Vector, bUseUpVector: Bool, UpVector: Vector, ClampConeInDegree: ucpp.num.Float32): Transform;
	public function K2_EndProfilingTimer(bLog: Bool, LogPrefix: FString): ucpp.num.Float32;
	public function K2_DistanceBetweenTwoSocketsAndMapRange(Component: ucpp.Ptr<SkeletalMeshComp.ConstSkeletalMeshComp>, SocketOrBoneNameA: FName, SocketSpaceA: TEnumAsByte<ERelativeTransformSpace>, SocketOrBoneNameB: FName, SocketSpaceB: TEnumAsByte<ERelativeTransformSpace>, bRemapRange: Bool, InRangeMin: ucpp.num.Float32, InRangeMax: ucpp.num.Float32, OutRangeMin: ucpp.num.Float32, OutRangeMax: ucpp.num.Float32): ucpp.num.Float32;
	public function K2_DirectionBetweenSockets(Component: ucpp.Ptr<SkeletalMeshComp.ConstSkeletalMeshComp>, SocketOrBoneNameFrom: FName, SocketOrBoneNameTo: FName): Vector;
	public function K2_CalculateVelocityFromSockets(DeltaSeconds: ucpp.num.Float32, Component: ucpp.Ptr<SkeletalMeshComp>, SocketOrBoneName: FName, ReferenceSocketOrBone: FName, SocketSpace: TEnumAsByte<ERelativeTransformSpace>, OffsetInBoneSpace: Vector, History: ucpp.Ref<PositionHistory>, NumberOfSamples: ucpp.num.Int32, VelocityMin: ucpp.num.Float32, VelocityMax: ucpp.num.Float32, EasingType: EEasingFuncType, CustomCurve: ucpp.Ref<RuntimeFloatCurve>): ucpp.num.Float32;
	public function K2_CalculateVelocityFromPositionHistory(DeltaSeconds: ucpp.num.Float32, Position: Vector, History: ucpp.Ref<PositionHistory>, NumberOfSamples: ucpp.num.Int32, VelocityMin: ucpp.num.Float32, VelocityMax: ucpp.num.Float32): ucpp.num.Float32;
	public function CalculateDirection(Velocity: ucpp.Ref<Vector>, BaseRotation: ucpp.Ref<Rotator>): ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstKismetAnimationLibrary(KismetAnimationLibrary) from KismetAnimationLibrary {
}

@:forward
@:nativeGen
@:native("KismetAnimationLibrary*")
abstract KismetAnimationLibraryPtr(ucpp.Ptr<KismetAnimationLibrary>) from ucpp.Ptr<KismetAnimationLibrary> to ucpp.Ptr<KismetAnimationLibrary>{
	@:from
	public static extern inline function fromValue(v: KismetAnimationLibrary): KismetAnimationLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): KismetAnimationLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}