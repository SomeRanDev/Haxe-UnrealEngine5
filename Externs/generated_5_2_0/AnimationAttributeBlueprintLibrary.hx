// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimationAttributeBlueprintLibrary")
@:include("AnimationAttributeBlueprintLibrary.h")
@:structAccess
extern class AnimationAttributeBlueprintLibrary extends BlueprintFunctionLibrary {
	public function SetAttributeKeys(AnimationDataController: AnimationDataController, AttributeIdentifier: cpp.Reference<AnimationAttributeIdentifier>, Times: cpp.Reference<TArray<cpp.Float32>>, Values: cpp.Reference<TArray<cpp.Int32>>): Bool;
	public function SetAttributeKey(AnimationDataController: AnimationDataController, AttributeIdentifier: cpp.Reference<AnimationAttributeIdentifier>, Time: cpp.Float32, Value: cpp.Reference<cpp.Int32>): Bool;
	public function GetAttributeKeys(AnimationDataModel: AnimationDataModel, AttributeIdentifier: cpp.Reference<AnimationAttributeIdentifier>, OutTimes: cpp.Reference<TArray<cpp.Float32>>, Values: cpp.Reference<TArray<cpp.Int32>>): Bool;
	public function GetAttributeKey(AnimationDataModel: AnimationDataModel, AttributeIdentifier: cpp.Reference<AnimationAttributeIdentifier>, Time: cpp.Float32, Value: cpp.Reference<cpp.Int32>): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAnimationAttributeBlueprintLibrary(AnimationAttributeBlueprintLibrary) from AnimationAttributeBlueprintLibrary {
}

@:forward
@:nativeGen
@:native("AnimationAttributeBlueprintLibrary*")
abstract AnimationAttributeBlueprintLibraryPtr(cpp.Star<AnimationAttributeBlueprintLibrary>) from cpp.Star<AnimationAttributeBlueprintLibrary> to cpp.Star<AnimationAttributeBlueprintLibrary>{
	@:from
	public static extern inline function fromValue(v: AnimationAttributeBlueprintLibrary): AnimationAttributeBlueprintLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimationAttributeBlueprintLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}