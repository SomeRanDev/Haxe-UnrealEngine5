// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USkeleton")
@:include("Animation/Skeleton.h")
@:structAccess
extern class Skeleton extends Object {
	@:protected public var BoneTree: TArray<BoneNode>;
	@:protected public var VirtualBoneGuid: Guid;
	@:protected public var VirtualBones: TArray<VirtualBone>;
	@:protected public var CompatibleSkeletons: TArray<TSoftObjectPtr<Skeleton>>;
	public var Sockets: TArray<cpp.Star<SkeletalMeshSocket>>;
	@:protected public var SmartNames: SmartNameContainer;
	public var BlendProfiles: TArray<cpp.Star<BlendProfile>>;
	private var SlotGroups: TArray<AnimSlotGroup>;
	@:protected public var AssetUserData: TArray<cpp.Star<AssetUserData>>;

	public function GetBlendProfile(InProfileName: cpp.Reference<FName>): cpp.Star<BlendProfile>;
	public function AddCompatibleSkeleton(SourceSkeleton: cpp.Star<Skeleton.ConstSkeleton>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstSkeleton(Skeleton) from Skeleton {
	public extern var Sockets(get, never): TArray<cpp.Star<SkeletalMeshSocket.ConstSkeletalMeshSocket>>;
	public inline extern function get_Sockets(): TArray<cpp.Star<SkeletalMeshSocket.ConstSkeletalMeshSocket>> return this.Sockets;
	public extern var BlendProfiles(get, never): TArray<cpp.Star<BlendProfile.ConstBlendProfile>>;
	public inline extern function get_BlendProfiles(): TArray<cpp.Star<BlendProfile.ConstBlendProfile>> return this.BlendProfiles;
}

@:forward
@:nativeGen
@:native("Skeleton*")
abstract SkeletonPtr(cpp.Star<Skeleton>) from cpp.Star<Skeleton> to cpp.Star<Skeleton>{
	@:from
	public static extern inline function fromValue(v: Skeleton): SkeletonPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Skeleton {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}