// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UHardwareTargetingSettings")
@:include("HardwareTargetingSettings.h")
@:valueType
extern class HardwareTargetingSettings extends Object {
	public var TargetedHardwareClass: EHardwareClass;
	public var AppliedTargetedHardwareClass: EHardwareClass;
	public var DefaultGraphicsPerformance: EGraphicsPreset;
	public var AppliedDefaultGraphicsPerformance: EGraphicsPreset;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstHardwareTargetingSettings(HardwareTargetingSettings) from HardwareTargetingSettings {
	public extern var TargetedHardwareClass(get, never): EHardwareClass;
	public inline extern function get_TargetedHardwareClass(): EHardwareClass return this.TargetedHardwareClass;
	public extern var AppliedTargetedHardwareClass(get, never): EHardwareClass;
	public inline extern function get_AppliedTargetedHardwareClass(): EHardwareClass return this.AppliedTargetedHardwareClass;
	public extern var DefaultGraphicsPerformance(get, never): EGraphicsPreset;
	public inline extern function get_DefaultGraphicsPerformance(): EGraphicsPreset return this.DefaultGraphicsPerformance;
	public extern var AppliedDefaultGraphicsPerformance(get, never): EGraphicsPreset;
	public inline extern function get_AppliedDefaultGraphicsPerformance(): EGraphicsPreset return this.AppliedDefaultGraphicsPerformance;
}

@:forward
@:nativeGen
@:native("HardwareTargetingSettings*")
abstract HardwareTargetingSettingsPtr(ucpp.Ptr<HardwareTargetingSettings>) from ucpp.Ptr<HardwareTargetingSettings> to ucpp.Ptr<HardwareTargetingSettings>{
	@:from
	public static extern inline function fromValue(v: HardwareTargetingSettings): HardwareTargetingSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): HardwareTargetingSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}