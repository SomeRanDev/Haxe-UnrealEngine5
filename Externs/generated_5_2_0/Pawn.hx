// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("APawn")
@:include("GameFramework/Pawn.h")
@:valueType
extern class Pawn extends Actor {
	public var bUseControllerRotationPitch: Bool;
	public var bUseControllerRotationYaw: Bool;
	public var bUseControllerRotationRoll: Bool;
	public var bCanAffectNavigationGeneration: Bool;
	@:protected public var bIsLocalViewTarget: Bool;
	public var BaseEyeHeight: ucpp.num.Float32;
	public var AutoPossessPlayer: TEnumAsByte<EAutoReceiveInput>;
	public var AutoPossessAI: EAutoPossessAI;
	public var RemoteViewPitch: ucpp.num.UInt8;
	public var AIControllerClass: TSubclassOf<Controller>;
	private var PlayerState: ucpp.Ptr<PlayerState>;
	public var LastHitBy: ucpp.Ptr<Controller>;
	public var Controller: ucpp.Ptr<Controller>;
	public var PreviousController: ucpp.Ptr<Controller>;
	public var ReceiveControllerChangedDelegate: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn>, ucpp.Ptr<Controller>, ucpp.Ptr<Controller>) -> Void>;
	public var ReceiveRestartedDelegate: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn>) -> Void>;
	@:protected public var ControlInputVector: Vector;
	@:protected public var LastControlInputVector: Vector;
	@:protected public var OverrideInputComponentClass: TSubclassOf<InputComp>;

	public function SpawnDefaultController(): Void;
	public function SetCanAffectNavigationGeneration(bNewValue: Bool, bForceUpdate: Bool): Void;
	public function ReceiveUnpossessed(OldController: ucpp.Ptr<Controller>): Void;
	public function ReceiveRestarted(): Void;
	public function ReceivePossessed(NewController: ucpp.Ptr<Controller>): Void;
	public function ReceiveControllerChanged(OldController: ucpp.Ptr<Controller>, NewController: ucpp.Ptr<Controller>): Void;
	public function PawnMakeNoise(Loudness: ucpp.num.Float32, NoiseLocation: Vector, bUseNoiseMakerLocation: Bool, NoiseMaker: ucpp.Ptr<Actor>): Void;
	public function OnRep_PlayerState(): Void;
	public function OnRep_Controller(): Void;
	public function IsPlayerControlled(): Bool;
	public function IsPawnControlled(): Bool;
	public function IsMoveInputIgnored(): Bool;
	public function IsLocallyViewed(): Bool;
	public function IsLocallyControlled(): Bool;
	public function IsControlled(): Bool;
	public function IsBotControlled(): Bool;
	public function GetPlatformUserId(): PlatformUserId;
	public function GetPendingMovementInputVector(): Vector;
	public function GetOverrideInputComponentClass(): TSubclassOf<InputComp>;
	public function GetNavAgentLocation(): Vector;
	public function GetMovementComponent(): ucpp.Ptr<PawnMovementComp>;
	public function GetMovementBaseActor(Pawn: ucpp.Ptr<Pawn.ConstPawn>): ucpp.Ptr<Actor>;
	public function GetLocalViewingPlayerController(): ucpp.Ptr<PlayerController>;
	public function GetLastMovementInputVector(): Vector;
	public function GetControlRotation(): Rotator;
	public function GetController(): ucpp.Ptr<Controller>;
	public function GetBaseAimRotation(): Rotator;
	public function DetachFromControllerPendingDestroy(): Void;
	public function ConsumeMovementInputVector(): Vector;
	public function AddMovementInput(WorldDirection: Vector, ScaleValue: ucpp.num.Float32, bForce: Bool): Void;
	public function AddControllerYawInput(Val: ucpp.num.Float32): Void;
	public function AddControllerRollInput(Val: ucpp.num.Float32): Void;
	public function AddControllerPitchInput(Val: ucpp.num.Float32): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	IsPlayerControlled, IsPawnControlled, IsMoveInputIgnored, IsLocallyViewed, IsLocallyControlled,
	IsControlled, IsBotControlled, GetPlatformUserId, GetPendingMovementInputVector, GetOverrideInputComponentClass,
	GetNavAgentLocation, GetMovementComponent, GetLocalViewingPlayerController, GetLastMovementInputVector, GetControlRotation,
	GetController, GetBaseAimRotation
)
@:nativeGen
abstract ConstPawn(Pawn) from Pawn {
	public extern var bUseControllerRotationPitch(get, never): Bool;
	public inline extern function get_bUseControllerRotationPitch(): Bool return this.bUseControllerRotationPitch;
	public extern var bUseControllerRotationYaw(get, never): Bool;
	public inline extern function get_bUseControllerRotationYaw(): Bool return this.bUseControllerRotationYaw;
	public extern var bUseControllerRotationRoll(get, never): Bool;
	public inline extern function get_bUseControllerRotationRoll(): Bool return this.bUseControllerRotationRoll;
	public extern var bCanAffectNavigationGeneration(get, never): Bool;
	public inline extern function get_bCanAffectNavigationGeneration(): Bool return this.bCanAffectNavigationGeneration;
	public extern var BaseEyeHeight(get, never): ucpp.num.Float32;
	public inline extern function get_BaseEyeHeight(): ucpp.num.Float32 return this.BaseEyeHeight;
	public extern var AutoPossessPlayer(get, never): TEnumAsByte<EAutoReceiveInput>;
	public inline extern function get_AutoPossessPlayer(): TEnumAsByte<EAutoReceiveInput> return this.AutoPossessPlayer;
	public extern var AutoPossessAI(get, never): EAutoPossessAI;
	public inline extern function get_AutoPossessAI(): EAutoPossessAI return this.AutoPossessAI;
	public extern var RemoteViewPitch(get, never): ucpp.num.UInt8;
	public inline extern function get_RemoteViewPitch(): ucpp.num.UInt8 return this.RemoteViewPitch;
	public extern var AIControllerClass(get, never): TSubclassOf<Controller.ConstController>;
	public inline extern function get_AIControllerClass(): TSubclassOf<Controller.ConstController> return this.AIControllerClass;
	public extern var LastHitBy(get, never): ucpp.Ptr<Controller.ConstController>;
	public inline extern function get_LastHitBy(): ucpp.Ptr<Controller.ConstController> return this.LastHitBy;
	public extern var Controller(get, never): ucpp.Ptr<Controller.ConstController>;
	public inline extern function get_Controller(): ucpp.Ptr<Controller.ConstController> return this.Controller;
	public extern var PreviousController(get, never): ucpp.Ptr<Controller.ConstController>;
	public inline extern function get_PreviousController(): ucpp.Ptr<Controller.ConstController> return this.PreviousController;
	public extern var ReceiveControllerChangedDelegate(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>, ucpp.Ptr<Controller.ConstController>, ucpp.Ptr<Controller.ConstController>) -> Void>;
	public inline extern function get_ReceiveControllerChangedDelegate(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>, ucpp.Ptr<Controller.ConstController>, ucpp.Ptr<Controller.ConstController>) -> Void> return this.ReceiveControllerChangedDelegate;
	public extern var ReceiveRestartedDelegate(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>) -> Void>;
	public inline extern function get_ReceiveRestartedDelegate(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>) -> Void> return this.ReceiveRestartedDelegate;
}

@:forward
@:nativeGen
@:native("Pawn*")
abstract PawnPtr(ucpp.Ptr<Pawn>) from ucpp.Ptr<Pawn> to ucpp.Ptr<Pawn>{
	@:from
	public static extern inline function fromValue(v: Pawn): PawnPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Pawn {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}