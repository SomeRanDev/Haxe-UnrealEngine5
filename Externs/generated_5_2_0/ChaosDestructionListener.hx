// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UChaosDestructionListener")
@:include("ChaosBlueprint.h")
@:valueType
extern class ChaosDestructionListener extends SceneComp {
	public var bIsCollisionEventListeningEnabled: Bool;
	public var bIsBreakingEventListeningEnabled: Bool;
	public var bIsTrailingEventListeningEnabled: Bool;
	public var bIsRemovalEventListeningEnabled: Bool;
	public var CollisionEventRequestSettings: ChaosCollisionEventRequestSettings;
	public var BreakingEventRequestSettings: ChaosBreakingEventRequestSettings;
	public var TrailingEventRequestSettings: ChaosTrailingEventRequestSettings;
	public var RemovalEventRequestSettings: ChaosRemovalEventRequestSettings;
	public var ChaosSolverActors: TSet<ucpp.Ptr<ChaosSolverActor>>;
	public var GeometryCollectionActors: TSet<ucpp.Ptr<GeometryCollectionActor>>;
	public var OnCollisionEvents: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosCollisionEventData>>) -> Void>;
	public var OnBreakingEvents: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosBreakingEventData>>) -> Void>;
	public var OnTrailingEvents: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosTrailingEventData>>) -> Void>;
	public var OnRemovalEvents: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosRemovalEventData>>) -> Void>;

	public function SortTrailingEvents(TrailingEvents: ucpp.Ref<TArray<ChaosTrailingEventData>>, SortMethod: EChaosTrailingSortMethod): Void;
	public function SortRemovalEvents(RemovalEvents: ucpp.Ref<TArray<ChaosRemovalEventData>>, SortMethod: EChaosRemovalSortMethod): Void;
	public function SortCollisionEvents(CollisionEvents: ucpp.Ref<TArray<ChaosCollisionEventData>>, SortMethod: EChaosCollisionSortMethod): Void;
	public function SortBreakingEvents(BreakingEvents: ucpp.Ref<TArray<ChaosBreakingEventData>>, SortMethod: EChaosBreakingSortMethod): Void;
	public function SetTrailingEventRequestSettings(InSettings: ucpp.Ref<ChaosTrailingEventRequestSettings>): Void;
	public function SetTrailingEventEnabled(bIsEnabled: Bool): Void;
	public function SetRemovalEventRequestSettings(InSettings: ucpp.Ref<ChaosRemovalEventRequestSettings>): Void;
	public function SetRemovalEventEnabled(bIsEnabled: Bool): Void;
	public function SetCollisionEventRequestSettings(InSettings: ucpp.Ref<ChaosCollisionEventRequestSettings>): Void;
	public function SetCollisionEventEnabled(bIsEnabled: Bool): Void;
	public function SetBreakingEventRequestSettings(InSettings: ucpp.Ref<ChaosBreakingEventRequestSettings>): Void;
	public function SetBreakingEventEnabled(bIsEnabled: Bool): Void;
	public function RemoveGeometryCollectionActor(GeometryCollectionActor: ucpp.Ptr<GeometryCollectionActor>): Void;
	public function RemoveChaosSolverActor(ChaosSolverActor: ucpp.Ptr<ChaosSolverActor>): Void;
	public function IsEventListening(): Bool;
	public function AddGeometryCollectionActor(GeometryCollectionActor: ucpp.Ptr<GeometryCollectionActor>): Void;
	public function AddChaosSolverActor(ChaosSolverActor: ucpp.Ptr<ChaosSolverActor>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(IsEventListening)
@:nativeGen
abstract ConstChaosDestructionListener(ChaosDestructionListener) from ChaosDestructionListener {
	public extern var bIsCollisionEventListeningEnabled(get, never): Bool;
	public inline extern function get_bIsCollisionEventListeningEnabled(): Bool return this.bIsCollisionEventListeningEnabled;
	public extern var bIsBreakingEventListeningEnabled(get, never): Bool;
	public inline extern function get_bIsBreakingEventListeningEnabled(): Bool return this.bIsBreakingEventListeningEnabled;
	public extern var bIsTrailingEventListeningEnabled(get, never): Bool;
	public inline extern function get_bIsTrailingEventListeningEnabled(): Bool return this.bIsTrailingEventListeningEnabled;
	public extern var bIsRemovalEventListeningEnabled(get, never): Bool;
	public inline extern function get_bIsRemovalEventListeningEnabled(): Bool return this.bIsRemovalEventListeningEnabled;
	public extern var CollisionEventRequestSettings(get, never): ChaosCollisionEventRequestSettings;
	public inline extern function get_CollisionEventRequestSettings(): ChaosCollisionEventRequestSettings return this.CollisionEventRequestSettings;
	public extern var BreakingEventRequestSettings(get, never): ChaosBreakingEventRequestSettings;
	public inline extern function get_BreakingEventRequestSettings(): ChaosBreakingEventRequestSettings return this.BreakingEventRequestSettings;
	public extern var TrailingEventRequestSettings(get, never): ChaosTrailingEventRequestSettings;
	public inline extern function get_TrailingEventRequestSettings(): ChaosTrailingEventRequestSettings return this.TrailingEventRequestSettings;
	public extern var RemovalEventRequestSettings(get, never): ChaosRemovalEventRequestSettings;
	public inline extern function get_RemovalEventRequestSettings(): ChaosRemovalEventRequestSettings return this.RemovalEventRequestSettings;
	public extern var ChaosSolverActors(get, never): TSet<ucpp.Ptr<ChaosSolverActor.ConstChaosSolverActor>>;
	public inline extern function get_ChaosSolverActors(): TSet<ucpp.Ptr<ChaosSolverActor.ConstChaosSolverActor>> return this.ChaosSolverActors;
	public extern var GeometryCollectionActors(get, never): TSet<ucpp.Ptr<GeometryCollectionActor.ConstGeometryCollectionActor>>;
	public inline extern function get_GeometryCollectionActors(): TSet<ucpp.Ptr<GeometryCollectionActor.ConstGeometryCollectionActor>> return this.GeometryCollectionActors;
	public extern var OnCollisionEvents(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosCollisionEventData>>) -> Void>;
	public inline extern function get_OnCollisionEvents(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosCollisionEventData>>) -> Void> return this.OnCollisionEvents;
	public extern var OnBreakingEvents(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosBreakingEventData>>) -> Void>;
	public inline extern function get_OnBreakingEvents(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosBreakingEventData>>) -> Void> return this.OnBreakingEvents;
	public extern var OnTrailingEvents(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosTrailingEventData>>) -> Void>;
	public inline extern function get_OnTrailingEvents(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosTrailingEventData>>) -> Void> return this.OnTrailingEvents;
	public extern var OnRemovalEvents(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosRemovalEventData>>) -> Void>;
	public inline extern function get_OnRemovalEvents(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<TArray<ChaosRemovalEventData>>) -> Void> return this.OnRemovalEvents;
}

@:forward
@:nativeGen
@:native("ChaosDestructionListener*")
abstract ChaosDestructionListenerPtr(ucpp.Ptr<ChaosDestructionListener>) from ucpp.Ptr<ChaosDestructionListener> to ucpp.Ptr<ChaosDestructionListener>{
	@:from
	public static extern inline function fromValue(v: ChaosDestructionListener): ChaosDestructionListenerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ChaosDestructionListener {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}