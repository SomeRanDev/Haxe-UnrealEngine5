// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGeometryCollectionComponent")
@:include("GeometryCollection/GeometryCollectionComponent.h")
@:structAccess
extern class GeometryCollectionComp extends MeshComp {
	public var ChaosSolverActor: cpp.Star<ChaosSolverActor>;
	public var RestCollection: cpp.Star<GeometryCollection>;
	public var InitializationFields: TArray<cpp.Star<FieldSystemActor>>;
	public var ObjectType: EObjectStateTypeEnum;
	public var bForceMotionBlur: Bool;
	public var EnableClustering: Bool;
	public var ClusterGroupIndex: cpp.Int32;
	public var MaxClusterLevel: cpp.Int32;
	public var DamageThreshold: TArray<cpp.Float32>;
	public var bUseSizeSpecificDamageThreshold: Bool;
	public var DamagePropagationData: GeometryCollectionDamagePropagationData;
	public var bEnableDamageFromCollision: Bool;
	public var bAllowRemovalOnSleep: Bool;
	public var bAllowRemovalOnBreak: Bool;
	public var CollisionGroup: cpp.Int32;
	public var CollisionSampleFraction: cpp.Float32;
	public var InitialVelocityType: EInitialVelocityTypeEnum;
	public var InitialLinearVelocity: Vector;
	public var InitialAngularVelocity: Vector;
	public var CacheParameters: GeomComponentCacheParameters;
	public var RestTransforms: TArray<Transform>;
	public var NotifyGeometryCollectionPhysicsStateChange: HaxeMulticastSparseDelegateProperty<(cpp.Star<GeometryCollectionComp>) -> Void>;
	public var NotifyGeometryCollectionPhysicsLoadingStateChange: HaxeMulticastSparseDelegateProperty<(cpp.Star<GeometryCollectionComp>) -> Void>;
	public var OnChaosBreakEvent: HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosBreakEvent>) -> Void>;
	public var OnChaosRemovalEvent: HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosRemovalEvent>) -> Void>;
	public var OnChaosCrumblingEvent: HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosCrumblingEvent>) -> Void>;
	public var DesiredCacheTime: cpp.Float32;
	public var CachePlayback: Bool;
	public var OnChaosPhysicsCollision: HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosPhysicsCollisionInfo>) -> Void>;
	public var bNotifyBreaks: Bool;
	public var bNotifyCollisions: Bool;
	public var bNotifyTrailing: Bool;
	public var bNotifyRemovals: Bool;
	public var bNotifyCrumblings: Bool;
	public var bCrumblingEventIncludesChildren: Bool;
	public var bStoreVelocities: Bool;
	@:protected public var bShowBoneColors: Bool;
	@:protected public var bUseRootProxyForNavigation: Bool;
	@:protected public var bUpdateNavigationInTick: Bool;
	@:protected public var ISMPool: cpp.Star<GeometryCollectionISMPoolActor>;
	@:protected public var bEnableReplication: Bool;
	@:protected public var bEnableAbandonAfterLevel: Bool;
	@:protected public var ReplicationAbandonAfterLevel: cpp.Int32;
	@:protected public var RepData: GeometryCollectionRepData;
	private var DummyBodySetup: cpp.Star<BodySetup>;
	private var EmbeddedGeometryComponents: TArray<cpp.Star<InstancedStaticMeshComp>>;

	public function SetRestCollection(RestCollectionIn: cpp.Star<GeometryCollection.ConstGeometryCollection>): Void;
	public function SetNotifyRemovals(bNewNotifyRemovals: Bool): Void;
	public function SetNotifyCrumblings(bNewNotifyCrumblings: Bool, bNewCrumblingEventIncludesChildren: Bool): Void;
	public function SetNotifyBreaks(bNewNotifyBreaks: Bool): Void;
	public function SetEnableDamageFromCollision(bValue: Bool): Void;
	public function SetAnchoredByTransformedBox(Box: Box, Transform: Transform, bAnchored: Bool, MaxLevel: cpp.Int32): Void;
	public function SetAnchoredByIndex(Index: cpp.Int32, bAnchored: Bool): Void;
	public function SetAnchoredByBox(WorldSpaceBox: Box, bAnchored: Bool, MaxLevel: cpp.Int32): Void;
	public function RemoveAllAnchors(): Void;
	public function ReceivePhysicsCollision(CollisionInfo: cpp.Reference<ChaosPhysicsCollisionInfo>): Void;
	public function NotifyGeometryCollectionPhysicsStateChange__DelegateSignature(FracturedComponent: cpp.Star<GeometryCollectionComp>): Void;
	public function NotifyGeometryCollectionPhysicsLoadingStateChange__DelegateSignature(FracturedComponent: cpp.Star<GeometryCollectionComp>): Void;
	public function GetRootIndex(): cpp.Int32;
	public function GetMassAndExtents(ItemIndex: cpp.Int32, OutMass: cpp.Reference<cpp.Float32>, OutExtents: cpp.Reference<Box>): Void;
	public function GetLocalBounds(): Box;
	public function GetInitialLevel(ItemIndex: cpp.Int32): cpp.Int32;
	public function GetDebugInfo(): FString;
	public function CrumbleCluster(ItemIndex: cpp.Int32): Void;
	public function CrumbleActiveClusters(): Void;
	public function ApplyPhysicsField(Enabled: Bool, Target: EGeometryCollectionPhysicsTypeEnum, MetaData: cpp.Star<FieldSystemMetaData>, Field: cpp.Star<FieldNodeBase>): Void;
	public function ApplyLinearVelocity(ItemIndex: cpp.Int32, LinearVelocity: cpp.Reference<Vector>): Void;
	public function ApplyKinematicField(Radius: cpp.Float32, Position: Vector): Void;
	public function ApplyInternalStrain(ItemIndex: cpp.Int32, Location: cpp.Reference<Vector>, Radius: cpp.Float32, PropagationDepth: cpp.Int32, PropagationFactor: cpp.Float32, Strain: cpp.Float32): Void;
	public function ApplyExternalStrain(ItemIndex: cpp.Int32, Location: cpp.Reference<Vector>, Radius: cpp.Float32, PropagationDepth: cpp.Int32, PropagationFactor: cpp.Float32, Strain: cpp.Float32): Void;
	public function ApplyBreakingLinearVelocity(ItemIndex: cpp.Int32, LinearVelocity: cpp.Reference<Vector>): Void;
	public function ApplyBreakingAngularVelocity(ItemIndex: cpp.Int32, AngularVelocity: cpp.Reference<Vector>): Void;
	public function ApplyAngularVelocity(ItemIndex: cpp.Int32, AngularVelocity: cpp.Reference<Vector>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetRootIndex, GetLocalBounds)
@:nativeGen
abstract ConstGeometryCollectionComp(GeometryCollectionComp) from GeometryCollectionComp {
	public extern var ChaosSolverActor(get, never): cpp.Star<ChaosSolverActor.ConstChaosSolverActor>;
	public inline extern function get_ChaosSolverActor(): cpp.Star<ChaosSolverActor.ConstChaosSolverActor> return this.ChaosSolverActor;
	public extern var RestCollection(get, never): cpp.Star<GeometryCollection.ConstGeometryCollection>;
	public inline extern function get_RestCollection(): cpp.Star<GeometryCollection.ConstGeometryCollection> return this.RestCollection;
	public extern var InitializationFields(get, never): TArray<cpp.Star<FieldSystemActor.ConstFieldSystemActor>>;
	public inline extern function get_InitializationFields(): TArray<cpp.Star<FieldSystemActor.ConstFieldSystemActor>> return this.InitializationFields;
	public extern var ObjectType(get, never): EObjectStateTypeEnum;
	public inline extern function get_ObjectType(): EObjectStateTypeEnum return this.ObjectType;
	public extern var bForceMotionBlur(get, never): Bool;
	public inline extern function get_bForceMotionBlur(): Bool return this.bForceMotionBlur;
	public extern var EnableClustering(get, never): Bool;
	public inline extern function get_EnableClustering(): Bool return this.EnableClustering;
	public extern var ClusterGroupIndex(get, never): cpp.Int32;
	public inline extern function get_ClusterGroupIndex(): cpp.Int32 return this.ClusterGroupIndex;
	public extern var MaxClusterLevel(get, never): cpp.Int32;
	public inline extern function get_MaxClusterLevel(): cpp.Int32 return this.MaxClusterLevel;
	public extern var DamageThreshold(get, never): TArray<cpp.Float32>;
	public inline extern function get_DamageThreshold(): TArray<cpp.Float32> return this.DamageThreshold;
	public extern var bUseSizeSpecificDamageThreshold(get, never): Bool;
	public inline extern function get_bUseSizeSpecificDamageThreshold(): Bool return this.bUseSizeSpecificDamageThreshold;
	public extern var DamagePropagationData(get, never): GeometryCollectionDamagePropagationData;
	public inline extern function get_DamagePropagationData(): GeometryCollectionDamagePropagationData return this.DamagePropagationData;
	public extern var bEnableDamageFromCollision(get, never): Bool;
	public inline extern function get_bEnableDamageFromCollision(): Bool return this.bEnableDamageFromCollision;
	public extern var bAllowRemovalOnSleep(get, never): Bool;
	public inline extern function get_bAllowRemovalOnSleep(): Bool return this.bAllowRemovalOnSleep;
	public extern var bAllowRemovalOnBreak(get, never): Bool;
	public inline extern function get_bAllowRemovalOnBreak(): Bool return this.bAllowRemovalOnBreak;
	public extern var CollisionGroup(get, never): cpp.Int32;
	public inline extern function get_CollisionGroup(): cpp.Int32 return this.CollisionGroup;
	public extern var CollisionSampleFraction(get, never): cpp.Float32;
	public inline extern function get_CollisionSampleFraction(): cpp.Float32 return this.CollisionSampleFraction;
	public extern var InitialVelocityType(get, never): EInitialVelocityTypeEnum;
	public inline extern function get_InitialVelocityType(): EInitialVelocityTypeEnum return this.InitialVelocityType;
	public extern var InitialLinearVelocity(get, never): Vector;
	public inline extern function get_InitialLinearVelocity(): Vector return this.InitialLinearVelocity;
	public extern var InitialAngularVelocity(get, never): Vector;
	public inline extern function get_InitialAngularVelocity(): Vector return this.InitialAngularVelocity;
	public extern var CacheParameters(get, never): GeomComponentCacheParameters;
	public inline extern function get_CacheParameters(): GeomComponentCacheParameters return this.CacheParameters;
	public extern var RestTransforms(get, never): TArray<Transform>;
	public inline extern function get_RestTransforms(): TArray<Transform> return this.RestTransforms;
	public extern var NotifyGeometryCollectionPhysicsStateChange(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<GeometryCollectionComp.ConstGeometryCollectionComp>) -> Void>;
	public inline extern function get_NotifyGeometryCollectionPhysicsStateChange(): HaxeMulticastSparseDelegateProperty<(cpp.Star<GeometryCollectionComp.ConstGeometryCollectionComp>) -> Void> return this.NotifyGeometryCollectionPhysicsStateChange;
	public extern var NotifyGeometryCollectionPhysicsLoadingStateChange(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<GeometryCollectionComp.ConstGeometryCollectionComp>) -> Void>;
	public inline extern function get_NotifyGeometryCollectionPhysicsLoadingStateChange(): HaxeMulticastSparseDelegateProperty<(cpp.Star<GeometryCollectionComp.ConstGeometryCollectionComp>) -> Void> return this.NotifyGeometryCollectionPhysicsLoadingStateChange;
	public extern var OnChaosBreakEvent(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosBreakEvent>) -> Void>;
	public inline extern function get_OnChaosBreakEvent(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosBreakEvent>) -> Void> return this.OnChaosBreakEvent;
	public extern var OnChaosRemovalEvent(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosRemovalEvent>) -> Void>;
	public inline extern function get_OnChaosRemovalEvent(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosRemovalEvent>) -> Void> return this.OnChaosRemovalEvent;
	public extern var OnChaosCrumblingEvent(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosCrumblingEvent>) -> Void>;
	public inline extern function get_OnChaosCrumblingEvent(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosCrumblingEvent>) -> Void> return this.OnChaosCrumblingEvent;
	public extern var DesiredCacheTime(get, never): cpp.Float32;
	public inline extern function get_DesiredCacheTime(): cpp.Float32 return this.DesiredCacheTime;
	public extern var CachePlayback(get, never): Bool;
	public inline extern function get_CachePlayback(): Bool return this.CachePlayback;
	public extern var OnChaosPhysicsCollision(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosPhysicsCollisionInfo>) -> Void>;
	public inline extern function get_OnChaosPhysicsCollision(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<ChaosPhysicsCollisionInfo>) -> Void> return this.OnChaosPhysicsCollision;
	public extern var bNotifyBreaks(get, never): Bool;
	public inline extern function get_bNotifyBreaks(): Bool return this.bNotifyBreaks;
	public extern var bNotifyCollisions(get, never): Bool;
	public inline extern function get_bNotifyCollisions(): Bool return this.bNotifyCollisions;
	public extern var bNotifyTrailing(get, never): Bool;
	public inline extern function get_bNotifyTrailing(): Bool return this.bNotifyTrailing;
	public extern var bNotifyRemovals(get, never): Bool;
	public inline extern function get_bNotifyRemovals(): Bool return this.bNotifyRemovals;
	public extern var bNotifyCrumblings(get, never): Bool;
	public inline extern function get_bNotifyCrumblings(): Bool return this.bNotifyCrumblings;
	public extern var bCrumblingEventIncludesChildren(get, never): Bool;
	public inline extern function get_bCrumblingEventIncludesChildren(): Bool return this.bCrumblingEventIncludesChildren;
	public extern var bStoreVelocities(get, never): Bool;
	public inline extern function get_bStoreVelocities(): Bool return this.bStoreVelocities;
}

@:forward
@:nativeGen
@:native("GeometryCollectionComp*")
abstract GeometryCollectionCompPtr(cpp.Star<GeometryCollectionComp>) from cpp.Star<GeometryCollectionComp> to cpp.Star<GeometryCollectionComp>{
	@:from
	public static extern inline function fromValue(v: GeometryCollectionComp): GeometryCollectionCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GeometryCollectionComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}