// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPlasticSourceControlProjectSettings")
@:include("PlasticSourceControlProjectSettings.h")
@:valueType
extern class PlasticSourceControlProjectSettings extends DeveloperSettings {
	public var UserNameToDisplayName: TMap<FString, FString>;
	public var bHideEmailDomainInUsername: Bool;
	public var bPromptForCheckoutOnChange: Bool;
	public var LimitNumberOfRevisionsInHistory: ucpp.num.Int32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstPlasticSourceControlProjectSettings(PlasticSourceControlProjectSettings) from PlasticSourceControlProjectSettings {
	public extern var UserNameToDisplayName(get, never): TMap<FString, FString>;
	public inline extern function get_UserNameToDisplayName(): TMap<FString, FString> return this.UserNameToDisplayName;
	public extern var bHideEmailDomainInUsername(get, never): Bool;
	public inline extern function get_bHideEmailDomainInUsername(): Bool return this.bHideEmailDomainInUsername;
	public extern var bPromptForCheckoutOnChange(get, never): Bool;
	public inline extern function get_bPromptForCheckoutOnChange(): Bool return this.bPromptForCheckoutOnChange;
	public extern var LimitNumberOfRevisionsInHistory(get, never): ucpp.num.Int32;
	public inline extern function get_LimitNumberOfRevisionsInHistory(): ucpp.num.Int32 return this.LimitNumberOfRevisionsInHistory;
}

@:forward
@:nativeGen
@:native("PlasticSourceControlProjectSettings*")
abstract PlasticSourceControlProjectSettingsPtr(ucpp.Ptr<PlasticSourceControlProjectSettings>) from ucpp.Ptr<PlasticSourceControlProjectSettings> to ucpp.Ptr<PlasticSourceControlProjectSettings>{
	@:from
	public static extern inline function fromValue(v: PlasticSourceControlProjectSettings): PlasticSourceControlProjectSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PlasticSourceControlProjectSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}