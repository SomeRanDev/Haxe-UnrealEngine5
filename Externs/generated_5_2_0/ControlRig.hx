// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UControlRig")
@:include("ControlRig.h")
@:structAccess
extern class ControlRig extends RigVMHost {
	public var ExecutionType: ERigExecutionType;
	public var HierarchySettings: RigHierarchySettings;
	@:protected public var ControlCustomizations: TMap<RigElementKey, RigControlElementCustomization>;
	@:protected public var DynamicHierarchy: cpp.Star<RigHierarchy>;
	@:protected public var ShapeLibraries: TArray<TSoftObjectPtr<ControlRigShapeLibrary>>;
	private var DataSourceRegistry: cpp.Star<AnimationDataSourceRegistry>;
	private var Influences: RigInfluenceMapPerEvent;
	public function GetInteractionRig(): cpp.Star<ControlRig>;
	public function SetInteractionRig(input: cpp.Star<ControlRig>): Void;
	public function GetInteractionRigClass(): TSubclassOf<ControlRig>;
	public function SetInteractionRigClass(input: TSubclassOf<ControlRig>): Void;
	@:protected public var OnControlSelected_BP: HaxeMulticastSparseDelegateProperty<(cpp.Star<ControlRig>, cpp.Reference<RigControlElement>, Bool) -> Void>;

	public function SelectControl(InControlName: cpp.Reference<FName>, bSelect: Bool): Void;
	public function RequestConstruction(): Void;
	public function OnControlSelectedBP__DelegateSignature(Rig: cpp.Star<ControlRig>, Control: cpp.Reference<RigControlElement>, bSelected: Bool): Void;
	public function IsControlSelected(InControlName: cpp.Reference<FName>): Bool;
	public function GetHostingActor(): cpp.Star<Actor>;
	public function GetHierarchy(): cpp.Star<RigHierarchy>;
	public function FindControlRigs(Outer: cpp.Star<Object>, OptionalClass: TSubclassOf<ControlRig>): TArray<cpp.Star<ControlRig>>;
	public function CurrentControlSelection(): TArray<FName>;
	public function CreateTransformableControlHandle(Outer: cpp.Star<Object>, ControlName: cpp.Reference<FName>): cpp.Star<TransformableControlHandle>;
	public function ClearControlSelection(): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsControlSelected, GetHostingActor, CurrentControlSelection, CreateTransformableControlHandle)
@:nativeGen
abstract ConstControlRig(ControlRig) from ControlRig {
	public extern var ExecutionType(get, never): ERigExecutionType;
	public inline extern function get_ExecutionType(): ERigExecutionType return this.ExecutionType;
	public extern var HierarchySettings(get, never): RigHierarchySettings;
	public inline extern function get_HierarchySettings(): RigHierarchySettings return this.HierarchySettings;
}

@:forward
@:nativeGen
@:native("ControlRig*")
abstract ControlRigPtr(cpp.Star<ControlRig>) from cpp.Star<ControlRig> to cpp.Star<ControlRig>{
	@:from
	public static extern inline function fromValue(v: ControlRig): ControlRigPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ControlRig {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}