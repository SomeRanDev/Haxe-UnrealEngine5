// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UFractureSelectionSettings")
@:include("FractureToolSelection.h")
@:valueType
extern class FractureSelectionSettings extends FractureToolSettings {
	public var MouseSelectionMethod: EMouseSelectionMethod;
	public var VolumeSelectionMethod: EVolumeSelectionMethod;
	public var SelectionOperation: ESelectionOperation;
	public var MinVolume: ucpp.num.Float64;
	public var MaxVolume: ucpp.num.Float64;
	public var MinVolumeFrac: ucpp.num.Float64;
	public var MaxVolumeFrac: ucpp.num.Float64;
	public var KeepFraction: ucpp.num.Float64;
	public var RandomSeed: ucpp.num.Int32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstFractureSelectionSettings(FractureSelectionSettings) from FractureSelectionSettings {
	public extern var MouseSelectionMethod(get, never): EMouseSelectionMethod;
	public inline extern function get_MouseSelectionMethod(): EMouseSelectionMethod return this.MouseSelectionMethod;
	public extern var VolumeSelectionMethod(get, never): EVolumeSelectionMethod;
	public inline extern function get_VolumeSelectionMethod(): EVolumeSelectionMethod return this.VolumeSelectionMethod;
	public extern var SelectionOperation(get, never): ESelectionOperation;
	public inline extern function get_SelectionOperation(): ESelectionOperation return this.SelectionOperation;
	public extern var MinVolume(get, never): ucpp.num.Float64;
	public inline extern function get_MinVolume(): ucpp.num.Float64 return this.MinVolume;
	public extern var MaxVolume(get, never): ucpp.num.Float64;
	public inline extern function get_MaxVolume(): ucpp.num.Float64 return this.MaxVolume;
	public extern var MinVolumeFrac(get, never): ucpp.num.Float64;
	public inline extern function get_MinVolumeFrac(): ucpp.num.Float64 return this.MinVolumeFrac;
	public extern var MaxVolumeFrac(get, never): ucpp.num.Float64;
	public inline extern function get_MaxVolumeFrac(): ucpp.num.Float64 return this.MaxVolumeFrac;
	public extern var KeepFraction(get, never): ucpp.num.Float64;
	public inline extern function get_KeepFraction(): ucpp.num.Float64 return this.KeepFraction;
	public extern var RandomSeed(get, never): ucpp.num.Int32;
	public inline extern function get_RandomSeed(): ucpp.num.Int32 return this.RandomSeed;
}

@:forward
@:nativeGen
@:native("FractureSelectionSettings*")
abstract FractureSelectionSettingsPtr(ucpp.Ptr<FractureSelectionSettings>) from ucpp.Ptr<FractureSelectionSettings> to ucpp.Ptr<FractureSelectionSettings>{
	@:from
	public static extern inline function fromValue(v: FractureSelectionSettings): FractureSelectionSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): FractureSelectionSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}