// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URigVMPin")
@:include("RigVMModel/RigVMPin.h")
@:structAccess
extern class RigVMPin extends Object {
	private var DisplayName: FName;
	private var Direction: ERigVMPinDirection;
	private var bIsExpanded: Bool;
	private var bIsConstant: Bool;
	private var bRequiresWatch: Bool;
	private var bIsDynamicArray: Bool;
	private var CPPType: FString;
	private var CPPTypeObject: cpp.Star<Object>;
	private var CPPTypeObjectPath: FName;
	private var DefaultValue: FString;
	private var CustomWidgetName: FName;
	private var SubPins: TArray<cpp.Star<RigVMPin>>;
	private var Links: TArray<cpp.Star<RigVMLink>>;
	private var InjectionInfos: TArray<cpp.Star<RigVMInjectionInfo>>;

	public function RequiresWatch(bCheckExposedPinChain: Bool): Bool;
	public function IsWildCard(): Bool;
	public function IsUObject(): Bool;
	public function IsStructMember(): Bool;
	public function IsStruct(): Bool;
	public function IsStringType(): Bool;
	public function IsRootPin(): Bool;
	public function IsReferenceCountedContainer(): Bool;
	public function IsLinkedTo(InPin: cpp.Star<RigVMPin>): Bool;
	public function IsLazy(): Bool;
	public function IsInterface(): Bool;
	public function IsFixedSizeArray(): Bool;
	public function IsExpanded(): Bool;
	public function IsExecuteContext(): Bool;
	public function IsEnum(): Bool;
	public function IsDynamicArray(): Bool;
	public function IsDefinedAsConstant(): Bool;
	public function IsArrayElement(): Bool;
	public function IsArray(): Bool;
	public function GetToolTipText(): FText;
	public function GetTargetLinks(bRecursive: Bool): TArray<cpp.Star<RigVMLink>>;
	public function GetSubPins(): TArray<cpp.Star<RigVMPin>>;
	public function GetSubPinPath(InParentPin: cpp.Star<RigVMPin.ConstRigVMPin>, bIncludeParentPinName: Bool): FString;
	public function GetSourceLinks(bRecursive: Bool): TArray<cpp.Star<RigVMLink>>;
	public function GetSegmentPath(bIncludeRootPin: Bool): FString;
	public function GetScriptStruct(): cpp.Star<ScriptStruct>;
	public function GetRootPin(): cpp.Star<RigVMPin>;
	public function GetPinPath(bUseNodePath: Bool): FString;
	public function GetPinIndex(): cpp.Int32;
	public function GetPinForLink(): cpp.Star<RigVMPin>;
	public function GetParentPin(): cpp.Star<RigVMPin>;
	public function GetOriginalPinFromInjectedNode(): cpp.Star<RigVMPin>;
	public function GetNode(): cpp.Star<RigVMNode>;
	public function GetLinks(): TArray<cpp.Star<RigVMLink>>;
	public function GetLinkedTargetPins(bRecursive: Bool): TArray<cpp.Star<RigVMPin>>;
	public function GetLinkedSourcePins(bRecursive: Bool): TArray<cpp.Star<RigVMPin>>;
	public function GetGraph(): cpp.Star<RigVMGraph>;
	public function GetEnum(): cpp.Star<Enum>;
	public function GetDisplayName(): FName;
	public function GetDirection(): ERigVMPinDirection;
	public function GetDefaultValue(): FString;
	public function GetCustomWidgetName(): FName;
	public function GetCPPTypeObject(): cpp.Star<Object>;
	public function GetCPPType(): FString;
	public function GetArraySize(): cpp.Int32;
	public function GetArrayElementCppType(): FString;
	public function GetAbsolutePinIndex(): cpp.Int32;
	public function FindSubPin(InPinPath: FString): cpp.Star<RigVMPin>;
	public function FindLinkForPin(InOtherPin: cpp.Star<RigVMPin.ConstRigVMPin>): cpp.Star<RigVMLink>;
	public function ContainsWildCardSubPin(): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	RequiresWatch, IsWildCard, IsUObject, IsStructMember, IsStruct,
	IsStringType, IsRootPin, IsReferenceCountedContainer, IsLinkedTo, IsLazy,
	IsInterface, IsFixedSizeArray, IsExpanded, IsExecuteContext, IsEnum,
	IsDynamicArray, IsDefinedAsConstant, IsArrayElement, IsArray, GetToolTipText,
	GetTargetLinks, GetSubPins, GetSubPinPath, GetSourceLinks, GetSegmentPath,
	GetScriptStruct, GetRootPin, GetPinPath, GetPinIndex, GetPinForLink,
	GetParentPin, GetOriginalPinFromInjectedNode, GetNode, GetLinks, GetLinkedTargetPins,
	GetLinkedSourcePins, GetGraph, GetEnum, GetDisplayName, GetDirection,
	GetDefaultValue, GetCustomWidgetName, GetCPPTypeObject, GetCPPType, GetArraySize,
	GetArrayElementCppType, GetAbsolutePinIndex, FindSubPin, FindLinkForPin, ContainsWildCardSubPin
)
@:nativeGen
abstract ConstRigVMPin(RigVMPin) from RigVMPin {
}

@:forward
@:nativeGen
@:native("RigVMPin*")
abstract RigVMPinPtr(cpp.Star<RigVMPin>) from cpp.Star<RigVMPin> to cpp.Star<RigVMPin>{
	@:from
	public static extern inline function fromValue(v: RigVMPin): RigVMPinPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RigVMPin {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}