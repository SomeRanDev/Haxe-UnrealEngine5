// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAutomationBlueprintFunctionLibrary")
@:include("AutomationBlueprintFunctionLibrary.h")
@:valueType
extern class AutomationBlueprintFunctionLibrary extends BlueprintFunctionLibrary {
	public function TakeHighResScreenshot(ResX: ucpp.num.Int32, ResY: ucpp.num.Int32, Filename: FString, Camera: ucpp.Ptr<CameraActor>, bMaskEnabled: Bool, bCaptureHDR: Bool, ComparisonTolerance: EComparisonTolerance, ComparisonNotes: FString, Delay: ucpp.num.Float32): ucpp.Ptr<AutomationEditorTask>;
	public function TakeAutomationScreenshotOfUI(WorldContextObject: ucpp.Ptr<Object>, LatentInfo: LatentActionInfo, Name: FString, Options: ucpp.Ref<AutomationScreenshotOptions>): Void;
	public function TakeAutomationScreenshotAtCamera(WorldContextObject: ucpp.Ptr<Object>, LatentInfo: LatentActionInfo, Camera: ucpp.Ptr<CameraActor>, NameOverride: FString, Notes: FString, Options: ucpp.Ref<AutomationScreenshotOptions>): Void;
	public function TakeAutomationScreenshot(WorldContextObject: ucpp.Ptr<Object>, LatentInfo: LatentActionInfo, Name: FString, Notes: FString, Options: ucpp.Ref<AutomationScreenshotOptions>): Void;
	public function SetTestTelemetryStorage(StorageName: FString): Void;
	public function SetScalabilityQualityToLow(WorldContextObject: ucpp.Ptr<Object>): Void;
	public function SetScalabilityQualityToEpic(WorldContextObject: ucpp.Ptr<Object>): Void;
	public function SetScalabilityQualityLevelRelativeToMax(WorldContextObject: ucpp.Ptr<Object>, Value: ucpp.num.Int32): Void;
	public function SetEditorViewportVisualizeBuffer(BufferName: FName): Void;
	public function SetEditorViewportViewMode(Index: TEnumAsByte<EViewModeIndex>): Void;
	public function GetStatIncMax(StatName: FName): ucpp.num.Float32;
	public function GetStatIncAverage(StatName: FName): ucpp.num.Float32;
	public function GetStatExcMax(StatName: FName): ucpp.num.Float32;
	public function GetStatExcAverage(StatName: FName): ucpp.num.Float32;
	public function GetStatCallCount(StatName: FName): ucpp.num.Float32;
	public function GetDefaultScreenshotOptionsForRendering(Tolerance: EComparisonTolerance, Delay: ucpp.num.Float32): AutomationScreenshotOptions;
	public function GetDefaultScreenshotOptionsForGameplay(Tolerance: EComparisonTolerance, Delay: ucpp.num.Float32): AutomationScreenshotOptions;
	public function FinishLoadingBeforeScreenshot(): Void;
	public function EnableStatGroup(WorldContextObject: ucpp.Ptr<Object>, GroupName: FName): Void;
	public function DisableStatGroup(WorldContextObject: ucpp.Ptr<Object>, GroupName: FName): Void;
	public function CompareImageAgainstReference(ImageFilePath: FString, ComparisonName: FString, ComparisonTolerance: EComparisonTolerance, ComparisonNotes: FString, WorldContextObject: ucpp.Ptr<Object>): Bool;
	public function AutomationWaitForLoading(WorldContextObject: ucpp.Ptr<Object>, LatentInfo: LatentActionInfo, Options: AutomationWaitForLoadingOptions): Void;
	public function AreAutomatedTestsRunning(): Bool;
	public function AddTestTelemetryData(DataPoint: FString, Measurement: ucpp.num.Float32, Context: FString): Void;
	public function AddExpectedLogError(ExpectedPatternString: FString, Occurrences: ucpp.num.Int32, ExactMatch: Bool): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstAutomationBlueprintFunctionLibrary(AutomationBlueprintFunctionLibrary) from AutomationBlueprintFunctionLibrary {
}

@:forward
@:nativeGen
@:native("AutomationBlueprintFunctionLibrary*")
abstract AutomationBlueprintFunctionLibraryPtr(ucpp.Ptr<AutomationBlueprintFunctionLibrary>) from ucpp.Ptr<AutomationBlueprintFunctionLibrary> to ucpp.Ptr<AutomationBlueprintFunctionLibrary>{
	@:from
	public static extern inline function fromValue(v: AutomationBlueprintFunctionLibrary): AutomationBlueprintFunctionLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AutomationBlueprintFunctionLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}