// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URigVMNode")
@:include("RigVMModel/RigVMNode.h")
@:valueType
extern class RigVMNode extends Object {
	@:protected public var NodeTitle: FString;
	@:protected public var Position: Vector2D;
	@:protected public var Size: Vector2D;
	@:protected public var NodeColor: LinearColor;
	@:protected public var PreviousName: FName;
	@:protected public var bHasBreakpoint: Bool;
	@:protected public var bHaltedAtThisNode: Bool;
	private var Pins: TArray<ucpp.Ptr<RigVMPin>>;
	private var OrphanedPins: TArray<ucpp.Ptr<RigVMPin>>;

	public function SetHasBreakpoint(bValue: Bool): Void;
	public function SetExecutionIsHaltedAtThisNode(bValue: Bool): Void;
	public function IsVisibleInUI(): Bool;
	public function IsSelected(): Bool;
	public function IsPure(): Bool;
	public function IsMutable(): Bool;
	public function IsLoopNode(): Bool;
	public function IsLinkedTo(InNode: ucpp.Ptr<RigVMNode>): Bool;
	public function IsInputAggregate(): Bool;
	public function IsInjected(): Bool;
	public function IsEvent(): Bool;
	public function IsDefinedAsVarying(): Bool;
	public function IsDefinedAsConstant(): Bool;
	public function IsControlFlowNode(): Bool;
	public function IsAggregate(): Bool;
	public function HasPinOfDirection(InDirection: ERigVMPinDirection): Bool;
	public function HasOutputPin(bIncludeIO: Bool): Bool;
	public function HasOrphanedPins(): Bool;
	public function HasLazyPin(bOnlyConsiderPinsWithLinks: Bool): Bool;
	public function HasIOPin(): Bool;
	public function HasInputPin(bIncludeIO: Bool): Bool;
	public function HasBreakpoint(): Bool;
	public function GetToolTipText(): FText;
	public function GetSupportedWorkflows(InType: ERigVMUserWorkflowType, InSubject: ucpp.Ptr<Object.ConstObject>): TArray<RigVMUserWorkflow>;
	public function GetSize(): Vector2D;
	public function GetSecondAggregatePin(): ucpp.Ptr<RigVMPin>;
	public function GetRootGraph(): ucpp.Ptr<RigVMGraph>;
	public function GetPreviousFName(): FName;
	public function GetPosition(): Vector2D;
	public function GetPins(): TArray<ucpp.Ptr<RigVMPin>>;
	public function GetOrphanedPins(): TArray<ucpp.Ptr<RigVMPin>>;
	public function GetOppositeAggregatePin(): ucpp.Ptr<RigVMPin>;
	public function GetNodeTitle(): FString;
	public function GetNodePath(bRecursive: Bool): FString;
	public function GetNodeIndex(): ucpp.num.Int32;
	public function GetNodeColor(): LinearColor;
	public function GetNextAggregateName(InLastAggregatePinName: ucpp.Ref<FName>): FName;
	public function GetLinks(): TArray<ucpp.Ptr<RigVMLink>>;
	public function GetLinkedTargetNodes(): TArray<ucpp.Ptr<RigVMNode>>;
	public function GetLinkedSourceNodes(): TArray<ucpp.Ptr<RigVMNode>>;
	public function GetInjectionInfo(): ucpp.Ptr<RigVMInjectionInfo>;
	public function GetGraph(): ucpp.Ptr<RigVMGraph>;
	public function GetFirstAggregatePin(): ucpp.Ptr<RigVMPin>;
	public function GetEventName(): FName;
	public function GetAllPinsRecursively(): TArray<ucpp.Ptr<RigVMPin>>;
	public function GetAggregateOutputs(): TArray<ucpp.Ptr<RigVMPin>>;
	public function GetAggregateInputs(): TArray<ucpp.Ptr<RigVMPin>>;
	public function FindPin(InPinPath: FString): ucpp.Ptr<RigVMPin>;
	public function FindFunctionForNode(): ucpp.Ptr<RigVMLibraryNode>;
	public function ExecutionIsHaltedAtThisNode(): Bool;
	public function CanOnlyExistOnce(): Bool;
	public function CanBeUpgraded(): Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	IsVisibleInUI, IsSelected, IsPure, IsMutable, IsLoopNode,
	IsLinkedTo, IsInputAggregate, IsInjected, IsEvent, IsDefinedAsVarying,
	IsDefinedAsConstant, IsControlFlowNode, IsAggregate, HasPinOfDirection, HasOutputPin,
	HasOrphanedPins, HasLazyPin, HasIOPin, HasInputPin, HasBreakpoint,
	GetToolTipText, GetSupportedWorkflows, GetSize, GetSecondAggregatePin, GetRootGraph,
	GetPreviousFName, GetPosition, GetPins, GetOrphanedPins, GetOppositeAggregatePin,
	GetNodeTitle, GetNodePath, GetNodeIndex, GetNodeColor, GetNextAggregateName,
	GetLinks, GetLinkedTargetNodes, GetLinkedSourceNodes, GetInjectionInfo, GetGraph,
	GetFirstAggregatePin, GetEventName, GetAllPinsRecursively, GetAggregateOutputs, GetAggregateInputs,
	FindPin, ExecutionIsHaltedAtThisNode, CanOnlyExistOnce, CanBeUpgraded
)
@:nativeGen
abstract ConstRigVMNode(RigVMNode) from RigVMNode {
}

@:forward
@:nativeGen
@:native("RigVMNode*")
abstract RigVMNodePtr(ucpp.Ptr<RigVMNode>) from ucpp.Ptr<RigVMNode> to ucpp.Ptr<RigVMNode>{
	@:from
	public static extern inline function fromValue(v: RigVMNode): RigVMNodePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RigVMNode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}