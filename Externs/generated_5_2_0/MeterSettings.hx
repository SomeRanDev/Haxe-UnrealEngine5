// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMeterSettings")
@:include("Meter.h")
@:structAccess
extern class MeterSettings extends AudioSynesthesiaSettings {
	public var AnalysisPeriod: cpp.Float32;
	public var PeakMode: EMeterPeakType;
	public var MeterAttackTime: cpp.Int32;
	public var MeterReleaseTime: cpp.Int32;
	public var PeakHoldTime: cpp.Int32;
	public var ClippingThreshold: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstMeterSettings(MeterSettings) from MeterSettings {
	public extern var AnalysisPeriod(get, never): cpp.Float32;
	public inline extern function get_AnalysisPeriod(): cpp.Float32 return this.AnalysisPeriod;
	public extern var PeakMode(get, never): EMeterPeakType;
	public inline extern function get_PeakMode(): EMeterPeakType return this.PeakMode;
	public extern var MeterAttackTime(get, never): cpp.Int32;
	public inline extern function get_MeterAttackTime(): cpp.Int32 return this.MeterAttackTime;
	public extern var MeterReleaseTime(get, never): cpp.Int32;
	public inline extern function get_MeterReleaseTime(): cpp.Int32 return this.MeterReleaseTime;
	public extern var PeakHoldTime(get, never): cpp.Int32;
	public inline extern function get_PeakHoldTime(): cpp.Int32 return this.PeakHoldTime;
	public extern var ClippingThreshold(get, never): cpp.Float32;
	public inline extern function get_ClippingThreshold(): cpp.Float32 return this.ClippingThreshold;
}

@:forward
@:nativeGen
@:native("MeterSettings*")
abstract MeterSettingsPtr(cpp.Star<MeterSettings>) from cpp.Star<MeterSettings> to cpp.Star<MeterSettings>{
	@:from
	public static extern inline function fromValue(v: MeterSettings): MeterSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MeterSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}