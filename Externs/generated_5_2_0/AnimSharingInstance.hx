// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimSharingInstance")
@:include("AnimationSharingManager.h")
@:structAccess
extern class AnimSharingInstance extends Object {
	public var RegisteredActors: TArray<cpp.Star<Actor>>;
	public var StateProcessor: cpp.Star<AnimationSharingStateProcessor>;
	public var UsedAnimationSequences: TArray<cpp.Star<AnimSequence>>;
	public var StateEnum: cpp.Star<Enum>;
	public var SharingActor: cpp.Star<Actor>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAnimSharingInstance(AnimSharingInstance) from AnimSharingInstance {
	public extern var RegisteredActors(get, never): TArray<cpp.Star<Actor.ConstActor>>;
	public inline extern function get_RegisteredActors(): TArray<cpp.Star<Actor.ConstActor>> return this.RegisteredActors;
	public extern var StateProcessor(get, never): cpp.Star<AnimationSharingStateProcessor.ConstAnimationSharingStateProcessor>;
	public inline extern function get_StateProcessor(): cpp.Star<AnimationSharingStateProcessor.ConstAnimationSharingStateProcessor> return this.StateProcessor;
	public extern var UsedAnimationSequences(get, never): TArray<cpp.Star<AnimSequence.ConstAnimSequence>>;
	public inline extern function get_UsedAnimationSequences(): TArray<cpp.Star<AnimSequence.ConstAnimSequence>> return this.UsedAnimationSequences;
	public extern var StateEnum(get, never): cpp.Star<Enum.ConstEnum>;
	public inline extern function get_StateEnum(): cpp.Star<Enum.ConstEnum> return this.StateEnum;
	public extern var SharingActor(get, never): cpp.Star<Actor.ConstActor>;
	public inline extern function get_SharingActor(): cpp.Star<Actor.ConstActor> return this.SharingActor;
}

@:forward
@:nativeGen
@:native("AnimSharingInstance*")
abstract AnimSharingInstancePtr(cpp.Star<AnimSharingInstance>) from cpp.Star<AnimSharingInstance> to cpp.Star<AnimSharingInstance>{
	@:from
	public static extern inline function fromValue(v: AnimSharingInstance): AnimSharingInstancePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimSharingInstance {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}