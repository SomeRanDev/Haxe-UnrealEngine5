// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UFont")
@:include("Engine/Font.h")
@:valueType
extern class Font extends Object {
	public var FontCacheType: EFontCacheType;
	public var Characters: TArray<FontCharacter>;
	public var Textures: TArray<ucpp.Ptr<Texture2D>>;
	public var IsRemapped: ucpp.num.Int32;
	public var EmScale: ucpp.num.Float32;
	public var Ascent: ucpp.num.Float32;
	public var Descent: ucpp.num.Float32;
	public var Leading: ucpp.num.Float32;
	public var Kerning: ucpp.num.Int32;
	public var ImportOptions: FontImportOptionsData;
	public var NumCharacters: ucpp.num.Int32;
	public var MaxCharHeight: TArray<ucpp.num.Int32>;
	public var ScalingFactor: ucpp.num.Float32;
	public var LegacyFontSize: ucpp.num.Int32;
	public var LegacyFontName: FName;
	public var CompositeFont: CompositeFont;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstFont(Font) from Font {
	public extern var FontCacheType(get, never): EFontCacheType;
	public inline extern function get_FontCacheType(): EFontCacheType return this.FontCacheType;
	public extern var Characters(get, never): TArray<FontCharacter>;
	public inline extern function get_Characters(): TArray<FontCharacter> return this.Characters;
	public extern var Textures(get, never): TArray<ucpp.Ptr<Texture2D.ConstTexture2D>>;
	public inline extern function get_Textures(): TArray<ucpp.Ptr<Texture2D.ConstTexture2D>> return this.Textures;
	public extern var IsRemapped(get, never): ucpp.num.Int32;
	public inline extern function get_IsRemapped(): ucpp.num.Int32 return this.IsRemapped;
	public extern var EmScale(get, never): ucpp.num.Float32;
	public inline extern function get_EmScale(): ucpp.num.Float32 return this.EmScale;
	public extern var Ascent(get, never): ucpp.num.Float32;
	public inline extern function get_Ascent(): ucpp.num.Float32 return this.Ascent;
	public extern var Descent(get, never): ucpp.num.Float32;
	public inline extern function get_Descent(): ucpp.num.Float32 return this.Descent;
	public extern var Leading(get, never): ucpp.num.Float32;
	public inline extern function get_Leading(): ucpp.num.Float32 return this.Leading;
	public extern var Kerning(get, never): ucpp.num.Int32;
	public inline extern function get_Kerning(): ucpp.num.Int32 return this.Kerning;
	public extern var ImportOptions(get, never): FontImportOptionsData;
	public inline extern function get_ImportOptions(): FontImportOptionsData return this.ImportOptions;
	public extern var NumCharacters(get, never): ucpp.num.Int32;
	public inline extern function get_NumCharacters(): ucpp.num.Int32 return this.NumCharacters;
	public extern var MaxCharHeight(get, never): TArray<ucpp.num.Int32>;
	public inline extern function get_MaxCharHeight(): TArray<ucpp.num.Int32> return this.MaxCharHeight;
	public extern var ScalingFactor(get, never): ucpp.num.Float32;
	public inline extern function get_ScalingFactor(): ucpp.num.Float32 return this.ScalingFactor;
	public extern var LegacyFontSize(get, never): ucpp.num.Int32;
	public inline extern function get_LegacyFontSize(): ucpp.num.Int32 return this.LegacyFontSize;
	public extern var LegacyFontName(get, never): FName;
	public inline extern function get_LegacyFontName(): FName return this.LegacyFontName;
	public extern var CompositeFont(get, never): CompositeFont;
	public inline extern function get_CompositeFont(): CompositeFont return this.CompositeFont;
}

@:forward
@:nativeGen
@:native("Font*")
abstract FontPtr(ucpp.Ptr<Font>) from ucpp.Ptr<Font> to ucpp.Ptr<Font>{
	@:from
	public static extern inline function fromValue(v: Font): FontPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Font {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}