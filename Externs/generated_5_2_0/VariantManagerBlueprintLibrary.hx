// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UVariantManagerBlueprintLibrary")
@:include("VariantManagerBlueprintLibrary.h")
@:valueType
extern class VariantManagerBlueprintLibrary extends BlueprintFunctionLibrary {
	public function SetValueVector4(Property: ucpp.Ptr<PropertyValue>, InValue: Vector4): Void;
	public function SetValueVector2D(Property: ucpp.Ptr<PropertyValue>, InValue: Vector2D): Void;
	public function SetValueVector(Property: ucpp.Ptr<PropertyValue>, InValue: Vector): Void;
	public function SetValueString(Property: ucpp.Ptr<PropertyValue>, InValue: FString): Void;
	public function SetValueRotator(Property: ucpp.Ptr<PropertyValue>, InValue: Rotator): Void;
	public function SetValueQuat(Property: ucpp.Ptr<PropertyValue>, InValue: Quat): Void;
	public function SetValueObject(Property: ucpp.Ptr<PropertyValue>, InValue: ucpp.Ptr<Object>): Void;
	public function SetValueLinearColor(Property: ucpp.Ptr<PropertyValue>, InValue: LinearColor): Void;
	public function SetValueIntPoint(Property: ucpp.Ptr<PropertyValue>, InValue: IntPoint): Void;
	public function SetValueInt(Property: ucpp.Ptr<PropertyValue>, InValue: ucpp.num.Int32): Void;
	public function SetValueFloat(Property: ucpp.Ptr<PropertyValue>, InValue: ucpp.num.Float32): Void;
	public function SetValueColor(Property: ucpp.Ptr<PropertyValue>, InValue: Color): Void;
	public function SetValueBool(Property: ucpp.Ptr<PropertyValue>, InValue: Bool): Void;
	public function SetDependency(Variant: ucpp.Ptr<Variant>, Index: ucpp.num.Int32, Dependency: ucpp.Ref<VariantDependency>): Void;
	public function RemoveVariantSetByName(LevelVariantSets: ucpp.Ptr<LevelVariantSets>, VariantSetName: FString): Void;
	public function RemoveVariantSet(LevelVariantSets: ucpp.Ptr<LevelVariantSets>, VariantSet: ucpp.Ptr<VariantSet>): Void;
	public function RemoveVariantByName(VariantSet: ucpp.Ptr<VariantSet>, VariantName: FString): Void;
	public function RemoveVariant(VariantSet: ucpp.Ptr<VariantSet>, Variant: ucpp.Ptr<Variant>): Void;
	public function RemoveCapturedPropertyByName(Variant: ucpp.Ptr<Variant>, Actor: ucpp.Ptr<Actor>, PropertyPath: FString): Void;
	public function RemoveCapturedProperty(Variant: ucpp.Ptr<Variant>, Actor: ucpp.Ptr<Actor>, Property: ucpp.Ptr<PropertyValue>): Void;
	public function RemoveActorBindingByName(Variant: ucpp.Ptr<Variant>, ActorName: FString): Void;
	public function RemoveActorBinding(Variant: ucpp.Ptr<Variant>, Actor: ucpp.Ptr<Actor>): Void;
	public function Record(PropVal: ucpp.Ptr<PropertyValue>): Void;
	public function GetValueVector4(Property: ucpp.Ptr<PropertyValue>): Vector4;
	public function GetValueVector2D(Property: ucpp.Ptr<PropertyValue>): Vector2D;
	public function GetValueVector(Property: ucpp.Ptr<PropertyValue>): Vector;
	public function GetValueString(Property: ucpp.Ptr<PropertyValue>): FString;
	public function GetValueRotator(Property: ucpp.Ptr<PropertyValue>): Rotator;
	public function GetValueQuat(Property: ucpp.Ptr<PropertyValue>): Quat;
	public function GetValueObject(Property: ucpp.Ptr<PropertyValue>): ucpp.Ptr<Object>;
	public function GetValueLinearColor(Property: ucpp.Ptr<PropertyValue>): LinearColor;
	public function GetValueIntPoint(Property: ucpp.Ptr<PropertyValue>): IntPoint;
	public function GetValueInt(Property: ucpp.Ptr<PropertyValue>): ucpp.num.Int32;
	public function GetValueFloat(Property: ucpp.Ptr<PropertyValue>): ucpp.num.Float32;
	public function GetValueColor(Property: ucpp.Ptr<PropertyValue>): Color;
	public function GetValueBool(Property: ucpp.Ptr<PropertyValue>): Bool;
	public function GetPropertyTypeString(PropVal: ucpp.Ptr<PropertyValue>): FString;
	public function GetCapturedProperties(Variant: ucpp.Ptr<Variant>, Actor: ucpp.Ptr<Actor>): TArray<ucpp.Ptr<PropertyValue>>;
	public function GetCapturableProperties(ActorOrClass: ucpp.Ptr<Object>): TArray<FString>;
	public function DeleteDependency(Variant: ucpp.Ptr<Variant>, Index: ucpp.num.Int32): Void;
	public function CreateLevelVariantSetsAsset(AssetName: FString, AssetPath: FString): ucpp.Ptr<LevelVariantSets>;
	public function CreateLevelVariantSetsActor(LevelVariantSetsAsset: ucpp.Ptr<LevelVariantSets>): ucpp.Ptr<LevelVariantSetsActor>;
	public function CaptureProperty(Variant: ucpp.Ptr<Variant>, Actor: ucpp.Ptr<Actor>, PropertyPath: FString): ucpp.Ptr<PropertyValue>;
	public function Apply(PropVal: ucpp.Ptr<PropertyValue>): Void;
	public function AddVariantSet(LevelVariantSets: ucpp.Ptr<LevelVariantSets>, VariantSet: ucpp.Ptr<VariantSet>): Void;
	public function AddVariant(VariantSet: ucpp.Ptr<VariantSet>, Variant: ucpp.Ptr<Variant>): Void;
	public function AddDependency(Variant: ucpp.Ptr<Variant>, Dependency: ucpp.Ref<VariantDependency>): ucpp.num.Int32;
	public function AddActorBinding(Variant: ucpp.Ptr<Variant>, Actor: ucpp.Ptr<Actor>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstVariantManagerBlueprintLibrary(VariantManagerBlueprintLibrary) from VariantManagerBlueprintLibrary {
}

@:forward
@:nativeGen
@:native("VariantManagerBlueprintLibrary*")
abstract VariantManagerBlueprintLibraryPtr(ucpp.Ptr<VariantManagerBlueprintLibrary>) from ucpp.Ptr<VariantManagerBlueprintLibrary> to ucpp.Ptr<VariantManagerBlueprintLibrary>{
	@:from
	public static extern inline function fromValue(v: VariantManagerBlueprintLibrary): VariantManagerBlueprintLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): VariantManagerBlueprintLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}