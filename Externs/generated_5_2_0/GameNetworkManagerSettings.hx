// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGameNetworkManagerSettings")
@:include("GameNetworkManagerSettings.h")
@:valueType
extern class GameNetworkManagerSettings extends Object {
	public var MinDynamicBandwidth: ucpp.num.Int32;
	public var MaxDynamicBandwidth: ucpp.num.Int32;
	public var TotalNetBandwidth: ucpp.num.Int32;
	public var BadPingThreshold: ucpp.num.Int32;
	public var bIsStandbyCheckingEnabled: Bool;
	public var StandbyRxCheatTime: ucpp.num.Float32;
	public var StandbyTxCheatTime: ucpp.num.Float32;
	public var PercentMissingForRxStandby: ucpp.num.Float32;
	public var PercentMissingForTxStandby: ucpp.num.Float32;
	public var PercentForBadPing: ucpp.num.Float32;
	public var JoinInProgressStandbyWaitTime: ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstGameNetworkManagerSettings(GameNetworkManagerSettings) from GameNetworkManagerSettings {
	public extern var MinDynamicBandwidth(get, never): ucpp.num.Int32;
	public inline extern function get_MinDynamicBandwidth(): ucpp.num.Int32 return this.MinDynamicBandwidth;
	public extern var MaxDynamicBandwidth(get, never): ucpp.num.Int32;
	public inline extern function get_MaxDynamicBandwidth(): ucpp.num.Int32 return this.MaxDynamicBandwidth;
	public extern var TotalNetBandwidth(get, never): ucpp.num.Int32;
	public inline extern function get_TotalNetBandwidth(): ucpp.num.Int32 return this.TotalNetBandwidth;
	public extern var BadPingThreshold(get, never): ucpp.num.Int32;
	public inline extern function get_BadPingThreshold(): ucpp.num.Int32 return this.BadPingThreshold;
	public extern var bIsStandbyCheckingEnabled(get, never): Bool;
	public inline extern function get_bIsStandbyCheckingEnabled(): Bool return this.bIsStandbyCheckingEnabled;
	public extern var StandbyRxCheatTime(get, never): ucpp.num.Float32;
	public inline extern function get_StandbyRxCheatTime(): ucpp.num.Float32 return this.StandbyRxCheatTime;
	public extern var StandbyTxCheatTime(get, never): ucpp.num.Float32;
	public inline extern function get_StandbyTxCheatTime(): ucpp.num.Float32 return this.StandbyTxCheatTime;
	public extern var PercentMissingForRxStandby(get, never): ucpp.num.Float32;
	public inline extern function get_PercentMissingForRxStandby(): ucpp.num.Float32 return this.PercentMissingForRxStandby;
	public extern var PercentMissingForTxStandby(get, never): ucpp.num.Float32;
	public inline extern function get_PercentMissingForTxStandby(): ucpp.num.Float32 return this.PercentMissingForTxStandby;
	public extern var PercentForBadPing(get, never): ucpp.num.Float32;
	public inline extern function get_PercentForBadPing(): ucpp.num.Float32 return this.PercentForBadPing;
	public extern var JoinInProgressStandbyWaitTime(get, never): ucpp.num.Float32;
	public inline extern function get_JoinInProgressStandbyWaitTime(): ucpp.num.Float32 return this.JoinInProgressStandbyWaitTime;
}

@:forward
@:nativeGen
@:native("GameNetworkManagerSettings*")
abstract GameNetworkManagerSettingsPtr(ucpp.Ptr<GameNetworkManagerSettings>) from ucpp.Ptr<GameNetworkManagerSettings> to ucpp.Ptr<GameNetworkManagerSettings>{
	@:from
	public static extern inline function fromValue(v: GameNetworkManagerSettings): GameNetworkManagerSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GameNetworkManagerSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}