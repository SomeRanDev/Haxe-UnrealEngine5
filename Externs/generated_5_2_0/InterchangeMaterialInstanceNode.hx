// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeMaterialInstanceNode")
@:include("InterchangeMaterialInstanceNode.h")
@:structAccess
extern class InterchangeMaterialInstanceNode extends InterchangeBaseNode {
	public function SetCustomParent(AttributeValue: FString): Bool;
	public function GetVectorParameterValue(ParameterName: FString, AttributeValue: cpp.Reference<LinearColor>): Bool;
	public function GetTextureParameterValue(ParameterName: FString, AttributeValue: cpp.Reference<FString>): Bool;
	public function GetStaticSwitchParameterValue(ParameterName: FString, AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetScalarParameterValue(ParameterName: FString, AttributeValue: cpp.Reference<cpp.Float32>): Bool;
	public function GetCustomParent(AttributeValue: cpp.Reference<FString>): Bool;
	public function AddVectorParameterValue(ParameterName: FString, AttributeValue: cpp.Reference<LinearColor>): Bool;
	public function AddTextureParameterValue(ParameterName: FString, AttributeValue: FString): Bool;
	public function AddStaticSwitchParameterValue(ParameterName: FString, AttributeValue: Bool): Bool;
	public function AddScalarParameterValue(ParameterName: FString, AttributeValue: cpp.Float32): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(SetCustomParent, GetVectorParameterValue, GetTextureParameterValue, GetStaticSwitchParameterValue, GetScalarParameterValue, GetCustomParent)
@:nativeGen
abstract ConstInterchangeMaterialInstanceNode(InterchangeMaterialInstanceNode) from InterchangeMaterialInstanceNode {
}

@:forward
@:nativeGen
@:native("InterchangeMaterialInstanceNode*")
abstract InterchangeMaterialInstanceNodePtr(cpp.Star<InterchangeMaterialInstanceNode>) from cpp.Star<InterchangeMaterialInstanceNode> to cpp.Star<InterchangeMaterialInstanceNode>{
	@:from
	public static extern inline function fromValue(v: InterchangeMaterialInstanceNode): InterchangeMaterialInstanceNodePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeMaterialInstanceNode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}