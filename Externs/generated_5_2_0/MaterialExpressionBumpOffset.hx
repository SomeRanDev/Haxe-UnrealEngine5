// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMaterialExpressionBumpOffset")
@:include("Materials/MaterialExpressionBumpOffset.h")
@:valueType
extern class MaterialExpressionBumpOffset extends MaterialExpression {
	public var Coordinate: ExpressionInput;
	public var Height: ExpressionInput;
	public var HeightRatioInput: ExpressionInput;
	public var HeightRatio: ucpp.num.Float32;
	public var ReferencePlane: ucpp.num.Float32;
	public var ConstCoordinate: ucpp.num.UInt32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstMaterialExpressionBumpOffset(MaterialExpressionBumpOffset) from MaterialExpressionBumpOffset {
	public extern var Coordinate(get, never): ExpressionInput;
	public inline extern function get_Coordinate(): ExpressionInput return this.Coordinate;
	public extern var Height(get, never): ExpressionInput;
	public inline extern function get_Height(): ExpressionInput return this.Height;
	public extern var HeightRatioInput(get, never): ExpressionInput;
	public inline extern function get_HeightRatioInput(): ExpressionInput return this.HeightRatioInput;
	public extern var HeightRatio(get, never): ucpp.num.Float32;
	public inline extern function get_HeightRatio(): ucpp.num.Float32 return this.HeightRatio;
	public extern var ReferencePlane(get, never): ucpp.num.Float32;
	public inline extern function get_ReferencePlane(): ucpp.num.Float32 return this.ReferencePlane;
	public extern var ConstCoordinate(get, never): ucpp.num.UInt32;
	public inline extern function get_ConstCoordinate(): ucpp.num.UInt32 return this.ConstCoordinate;
}

@:forward
@:nativeGen
@:native("MaterialExpressionBumpOffset*")
abstract MaterialExpressionBumpOffsetPtr(ucpp.Ptr<MaterialExpressionBumpOffset>) from ucpp.Ptr<MaterialExpressionBumpOffset> to ucpp.Ptr<MaterialExpressionBumpOffset>{
	@:from
	public static extern inline function fromValue(v: MaterialExpressionBumpOffset): MaterialExpressionBumpOffsetPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MaterialExpressionBumpOffset {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}