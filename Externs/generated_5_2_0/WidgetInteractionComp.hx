// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWidgetInteractionComponent")
@:include("Components/WidgetInteractionComponent.h")
@:structAccess
extern class WidgetInteractionComp extends SceneComp {
	public var OnHoveredWidgetChanged: HaxeMulticastSparseDelegateProperty<(cpp.Star<WidgetComp>, cpp.Star<WidgetComp>) -> Void>;
	public var VirtualUserIndex: cpp.Int32;
	public var PointerIndex: cpp.Int32;
	public var TraceChannel: TEnumAsByte<ECollisionChannel>;
	public var InteractionDistance: cpp.Float32;
	public var InteractionSource: EWidgetInteractionSource;
	public var bEnableHitTesting: Bool;
	public var bShowDebug: Bool;
	public var DebugSphereLineThickness: cpp.Float32;
	public var DebugLineThickness: cpp.Float32;
	public var DebugColor: LinearColor;
	@:protected public var CustomHitResult: HitResult;
	@:protected public var LocalHitLocation: Vector2D;
	@:protected public var LastLocalHitLocation: Vector2D;
	@:protected public var HoveredWidgetComponent: cpp.Star<WidgetComp>;
	@:protected public var LastHitResult: HitResult;
	@:protected public var bIsHoveredWidgetInteractable: Bool;
	@:protected public var bIsHoveredWidgetFocusable: Bool;
	@:protected public var bIsHoveredWidgetHitTestVisible: Bool;

	public function SetFocus(FocusWidget: cpp.Star<Widget>): Void;
	public function SetCustomHitResult(HitResult: cpp.Reference<HitResult>): Void;
	public function SendKeyChar(Characters: FString, bRepeat: Bool): Bool;
	public function ScrollWheel(ScrollDelta: cpp.Float32): Void;
	public function ReleasePointerKey(Key: Key): Void;
	public function ReleaseKey(Key: Key): Bool;
	public function PressPointerKey(Key: Key): Void;
	public function PressKey(Key: Key, bRepeat: Bool): Bool;
	public function PressAndReleaseKey(Key: Key): Bool;
	public function IsOverInteractableWidget(): Bool;
	public function IsOverHitTestVisibleWidget(): Bool;
	public function IsOverFocusableWidget(): Bool;
	public function GetLastHitResult(): HitResult;
	public function GetHoveredWidgetComponent(): cpp.Star<WidgetComp>;
	public function Get2DHitLocation(): Vector2D;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsOverInteractableWidget, IsOverHitTestVisibleWidget, IsOverFocusableWidget, GetLastHitResult, GetHoveredWidgetComponent, Get2DHitLocation)
@:nativeGen
abstract ConstWidgetInteractionComp(WidgetInteractionComp) from WidgetInteractionComp {
	public extern var OnHoveredWidgetChanged(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<WidgetComp.ConstWidgetComp>, cpp.Star<WidgetComp.ConstWidgetComp>) -> Void>;
	public inline extern function get_OnHoveredWidgetChanged(): HaxeMulticastSparseDelegateProperty<(cpp.Star<WidgetComp.ConstWidgetComp>, cpp.Star<WidgetComp.ConstWidgetComp>) -> Void> return this.OnHoveredWidgetChanged;
	public extern var VirtualUserIndex(get, never): cpp.Int32;
	public inline extern function get_VirtualUserIndex(): cpp.Int32 return this.VirtualUserIndex;
	public extern var PointerIndex(get, never): cpp.Int32;
	public inline extern function get_PointerIndex(): cpp.Int32 return this.PointerIndex;
	public extern var TraceChannel(get, never): TEnumAsByte<ECollisionChannel>;
	public inline extern function get_TraceChannel(): TEnumAsByte<ECollisionChannel> return this.TraceChannel;
	public extern var InteractionDistance(get, never): cpp.Float32;
	public inline extern function get_InteractionDistance(): cpp.Float32 return this.InteractionDistance;
	public extern var InteractionSource(get, never): EWidgetInteractionSource;
	public inline extern function get_InteractionSource(): EWidgetInteractionSource return this.InteractionSource;
	public extern var bEnableHitTesting(get, never): Bool;
	public inline extern function get_bEnableHitTesting(): Bool return this.bEnableHitTesting;
	public extern var bShowDebug(get, never): Bool;
	public inline extern function get_bShowDebug(): Bool return this.bShowDebug;
	public extern var DebugSphereLineThickness(get, never): cpp.Float32;
	public inline extern function get_DebugSphereLineThickness(): cpp.Float32 return this.DebugSphereLineThickness;
	public extern var DebugLineThickness(get, never): cpp.Float32;
	public inline extern function get_DebugLineThickness(): cpp.Float32 return this.DebugLineThickness;
	public extern var DebugColor(get, never): LinearColor;
	public inline extern function get_DebugColor(): LinearColor return this.DebugColor;
}

@:forward
@:nativeGen
@:native("WidgetInteractionComp*")
abstract WidgetInteractionCompPtr(cpp.Star<WidgetInteractionComp>) from cpp.Star<WidgetInteractionComp> to cpp.Star<WidgetInteractionComp>{
	@:from
	public static extern inline function fromValue(v: WidgetInteractionComp): WidgetInteractionCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): WidgetInteractionComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}