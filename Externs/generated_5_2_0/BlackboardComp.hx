// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlackboardComponent")
@:include("BehaviorTree/BlackboardComponent.h")
@:structAccess
extern class BlackboardComp extends ActorComp {
	@:protected public var BrainComp: cpp.Star<BrainComp>;
	@:protected public var DefaultBlackboardAsset: cpp.Star<BlackboardData>;
	@:protected public var BlackboardAsset: cpp.Star<BlackboardData>;
	@:protected public var KeyInstances: TArray<cpp.Star<BlackboardKeyType>>;

	public function SetValueAsVector(KeyName: cpp.Reference<FName>, VectorValue: Vector): Void;
	public function SetValueAsString(KeyName: cpp.Reference<FName>, StringValue: FString): Void;
	public function SetValueAsRotator(KeyName: cpp.Reference<FName>, VectorValue: Rotator): Void;
	public function SetValueAsObject(KeyName: cpp.Reference<FName>, ObjectValue: cpp.Star<Object>): Void;
	public function SetValueAsName(KeyName: cpp.Reference<FName>, NameValue: FName): Void;
	public function SetValueAsInt(KeyName: cpp.Reference<FName>, IntValue: cpp.Int32): Void;
	public function SetValueAsFloat(KeyName: cpp.Reference<FName>, FloatValue: cpp.Float32): Void;
	public function SetValueAsEnum(KeyName: cpp.Reference<FName>, EnumValue: cpp.UInt8): Void;
	public function SetValueAsClass(KeyName: cpp.Reference<FName>, ClassValue: cpp.Star<Class>): Void;
	public function SetValueAsBool(KeyName: cpp.Reference<FName>, BoolValue: Bool): Void;
	public function IsVectorValueSet(KeyName: cpp.Reference<FName>): Bool;
	public function GetValueAsVector(KeyName: cpp.Reference<FName>): Vector;
	public function GetValueAsString(KeyName: cpp.Reference<FName>): FString;
	public function GetValueAsRotator(KeyName: cpp.Reference<FName>): Rotator;
	public function GetValueAsObject(KeyName: cpp.Reference<FName>): cpp.Star<Object>;
	public function GetValueAsName(KeyName: cpp.Reference<FName>): FName;
	public function GetValueAsInt(KeyName: cpp.Reference<FName>): cpp.Int32;
	public function GetValueAsFloat(KeyName: cpp.Reference<FName>): cpp.Float32;
	public function GetValueAsEnum(KeyName: cpp.Reference<FName>): cpp.UInt8;
	public function GetValueAsClass(KeyName: cpp.Reference<FName>): cpp.Star<Class>;
	public function GetValueAsBool(KeyName: cpp.Reference<FName>): Bool;
	public function GetRotationFromEntry(KeyName: cpp.Reference<FName>, ResultRotation: cpp.Reference<Rotator>): Bool;
	public function GetLocationFromEntry(KeyName: cpp.Reference<FName>, ResultLocation: cpp.Reference<Vector>): Bool;
	public function ClearValue(KeyName: cpp.Reference<FName>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsVectorValueSet, GetValueAsVector, GetValueAsString, GetValueAsRotator, GetValueAsObject,
	GetValueAsName, GetValueAsInt, GetValueAsFloat, GetValueAsEnum, GetValueAsClass,
	GetValueAsBool, GetRotationFromEntry, GetLocationFromEntry
)
@:nativeGen
abstract ConstBlackboardComp(BlackboardComp) from BlackboardComp {
}

@:forward
@:nativeGen
@:native("BlackboardComp*")
abstract BlackboardCompPtr(cpp.Star<BlackboardComp>) from cpp.Star<BlackboardComp> to cpp.Star<BlackboardComp>{
	@:from
	public static extern inline function fromValue(v: BlackboardComp): BlackboardCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): BlackboardComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}