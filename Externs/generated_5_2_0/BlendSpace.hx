// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlendSpace")
@:include("Animation/BlendSpace.h")
@:structAccess
extern class BlendSpace extends AnimationAsset {
	public var bContainsRotationOffsetMeshSpaceSamples: Bool;
	public var InterpolationParam: InterpolationParameter;
	public var TargetWeightInterpolationSpeedPerSec: cpp.Float32;
	public var bTargetWeightInterpolationEaseInOut: Bool;
	public var bAllowMeshSpaceBlending: Bool;
	public var bLoop: Bool;
	public var AnimLength: cpp.Float32;
	public var NotifyTriggerMode: TEnumAsByte<ENotifyTriggerMode>;
	public var bInterpolateUsingGrid: Bool;
	public var PreferredTriangulationDirection: EPreferredTriangulationDirection;
	@:protected public var PerBoneBlendMode: EBlendSpacePerBoneBlendMode;
	@:protected public var ManualPerBoneOverrides: TArray<PerBoneInterpolation>;
	@:protected public var PerBoneBlendProfile: BlendSpaceBlendProfile;
	@:protected public var SampleIndexWithMarkers: cpp.Int32;
	@:protected public var SampleData: TArray<BlendSample>;
	@:protected public var GridSamples: TArray<EditorElement>;
	@:protected public var BlendSpaceData: BlendSpaceData;
	@:protected public var BlendParameters: BlendParameter;
	@:protected public var AxisToScaleAnimation: TEnumAsByte<EBlendSpaceAxis>;
	@:protected public var DimensionIndices: TArray<cpp.Int32>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstBlendSpace(BlendSpace) from BlendSpace {
	public extern var bContainsRotationOffsetMeshSpaceSamples(get, never): Bool;
	public inline extern function get_bContainsRotationOffsetMeshSpaceSamples(): Bool return this.bContainsRotationOffsetMeshSpaceSamples;
	public extern var InterpolationParam(get, never): InterpolationParameter;
	public inline extern function get_InterpolationParam(): InterpolationParameter return this.InterpolationParam;
	public extern var TargetWeightInterpolationSpeedPerSec(get, never): cpp.Float32;
	public inline extern function get_TargetWeightInterpolationSpeedPerSec(): cpp.Float32 return this.TargetWeightInterpolationSpeedPerSec;
	public extern var bTargetWeightInterpolationEaseInOut(get, never): Bool;
	public inline extern function get_bTargetWeightInterpolationEaseInOut(): Bool return this.bTargetWeightInterpolationEaseInOut;
	public extern var bAllowMeshSpaceBlending(get, never): Bool;
	public inline extern function get_bAllowMeshSpaceBlending(): Bool return this.bAllowMeshSpaceBlending;
	public extern var bLoop(get, never): Bool;
	public inline extern function get_bLoop(): Bool return this.bLoop;
	public extern var AnimLength(get, never): cpp.Float32;
	public inline extern function get_AnimLength(): cpp.Float32 return this.AnimLength;
	public extern var NotifyTriggerMode(get, never): TEnumAsByte<ENotifyTriggerMode>;
	public inline extern function get_NotifyTriggerMode(): TEnumAsByte<ENotifyTriggerMode> return this.NotifyTriggerMode;
	public extern var bInterpolateUsingGrid(get, never): Bool;
	public inline extern function get_bInterpolateUsingGrid(): Bool return this.bInterpolateUsingGrid;
	public extern var PreferredTriangulationDirection(get, never): EPreferredTriangulationDirection;
	public inline extern function get_PreferredTriangulationDirection(): EPreferredTriangulationDirection return this.PreferredTriangulationDirection;
}

@:forward
@:nativeGen
@:native("BlendSpace*")
abstract BlendSpacePtr(cpp.Star<BlendSpace>) from cpp.Star<BlendSpace> to cpp.Star<BlendSpace>{
	@:from
	public static extern inline function fromValue(v: BlendSpace): BlendSpacePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): BlendSpace {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}