// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UQuartzClockHandle")
@:include("Quartz/AudioMixerClockHandle.h")
@:valueType
extern class QuartzClockHandle extends Object {
	public function UnsubscribeFromTimeDivision(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InQuantizationBoundary: EQuartzCommandQuantization, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function UnsubscribeFromAllTimeDivisions(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function SubscribeToQuantizationEvent(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InQuantizationBoundary: EQuartzCommandQuantization, OnQuantizationEvent: ucpp.Ref<HaxeDelegateProperty<(FName, EQuartzCommandQuantization, ucpp.num.Int32, ucpp.num.Int32, ucpp.num.Float32) -> Void>>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function SubscribeToAllQuantizationEvents(WorldContextObject: ucpp.Ptr<Object.ConstObject>, OnQuantizationEvent: ucpp.Ref<HaxeDelegateProperty<(FName, EQuartzCommandQuantization, ucpp.num.Int32, ucpp.num.Int32, ucpp.num.Float32) -> Void>>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function StopClock(WorldContextObject: ucpp.Ptr<Object.ConstObject>, CancelPendingEvents: Bool, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function StartOtherClock(WorldContextObject: ucpp.Ptr<Object.ConstObject>, OtherClockName: FName, InQuantizationBoundary: QuartzQuantizationBoundary, InDelegate: ucpp.Ref<HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>>): Void;
	public function StartClock(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function SetTicksPerSecond(WorldContextObject: ucpp.Ptr<Object.ConstObject>, QuantizationBoundary: ucpp.Ref<QuartzQuantizationBoundary>, Delegate: ucpp.Ref<HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>, TicksPerSecond: ucpp.num.Float32): Void;
	public function SetThirtySecondNotesPerMinute(WorldContextObject: ucpp.Ptr<Object.ConstObject>, QuantizationBoundary: ucpp.Ref<QuartzQuantizationBoundary>, Delegate: ucpp.Ref<HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>, ThirtySecondsNotesPerMinute: ucpp.num.Float32): Void;
	public function SetSecondsPerTick(WorldContextObject: ucpp.Ptr<Object.ConstObject>, QuantizationBoundary: ucpp.Ref<QuartzQuantizationBoundary>, Delegate: ucpp.Ref<HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>, SecondsPerTick: ucpp.num.Float32): Void;
	public function SetMillisecondsPerTick(WorldContextObject: ucpp.Ptr<Object.ConstObject>, QuantizationBoundary: ucpp.Ref<QuartzQuantizationBoundary>, Delegate: ucpp.Ref<HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>, MillisecondsPerTick: ucpp.num.Float32): Void;
	public function SetBeatsPerMinute(WorldContextObject: ucpp.Ptr<Object.ConstObject>, QuantizationBoundary: ucpp.Ref<QuartzQuantizationBoundary>, Delegate: ucpp.Ref<HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>, BeatsPerMinute: ucpp.num.Float32): Void;
	public function ResumeClock(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function ResetTransportQuantized(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InQuantizationBoundary: QuartzQuantizationBoundary, InDelegate: ucpp.Ref<HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function ResetTransport(WorldContextObject: ucpp.Ptr<Object.ConstObject>, InDelegate: ucpp.Ref<HaxeDelegateProperty<(EQuartzCommandDelegateSubType, FName) -> Void>>): Void;
	public function PauseClock(WorldContextObject: ucpp.Ptr<Object.ConstObject>, ClockHandle: ucpp.Ref<ucpp.Ptr<QuartzClockHandle>>): Void;
	public function IsClockRunning(WorldContextObject: ucpp.Ptr<Object.ConstObject>): Bool;
	public function GetTicksPerSecond(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetThirtySecondNotesPerMinute(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetSecondsPerTick(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetMillisecondsPerTick(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetEstimatedRunTime(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;
	public function GetDurationOfQuantizationTypeInSeconds(WorldContextObject: ucpp.Ptr<Object.ConstObject>, QuantizationType: ucpp.Ref<EQuartzCommandQuantization>, Multiplier: ucpp.num.Float32): ucpp.num.Float32;
	public function GetCurrentTimestamp(WorldContextObject: ucpp.Ptr<Object.ConstObject>): QuartzTransportTimeStamp;
	public function GetBeatsPerMinute(WorldContextObject: ucpp.Ptr<Object.ConstObject>): ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetTicksPerSecond, GetThirtySecondNotesPerMinute, GetSecondsPerTick, GetMillisecondsPerTick, GetBeatsPerMinute)
@:nativeGen
abstract ConstQuartzClockHandle(QuartzClockHandle) from QuartzClockHandle {
}

@:forward
@:nativeGen
@:native("QuartzClockHandle*")
abstract QuartzClockHandlePtr(ucpp.Ptr<QuartzClockHandle>) from ucpp.Ptr<QuartzClockHandle> to ucpp.Ptr<QuartzClockHandle>{
	@:from
	public static extern inline function fromValue(v: QuartzClockHandle): QuartzClockHandlePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): QuartzClockHandle {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}