// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPaperTileMapComponent")
@:include("PaperTileMapComponent.h")
@:structAccess
extern class PaperTileMapComp extends MeshComp {
	private var TileMapColor: LinearColor;
	private var UseSingleLayerIndex: cpp.Int32;
	private var bUseSingleLayer: Bool;
	public var TileMap: cpp.Star<PaperTileMap>;

	public function SetTileMapColor(NewColor: LinearColor): Void;
	public function SetTileMap(NewTileMap: cpp.Star<PaperTileMap>): Bool;
	public function SetTile(X: cpp.Int32, Y: cpp.Int32, Layer: cpp.Int32, NewValue: PaperTileInfo): Void;
	public function SetLayerColor(NewColor: LinearColor, Layer: cpp.Int32): Void;
	public function SetLayerCollision(Layer: cpp.Int32, bHasCollision: Bool, bOverrideThickness: Bool, CustomThickness: cpp.Float32, bOverrideOffset: Bool, CustomOffset: cpp.Float32, bRebuildCollision: Bool): Void;
	public function SetDefaultCollisionThickness(Thickness: cpp.Float32, bRebuildCollision: Bool): Void;
	public function ResizeMap(NewWidthInTiles: cpp.Int32, NewHeightInTiles: cpp.Int32): Void;
	public function RebuildCollision(): Void;
	public function OwnsTileMap(): Bool;
	public function MakeTileMapEditable(): Void;
	public function GetTilePolygon(TileX: cpp.Int32, TileY: cpp.Int32, Points: cpp.Reference<TArray<Vector>>, LayerIndex: cpp.Int32, bWorldSpace: Bool): Void;
	public function GetTileMapColor(): LinearColor;
	public function GetTileCornerPosition(TileX: cpp.Int32, TileY: cpp.Int32, LayerIndex: cpp.Int32, bWorldSpace: Bool): Vector;
	public function GetTileCenterPosition(TileX: cpp.Int32, TileY: cpp.Int32, LayerIndex: cpp.Int32, bWorldSpace: Bool): Vector;
	public function GetTile(X: cpp.Int32, Y: cpp.Int32, Layer: cpp.Int32): PaperTileInfo;
	public function GetMapSize(MapWidth: cpp.Reference<cpp.Int32>, MapHeight: cpp.Reference<cpp.Int32>, NumLayers: cpp.Reference<cpp.Int32>): Void;
	public function GetLayerColor(Layer: cpp.Int32): LinearColor;
	public function CreateNewTileMap(MapWidth: cpp.Int32, MapHeight: cpp.Int32, TileWidth: cpp.Int32, TileHeight: cpp.Int32, PixelsPerUnrealUnit: cpp.Float32, bCreateLayer: Bool): Void;
	public function AddNewLayer(): cpp.Star<PaperTileLayer>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(OwnsTileMap, GetTilePolygon, GetTileMapColor, GetTileCornerPosition, GetTileCenterPosition, GetTile, GetLayerColor)
@:nativeGen
abstract ConstPaperTileMapComp(PaperTileMapComp) from PaperTileMapComp {
	public extern var TileMap(get, never): cpp.Star<PaperTileMap.ConstPaperTileMap>;
	public inline extern function get_TileMap(): cpp.Star<PaperTileMap.ConstPaperTileMap> return this.TileMap;
}

@:forward
@:nativeGen
@:native("PaperTileMapComp*")
abstract PaperTileMapCompPtr(cpp.Star<PaperTileMapComp>) from cpp.Star<PaperTileMapComp> to cpp.Star<PaperTileMapComp>{
	@:from
	public static extern inline function fromValue(v: PaperTileMapComp): PaperTileMapCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PaperTileMapComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}