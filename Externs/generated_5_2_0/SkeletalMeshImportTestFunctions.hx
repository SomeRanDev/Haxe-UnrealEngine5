// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USkeletalMeshImportTestFunctions")
@:include("ImportTestFunctions/SkeletalMeshImportTestFunctions.h")
@:valueType
extern class SkeletalMeshImportTestFunctions extends ImportTestFunctionsBase {
	public function CheckVertexIndexPosition(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, VertexIndex: ucpp.num.Int32, ExpectedVertexPosition: ucpp.Ref<Vector>): InterchangeTestFunctionResult;
	public function CheckVertexIndexNormal(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, VertexIndex: ucpp.num.Int32, ExpectedVertexNormal: ucpp.Ref<Vector>): InterchangeTestFunctionResult;
	public function CheckUVChannelCount(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfUVChannels: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckTriangleCountInSection(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, SectionIndex: ucpp.num.Int32, ExpectedNumberOfTriangles: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckSkinnedVertexCountForBone(Mesh: ucpp.Ptr<SkeletalMesh>, BoneName: FString, bTestFirstAlternateProfile: Bool, ExpectedSkinnedVertexCount: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckSectionMaterialName(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, SectionIndex: ucpp.num.Int32, ExpectedMaterialName: FString): InterchangeTestFunctionResult;
	public function CheckSectionImportedMaterialSlotName(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, SectionIndex: ucpp.num.Int32, ExpectedImportedMaterialSlotName: FString): InterchangeTestFunctionResult;
	public function CheckSectionCount(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfSections: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckRenderVertexCount(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfRenderVertices: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckRenderTriangleCount(Mesh: ucpp.Ptr<SkeletalMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfRenderTriangles: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckMaterialSlotCount(Mesh: ucpp.Ptr<SkeletalMesh>, ExpectedNumberOfMaterialSlots: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckLodCount(Mesh: ucpp.Ptr<SkeletalMesh>, ExpectedNumberOfLods: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckImportedSkeletalMeshCount(Meshes: ucpp.Ref<TArray<ucpp.Ptr<SkeletalMesh>>>, ExpectedNumberOfImportedSkeletalMeshes: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckBonePosition(Mesh: ucpp.Ptr<SkeletalMesh>, BoneIndex: ucpp.num.Int32, ExpectedBonePosition: ucpp.Ref<Vector>): InterchangeTestFunctionResult;
	public function CheckBoneCount(Mesh: ucpp.Ptr<SkeletalMesh>, ExpectedNumberOfBones: ucpp.num.Int32): InterchangeTestFunctionResult;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstSkeletalMeshImportTestFunctions(SkeletalMeshImportTestFunctions) from SkeletalMeshImportTestFunctions {
}

@:forward
@:nativeGen
@:native("SkeletalMeshImportTestFunctions*")
abstract SkeletalMeshImportTestFunctionsPtr(ucpp.Ptr<SkeletalMeshImportTestFunctions>) from ucpp.Ptr<SkeletalMeshImportTestFunctions> to ucpp.Ptr<SkeletalMeshImportTestFunctions>{
	@:from
	public static extern inline function fromValue(v: SkeletalMeshImportTestFunctions): SkeletalMeshImportTestFunctionsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SkeletalMeshImportTestFunctions {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}