// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTestBTDecorator_Blueprint")
@:include("BehaviorTree/TestBTDecorator_Blueprint.h")
@:structAccess
extern class TestBTDecorator_Blueprint extends BTDecorator_BlueprintBase {
	public var BPConditionType: EBPConditionType;
	public var LogIndexBecomeRelevant: cpp.Int32;
	public var LogIndexCeaseRelevant: cpp.Int32;
	public var LogIndexCalculate: cpp.Int32;
	public var ObservingKeyName: FName;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstTestBTDecorator_Blueprint(TestBTDecorator_Blueprint) from TestBTDecorator_Blueprint {
	public extern var BPConditionType(get, never): EBPConditionType;
	public inline extern function get_BPConditionType(): EBPConditionType return this.BPConditionType;
	public extern var LogIndexBecomeRelevant(get, never): cpp.Int32;
	public inline extern function get_LogIndexBecomeRelevant(): cpp.Int32 return this.LogIndexBecomeRelevant;
	public extern var LogIndexCeaseRelevant(get, never): cpp.Int32;
	public inline extern function get_LogIndexCeaseRelevant(): cpp.Int32 return this.LogIndexCeaseRelevant;
	public extern var LogIndexCalculate(get, never): cpp.Int32;
	public inline extern function get_LogIndexCalculate(): cpp.Int32 return this.LogIndexCalculate;
	public extern var ObservingKeyName(get, never): FName;
	public inline extern function get_ObservingKeyName(): FName return this.ObservingKeyName;
}

@:forward
@:nativeGen
@:native("TestBTDecorator_Blueprint*")
abstract TestBTDecorator_BlueprintPtr(cpp.Star<TestBTDecorator_Blueprint>) from cpp.Star<TestBTDecorator_Blueprint> to cpp.Star<TestBTDecorator_Blueprint>{
	@:from
	public static extern inline function fromValue(v: TestBTDecorator_Blueprint): TestBTDecorator_BlueprintPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TestBTDecorator_Blueprint {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}