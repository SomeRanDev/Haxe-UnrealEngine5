// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UViewportWorldInteraction")
@:include("ViewportWorldInteraction.h")
@:structAccess
extern class ViewportWorldInteraction extends EditorWorldExtension {
	private var Interactors: TArray<cpp.Star<ViewportInteractor>>;
	private var ViewportTransformer: cpp.Star<ViewportTransformer>;
	private var TransformGizmoActor: cpp.Star<BaseTransformGizmo>;
	private var SnapGridActor: cpp.Star<Actor>;
	private var SnapGridMeshComponent: cpp.Star<StaticMeshComp>;
	private var SnapGridMID: cpp.Star<MaterialInstanceDynamic>;
	private var DefaultMouseCursorInteractor: cpp.Star<MouseCursorInteractor>;
	private var ActorsToExcludeFromHitTest: TArray<TWeakObjectPtr<Actor>>;
	private var AssetContainer: cpp.Star<ViewportInteractionAssetContainer>;

	public function SetWorldToMetersScale(NewWorldToMetersScale: cpp.Float32, bCompensateRoomWorldScale: Bool): Void;
	public function SetRoomTransformForNextFrame(NewRoomTransform: cpp.Reference<Transform>): Void;
	public function SetHeadTransform(NewHeadTransform: cpp.Reference<Transform>): Void;
	public function RemoveInteractor(Interactor: cpp.Star<ViewportInteractor>): Void;
	public function GetWorldScaleFactor(): cpp.Float32;
	public function GetTransformGizmoActor(): cpp.Star<BaseTransformGizmo>;
	public function GetRoomTransform(): Transform;
	public function GetRoomSpaceHeadTransform(): Transform;
	public function GetInteractors(): TArray<cpp.Star<ViewportInteractor>>;
	public function GetHeadTransform(): Transform;
	public function AddInteractor(Interactor: cpp.Star<ViewportInteractor>): Void;
	public function AddActorToExcludeFromHitTests(ActorToExcludeFromHitTests: cpp.Star<Actor>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetWorldScaleFactor, GetRoomTransform, GetRoomSpaceHeadTransform, GetInteractors, GetHeadTransform)
@:nativeGen
abstract ConstViewportWorldInteraction(ViewportWorldInteraction) from ViewportWorldInteraction {
}

@:forward
@:nativeGen
@:native("ViewportWorldInteraction*")
abstract ViewportWorldInteractionPtr(cpp.Star<ViewportWorldInteraction>) from cpp.Star<ViewportWorldInteraction> to cpp.Star<ViewportWorldInteraction>{
	@:from
	public static extern inline function fromValue(v: ViewportWorldInteraction): ViewportWorldInteractionPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ViewportWorldInteraction {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}