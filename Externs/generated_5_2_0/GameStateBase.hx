// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AGameStateBase")
@:include("GameFramework/GameStateBase.h")
@:structAccess
extern class GameStateBase extends Info {
	public var GameModeClass: TSubclassOf<GameModeBase>;
	public var AuthorityGameMode: cpp.Star<GameModeBase>;
	public var SpectatorClass: TSubclassOf<SpectatorPawn>;
	public var PlayerArray: TArray<cpp.Star<PlayerState>>;
	@:protected public var bReplicatedHasBegunPlay: Bool;
	@:protected public var ReplicatedWorldTimeSeconds: cpp.Float32;
	@:protected public var ReplicatedWorldTimeSecondsDouble: cpp.Float64;
	@:protected public var ServerWorldTimeSecondsDelta: cpp.Float32;
	@:protected public var ServerWorldTimeSecondsUpdateFrequency: cpp.Float32;

	@:protected public function OnRep_SpectatorClass(): Void;
	@:protected public function OnRep_ReplicatedWorldTimeSecondsDouble(): Void;
	@:protected public function OnRep_ReplicatedWorldTimeSeconds(): Void;
	@:protected public function OnRep_ReplicatedHasBegunPlay(): Void;
	@:protected public function OnRep_GameModeClass(): Void;
	public function HasMatchStarted(): Bool;
	public function HasMatchEnded(): Bool;
	public function HasBegunPlay(): Bool;
	public function GetServerWorldTimeSeconds(): cpp.Float64;
	public function GetPlayerStartTime(Controller: cpp.Star<Controller>): cpp.Float32;
	public function GetPlayerRespawnDelay(Controller: cpp.Star<Controller>): cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(HasMatchStarted, HasMatchEnded, HasBegunPlay, GetServerWorldTimeSeconds, GetPlayerStartTime, GetPlayerRespawnDelay)
@:nativeGen
abstract ConstGameStateBase(GameStateBase) from GameStateBase {
	public extern var GameModeClass(get, never): TSubclassOf<GameModeBase.ConstGameModeBase>;
	public inline extern function get_GameModeClass(): TSubclassOf<GameModeBase.ConstGameModeBase> return this.GameModeClass;
	public extern var AuthorityGameMode(get, never): cpp.Star<GameModeBase.ConstGameModeBase>;
	public inline extern function get_AuthorityGameMode(): cpp.Star<GameModeBase.ConstGameModeBase> return this.AuthorityGameMode;
	public extern var SpectatorClass(get, never): TSubclassOf<SpectatorPawn.ConstSpectatorPawn>;
	public inline extern function get_SpectatorClass(): TSubclassOf<SpectatorPawn.ConstSpectatorPawn> return this.SpectatorClass;
	public extern var PlayerArray(get, never): TArray<cpp.Star<PlayerState.ConstPlayerState>>;
	public inline extern function get_PlayerArray(): TArray<cpp.Star<PlayerState.ConstPlayerState>> return this.PlayerArray;
}

@:forward
@:nativeGen
@:native("GameStateBase*")
abstract GameStateBasePtr(cpp.Star<GameStateBase>) from cpp.Star<GameStateBase> to cpp.Star<GameStateBase>{
	@:from
	public static extern inline function fromValue(v: GameStateBase): GameStateBasePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GameStateBase {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}