// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovieSceneSequenceExtensions")
@:include("ExtensionLibraries/MovieSceneSequenceExtensions.h")
@:valueType
extern class MovieSceneSequenceExtensions extends BlueprintFunctionLibrary {
	public function SortMarkedFrames(Sequence: ucpp.Ptr<MovieSceneSequence>): Void;
	public function SetWorkRangeStart(InSequence: ucpp.Ptr<MovieSceneSequence>, StartTimeInSeconds: ucpp.num.Float32): Void;
	public function SetWorkRangeEnd(InSequence: ucpp.Ptr<MovieSceneSequence>, EndTimeInSeconds: ucpp.num.Float32): Void;
	public function SetViewRangeStart(InSequence: ucpp.Ptr<MovieSceneSequence>, StartTimeInSeconds: ucpp.num.Float32): Void;
	public function SetViewRangeEnd(InSequence: ucpp.Ptr<MovieSceneSequence>, EndTimeInSeconds: ucpp.num.Float32): Void;
	public function SetTickResolutionDirectly(Sequence: ucpp.Ptr<MovieSceneSequence>, TickResolution: FrameRate): Void;
	public function SetTickResolution(Sequence: ucpp.Ptr<MovieSceneSequence>, TickResolution: FrameRate): Void;
	public function SetReadOnly(Sequence: ucpp.Ptr<MovieSceneSequence>, bInReadOnly: Bool): Void;
	public function SetPlaybackStartSeconds(Sequence: ucpp.Ptr<MovieSceneSequence>, StartTime: ucpp.num.Float32): Void;
	public function SetPlaybackStart(Sequence: ucpp.Ptr<MovieSceneSequence>, StartFrame: ucpp.num.Int32): Void;
	public function SetPlaybackEndSeconds(Sequence: ucpp.Ptr<MovieSceneSequence>, EndTime: ucpp.num.Float32): Void;
	public function SetPlaybackEnd(Sequence: ucpp.Ptr<MovieSceneSequence>, EndFrame: ucpp.num.Int32): Void;
	public function SetMarkedFrame(Sequence: ucpp.Ptr<MovieSceneSequence>, InMarkIndex: ucpp.num.Int32, InFrameNumber: FrameNumber): Void;
	public function SetEvaluationType(InSequence: ucpp.Ptr<MovieSceneSequence>, InEvaluationType: EMovieSceneEvaluationType): Void;
	public function SetDisplayRate(Sequence: ucpp.Ptr<MovieSceneSequence>, DisplayRate: FrameRate): Void;
	public function SetClockSource(InSequence: ucpp.Ptr<MovieSceneSequence>, InClockSource: EUpdateClockSource): Void;
	public function ResolveBindingID(RootSequence: ucpp.Ptr<MovieSceneSequence>, InObjectBindingID: MovieSceneObjectBindingID): MovieSceneBindingProxy;
	public function RemoveTrack(Sequence: ucpp.Ptr<MovieSceneSequence>, Track: ucpp.Ptr<MovieSceneTrack>): Bool;
	public function RemoveRootFolderFromSequence(Sequence: ucpp.Ptr<MovieSceneSequence>, Folder: ucpp.Ptr<MovieSceneFolder>): Void;
	public function RemoveMasterTrack(Sequence: ucpp.Ptr<MovieSceneSequence>, Track: ucpp.Ptr<MovieSceneTrack>): Bool;
	public function MakeRangeSeconds(Sequence: ucpp.Ptr<MovieSceneSequence>, StartTime: ucpp.num.Float32, Duration: ucpp.num.Float32): SequencerScriptingRange;
	public function MakeRange(Sequence: ucpp.Ptr<MovieSceneSequence>, StartFrame: ucpp.num.Int32, Duration: ucpp.num.Int32): SequencerScriptingRange;
	public function MakeBindingID(Sequence: ucpp.Ptr<MovieSceneSequence>, InBinding: ucpp.Ref<MovieSceneBindingProxy>, Space: EMovieSceneObjectBindingSpace): MovieSceneObjectBindingID;
	public function LocateBoundObjects(Sequence: ucpp.Ptr<MovieSceneSequence>, InBinding: ucpp.Ref<MovieSceneBindingProxy>, Context: ucpp.Ptr<Object>): TArray<ucpp.Ptr<Object>>;
	public function IsReadOnly(Sequence: ucpp.Ptr<MovieSceneSequence>): Bool;
	public function GetWorkRangeStart(InSequence: ucpp.Ptr<MovieSceneSequence>): ucpp.num.Float32;
	public function GetWorkRangeEnd(InSequence: ucpp.Ptr<MovieSceneSequence>): ucpp.num.Float32;
	public function GetViewRangeStart(InSequence: ucpp.Ptr<MovieSceneSequence>): ucpp.num.Float32;
	public function GetViewRangeEnd(InSequence: ucpp.Ptr<MovieSceneSequence>): ucpp.num.Float32;
	public function GetTracks(Sequence: ucpp.Ptr<MovieSceneSequence>): TArray<ucpp.Ptr<MovieSceneTrack>>;
	public function GetTimecodeSource(Sequence: ucpp.Ptr<MovieSceneSequence>): Timecode;
	public function GetTickResolution(Sequence: ucpp.Ptr<MovieSceneSequence>): FrameRate;
	public function GetSpawnables(Sequence: ucpp.Ptr<MovieSceneSequence>): TArray<MovieSceneBindingProxy>;
	public function GetRootFoldersInSequence(Sequence: ucpp.Ptr<MovieSceneSequence>): TArray<ucpp.Ptr<MovieSceneFolder>>;
	public function GetPossessables(Sequence: ucpp.Ptr<MovieSceneSequence>): TArray<MovieSceneBindingProxy>;
	public function GetPortableBindingID(RootSequence: ucpp.Ptr<MovieSceneSequence>, DestinationSequence: ucpp.Ptr<MovieSceneSequence>, InBinding: ucpp.Ref<MovieSceneBindingProxy>): MovieSceneObjectBindingID;
	public function GetPlaybackStartSeconds(Sequence: ucpp.Ptr<MovieSceneSequence>): ucpp.num.Float32;
	public function GetPlaybackStart(Sequence: ucpp.Ptr<MovieSceneSequence>): ucpp.num.Int32;
	public function GetPlaybackRange(Sequence: ucpp.Ptr<MovieSceneSequence>): SequencerScriptingRange;
	public function GetPlaybackEndSeconds(Sequence: ucpp.Ptr<MovieSceneSequence>): ucpp.num.Float32;
	public function GetPlaybackEnd(Sequence: ucpp.Ptr<MovieSceneSequence>): ucpp.num.Int32;
	public function GetMovieScene(Sequence: ucpp.Ptr<MovieSceneSequence>): ucpp.Ptr<MovieScene>;
	public function GetMasterTracks(Sequence: ucpp.Ptr<MovieSceneSequence>): TArray<ucpp.Ptr<MovieSceneTrack>>;
	public function GetMarkedFrames(Sequence: ucpp.Ptr<MovieSceneSequence>): TArray<MovieSceneMarkedFrame>;
	public function GetEvaluationType(InSequence: ucpp.Ptr<MovieSceneSequence>): EMovieSceneEvaluationType;
	public function GetDisplayRate(Sequence: ucpp.Ptr<MovieSceneSequence>): FrameRate;
	public function GetClockSource(InSequence: ucpp.Ptr<MovieSceneSequence>): EUpdateClockSource;
	public function GetBindings(Sequence: ucpp.Ptr<MovieSceneSequence>): TArray<MovieSceneBindingProxy>;
	public function GetBindingID(InBinding: ucpp.Ref<MovieSceneBindingProxy>): MovieSceneObjectBindingID;
	public function FindTracksByType(Sequence: ucpp.Ptr<MovieSceneSequence>, TrackType: TSubclassOf<MovieSceneTrack>): TArray<ucpp.Ptr<MovieSceneTrack>>;
	public function FindTracksByExactType(Sequence: ucpp.Ptr<MovieSceneSequence>, TrackType: TSubclassOf<MovieSceneTrack>): TArray<ucpp.Ptr<MovieSceneTrack>>;
	public function FindNextMarkedFrame(Sequence: ucpp.Ptr<MovieSceneSequence>, InFrameNumber: FrameNumber, bForward: Bool): ucpp.num.Int32;
	public function FindMasterTracksByType(Sequence: ucpp.Ptr<MovieSceneSequence>, TrackType: TSubclassOf<MovieSceneTrack>): TArray<ucpp.Ptr<MovieSceneTrack>>;
	public function FindMasterTracksByExactType(Sequence: ucpp.Ptr<MovieSceneSequence>, TrackType: TSubclassOf<MovieSceneTrack>): TArray<ucpp.Ptr<MovieSceneTrack>>;
	public function FindMarkedFrameByLabel(Sequence: ucpp.Ptr<MovieSceneSequence>, InLabel: FString): ucpp.num.Int32;
	public function FindMarkedFrameByFrameNumber(Sequence: ucpp.Ptr<MovieSceneSequence>, InFrameNumber: FrameNumber): ucpp.num.Int32;
	public function FindBindingByName(Sequence: ucpp.Ptr<MovieSceneSequence>, Name: FString): MovieSceneBindingProxy;
	public function FindBindingById(Sequence: ucpp.Ptr<MovieSceneSequence>, BindingId: Guid): MovieSceneBindingProxy;
	public function DeleteMarkedFrames(Sequence: ucpp.Ptr<MovieSceneSequence>): Void;
	public function DeleteMarkedFrame(Sequence: ucpp.Ptr<MovieSceneSequence>, DeleteIndex: ucpp.num.Int32): Void;
	public function AddTrack(Sequence: ucpp.Ptr<MovieSceneSequence>, TrackType: TSubclassOf<MovieSceneTrack>): ucpp.Ptr<MovieSceneTrack>;
	public function AddSpawnableFromInstance(Sequence: ucpp.Ptr<MovieSceneSequence>, ObjectToSpawn: ucpp.Ptr<Object>): MovieSceneBindingProxy;
	public function AddSpawnableFromClass(Sequence: ucpp.Ptr<MovieSceneSequence>, ClassToSpawn: ucpp.Ptr<Class>): MovieSceneBindingProxy;
	public function AddRootFolderToSequence(Sequence: ucpp.Ptr<MovieSceneSequence>, NewFolderName: FString): ucpp.Ptr<MovieSceneFolder>;
	public function AddPossessable(Sequence: ucpp.Ptr<MovieSceneSequence>, ObjectToPossess: ucpp.Ptr<Object>): MovieSceneBindingProxy;
	public function AddMasterTrack(Sequence: ucpp.Ptr<MovieSceneSequence>, TrackType: TSubclassOf<MovieSceneTrack>): ucpp.Ptr<MovieSceneTrack>;
	public function AddMarkedFrame(Sequence: ucpp.Ptr<MovieSceneSequence>, InMarkedFrame: ucpp.Ref<MovieSceneMarkedFrame>): ucpp.num.Int32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstMovieSceneSequenceExtensions(MovieSceneSequenceExtensions) from MovieSceneSequenceExtensions {
}

@:forward
@:nativeGen
@:native("MovieSceneSequenceExtensions*")
abstract MovieSceneSequenceExtensionsPtr(ucpp.Ptr<MovieSceneSequenceExtensions>) from ucpp.Ptr<MovieSceneSequenceExtensions> to ucpp.Ptr<MovieSceneSequenceExtensions>{
	@:from
	public static extern inline function fromValue(v: MovieSceneSequenceExtensions): MovieSceneSequenceExtensionsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MovieSceneSequenceExtensions {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}