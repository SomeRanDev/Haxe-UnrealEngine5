// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UARPin")
@:include("ARPin.h")
@:valueType
extern class ARPin extends Object {
	private var TrackedGeometry: ucpp.Ptr<ARTrackedGeometry>;
	private var PinnedComponent: ucpp.Ptr<SceneComp>;
	private var LocalToTrackingTransform: Transform;
	private var LocalToAlignedTrackingTransform: Transform;
	private var TrackingState: EARTrackingState;
	private var OnARTrackingStateChanged: HaxeMulticastSparseDelegateProperty<(EARTrackingState) -> Void>;
	private var OnARTransformUpdated: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<Transform>) -> Void>;

	public function GetTrackingState(): EARTrackingState;
	public function GetTrackedGeometry(): ucpp.Ptr<ARTrackedGeometry>;
	public function GetPinnedComponent(): ucpp.Ptr<SceneComp>;
	public function GetLocalToWorldTransform(): Transform;
	public function GetLocalToTrackingTransform(): Transform;
	public function GetDebugName(): FName;
	public function DebugDraw(World: ucpp.Ptr<World>, Color: ucpp.Ref<LinearColor>, Scale: ucpp.num.Float32, PersistForSeconds: ucpp.num.Float32): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetTrackingState, GetTrackedGeometry, GetPinnedComponent, GetLocalToWorldTransform, GetLocalToTrackingTransform, GetDebugName, DebugDraw)
@:nativeGen
abstract ConstARPin(ARPin) from ARPin {
}

@:forward
@:nativeGen
@:native("ARPin*")
abstract ARPinPtr(ucpp.Ptr<ARPin>) from ucpp.Ptr<ARPin> to ucpp.Ptr<ARPin>{
	@:from
	public static extern inline function fromValue(v: ARPin): ARPinPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ARPin {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}