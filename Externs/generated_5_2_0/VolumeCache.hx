// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UVolumeCache")
@:include("VolumeCache.h")
@:valueType
extern class VolumeCache extends Object {
	public var FilePath: FString;
	public var CacheType: EVolumeCacheType;
	public var Resolution: IntVector;
	public var FrameRangeStart: ucpp.num.Int32;
	public var FrameRangeEnd: ucpp.num.Int32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstVolumeCache(VolumeCache) from VolumeCache {
	public extern var FilePath(get, never): FString;
	public inline extern function get_FilePath(): FString return this.FilePath;
	public extern var CacheType(get, never): EVolumeCacheType;
	public inline extern function get_CacheType(): EVolumeCacheType return this.CacheType;
	public extern var Resolution(get, never): IntVector;
	public inline extern function get_Resolution(): IntVector return this.Resolution;
	public extern var FrameRangeStart(get, never): ucpp.num.Int32;
	public inline extern function get_FrameRangeStart(): ucpp.num.Int32 return this.FrameRangeStart;
	public extern var FrameRangeEnd(get, never): ucpp.num.Int32;
	public inline extern function get_FrameRangeEnd(): ucpp.num.Int32 return this.FrameRangeEnd;
}

@:forward
@:nativeGen
@:native("VolumeCache*")
abstract VolumeCachePtr(ucpp.Ptr<VolumeCache>) from ucpp.Ptr<VolumeCache> to ucpp.Ptr<VolumeCache>{
	@:from
	public static extern inline function fromValue(v: VolumeCache): VolumeCachePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): VolumeCache {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}