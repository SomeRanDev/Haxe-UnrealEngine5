// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEnvQueryManager")
@:include("EnvironmentQuery/EnvQueryManager.h")
@:valueType
extern class EnvQueryManager extends AISubsystem {
	@:protected public var InstanceCache: TArray<EnvQueryInstanceCache>;
	@:protected public var LocalContexts: TArray<ucpp.Ptr<EnvQueryContext>>;
	@:protected public var GCShieldedWrappers: TArray<ucpp.Ptr<EnvQueryInstanceBlueprintWrapper>>;
	@:protected public var MaxAllowedTestingTime: ucpp.num.Float32;
	@:protected public var bTestQueriesUsingBreadth: Bool;
	@:protected public var QueryCountWarningThreshold: ucpp.num.Int32;
	@:protected public var QueryCountWarningInterval: ucpp.num.Float64;
	@:protected public var ExecutionTimeWarningSeconds: ucpp.num.Float64;
	@:protected public var HandlingResultTimeWarningSeconds: ucpp.num.Float64;
	@:protected public var GenerationTimeWarningSeconds: ucpp.num.Float64;

	public function RunEQSQuery(WorldContextObject: ucpp.Ptr<Object>, QueryTemplate: ucpp.Ptr<EnvQuery>, Querier: ucpp.Ptr<Object>, RunMode: TEnumAsByte<EEnvQueryRunMode>, WrapperClass: TSubclassOf<EnvQueryInstanceBlueprintWrapper>): ucpp.Ptr<EnvQueryInstanceBlueprintWrapper>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstEnvQueryManager(EnvQueryManager) from EnvQueryManager {
}

@:forward
@:nativeGen
@:native("EnvQueryManager*")
abstract EnvQueryManagerPtr(ucpp.Ptr<EnvQueryManager>) from ucpp.Ptr<EnvQueryManager> to ucpp.Ptr<EnvQueryManager>{
	@:from
	public static extern inline function fromValue(v: EnvQueryManager): EnvQueryManagerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EnvQueryManager {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}