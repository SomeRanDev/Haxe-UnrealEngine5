// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAchievementWriteCallbackProxy")
@:include("AchievementWriteCallbackProxy.h")
@:valueType
extern class AchievementWriteCallbackProxy extends OnlineBlueprintCallProxyBase {
	public var OnSuccess: HaxeMulticastSparseDelegateProperty<(FName, ucpp.num.Float32, ucpp.num.Int32) -> Void>;
	public var OnFailure: HaxeMulticastSparseDelegateProperty<(FName, ucpp.num.Float32, ucpp.num.Int32) -> Void>;

	public function WriteAchievementProgress(WorldContextObject: ucpp.Ptr<Object>, PlayerController: ucpp.Ptr<PlayerController>, AchievementName: FName, Progress: ucpp.num.Float32, UserTag: ucpp.num.Int32): ucpp.Ptr<AchievementWriteCallbackProxy>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstAchievementWriteCallbackProxy(AchievementWriteCallbackProxy) from AchievementWriteCallbackProxy {
	public extern var OnSuccess(get, never): HaxeMulticastSparseDelegateProperty<(FName, ucpp.num.Float32, ucpp.num.Int32) -> Void>;
	public inline extern function get_OnSuccess(): HaxeMulticastSparseDelegateProperty<(FName, ucpp.num.Float32, ucpp.num.Int32) -> Void> return this.OnSuccess;
	public extern var OnFailure(get, never): HaxeMulticastSparseDelegateProperty<(FName, ucpp.num.Float32, ucpp.num.Int32) -> Void>;
	public inline extern function get_OnFailure(): HaxeMulticastSparseDelegateProperty<(FName, ucpp.num.Float32, ucpp.num.Int32) -> Void> return this.OnFailure;
}

@:forward
@:nativeGen
@:native("AchievementWriteCallbackProxy*")
abstract AchievementWriteCallbackProxyPtr(ucpp.Ptr<AchievementWriteCallbackProxy>) from ucpp.Ptr<AchievementWriteCallbackProxy> to ucpp.Ptr<AchievementWriteCallbackProxy>{
	@:from
	public static extern inline function fromValue(v: AchievementWriteCallbackProxy): AchievementWriteCallbackProxyPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AchievementWriteCallbackProxy {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}