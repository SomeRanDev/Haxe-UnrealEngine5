// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeMeshFactoryNode")
@:include("InterchangeMeshFactoryNode.h")
@:structAccess
extern class InterchangeMeshFactoryNode extends InterchangeFactoryBaseNode {
	public function SetSlotMaterialDependencyUid(SlotName: FString, MaterialDependencyUid: FString): Bool;
	public function SetCustomVertexColorReplace(AttributeValue: cpp.Reference<Bool>): Bool;
	public function SetCustomVertexColorOverride(AttributeValue: cpp.Reference<Color>): Bool;
	public function SetCustomVertexColorIgnore(AttributeValue: cpp.Reference<Bool>): Bool;
	public function SetCustomUseMikkTSpace(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomUseHighPrecisionTangentBasis(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomUseFullPrecisionUVs(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomUseBackwardsCompatibleF16TruncUVs(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomRemoveDegenerates(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomRecomputeTangents(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomRecomputeNormals(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomComputeWeightedNormals(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function RemoveSlotMaterialDependencyUid(SlotName: FString): Bool;
	public function RemoveLodDataUniqueId(LodDataUniqueId: FString): Bool;
	public function GetSlotMaterialDependencyUid(SlotName: FString, OutMaterialDependency: cpp.Reference<FString>): Bool;
	public function GetSlotMaterialDependencies(OutMaterialDependencies: cpp.Reference<TMap<FString, FString>>): Void;
	public function GetLodDataUniqueIds(OutLodDataUniqueIds: cpp.Reference<TArray<FString>>): Void;
	public function GetLodDataCount(): cpp.Int32;
	public function GetCustomVertexColorReplace(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomVertexColorOverride(AttributeValue: cpp.Reference<Color>): Bool;
	public function GetCustomVertexColorIgnore(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomUseMikkTSpace(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomUseHighPrecisionTangentBasis(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomUseFullPrecisionUVs(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomUseBackwardsCompatibleF16TruncUVs(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomRemoveDegenerates(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomRecomputeTangents(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomRecomputeNormals(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomComputeWeightedNormals(AttributeValue: cpp.Reference<Bool>): Bool;
	public function AddLodDataUniqueId(LodDataUniqueId: FString): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	GetSlotMaterialDependencyUid, GetSlotMaterialDependencies, GetLodDataUniqueIds, GetLodDataCount, GetCustomVertexColorReplace,
	GetCustomVertexColorOverride, GetCustomVertexColorIgnore, GetCustomUseMikkTSpace, GetCustomUseHighPrecisionTangentBasis, GetCustomUseFullPrecisionUVs,
	GetCustomUseBackwardsCompatibleF16TruncUVs, GetCustomRemoveDegenerates, GetCustomRecomputeTangents, GetCustomRecomputeNormals, GetCustomComputeWeightedNormals
)
@:nativeGen
abstract ConstInterchangeMeshFactoryNode(InterchangeMeshFactoryNode) from InterchangeMeshFactoryNode {
}

@:forward
@:nativeGen
@:native("InterchangeMeshFactoryNode*")
abstract InterchangeMeshFactoryNodePtr(cpp.Star<InterchangeMeshFactoryNode>) from cpp.Star<InterchangeMeshFactoryNode> to cpp.Star<InterchangeMeshFactoryNode>{
	@:from
	public static extern inline function fromValue(v: InterchangeMeshFactoryNode): InterchangeMeshFactoryNodePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeMeshFactoryNode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}