// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGizmoCircleComponent")
@:include("BaseGizmos/GizmoCircleComponent.h")
@:valueType
extern class GizmoCircleComp extends GizmoBaseComp {
	public var Normal: Vector;
	public var Radius: ucpp.num.Float32;
	public var Thickness: ucpp.num.Float32;
	public var NumSides: ucpp.num.Int32;
	public var bViewAligned: Bool;
	public var bDrawFullCircle: Bool;
	public var bOnlyAllowFrontFacingHits: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstGizmoCircleComp(GizmoCircleComp) from GizmoCircleComp {
	public extern var Normal(get, never): Vector;
	public inline extern function get_Normal(): Vector return this.Normal;
	public extern var Radius(get, never): ucpp.num.Float32;
	public inline extern function get_Radius(): ucpp.num.Float32 return this.Radius;
	public extern var Thickness(get, never): ucpp.num.Float32;
	public inline extern function get_Thickness(): ucpp.num.Float32 return this.Thickness;
	public extern var NumSides(get, never): ucpp.num.Int32;
	public inline extern function get_NumSides(): ucpp.num.Int32 return this.NumSides;
	public extern var bViewAligned(get, never): Bool;
	public inline extern function get_bViewAligned(): Bool return this.bViewAligned;
	public extern var bDrawFullCircle(get, never): Bool;
	public inline extern function get_bDrawFullCircle(): Bool return this.bDrawFullCircle;
	public extern var bOnlyAllowFrontFacingHits(get, never): Bool;
	public inline extern function get_bOnlyAllowFrontFacingHits(): Bool return this.bOnlyAllowFrontFacingHits;
}

@:forward
@:nativeGen
@:native("GizmoCircleComp*")
abstract GizmoCircleCompPtr(ucpp.Ptr<GizmoCircleComp>) from ucpp.Ptr<GizmoCircleComp> to ucpp.Ptr<GizmoCircleComp>{
	@:from
	public static extern inline function fromValue(v: GizmoCircleComp): GizmoCircleCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GizmoCircleComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}