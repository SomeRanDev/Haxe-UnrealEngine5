// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UConstraintsScriptingLibrary")
@:include("ConstraintsScripting.h")
@:structAccess
extern class ConstraintsScriptingLibrary extends BlueprintFunctionLibrary {
	public function RemoveThisConstraint(InWorld: cpp.Star<World>, InTickableConstraint: cpp.Star<TickableConstraint>): Bool;
	public function RemoveConstraint(InWorld: cpp.Star<World>, InIndex: cpp.Int32): Bool;
	public function GetManager(InWorld: cpp.Star<World>): cpp.Star<ConstraintsManager>;
	public function GetConstraintsArray(InWorld: cpp.Star<World>): TArray<cpp.Star<TickableConstraint>>;
	public function CreateTransformableHandle(InWorld: cpp.Star<World>, InObject: cpp.Star<Object>, InAttachmentName: cpp.Reference<FName>): cpp.Star<TransformableHandle>;
	public function CreateTransformableComponentHandle(InWorld: cpp.Star<World>, InSceneComponent: cpp.Star<SceneComp>, InSocketName: cpp.Reference<FName>): cpp.Star<TransformableComponentHandle>;
	public function CreateFromType(InWorld: cpp.Star<World>, InType: ETransformConstraintType): cpp.Star<TickableTransformConstraint>;
	public function AddConstraint(InWorld: cpp.Star<World>, InParentHandle: cpp.Star<TransformableHandle>, InChildHandle: cpp.Star<TransformableHandle>, InConstraint: cpp.Star<TickableTransformConstraint>, bMaintainOffset: Bool): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstConstraintsScriptingLibrary(ConstraintsScriptingLibrary) from ConstraintsScriptingLibrary {
}

@:forward
@:nativeGen
@:native("ConstraintsScriptingLibrary*")
abstract ConstraintsScriptingLibraryPtr(cpp.Star<ConstraintsScriptingLibrary>) from cpp.Star<ConstraintsScriptingLibrary> to cpp.Star<ConstraintsScriptingLibrary>{
	@:from
	public static extern inline function fromValue(v: ConstraintsScriptingLibrary): ConstraintsScriptingLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ConstraintsScriptingLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}