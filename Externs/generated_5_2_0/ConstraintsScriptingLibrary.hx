// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UConstraintsScriptingLibrary")
@:include("ConstraintsScripting.h")
@:valueType
extern class ConstraintsScriptingLibrary extends BlueprintFunctionLibrary {
	public function RemoveThisConstraint(InWorld: ucpp.Ptr<World>, InTickableConstraint: ucpp.Ptr<TickableConstraint>): Bool;
	public function RemoveConstraint(InWorld: ucpp.Ptr<World>, InIndex: ucpp.num.Int32): Bool;
	public function GetManager(InWorld: ucpp.Ptr<World>): ucpp.Ptr<ConstraintsManager>;
	public function GetConstraintsArray(InWorld: ucpp.Ptr<World>): TArray<ucpp.Ptr<TickableConstraint>>;
	public function CreateTransformableHandle(InWorld: ucpp.Ptr<World>, InObject: ucpp.Ptr<Object>, InAttachmentName: ucpp.Ref<FName>): ucpp.Ptr<TransformableHandle>;
	public function CreateTransformableComponentHandle(InWorld: ucpp.Ptr<World>, InSceneComponent: ucpp.Ptr<SceneComp>, InSocketName: ucpp.Ref<FName>): ucpp.Ptr<TransformableComponentHandle>;
	public function CreateFromType(InWorld: ucpp.Ptr<World>, InType: ETransformConstraintType): ucpp.Ptr<TickableTransformConstraint>;
	public function AddConstraint(InWorld: ucpp.Ptr<World>, InParentHandle: ucpp.Ptr<TransformableHandle>, InChildHandle: ucpp.Ptr<TransformableHandle>, InConstraint: ucpp.Ptr<TickableTransformConstraint>, bMaintainOffset: Bool): Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstConstraintsScriptingLibrary(ConstraintsScriptingLibrary) from ConstraintsScriptingLibrary {
}

@:forward
@:nativeGen
@:native("ConstraintsScriptingLibrary*")
abstract ConstraintsScriptingLibraryPtr(ucpp.Ptr<ConstraintsScriptingLibrary>) from ucpp.Ptr<ConstraintsScriptingLibrary> to ucpp.Ptr<ConstraintsScriptingLibrary>{
	@:from
	public static extern inline function fromValue(v: ConstraintsScriptingLibrary): ConstraintsScriptingLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ConstraintsScriptingLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}