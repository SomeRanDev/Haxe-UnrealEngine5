// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USplineComponent")
@:include("Components/SplineComponent.h")
@:valueType
extern class SplineComp extends PrimitiveComp {
	public var SplineCurves: SplineCurves;
	public var ReparamStepsPerSegment: ucpp.num.Int32;
	public var Duration: ucpp.num.Float32;
	public var bStationaryEndpoints: Bool;
	public var bSplineHasBeenEdited: Bool;
	public var bModifiedByConstructionScript: Bool;
	public var bInputSplinePointsToConstructionScript: Bool;
	public var bDrawDebug: Bool;
	private var bClosedLoop: Bool;
	private var bLoopPositionOverride: Bool;
	private var LoopPosition: ucpp.num.Float32;
	public var DefaultUpVector: Vector;

	public function UpdateSpline(): Void;
	public function SetWorldLocationAtSplinePoint(PointIndex: ucpp.num.Int32, InLocation: ucpp.Ref<Vector>): Void;
	public function SetUpVectorAtSplinePoint(PointIndex: ucpp.num.Int32, InUpVector: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUpdateSpline: Bool): Void;
	public function SetUnselectedSplineSegmentColor(SegmentColor: ucpp.Ref<LinearColor>): Void;
	public function SetTangentsAtSplinePoint(PointIndex: ucpp.num.Int32, InArriveTangent: ucpp.Ref<Vector>, InLeaveTangent: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUpdateSpline: Bool): Void;
	public function SetTangentColor(TangentColor: ucpp.Ref<LinearColor>): Void;
	public function SetTangentAtSplinePoint(PointIndex: ucpp.num.Int32, InTangent: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUpdateSpline: Bool): Void;
	public function SetSplineWorldPoints(Points: ucpp.Ref<TArray<Vector>>): Void;
	public function SetSplinePointType(PointIndex: ucpp.num.Int32, Type: TEnumAsByte<ESplinePointType>, bUpdateSpline: Bool): Void;
	public function SetSplinePoints(Points: ucpp.Ref<TArray<Vector>>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUpdateSpline: Bool): Void;
	public function SetSplineLocalPoints(Points: ucpp.Ref<TArray<Vector>>): Void;
	public function SetSelectedSplineSegmentColor(SegmentColor: ucpp.Ref<LinearColor>): Void;
	public function SetScaleAtSplinePoint(PointIndex: ucpp.num.Int32, InScaleVector: ucpp.Ref<Vector>, bUpdateSpline: Bool): Void;
	public function SetRotationAtSplinePoint(PointIndex: ucpp.num.Int32, InRotation: ucpp.Ref<Rotator>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUpdateSpline: Bool): Void;
	public function SetLocationAtSplinePoint(PointIndex: ucpp.num.Int32, InLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUpdateSpline: Bool): Void;
	public function SetDrawDebug(bShow: Bool): Void;
	public function SetDefaultUpVector(UpVector: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Void;
	public function SetClosedLoopAtPosition(bInClosedLoop: Bool, Key: ucpp.num.Float32, bUpdateSpline: Bool): Void;
	public function SetClosedLoop(bInClosedLoop: Bool, bUpdateSpline: Bool): Void;
	public function RemoveSplinePoint(Index: ucpp.num.Int32, bUpdateSpline: Bool): Void;
	public function IsClosedLoop(): Bool;
	public function GetWorldTangentAtDistanceAlongSpline(Distance: ucpp.num.Float32): Vector;
	public function GetWorldRotationAtTime(Time: ucpp.num.Float32, bUseConstantVelocity: Bool): Rotator;
	public function GetWorldRotationAtDistanceAlongSpline(Distance: ucpp.num.Float32): Rotator;
	public function GetWorldLocationAtTime(Time: ucpp.num.Float32, bUseConstantVelocity: Bool): Vector;
	public function GetWorldLocationAtSplinePoint(PointIndex: ucpp.num.Int32): Vector;
	public function GetWorldLocationAtDistanceAlongSpline(Distance: ucpp.num.Float32): Vector;
	public function GetWorldDirectionAtTime(Time: ucpp.num.Float32, bUseConstantVelocity: Bool): Vector;
	public function GetWorldDirectionAtDistanceAlongSpline(Distance: ucpp.num.Float32): Vector;
	public function GetVectorPropertyAtSplinePoint(Index: ucpp.num.Int32, PropertyName: FName): Vector;
	public function GetVectorPropertyAtSplineInputKey(InKey: ucpp.num.Float32, PropertyName: FName): Vector;
	public function GetUpVectorAtTime(Time: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseConstantVelocity: Bool): Vector;
	public function GetUpVectorAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetUpVectorAtSplineInputKey(InKey: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetUpVectorAtDistanceAlongSpline(Distance: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetTransformAtTime(Time: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseConstantVelocity: Bool, bUseScale: Bool): Transform;
	public function GetTransformAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseScale: Bool): Transform;
	public function GetTransformAtSplineInputKey(InKey: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseScale: Bool): Transform;
	public function GetTransformAtDistanceAlongSpline(Distance: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseScale: Bool): Transform;
	public function GetTimeAtDistanceAlongSpline(Distance: ucpp.num.Float32): ucpp.num.Float32;
	public function GetTangentAtTime(Time: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseConstantVelocity: Bool): Vector;
	public function GetTangentAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetTangentAtSplineInputKey(InKey: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetTangentAtDistanceAlongSpline(Distance: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetSplinePointType(PointIndex: ucpp.num.Int32): TEnumAsByte<ESplinePointType>;
	public function GetSplineLength(): ucpp.num.Float32;
	public function GetScaleAtTime(Time: ucpp.num.Float32, bUseConstantVelocity: Bool): Vector;
	public function GetScaleAtSplinePoint(PointIndex: ucpp.num.Int32): Vector;
	public function GetScaleAtSplineInputKey(InKey: ucpp.num.Float32): Vector;
	public function GetScaleAtDistanceAlongSpline(Distance: ucpp.num.Float32): Vector;
	public function GetRotationAtTime(Time: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseConstantVelocity: Bool): Rotator;
	public function GetRotationAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Rotator;
	public function GetRotationAtSplineInputKey(InKey: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Rotator;
	public function GetRotationAtDistanceAlongSpline(Distance: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Rotator;
	public function GetRollAtTime(Time: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseConstantVelocity: Bool): ucpp.num.Float32;
	public function GetRollAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): ucpp.num.Float32;
	public function GetRollAtSplineInputKey(InKey: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): ucpp.num.Float32;
	public function GetRollAtDistanceAlongSpline(Distance: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): ucpp.num.Float32;
	public function GetRightVectorAtTime(Time: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseConstantVelocity: Bool): Vector;
	public function GetRightVectorAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetRightVectorAtSplineInputKey(InKey: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetRightVectorAtDistanceAlongSpline(Distance: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetNumberOfSplineSegments(): ucpp.num.Int32;
	public function GetNumberOfSplinePoints(): ucpp.num.Int32;
	public function GetLocationAtTime(Time: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseConstantVelocity: Bool): Vector;
	public function GetLocationAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetLocationAtSplineInputKey(InKey: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetLocationAtDistanceAlongSpline(Distance: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetLocationAndTangentAtSplinePoint(PointIndex: ucpp.num.Int32, Location: ucpp.Ref<Vector>, Tangent: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Void;
	public function GetLocalLocationAndTangentAtSplinePoint(PointIndex: ucpp.num.Int32, LocalLocation: ucpp.Ref<Vector>, LocalTangent: ucpp.Ref<Vector>): Void;
	public function GetLeaveTangentAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetInputKeyValueAtDistanceAlongSpline(Distance: ucpp.num.Float32): ucpp.num.Float32;
	public function GetInputKeyAtDistanceAlongSpline(Distance: ucpp.num.Float32): ucpp.num.Float32;
	public function GetFloatPropertyAtSplinePoint(Index: ucpp.num.Int32, PropertyName: FName): ucpp.num.Float32;
	public function GetFloatPropertyAtSplineInputKey(InKey: ucpp.num.Float32, PropertyName: FName): ucpp.num.Float32;
	public function GetDistanceAlongSplineAtSplinePoint(PointIndex: ucpp.num.Int32): ucpp.num.Float32;
	public function GetDistanceAlongSplineAtSplineInputKey(InKey: ucpp.num.Float32): ucpp.num.Float32;
	public function GetDirectionAtTime(Time: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseConstantVelocity: Bool): Vector;
	public function GetDirectionAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetDirectionAtSplineInputKey(InKey: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetDirectionAtDistanceAlongSpline(Distance: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetDefaultUpVector(CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function GetArriveTangentAtSplinePoint(PointIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function FindUpVectorClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function FindTransformClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUseScale: Bool): Transform;
	public function FindTangentClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function FindScaleClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>): Vector;
	public function FindRotationClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Rotator;
	public function FindRollClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): ucpp.num.Float32;
	public function FindRightVectorClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function FindLocationClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function FindInputKeyClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>): ucpp.num.Float32;
	public function FindDirectionClosestToWorldLocation(WorldLocation: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>): Vector;
	public function DivideSplineIntoPolylineRecursiveWithDistances(StartDistanceAlongSpline: ucpp.num.Float32, EndDistanceAlongSpline: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, MaxSquareDistanceFromSpline: ucpp.num.Float32, OutPoints: ucpp.Ref<TArray<Vector>>, OutDistancesAlongSpline: ucpp.Ref<TArray<ucpp.num.Float64>>): Bool;
	public function DivideSplineIntoPolylineRecursive(StartDistanceAlongSpline: ucpp.num.Float32, EndDistanceAlongSpline: ucpp.num.Float32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, MaxSquareDistanceFromSpline: ucpp.num.Float32, OutPoints: ucpp.Ref<TArray<Vector>>): Bool;
	public function ConvertSplineToPolyLine(CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, MaxSquareDistanceFromSpline: ucpp.num.Float32, OutPoints: ucpp.Ref<TArray<Vector>>): Bool;
	public function ConvertSplineSegmentToPolyLine(SplinePointStartIndex: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, MaxSquareDistanceFromSpline: ucpp.num.Float32, OutPoints: ucpp.Ref<TArray<Vector>>): Bool;
	public function ClearSplinePoints(bUpdateSpline: Bool): Void;
	public function AddSplineWorldPoint(Position: ucpp.Ref<Vector>): Void;
	public function AddSplinePointAtIndex(Position: ucpp.Ref<Vector>, Index: ucpp.num.Int32, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUpdateSpline: Bool): Void;
	public function AddSplinePoint(Position: ucpp.Ref<Vector>, CoordinateSpace: TEnumAsByte<ESplineCoordinateSpace>, bUpdateSpline: Bool): Void;
	public function AddSplineLocalPoint(Position: ucpp.Ref<Vector>): Void;
	public function AddPoints(Points: ucpp.Ref<TArray<SplinePoint>>, bUpdateSpline: Bool): Void;
	public function AddPoint(Point: ucpp.Ref<SplinePoint>, bUpdateSpline: Bool): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	IsClosedLoop, GetWorldTangentAtDistanceAlongSpline, GetWorldRotationAtTime, GetWorldRotationAtDistanceAlongSpline, GetWorldLocationAtTime,
	GetWorldLocationAtSplinePoint, GetWorldLocationAtDistanceAlongSpline, GetWorldDirectionAtTime, GetWorldDirectionAtDistanceAlongSpline, GetVectorPropertyAtSplinePoint,
	GetVectorPropertyAtSplineInputKey, GetUpVectorAtTime, GetUpVectorAtSplinePoint, GetUpVectorAtSplineInputKey, GetUpVectorAtDistanceAlongSpline,
	GetTransformAtTime, GetTransformAtSplinePoint, GetTransformAtSplineInputKey, GetTransformAtDistanceAlongSpline, GetTimeAtDistanceAlongSpline,
	GetTangentAtTime, GetTangentAtSplinePoint, GetTangentAtSplineInputKey, GetTangentAtDistanceAlongSpline, GetSplinePointType,
	GetSplineLength, GetScaleAtTime, GetScaleAtSplinePoint, GetScaleAtSplineInputKey, GetScaleAtDistanceAlongSpline,
	GetRotationAtTime, GetRotationAtSplinePoint, GetRotationAtSplineInputKey, GetRotationAtDistanceAlongSpline, GetRollAtTime,
	GetRollAtSplinePoint, GetRollAtSplineInputKey, GetRollAtDistanceAlongSpline, GetRightVectorAtTime, GetRightVectorAtSplinePoint,
	GetRightVectorAtSplineInputKey, GetRightVectorAtDistanceAlongSpline, GetNumberOfSplineSegments, GetNumberOfSplinePoints, GetLocationAtTime,
	GetLocationAtSplinePoint, GetLocationAtSplineInputKey, GetLocationAtDistanceAlongSpline, GetLocationAndTangentAtSplinePoint, GetLocalLocationAndTangentAtSplinePoint,
	GetLeaveTangentAtSplinePoint, GetInputKeyValueAtDistanceAlongSpline, GetInputKeyAtDistanceAlongSpline, GetFloatPropertyAtSplinePoint, GetFloatPropertyAtSplineInputKey,
	GetDistanceAlongSplineAtSplinePoint, GetDistanceAlongSplineAtSplineInputKey, GetDirectionAtTime, GetDirectionAtSplinePoint, GetDirectionAtSplineInputKey,
	GetDirectionAtDistanceAlongSpline, GetDefaultUpVector, GetArriveTangentAtSplinePoint, FindUpVectorClosestToWorldLocation, FindTransformClosestToWorldLocation,
	FindTangentClosestToWorldLocation, FindScaleClosestToWorldLocation, FindRotationClosestToWorldLocation, FindRollClosestToWorldLocation, FindRightVectorClosestToWorldLocation,
	FindLocationClosestToWorldLocation, FindInputKeyClosestToWorldLocation, FindDirectionClosestToWorldLocation, DivideSplineIntoPolylineRecursiveWithDistances, DivideSplineIntoPolylineRecursive,
	ConvertSplineToPolyLine, ConvertSplineSegmentToPolyLine
)
@:nativeGen
abstract ConstSplineComp(SplineComp) from SplineComp {
	public extern var SplineCurves(get, never): SplineCurves;
	public inline extern function get_SplineCurves(): SplineCurves return this.SplineCurves;
	public extern var ReparamStepsPerSegment(get, never): ucpp.num.Int32;
	public inline extern function get_ReparamStepsPerSegment(): ucpp.num.Int32 return this.ReparamStepsPerSegment;
	public extern var Duration(get, never): ucpp.num.Float32;
	public inline extern function get_Duration(): ucpp.num.Float32 return this.Duration;
	public extern var bStationaryEndpoints(get, never): Bool;
	public inline extern function get_bStationaryEndpoints(): Bool return this.bStationaryEndpoints;
	public extern var bSplineHasBeenEdited(get, never): Bool;
	public inline extern function get_bSplineHasBeenEdited(): Bool return this.bSplineHasBeenEdited;
	public extern var bModifiedByConstructionScript(get, never): Bool;
	public inline extern function get_bModifiedByConstructionScript(): Bool return this.bModifiedByConstructionScript;
	public extern var bInputSplinePointsToConstructionScript(get, never): Bool;
	public inline extern function get_bInputSplinePointsToConstructionScript(): Bool return this.bInputSplinePointsToConstructionScript;
	public extern var bDrawDebug(get, never): Bool;
	public inline extern function get_bDrawDebug(): Bool return this.bDrawDebug;
	public extern var DefaultUpVector(get, never): Vector;
	public inline extern function get_DefaultUpVector(): Vector return this.DefaultUpVector;
}

@:forward
@:nativeGen
@:native("SplineComp*")
abstract SplineCompPtr(ucpp.Ptr<SplineComp>) from ucpp.Ptr<SplineComp> to ucpp.Ptr<SplineComp>{
	@:from
	public static extern inline function fromValue(v: SplineComp): SplineCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SplineComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}