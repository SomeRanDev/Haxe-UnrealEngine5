// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UIKRetargeterController")
@:include("RetargetEditor/IKRetargeterController.h")
@:valueType
extern class IKRetargeterController extends Object {
	public function SetSourceChain(SourceChainName: FName, TargetChainName: FName): Bool;
	public function SetRotationOffsetForRetargetPoseBone(BoneName: ucpp.Ref<FName>, RotationOffset: ucpp.Ref<Quat>, SkeletonMode: ERetargetSourceOrTarget): Void;
	public function SetRootSettings(RootSettings: ucpp.Ref<TargetRootSettings>): Void;
	public function SetRootOffsetInRetargetPose(TranslationOffset: ucpp.Ref<Vector>, SourceOrTarget: ERetargetSourceOrTarget): Void;
	public function SetRetargetChainSettings(TargetChainName: ucpp.Ref<FName>, Settings: ucpp.Ref<TargetChainSettings>): Bool;
	public function SetPreviewMesh(SourceOrTarget: ERetargetSourceOrTarget, InPreviewMesh: ucpp.Ptr<SkeletalMesh>): Void;
	public function SetIKRig(SourceOrTarget: ERetargetSourceOrTarget, IKRig: ucpp.Ptr<IKRigDefinition>): Void;
	public function SetGlobalSettings(GlobalSettings: ucpp.Ref<RetargetGlobalSettings>): Void;
	public function SetCurrentRetargetPose(CurrentPose: FName, SourceOrTarget: ERetargetSourceOrTarget): Bool;
	public function ResetRetargetPose(PoseToReset: ucpp.Ref<FName>, BonesToReset: ucpp.Ref<TArray<FName>>, SourceOrTarget: ERetargetSourceOrTarget): Void;
	public function RenameRetargetPose(OldPoseName: FName, NewPoseName: FName, SourceOrTarget: ERetargetSourceOrTarget): Bool;
	public function RemoveRetargetPose(PoseToRemove: ucpp.Ref<FName>, SourceOrTarget: ERetargetSourceOrTarget): Bool;
	public function GetSourceChain(TargetChainName: ucpp.Ref<FName>): FName;
	public function GetRotationOffsetForRetargetPoseBone(BoneName: ucpp.Ref<FName>, SourceOrTarget: ERetargetSourceOrTarget): Quat;
	public function GetRootSettings(): TargetRootSettings;
	public function GetRootOffsetInRetargetPose(SourceOrTarget: ERetargetSourceOrTarget): Vector;
	public function GetRetargetPoses(SourceOrTarget: ERetargetSourceOrTarget): TMap<FName, IKRetargetPose>;
	public function GetRetargetChainSettings(TargetChainName: ucpp.Ref<FName>): TargetChainSettings;
	public function GetPreviewMesh(SourceOrTarget: ERetargetSourceOrTarget): ucpp.Ptr<SkeletalMesh>;
	public function GetIKRig(SourceOrTarget: ERetargetSourceOrTarget): ucpp.Ptr<IKRigDefinition.ConstIKRigDefinition>;
	public function GetGlobalSettings(): RetargetGlobalSettings;
	public function GetCurrentRetargetPoseName(SourceOrTarget: ERetargetSourceOrTarget): FName;
	public function GetCurrentRetargetPose(SourceOrTarget: ERetargetSourceOrTarget): IKRetargetPose;
	public function GetController(InRetargeterAsset: ucpp.Ptr<IKRetargeter.ConstIKRetargeter>): ucpp.Ptr<IKRetargeterController>;
	public function GetAllChainSettings(): TArray<ucpp.Ptr<RetargetChainSettings>>;
	public function DuplicateRetargetPose(PoseToDuplicate: FName, NewName: FName, SourceOrTarget: ERetargetSourceOrTarget): FName;
	public function CreateRetargetPose(NewPoseName: ucpp.Ref<FName>, SourceOrTarget: ERetargetSourceOrTarget): FName;
	public function AutoMapChains(AutoMapType: EAutoMapChainType, bForceRemap: Bool): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	SetSourceChain, SetRotationOffsetForRetargetPoseBone, SetRootSettings, SetRootOffsetInRetargetPose, SetRetargetChainSettings,
	SetPreviewMesh, SetIKRig, SetGlobalSettings, SetCurrentRetargetPose, ResetRetargetPose,
	RenameRetargetPose, RemoveRetargetPose, GetSourceChain, GetRotationOffsetForRetargetPoseBone, GetRootSettings,
	GetRootOffsetInRetargetPose, GetRetargetPoses, GetRetargetChainSettings, GetPreviewMesh, GetIKRig,
	GetGlobalSettings, GetCurrentRetargetPoseName, GetCurrentRetargetPose, GetAllChainSettings, DuplicateRetargetPose,
	CreateRetargetPose, AutoMapChains
)
@:nativeGen
abstract ConstIKRetargeterController(IKRetargeterController) from IKRetargeterController {
}

@:forward
@:nativeGen
@:native("IKRetargeterController*")
abstract IKRetargeterControllerPtr(ucpp.Ptr<IKRetargeterController>) from ucpp.Ptr<IKRetargeterController> to ucpp.Ptr<IKRetargeterController>{
	@:from
	public static extern inline function fromValue(v: IKRetargeterController): IKRetargeterControllerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): IKRetargeterController {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}