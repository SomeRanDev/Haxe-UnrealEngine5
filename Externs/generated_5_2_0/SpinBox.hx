// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USpinBox")
@:include("Components/SpinBox.h")
@:structAccess
extern class SpinBox extends Widget {
	public function GetValue(): cpp.Float32;
	public function SetValue(input: cpp.Float32): Void;
	public var ValueDelegate: HaxeDelegateProperty<() -> Void>;
	public var WidgetStyle: SpinBoxStyle;
	public function GetMinFractionalDigits(): cpp.Int32;
	public function SetMinFractionalDigits(input: cpp.Int32): Void;
	public function GetMaxFractionalDigits(): cpp.Int32;
	public function SetMaxFractionalDigits(input: cpp.Int32): Void;
	public function GetAlwaysUsesDeltaSnap(): Bool;
	public function SetAlwaysUsesDeltaSnap(input: Bool): Void;
	public var bEnableSlider: Bool;
	public function GetDelta(): cpp.Float32;
	public function SetDelta(input: cpp.Float32): Void;
	public var SliderExponent: cpp.Float32;
	public var Font: SlateFontInfo;
	public var Justification: TEnumAsByte<ETextJustify>;
	public var MinDesiredWidth: cpp.Float32;
	public var KeyboardType: TEnumAsByte<EVirtualKeyboardType>;
	public var ClearKeyboardFocusOnCommit: Bool;
	public var SelectAllTextOnCommit: Bool;
	public var ForegroundColor: SlateColor;
	public var OnValueChanged: HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void>;
	public var OnValueCommitted: HaxeMulticastSparseDelegateProperty<(cpp.Float32, TEnumAsByte<ETextCommit>) -> Void>;
	public var OnBeginSliderMovement: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnEndSliderMovement: HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void>;
	@:protected public var bOverride_MinValue: Bool;
	@:protected public var bOverride_MaxValue: Bool;
	@:protected public var bOverride_MinSliderValue: Bool;
	@:protected public var bOverride_MaxSliderValue: Bool;
	public function GetMinValue(): cpp.Float32;
	public function SetMinValue(input: cpp.Float32): Void;
	public function GetMaxValue(): cpp.Float32;
	public function SetMaxValue(input: cpp.Float32): Void;
	public function GetMinSliderValue(): cpp.Float32;
	public function SetMinSliderValue(input: cpp.Float32): Void;
	public function GetMaxSliderValue(): cpp.Float32;
	public function SetMaxSliderValue(input: cpp.Float32): Void;

	public function SetForegroundColor(InForegroundColor: SlateColor): Void;
	public function OnSpinBoxValueCommittedEvent__DelegateSignature(InValue: cpp.Float32, CommitMethod: TEnumAsByte<ETextCommit>): Void;
	public function OnSpinBoxValueChangedEvent__DelegateSignature(InValue: cpp.Float32): Void;
	public function OnSpinBoxBeginSliderMovement__DelegateSignature(): Void;
	public function ClearMinValue(): Void;
	public function ClearMinSliderValue(): Void;
	public function ClearMaxValue(): Void;
	public function ClearMaxSliderValue(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstSpinBox(SpinBox) from SpinBox {
	public extern var ValueDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ValueDelegate(): HaxeDelegateProperty<() -> Void> return this.ValueDelegate;
	public extern var WidgetStyle(get, never): SpinBoxStyle;
	public inline extern function get_WidgetStyle(): SpinBoxStyle return this.WidgetStyle;
	public extern var bEnableSlider(get, never): Bool;
	public inline extern function get_bEnableSlider(): Bool return this.bEnableSlider;
	public extern var SliderExponent(get, never): cpp.Float32;
	public inline extern function get_SliderExponent(): cpp.Float32 return this.SliderExponent;
	public extern var Font(get, never): SlateFontInfo;
	public inline extern function get_Font(): SlateFontInfo return this.Font;
	public extern var Justification(get, never): TEnumAsByte<ETextJustify>;
	public inline extern function get_Justification(): TEnumAsByte<ETextJustify> return this.Justification;
	public extern var MinDesiredWidth(get, never): cpp.Float32;
	public inline extern function get_MinDesiredWidth(): cpp.Float32 return this.MinDesiredWidth;
	public extern var KeyboardType(get, never): TEnumAsByte<EVirtualKeyboardType>;
	public inline extern function get_KeyboardType(): TEnumAsByte<EVirtualKeyboardType> return this.KeyboardType;
	public extern var ClearKeyboardFocusOnCommit(get, never): Bool;
	public inline extern function get_ClearKeyboardFocusOnCommit(): Bool return this.ClearKeyboardFocusOnCommit;
	public extern var SelectAllTextOnCommit(get, never): Bool;
	public inline extern function get_SelectAllTextOnCommit(): Bool return this.SelectAllTextOnCommit;
	public extern var ForegroundColor(get, never): SlateColor;
	public inline extern function get_ForegroundColor(): SlateColor return this.ForegroundColor;
	public extern var OnValueChanged(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void>;
	public inline extern function get_OnValueChanged(): HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void> return this.OnValueChanged;
	public extern var OnValueCommitted(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Float32, TEnumAsByte<ETextCommit>) -> Void>;
	public inline extern function get_OnValueCommitted(): HaxeMulticastSparseDelegateProperty<(cpp.Float32, TEnumAsByte<ETextCommit>) -> Void> return this.OnValueCommitted;
	public extern var OnBeginSliderMovement(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnBeginSliderMovement(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnBeginSliderMovement;
	public extern var OnEndSliderMovement(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void>;
	public inline extern function get_OnEndSliderMovement(): HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void> return this.OnEndSliderMovement;
}

@:forward
@:nativeGen
@:native("SpinBox*")
abstract SpinBoxPtr(cpp.Star<SpinBox>) from cpp.Star<SpinBox> to cpp.Star<SpinBox>{
	@:from
	public static extern inline function fromValue(v: SpinBox): SpinBoxPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SpinBox {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}