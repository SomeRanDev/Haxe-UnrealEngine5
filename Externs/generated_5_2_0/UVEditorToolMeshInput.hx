// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UUVEditorToolMeshInput")
@:include("ToolTargets/UVEditorToolMeshInput.h")
@:structAccess
extern class UVEditorToolMeshInput extends ToolTarget {
	public var UnwrapPreview: cpp.Star<MeshOpPreviewWithBackgroundCompute>;
	public var AppliedPreview: cpp.Star<MeshOpPreviewWithBackgroundCompute>;
	public var WireframeDisplay: cpp.Star<MeshElementsVisualizer>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstUVEditorToolMeshInput(UVEditorToolMeshInput) from UVEditorToolMeshInput {
	public extern var UnwrapPreview(get, never): cpp.Star<MeshOpPreviewWithBackgroundCompute.ConstMeshOpPreviewWithBackgroundCompute>;
	public inline extern function get_UnwrapPreview(): cpp.Star<MeshOpPreviewWithBackgroundCompute.ConstMeshOpPreviewWithBackgroundCompute> return this.UnwrapPreview;
	public extern var AppliedPreview(get, never): cpp.Star<MeshOpPreviewWithBackgroundCompute.ConstMeshOpPreviewWithBackgroundCompute>;
	public inline extern function get_AppliedPreview(): cpp.Star<MeshOpPreviewWithBackgroundCompute.ConstMeshOpPreviewWithBackgroundCompute> return this.AppliedPreview;
	public extern var WireframeDisplay(get, never): cpp.Star<MeshElementsVisualizer.ConstMeshElementsVisualizer>;
	public inline extern function get_WireframeDisplay(): cpp.Star<MeshElementsVisualizer.ConstMeshElementsVisualizer> return this.WireframeDisplay;
}

@:forward
@:nativeGen
@:native("UVEditorToolMeshInput*")
abstract UVEditorToolMeshInputPtr(cpp.Star<UVEditorToolMeshInput>) from cpp.Star<UVEditorToolMeshInput> to cpp.Star<UVEditorToolMeshInput>{
	@:from
	public static extern inline function fromValue(v: UVEditorToolMeshInput): UVEditorToolMeshInputPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): UVEditorToolMeshInput {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}