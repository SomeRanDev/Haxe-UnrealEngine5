// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UDistributionVectorUniformCurve")
@:include("Distributions/DistributionVectorUniformCurve.h")
@:structAccess
extern class DistributionVectorUniformCurve extends DistributionVector {
	public var ConstantCurve: InterpCurveTwoVectors;
	public var bLockAxes1: Bool;
	public var bLockAxes2: Bool;
	public var LockedAxes: TEnumAsByte<EDistributionVectorLockFlags>;
	public var MirrorFlags: TEnumAsByte<EDistributionVectorMirrorFlags>;
	public var bUseExtremes: Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstDistributionVectorUniformCurve(DistributionVectorUniformCurve) from DistributionVectorUniformCurve {
	public extern var ConstantCurve(get, never): InterpCurveTwoVectors;
	public inline extern function get_ConstantCurve(): InterpCurveTwoVectors return this.ConstantCurve;
	public extern var bLockAxes1(get, never): Bool;
	public inline extern function get_bLockAxes1(): Bool return this.bLockAxes1;
	public extern var bLockAxes2(get, never): Bool;
	public inline extern function get_bLockAxes2(): Bool return this.bLockAxes2;
	public extern var LockedAxes(get, never): TEnumAsByte<EDistributionVectorLockFlags>;
	public inline extern function get_LockedAxes(): TEnumAsByte<EDistributionVectorLockFlags> return this.LockedAxes;
	public extern var MirrorFlags(get, never): TEnumAsByte<EDistributionVectorMirrorFlags>;
	public inline extern function get_MirrorFlags(): TEnumAsByte<EDistributionVectorMirrorFlags> return this.MirrorFlags;
	public extern var bUseExtremes(get, never): Bool;
	public inline extern function get_bUseExtremes(): Bool return this.bUseExtremes;
}

@:forward
@:nativeGen
@:native("DistributionVectorUniformCurve*")
abstract DistributionVectorUniformCurvePtr(cpp.Star<DistributionVectorUniformCurve>) from cpp.Star<DistributionVectorUniformCurve> to cpp.Star<DistributionVectorUniformCurve>{
	@:from
	public static extern inline function fromValue(v: DistributionVectorUniformCurve): DistributionVectorUniformCurvePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): DistributionVectorUniformCurve {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}