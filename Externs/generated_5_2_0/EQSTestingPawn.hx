// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AEQSTestingPawn")
@:include("EnvironmentQuery/EQSTestingPawn.h")
@:valueType
extern class EQSTestingPawn extends Character {
	public var QueryTemplate: ucpp.Ptr<EnvQuery>;
	public var QueryParams: TArray<EnvNamedValue>;
	public var QueryConfig: TArray<AIDynamicParam>;
	public var TimeLimitPerStep: ucpp.num.Float32;
	public var StepToDebugDraw: ucpp.num.Int32;
	public var HighlightMode: EEnvQueryHightlightMode;
	public var bDrawLabels: Bool;
	public var bDrawFailedItems: Bool;
	public var bReRunQueryOnlyOnFinishedMove: Bool;
	public var bShouldBeVisibleInGame: Bool;
	public var bTickDuringGame: Bool;
	public var QueryingMode: TEnumAsByte<EEnvQueryRunMode>;
	public var NavAgentProperties: NavAgentProperties;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstEQSTestingPawn(EQSTestingPawn) from EQSTestingPawn {
	public extern var QueryTemplate(get, never): ucpp.Ptr<EnvQuery.ConstEnvQuery>;
	public inline extern function get_QueryTemplate(): ucpp.Ptr<EnvQuery.ConstEnvQuery> return this.QueryTemplate;
	public extern var QueryParams(get, never): TArray<EnvNamedValue>;
	public inline extern function get_QueryParams(): TArray<EnvNamedValue> return this.QueryParams;
	public extern var QueryConfig(get, never): TArray<AIDynamicParam>;
	public inline extern function get_QueryConfig(): TArray<AIDynamicParam> return this.QueryConfig;
	public extern var TimeLimitPerStep(get, never): ucpp.num.Float32;
	public inline extern function get_TimeLimitPerStep(): ucpp.num.Float32 return this.TimeLimitPerStep;
	public extern var StepToDebugDraw(get, never): ucpp.num.Int32;
	public inline extern function get_StepToDebugDraw(): ucpp.num.Int32 return this.StepToDebugDraw;
	public extern var HighlightMode(get, never): EEnvQueryHightlightMode;
	public inline extern function get_HighlightMode(): EEnvQueryHightlightMode return this.HighlightMode;
	public extern var bDrawLabels(get, never): Bool;
	public inline extern function get_bDrawLabels(): Bool return this.bDrawLabels;
	public extern var bDrawFailedItems(get, never): Bool;
	public inline extern function get_bDrawFailedItems(): Bool return this.bDrawFailedItems;
	public extern var bReRunQueryOnlyOnFinishedMove(get, never): Bool;
	public inline extern function get_bReRunQueryOnlyOnFinishedMove(): Bool return this.bReRunQueryOnlyOnFinishedMove;
	public extern var bShouldBeVisibleInGame(get, never): Bool;
	public inline extern function get_bShouldBeVisibleInGame(): Bool return this.bShouldBeVisibleInGame;
	public extern var bTickDuringGame(get, never): Bool;
	public inline extern function get_bTickDuringGame(): Bool return this.bTickDuringGame;
	public extern var QueryingMode(get, never): TEnumAsByte<EEnvQueryRunMode>;
	public inline extern function get_QueryingMode(): TEnumAsByte<EEnvQueryRunMode> return this.QueryingMode;
	public extern var NavAgentProperties(get, never): NavAgentProperties;
	public inline extern function get_NavAgentProperties(): NavAgentProperties return this.NavAgentProperties;
}

@:forward
@:nativeGen
@:native("EQSTestingPawn*")
abstract EQSTestingPawnPtr(ucpp.Ptr<EQSTestingPawn>) from ucpp.Ptr<EQSTestingPawn> to ucpp.Ptr<EQSTestingPawn>{
	@:from
	public static extern inline function fromValue(v: EQSTestingPawn): EQSTestingPawnPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EQSTestingPawn {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}