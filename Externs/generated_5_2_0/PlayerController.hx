// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("APlayerController")
@:include("GameFramework/PlayerController.h")
@:valueType
extern class PlayerController extends Controller {
	public var Player: ucpp.Ptr<Player>;
	public var AcknowledgedPawn: ucpp.Ptr<Pawn>;
	public var MyHUD: ucpp.Ptr<HUD>;
	public var PlayerCameraManager: ucpp.Ptr<PlayerCameraManager>;
	public var PlayerCameraManagerClass: TSubclassOf<PlayerCameraManager>;
	public var bAutoManageActiveCameraTarget: Bool;
	public var TargetViewRotation: Rotator;
	public var SmoothTargetViewRotationSpeed: ucpp.num.Float32;
	public var HiddenActors: TArray<ucpp.Ptr<Actor>>;
	public var HiddenPrimitiveComponents: TArray<TWeakObjectPtr<PrimitiveComp>>;
	public var LastSpectatorStateSynchTime: ucpp.num.Float32;
	public var LastSpectatorSyncLocation: Vector;
	public var LastSpectatorSyncRotation: Rotator;
	public var ClientCap: ucpp.num.Int32;
	public var CheatManager: ucpp.Ptr<CheatManager>;
	public var CheatClass: TSubclassOf<CheatManager>;
	public var PlayerInput: ucpp.Ptr<PlayerInput>;
	public var ActiveForceFeedbackEffects: TArray<ActiveForceFeedbackEffect>;
	@:protected public var AsyncPhysicsDataClass: TSubclassOf<AsyncPhysicsData>;
	private var AsyncPhysicsDataComponent: ucpp.Ptr<AsyncPhysicsInputComp>;
	public var bPlayerIsWaiting: Bool;
	public var NetPlayerIndex: ucpp.num.UInt8;
	public var PendingSwapConnection: ucpp.Ptr<NetConnection>;
	public var NetConnection: ucpp.Ptr<NetConnection>;
	public var bShowMouseCursor: Bool;
	public var bEnableClickEvents: Bool;
	public var bEnableTouchEvents: Bool;
	public var bEnableMouseOverEvents: Bool;
	public var bEnableTouchOverEvents: Bool;
	public var bForceFeedbackEnabled: Bool;
	public var bEnableMotionControls: Bool;
	public var bEnableStreamingSource: Bool;
	public var bStreamingSourceShouldActivate: Bool;
	public var bStreamingSourceShouldBlockOnSlowStreaming: Bool;
	public var StreamingSourcePriority: EStreamingSourcePriority;
	public var StreamingSourceDebugColor: Color;
	public var StreamingSourceShapes: TArray<StreamingSourceShape>;
	public var ForceFeedbackScale: ucpp.num.Float32;
	public var ClickEventKeys: TArray<Key>;
	public var DefaultMouseCursor: TEnumAsByte<EMouseCursor>;
	public var CurrentMouseCursor: TEnumAsByte<EMouseCursor>;
	public var DefaultClickTraceChannel: TEnumAsByte<ECollisionChannel>;
	public var CurrentClickTraceChannel: TEnumAsByte<ECollisionChannel>;
	public var HitResultTraceDistance: ucpp.num.Float32;
	public var SeamlessTravelCount: ucpp.num.UInt16;
	public var LastCompletedSeamlessTravelCount: ucpp.num.UInt16;
	@:protected public var InactiveStateInputComponent: ucpp.Ptr<InputComp>;
	@:protected public var bShouldPerformFullTickWhenPaused: Bool;
	@:protected public var CurrentTouchInterface: ucpp.Ptr<TouchInterface>;
	@:protected public var OverridePlayerInputClass: TSubclassOf<PlayerInput>;
	private var SpectatorPawn: ucpp.Ptr<SpectatorPawn>;
	private var bIsLocalPlayerController: Bool;
	@:protected public var SpawnLocation: Vector;

	public function WasInputKeyJustReleased(Key: Key): Bool;
	public function WasInputKeyJustPressed(Key: Key): Bool;
	public function ToggleSpeaking(bInSpeaking: Bool): Void;
	private function TestServerLevelVisibilityChange(PackageName: FName, FileName: FName): Void;
	public function SwitchLevel(URL: FString): Void;
	public function StreamingSourceShouldBlockOnSlowStreaming(): Bool;
	public function StreamingSourceShouldActivate(): Bool;
	public function StopHapticEffect(Hand: EControllerHand): Void;
	public function StartFire(FireModeNum: ucpp.num.UInt8): Void;
	public function SetVirtualJoystickVisibility(bVisible: Bool): Void;
	public function SetViewTargetWithBlend(NewViewTarget: ucpp.Ptr<Actor>, BlendTime: ucpp.num.Float32, BlendFunc: TEnumAsByte<EViewTargetBlendFunction>, BlendExp: ucpp.num.Float32, bLockOutgoing: Bool): Void;
	public function SetName(S: FString): Void;
	public function SetMouseLocation(X: ucpp.num.Int32, Y: ucpp.num.Int32): Void;
	public function SetMouseCursorWidget(Cursor: TEnumAsByte<EMouseCursor>, CursorWidget: ucpp.Ptr<UserWidget>): Void;
	public function SetMotionControlsEnabled(bEnabled: Bool): Void;
	public function SetHapticsByValue(Frequency: ucpp.num.Float32, Amplitude: ucpp.num.Float32, Hand: EControllerHand): Void;
	public function SetDisableHaptics(bNewDisabled: Bool): Void;
	public function SetDeprecatedInputYawScale(NewValue: ucpp.num.Float32): Void;
	public function SetDeprecatedInputRollScale(NewValue: ucpp.num.Float32): Void;
	public function SetDeprecatedInputPitchScale(NewValue: ucpp.num.Float32): Void;
	public function SetControllerLightColor(Color: Color): Void;
	public function SetCinematicMode(bInCinematicMode: Bool, bHidePlayer: Bool, bAffectsHUD: Bool, bAffectsMovement: Bool, bAffectsTurning: Bool): Void;
	public function SetAudioListenerOverride(AttachToComponent: ucpp.Ptr<SceneComp>, Location: Vector, Rotation: Rotator): Void;
	public function SetAudioListenerAttenuationOverride(AttachToComponent: ucpp.Ptr<SceneComp>, AttenuationLocationOVerride: Vector): Void;
	public function ServerViewSelf(TransitionParams: ViewTargetTransitionParams): Void;
	public function ServerViewPrevPlayer(): Void;
	public function ServerViewNextPlayer(): Void;
	public function ServerVerifyViewTarget(): Void;
	public function ServerUpdateMultipleLevelsVisibility(LevelVisibilities: TArray<UpdateLevelVisibilityLevelInfo>): Void;
	public function ServerUpdateLevelVisibility(LevelVisibility: UpdateLevelVisibilityLevelInfo): Void;
	public function ServerUpdateCamera(CamLoc: Vector_NetQuantize, CamPitchAndYaw: ucpp.num.Int32): Void;
	public function ServerUnmutePlayer(PlayerId: UniqueNetIdRepl): Void;
	public function ServerUnblockPlayer(PlayerId: UniqueNetIdRepl): Void;
	public function ServerToggleAILogging(): Void;
	public function ServerShortTimeout(): Void;
	public function ServerSetSpectatorWaiting(bWaiting: Bool): Void;
	public function ServerSetSpectatorLocation(NewLoc: Vector, NewRot: Rotator): Void;
	private function ServerSendLatestAsyncPhysicsTimestamp(Timestamp: AsyncPhysicsTimestamp): Void;
	public function ServerRestartPlayer(): Void;
	public function ServerRecvClientInputFrame(RecvClientInputFrame: ucpp.num.Int32, Data: TArray<ucpp.num.UInt8>): Void;
	public function ServerPause(): Void;
	public function ServerNotifyLoadedWorld(WorldPackageName: FName): Void;
	public function ServerMutePlayer(PlayerId: UniqueNetIdRepl): Void;
	public function ServerExecRPC(Msg: FString): Void;
	public function ServerExec(Msg: FString): Void;
	public function ServerCheckClientPossessionReliable(): Void;
	public function ServerCheckClientPossession(): Void;
	public function ServerChangeName(S: FString): Void;
	public function ServerCamera(NewMode: FName): Void;
	public function ServerBlockPlayer(PlayerId: UniqueNetIdRepl): Void;
	public function ServerAcknowledgePossession(P: ucpp.Ptr<Pawn>): Void;
	public function SendToConsole(Command: FString): Void;
	public function RestartLevel(): Void;
	public function ResetControllerLightColor(): Void;
	public function ProjectWorldLocationToScreen(WorldLocation: Vector, ScreenLocation: ucpp.Ref<Vector2D>, bPlayerViewportRelative: Bool): Bool;
	public function PlayHapticEffect(HapticEffect: ucpp.Ptr<HapticFeedbackEffect_Base>, Hand: EControllerHand, Scale: ucpp.num.Float32, bLoop: Bool): Void;
	private function PlayDynamicForceFeedback(Intensity: ucpp.num.Float32, Duration: ucpp.num.Float32, bAffectsLeftLarge: Bool, bAffectsLeftSmall: Bool, bAffectsRightLarge: Bool, bAffectsRightSmall: Bool, Action: TEnumAsByte<EDynamicForceFeedbackAction>, LatentInfo: LatentActionInfo): Void;
	public function Pause(): Void;
	public function OnServerStartedVisualLogger(bIsLogging: Bool): Void;
	private function OnRep_AsyncPhysicsDataComponent(): Void;
	public function LocalTravel(URL: FString): Void;
	public function K2_ClientPlayForceFeedback(ForceFeedbackEffect: ucpp.Ptr<ForceFeedbackEffect>, Tag: FName, bLooping: Bool, bIgnoreTimeDilation: Bool, bPlayWhilePaused: Bool): Void;
	public function IsStreamingSourceEnabled(): Bool;
	public function IsInputKeyDown(Key: Key): Bool;
	public function GetViewportSize(SizeX: ucpp.Ref<ucpp.num.Int32>, SizeY: ucpp.Ref<ucpp.num.Int32>): Void;
	public function GetStreamingSourceShapes(OutShapes: ucpp.Ref<TArray<StreamingSourceShape>>): Void;
	public function GetStreamingSourcePriority(): EStreamingSourcePriority;
	public function GetStreamingSourceLocationAndRotation(OutLocation: ucpp.Ref<Vector>, OutRotation: ucpp.Ref<Rotator>): Void;
	public function GetSpectatorPawn(): ucpp.Ptr<SpectatorPawn>;
	public function GetPlatformUserId(): PlatformUserId;
	public function GetOverridePlayerInputClass(): TSubclassOf<PlayerInput>;
	public function GetMousePosition(LocationX: ucpp.Ref<ucpp.num.Float32>, LocationY: ucpp.Ref<ucpp.num.Float32>): Bool;
	public function GetInputVectorKeyState(Key: Key): Vector;
	public function GetInputTouchState(FingerIndex: TEnumAsByte<ETouchIndex>, LocationX: ucpp.Ref<ucpp.num.Float32>, LocationY: ucpp.Ref<ucpp.num.Float32>, bIsCurrentlyPressed: ucpp.Ref<Bool>): Void;
	public function GetInputMouseDelta(DeltaX: ucpp.Ref<ucpp.num.Float32>, DeltaY: ucpp.Ref<ucpp.num.Float32>): Void;
	public function GetInputMotionState(Tilt: ucpp.Ref<Vector>, RotationRate: ucpp.Ref<Vector>, Gravity: ucpp.Ref<Vector>, Acceleration: ucpp.Ref<Vector>): Void;
	public function GetInputKeyTimeDown(Key: Key): ucpp.num.Float32;
	public function GetInputAnalogStickState(WhichStick: TEnumAsByte<EControllerAnalogStick>, StickX: ucpp.Ref<ucpp.num.Float32>, StickY: ucpp.Ref<ucpp.num.Float32>): Void;
	public function GetInputAnalogKeyState(Key: Key): ucpp.num.Float32;
	public function GetHUD(): ucpp.Ptr<HUD>;
	public function GetHitResultUnderFingerForObjects(FingerIndex: TEnumAsByte<ETouchIndex>, ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, HitResult: ucpp.Ref<HitResult>): Bool;
	public function GetHitResultUnderFingerByChannel(FingerIndex: TEnumAsByte<ETouchIndex>, TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, HitResult: ucpp.Ref<HitResult>): Bool;
	public function GetHitResultUnderFinger(FingerIndex: TEnumAsByte<ETouchIndex>, TraceChannel: TEnumAsByte<ECollisionChannel>, bTraceComplex: Bool, HitResult: ucpp.Ref<HitResult>): Bool;
	public function GetHitResultUnderCursorForObjects(ObjectTypes: ucpp.Ref<TArray<TEnumAsByte<EObjectTypeQuery>>>, bTraceComplex: Bool, HitResult: ucpp.Ref<HitResult>): Bool;
	public function GetHitResultUnderCursorByChannel(TraceChannel: TEnumAsByte<ETraceTypeQuery>, bTraceComplex: Bool, HitResult: ucpp.Ref<HitResult>): Bool;
	public function GetHitResultUnderCursor(TraceChannel: TEnumAsByte<ECollisionChannel>, bTraceComplex: Bool, HitResult: ucpp.Ref<HitResult>): Bool;
	public function GetFocalLocation(): Vector;
	public function GetDeprecatedInputYawScale(): ucpp.num.Float32;
	public function GetDeprecatedInputRollScale(): ucpp.num.Float32;
	public function GetDeprecatedInputPitchScale(): ucpp.num.Float32;
	@:protected public function GetAsyncPhysicsDataToWrite(): ucpp.Ptr<AsyncPhysicsData>;
	@:protected public function GetAsyncPhysicsDataToConsume(): ucpp.Ptr<AsyncPhysicsData.ConstAsyncPhysicsData>;
	public function FOV(NewFOV: ucpp.num.Float32): Void;
	public function EnableCheats(): Void;
	public function DeprojectScreenPositionToWorld(ScreenX: ucpp.num.Float32, ScreenY: ucpp.num.Float32, WorldLocation: ucpp.Ref<Vector>, WorldDirection: ucpp.Ref<Vector>): Bool;
	public function DeprojectMousePositionToWorld(WorldLocation: ucpp.Ref<Vector>, WorldDirection: ucpp.Ref<Vector>): Bool;
	public function ConsoleKey(Key: Key): Void;
	public function ClientWasKicked(KickReason: FText): Void;
	public function ClientVoiceHandshakeComplete(): Void;
	public function ClientUpdateMultipleLevelsStreamingStatus(LevelStatuses: TArray<UpdateLevelStreamingLevelStatus>): Void;
	public function ClientUpdateLevelStreamingStatus(PackageName: FName, bNewShouldBeLoaded: Bool, bNewShouldBeVisible: Bool, bNewShouldBlockOnLoad: Bool, LODIndex: ucpp.num.Int32, TransactionId: NetLevelVisibilityTransactionId, bNewShouldBlockOnUnload: Bool): Void;
	public function ClientUnmutePlayers(PlayerIds: TArray<UniqueNetIdRepl>): Void;
	public function ClientUnmutePlayer(PlayerId: UniqueNetIdRepl): Void;
	public function ClientTravelInternal(URL: FString, TravelType: TEnumAsByte<ETravelType>, bSeamless: Bool, MapPackageGuid: Guid): Void;
	public function ClientTravel(URL: FString, TravelType: TEnumAsByte<ETravelType>, bSeamless: Bool, MapPackageGuid: Guid): Void;
	public function ClientTeamMessage(SenderPlayerState: ucpp.Ptr<PlayerState>, S: FString, Type: FName, MsgLifeTime: ucpp.num.Float32): Void;
	public function ClientStopForceFeedback(ForceFeedbackEffect: ucpp.Ptr<ForceFeedbackEffect>, Tag: FName): Void;
	public function ClientStopCameraShakesFromSource(SourceComponent: ucpp.Ptr<CameraShakeSourceComp>, bImmediately: Bool): Void;
	public function ClientStopCameraShake(Shake: TSubclassOf<CameraShakeBase>, bImmediately: Bool): Void;
	public function ClientStartOnlineSession(): Void;
	public function ClientStartCameraShakeFromSource(Shake: TSubclassOf<CameraShakeBase>, SourceComponent: ucpp.Ptr<CameraShakeSourceComp>): Void;
	public function ClientStartCameraShake(Shake: TSubclassOf<CameraShakeBase>, Scale: ucpp.num.Float32, PlaySpace: ECameraShakePlaySpace, UserPlaySpaceRot: Rotator): Void;
	public function ClientSpawnGenericCameraLensEffect(LensEffectEmitterClass: TSubclassOf<Actor>): Void;
	public function ClientSpawnCameraLensEffect(LensEffectEmitterClass: TSubclassOf<EmitterCameraLensEffectBase>): Void;
	public function ClientSetViewTarget(A: ucpp.Ptr<Actor>, TransitionParams: ViewTargetTransitionParams): Void;
	public function ClientSetSpectatorWaiting(bWaiting: Bool): Void;
	public function ClientSetHUD(NewHUDClass: TSubclassOf<HUD>): Void;
	public function ClientSetForceMipLevelsToBeResident(Material: ucpp.Ptr<MaterialInterface>, ForceDuration: ucpp.num.Float32, CinematicTextureGroups: ucpp.num.Int32): Void;
	public function ClientSetCinematicMode(bInCinematicMode: Bool, bAffectsMovement: Bool, bAffectsTurning: Bool, bAffectsHUD: Bool): Void;
	public function ClientSetCameraMode(NewCamMode: FName): Void;
	public function ClientSetCameraFade(bEnableFading: Bool, FadeColor: Color, FadeAlpha: Vector2D, FadeTime: ucpp.num.Float32, bFadeAudio: Bool, bHoldWhenFinished: Bool): Void;
	public function ClientSetBlockOnAsyncLoading(): Void;
	public function ClientReturnToMainMenuWithTextReason(ReturnReason: FText): Void;
	public function ClientReturnToMainMenu(ReturnReason: FString): Void;
	public function ClientRetryClientRestart(NewPawn: ucpp.Ptr<Pawn>): Void;
	public function ClientRestart(NewPawn: ucpp.Ptr<Pawn>): Void;
	public function ClientReset(): Void;
	public function ClientRepObjRef(Object: ucpp.Ptr<Object>): Void;
	public function ClientRecvServerAckFrameDebug(NumBuffered: ucpp.num.UInt8, TargetNumBufferedCmds: ucpp.num.Float32): Void;
	public function ClientRecvServerAckFrame(LastProcessedInputFrame: ucpp.num.Int32, RecvServerFrameNumber: ucpp.num.Int32, TimeDilation: ucpp.num.Int8): Void;
	public function ClientReceiveLocalizedMessage(Message: TSubclassOf<LocalMessage>, Switch: ucpp.num.Int32, RelatedPlayerState_1: ucpp.Ptr<PlayerState>, RelatedPlayerState_2: ucpp.Ptr<PlayerState>, OptionalObject: ucpp.Ptr<Object>): Void;
	public function ClientPrestreamTextures(ForcedActor: ucpp.Ptr<Actor>, ForceDuration: ucpp.num.Float32, bEnableStreaming: Bool, CinematicTextureGroups: ucpp.num.Int32): Void;
	public function ClientPrepareMapChange(LevelName: FName, bFirst: Bool, bLast: Bool): Void;
	public function ClientPlaySoundAtLocation(Sound: ucpp.Ptr<SoundBase>, Location: Vector, VolumeMultiplier: ucpp.num.Float32, PitchMultiplier: ucpp.num.Float32): Void;
	public function ClientPlaySound(Sound: ucpp.Ptr<SoundBase>, VolumeMultiplier: ucpp.num.Float32, PitchMultiplier: ucpp.num.Float32): Void;
	private function ClientPlayForceFeedback_Internal(ForceFeedbackEffect: ucpp.Ptr<ForceFeedbackEffect>, Params: ForceFeedbackParameters): Void;
	public function ClientMutePlayer(PlayerId: UniqueNetIdRepl): Void;
	public function ClientMessage(S: FString, Type: FName, MsgLifeTime: ucpp.num.Float32): Void;
	public function ClientIgnoreMoveInput(bIgnore: Bool): Void;
	public function ClientIgnoreLookInput(bIgnore: Bool): Void;
	public function ClientGotoState(NewState: FName): Void;
	public function ClientGameEnded(EndGameFocus: ucpp.Ptr<Actor>, bIsWinner: Bool): Void;
	public function ClientForceGarbageCollection(): Void;
	public function ClientFlushLevelStreaming(): Void;
	public function ClientEndOnlineSession(): Void;
	public function ClientEnableNetworkVoice(bEnable: Bool): Void;
	private function ClientCorrectionAsyncPhysicsTimestamp(Timestamp: AsyncPhysicsTimestamp): Void;
	public function ClientCommitMapChange(): Void;
	public function ClientClearCameraLensEffects(): Void;
	public function ClientCapBandwidth(Cap: ucpp.num.Int32): Void;
	public function ClientCancelPendingMapChange(): Void;
	public function ClientAddTextureStreamingLoc(InLoc: Vector, Duration: ucpp.num.Float32, bOverrideLocation: Bool): Void;
	public function ClientAckUpdateLevelVisibility(PackageName: FName, TransactionId: NetLevelVisibilityTransactionId, bClientAckCanMakeVisible: Bool): Void;
	private function ClientAckTimeDilation(TimeDilation: ucpp.num.Float32, ServerStep: ucpp.num.Int32): Void;
	public function ClearAudioListenerOverride(): Void;
	public function ClearAudioListenerAttenuationOverride(): Void;
	public function CanRestartPlayer(): Bool;
	public function Camera(NewMode: FName): Void;
	public function AddYawInput(Val: ucpp.num.Float32): Void;
	public function AddRollInput(Val: ucpp.num.Float32): Void;
	public function AddPitchInput(Val: ucpp.num.Float32): Void;
	public function ActivateTouchInterface(NewTouchInterface: ucpp.Ptr<TouchInterface>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	WasInputKeyJustReleased, WasInputKeyJustPressed, StreamingSourceShouldBlockOnSlowStreaming, StreamingSourceShouldActivate, ProjectWorldLocationToScreen,
	IsStreamingSourceEnabled, IsInputKeyDown, GetViewportSize, GetStreamingSourceShapes, GetStreamingSourcePriority,
	GetStreamingSourceLocationAndRotation, GetSpectatorPawn, GetPlatformUserId, GetOverridePlayerInputClass, GetMousePosition,
	GetInputVectorKeyState, GetInputTouchState, GetInputMouseDelta, GetInputMotionState, GetInputKeyTimeDown,
	GetInputAnalogStickState, GetInputAnalogKeyState, GetHUD, GetHitResultUnderFingerForObjects, GetHitResultUnderFingerByChannel,
	GetHitResultUnderFinger, GetHitResultUnderCursorForObjects, GetHitResultUnderCursorByChannel, GetHitResultUnderCursor, GetFocalLocation,
	GetDeprecatedInputYawScale, GetDeprecatedInputRollScale, GetDeprecatedInputPitchScale, GetAsyncPhysicsDataToWrite, GetAsyncPhysicsDataToConsume,
	DeprojectScreenPositionToWorld, DeprojectMousePositionToWorld
)
@:nativeGen
abstract ConstPlayerController(PlayerController) from PlayerController {
	public extern var Player(get, never): ucpp.Ptr<Player.ConstPlayer>;
	public inline extern function get_Player(): ucpp.Ptr<Player.ConstPlayer> return this.Player;
	public extern var AcknowledgedPawn(get, never): ucpp.Ptr<Pawn.ConstPawn>;
	public inline extern function get_AcknowledgedPawn(): ucpp.Ptr<Pawn.ConstPawn> return this.AcknowledgedPawn;
	public extern var MyHUD(get, never): ucpp.Ptr<HUD.ConstHUD>;
	public inline extern function get_MyHUD(): ucpp.Ptr<HUD.ConstHUD> return this.MyHUD;
	public extern var PlayerCameraManager(get, never): ucpp.Ptr<PlayerCameraManager.ConstPlayerCameraManager>;
	public inline extern function get_PlayerCameraManager(): ucpp.Ptr<PlayerCameraManager.ConstPlayerCameraManager> return this.PlayerCameraManager;
	public extern var PlayerCameraManagerClass(get, never): TSubclassOf<PlayerCameraManager.ConstPlayerCameraManager>;
	public inline extern function get_PlayerCameraManagerClass(): TSubclassOf<PlayerCameraManager.ConstPlayerCameraManager> return this.PlayerCameraManagerClass;
	public extern var bAutoManageActiveCameraTarget(get, never): Bool;
	public inline extern function get_bAutoManageActiveCameraTarget(): Bool return this.bAutoManageActiveCameraTarget;
	public extern var TargetViewRotation(get, never): Rotator;
	public inline extern function get_TargetViewRotation(): Rotator return this.TargetViewRotation;
	public extern var SmoothTargetViewRotationSpeed(get, never): ucpp.num.Float32;
	public inline extern function get_SmoothTargetViewRotationSpeed(): ucpp.num.Float32 return this.SmoothTargetViewRotationSpeed;
	public extern var HiddenActors(get, never): TArray<ucpp.Ptr<Actor.ConstActor>>;
	public inline extern function get_HiddenActors(): TArray<ucpp.Ptr<Actor.ConstActor>> return this.HiddenActors;
	public extern var HiddenPrimitiveComponents(get, never): TArray<TWeakObjectPtr<PrimitiveComp.ConstPrimitiveComp>>;
	public inline extern function get_HiddenPrimitiveComponents(): TArray<TWeakObjectPtr<PrimitiveComp.ConstPrimitiveComp>> return this.HiddenPrimitiveComponents;
	public extern var LastSpectatorStateSynchTime(get, never): ucpp.num.Float32;
	public inline extern function get_LastSpectatorStateSynchTime(): ucpp.num.Float32 return this.LastSpectatorStateSynchTime;
	public extern var LastSpectatorSyncLocation(get, never): Vector;
	public inline extern function get_LastSpectatorSyncLocation(): Vector return this.LastSpectatorSyncLocation;
	public extern var LastSpectatorSyncRotation(get, never): Rotator;
	public inline extern function get_LastSpectatorSyncRotation(): Rotator return this.LastSpectatorSyncRotation;
	public extern var ClientCap(get, never): ucpp.num.Int32;
	public inline extern function get_ClientCap(): ucpp.num.Int32 return this.ClientCap;
	public extern var CheatManager(get, never): ucpp.Ptr<CheatManager.ConstCheatManager>;
	public inline extern function get_CheatManager(): ucpp.Ptr<CheatManager.ConstCheatManager> return this.CheatManager;
	public extern var CheatClass(get, never): TSubclassOf<CheatManager.ConstCheatManager>;
	public inline extern function get_CheatClass(): TSubclassOf<CheatManager.ConstCheatManager> return this.CheatClass;
	public extern var PlayerInput(get, never): ucpp.Ptr<PlayerInput.ConstPlayerInput>;
	public inline extern function get_PlayerInput(): ucpp.Ptr<PlayerInput.ConstPlayerInput> return this.PlayerInput;
	public extern var ActiveForceFeedbackEffects(get, never): TArray<ActiveForceFeedbackEffect>;
	public inline extern function get_ActiveForceFeedbackEffects(): TArray<ActiveForceFeedbackEffect> return this.ActiveForceFeedbackEffects;
	public extern var bPlayerIsWaiting(get, never): Bool;
	public inline extern function get_bPlayerIsWaiting(): Bool return this.bPlayerIsWaiting;
	public extern var NetPlayerIndex(get, never): ucpp.num.UInt8;
	public inline extern function get_NetPlayerIndex(): ucpp.num.UInt8 return this.NetPlayerIndex;
	public extern var PendingSwapConnection(get, never): ucpp.Ptr<NetConnection.ConstNetConnection>;
	public inline extern function get_PendingSwapConnection(): ucpp.Ptr<NetConnection.ConstNetConnection> return this.PendingSwapConnection;
	public extern var NetConnection(get, never): ucpp.Ptr<NetConnection.ConstNetConnection>;
	public inline extern function get_NetConnection(): ucpp.Ptr<NetConnection.ConstNetConnection> return this.NetConnection;
	public extern var bShowMouseCursor(get, never): Bool;
	public inline extern function get_bShowMouseCursor(): Bool return this.bShowMouseCursor;
	public extern var bEnableClickEvents(get, never): Bool;
	public inline extern function get_bEnableClickEvents(): Bool return this.bEnableClickEvents;
	public extern var bEnableTouchEvents(get, never): Bool;
	public inline extern function get_bEnableTouchEvents(): Bool return this.bEnableTouchEvents;
	public extern var bEnableMouseOverEvents(get, never): Bool;
	public inline extern function get_bEnableMouseOverEvents(): Bool return this.bEnableMouseOverEvents;
	public extern var bEnableTouchOverEvents(get, never): Bool;
	public inline extern function get_bEnableTouchOverEvents(): Bool return this.bEnableTouchOverEvents;
	public extern var bForceFeedbackEnabled(get, never): Bool;
	public inline extern function get_bForceFeedbackEnabled(): Bool return this.bForceFeedbackEnabled;
	public extern var bEnableMotionControls(get, never): Bool;
	public inline extern function get_bEnableMotionControls(): Bool return this.bEnableMotionControls;
	public extern var bEnableStreamingSource(get, never): Bool;
	public inline extern function get_bEnableStreamingSource(): Bool return this.bEnableStreamingSource;
	public extern var bStreamingSourceShouldActivate(get, never): Bool;
	public inline extern function get_bStreamingSourceShouldActivate(): Bool return this.bStreamingSourceShouldActivate;
	public extern var bStreamingSourceShouldBlockOnSlowStreaming(get, never): Bool;
	public inline extern function get_bStreamingSourceShouldBlockOnSlowStreaming(): Bool return this.bStreamingSourceShouldBlockOnSlowStreaming;
	public extern var StreamingSourcePriority(get, never): EStreamingSourcePriority;
	public inline extern function get_StreamingSourcePriority(): EStreamingSourcePriority return this.StreamingSourcePriority;
	public extern var StreamingSourceDebugColor(get, never): Color;
	public inline extern function get_StreamingSourceDebugColor(): Color return this.StreamingSourceDebugColor;
	public extern var StreamingSourceShapes(get, never): TArray<StreamingSourceShape>;
	public inline extern function get_StreamingSourceShapes(): TArray<StreamingSourceShape> return this.StreamingSourceShapes;
	public extern var ForceFeedbackScale(get, never): ucpp.num.Float32;
	public inline extern function get_ForceFeedbackScale(): ucpp.num.Float32 return this.ForceFeedbackScale;
	public extern var ClickEventKeys(get, never): TArray<Key>;
	public inline extern function get_ClickEventKeys(): TArray<Key> return this.ClickEventKeys;
	public extern var DefaultMouseCursor(get, never): TEnumAsByte<EMouseCursor>;
	public inline extern function get_DefaultMouseCursor(): TEnumAsByte<EMouseCursor> return this.DefaultMouseCursor;
	public extern var CurrentMouseCursor(get, never): TEnumAsByte<EMouseCursor>;
	public inline extern function get_CurrentMouseCursor(): TEnumAsByte<EMouseCursor> return this.CurrentMouseCursor;
	public extern var DefaultClickTraceChannel(get, never): TEnumAsByte<ECollisionChannel>;
	public inline extern function get_DefaultClickTraceChannel(): TEnumAsByte<ECollisionChannel> return this.DefaultClickTraceChannel;
	public extern var CurrentClickTraceChannel(get, never): TEnumAsByte<ECollisionChannel>;
	public inline extern function get_CurrentClickTraceChannel(): TEnumAsByte<ECollisionChannel> return this.CurrentClickTraceChannel;
	public extern var HitResultTraceDistance(get, never): ucpp.num.Float32;
	public inline extern function get_HitResultTraceDistance(): ucpp.num.Float32 return this.HitResultTraceDistance;
	public extern var SeamlessTravelCount(get, never): ucpp.num.UInt16;
	public inline extern function get_SeamlessTravelCount(): ucpp.num.UInt16 return this.SeamlessTravelCount;
	public extern var LastCompletedSeamlessTravelCount(get, never): ucpp.num.UInt16;
	public inline extern function get_LastCompletedSeamlessTravelCount(): ucpp.num.UInt16 return this.LastCompletedSeamlessTravelCount;
}

@:forward
@:nativeGen
@:native("PlayerController*")
abstract PlayerControllerPtr(ucpp.Ptr<PlayerController>) from ucpp.Ptr<PlayerController> to ucpp.Ptr<PlayerController>{
	@:from
	public static extern inline function fromValue(v: PlayerController): PlayerControllerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PlayerController {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}