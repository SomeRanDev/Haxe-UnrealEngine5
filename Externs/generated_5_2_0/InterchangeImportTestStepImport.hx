// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeImportTestStepImport")
@:include("InterchangeImportTestStepImport.h")
@:structAccess
extern class InterchangeImportTestStepImport extends InterchangeImportTestStepBase {
	public var SourceFile: FilePath;
	public var PipelineStack: TArray<cpp.Star<InterchangePipelineBase>>;
	public var bEmptyDestinationFolderPriorToImport: Bool;
	public var bSaveThenReloadImportedAssets: Bool;
	public var bImportIntoLevel: Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstInterchangeImportTestStepImport(InterchangeImportTestStepImport) from InterchangeImportTestStepImport {
	public extern var SourceFile(get, never): FilePath;
	public inline extern function get_SourceFile(): FilePath return this.SourceFile;
	public extern var PipelineStack(get, never): TArray<cpp.Star<InterchangePipelineBase.ConstInterchangePipelineBase>>;
	public inline extern function get_PipelineStack(): TArray<cpp.Star<InterchangePipelineBase.ConstInterchangePipelineBase>> return this.PipelineStack;
	public extern var bEmptyDestinationFolderPriorToImport(get, never): Bool;
	public inline extern function get_bEmptyDestinationFolderPriorToImport(): Bool return this.bEmptyDestinationFolderPriorToImport;
	public extern var bSaveThenReloadImportedAssets(get, never): Bool;
	public inline extern function get_bSaveThenReloadImportedAssets(): Bool return this.bSaveThenReloadImportedAssets;
	public extern var bImportIntoLevel(get, never): Bool;
	public inline extern function get_bImportIntoLevel(): Bool return this.bImportIntoLevel;
}

@:forward
@:nativeGen
@:native("InterchangeImportTestStepImport*")
abstract InterchangeImportTestStepImportPtr(cpp.Star<InterchangeImportTestStepImport>) from cpp.Star<InterchangeImportTestStepImport> to cpp.Star<InterchangeImportTestStepImport>{
	@:from
	public static extern inline function fromValue(v: InterchangeImportTestStepImport): InterchangeImportTestStepImportPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeImportTestStepImport {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}