// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWorld")
@:include("Engine/World.h")
@:structAccess
extern class World extends Object {
	public var PersistentLevel: cpp.Star<Level>;
	public var NetDriver: cpp.Star<NetDriver>;
	public var LineBatcher: cpp.Star<LineBatchComp>;
	public var PersistentLineBatcher: cpp.Star<LineBatchComp>;
	public var ForegroundLineBatcher: cpp.Star<LineBatchComp>;
	public var NetworkManager: cpp.Star<GameNetworkManager>;
	public var PhysicsCollisionHandler: cpp.Star<PhysicsCollisionHandler>;
	public var ExtraReferencedObjects: TArray<cpp.Star<Object>>;
	public var PerModuleDataObjects: TArray<cpp.Star<Object>>;
	private var StreamingLevels: TArray<cpp.Star<LevelStreaming>>;
	private var StreamingLevelsToConsider: StreamingLevelsToConsider;
	private var ServerStreamingLevelsVisibility: cpp.Star<ServerStreamingLevelsVisibility>;
	public var StreamingLevelsPrefix: FString;
	private var CurrentLevelPendingVisibility: cpp.Star<Level>;
	private var CurrentLevelPendingInvisibility: cpp.Star<Level>;
	private var DemoNetDriver: cpp.Star<DemoNetDriver>;
	public var MyParticleEventManager: cpp.Star<ParticleEventManager>;
	private var DefaultPhysicsVolume: cpp.Star<PhysicsVolume>;
	public var bAreConstraintsDirty: Bool;
	private var NavigationSystem: cpp.Star<NavigationSystemBase>;
	private var AuthorityGameMode: cpp.Star<GameModeBase>;
	private var GameState: cpp.Star<GameStateBase>;
	private var AISystem: cpp.Star<AISystemBase>;
	private var AvoidanceManager: cpp.Star<AvoidanceManager>;
	private var Levels: TArray<cpp.Star<Level>>;
	private var LevelCollections: TArray<LevelCollection>;
	private var OwningGameInstance: cpp.Star<GameInstance>;
	private var ParameterCollectionInstances: TArray<cpp.Star<MaterialParameterCollectionInstance>>;
	private var CanvasForRenderingToTarget: cpp.Star<Canvas>;
	private var CanvasForDrawMaterialToRenderTarget: cpp.Star<Canvas>;
	public var PhysicsField: cpp.Star<PhysicsFieldComp>;
	public var LWILastAssignedUID: cpp.UInt32;
	private var ComponentsThatNeedPreEndOfFrameSync: TSet<cpp.Star<ActorComp>>;
	private var ComponentsThatNeedEndOfFrameUpdate: TArray<cpp.Star<ActorComp>>;
	private var ComponentsThatNeedEndOfFrameUpdate_OnGameThread: TArray<cpp.Star<ActorComp>>;
	public var WorldComposition: cpp.Star<WorldComposition>;
	public var ContentBundleManager: cpp.Star<ContentBundleManager>;
	private var PSCPool: WorldPSCPool;

	public function K2_GetWorldSettings(): cpp.Star<WorldSettings>;
	public function HandleTimelineScrubbed(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstWorld(World) from World {
	public extern var PersistentLevel(get, never): cpp.Star<Level.ConstLevel>;
	public inline extern function get_PersistentLevel(): cpp.Star<Level.ConstLevel> return this.PersistentLevel;
	public extern var NetDriver(get, never): cpp.Star<NetDriver.ConstNetDriver>;
	public inline extern function get_NetDriver(): cpp.Star<NetDriver.ConstNetDriver> return this.NetDriver;
	public extern var LineBatcher(get, never): cpp.Star<LineBatchComp.ConstLineBatchComp>;
	public inline extern function get_LineBatcher(): cpp.Star<LineBatchComp.ConstLineBatchComp> return this.LineBatcher;
	public extern var PersistentLineBatcher(get, never): cpp.Star<LineBatchComp.ConstLineBatchComp>;
	public inline extern function get_PersistentLineBatcher(): cpp.Star<LineBatchComp.ConstLineBatchComp> return this.PersistentLineBatcher;
	public extern var ForegroundLineBatcher(get, never): cpp.Star<LineBatchComp.ConstLineBatchComp>;
	public inline extern function get_ForegroundLineBatcher(): cpp.Star<LineBatchComp.ConstLineBatchComp> return this.ForegroundLineBatcher;
	public extern var NetworkManager(get, never): cpp.Star<GameNetworkManager.ConstGameNetworkManager>;
	public inline extern function get_NetworkManager(): cpp.Star<GameNetworkManager.ConstGameNetworkManager> return this.NetworkManager;
	public extern var PhysicsCollisionHandler(get, never): cpp.Star<PhysicsCollisionHandler.ConstPhysicsCollisionHandler>;
	public inline extern function get_PhysicsCollisionHandler(): cpp.Star<PhysicsCollisionHandler.ConstPhysicsCollisionHandler> return this.PhysicsCollisionHandler;
	public extern var ExtraReferencedObjects(get, never): TArray<cpp.Star<Object.ConstObject>>;
	public inline extern function get_ExtraReferencedObjects(): TArray<cpp.Star<Object.ConstObject>> return this.ExtraReferencedObjects;
	public extern var PerModuleDataObjects(get, never): TArray<cpp.Star<Object.ConstObject>>;
	public inline extern function get_PerModuleDataObjects(): TArray<cpp.Star<Object.ConstObject>> return this.PerModuleDataObjects;
	public extern var StreamingLevelsPrefix(get, never): FString;
	public inline extern function get_StreamingLevelsPrefix(): FString return this.StreamingLevelsPrefix;
	public extern var MyParticleEventManager(get, never): cpp.Star<ParticleEventManager.ConstParticleEventManager>;
	public inline extern function get_MyParticleEventManager(): cpp.Star<ParticleEventManager.ConstParticleEventManager> return this.MyParticleEventManager;
	public extern var bAreConstraintsDirty(get, never): Bool;
	public inline extern function get_bAreConstraintsDirty(): Bool return this.bAreConstraintsDirty;
	public extern var PhysicsField(get, never): cpp.Star<PhysicsFieldComp.ConstPhysicsFieldComp>;
	public inline extern function get_PhysicsField(): cpp.Star<PhysicsFieldComp.ConstPhysicsFieldComp> return this.PhysicsField;
	public extern var LWILastAssignedUID(get, never): cpp.UInt32;
	public inline extern function get_LWILastAssignedUID(): cpp.UInt32 return this.LWILastAssignedUID;
	public extern var WorldComposition(get, never): cpp.Star<WorldComposition.ConstWorldComposition>;
	public inline extern function get_WorldComposition(): cpp.Star<WorldComposition.ConstWorldComposition> return this.WorldComposition;
	public extern var ContentBundleManager(get, never): cpp.Star<ContentBundleManager.ConstContentBundleManager>;
	public inline extern function get_ContentBundleManager(): cpp.Star<ContentBundleManager.ConstContentBundleManager> return this.ContentBundleManager;
}

@:forward
@:nativeGen
@:native("World*")
abstract WorldPtr(cpp.Star<World>) from cpp.Star<World> to cpp.Star<World>{
	@:from
	public static extern inline function fromValue(v: World): WorldPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): World {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}