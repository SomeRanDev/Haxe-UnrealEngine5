// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMediaPlateComponent")
@:include("MediaPlateComponent.h")
@:structAccess
extern class MediaPlateComp extends ActorComp {
	public var bPlayOnOpen: Bool;
	public var bAutoPlay: Bool;
	public var bEnableAudio: Bool;
	public var StartTime: cpp.Float32;
	public var SoundComponent: cpp.Star<MediaSoundComp>;
	public var StaticMeshComponent: cpp.Star<StaticMeshComp>;
	public var Letterboxes: TArray<cpp.Star<StaticMeshComp>>;
	public var MediaPlaylist: cpp.Star<MediaPlaylist>;
	public var PlaylistIndex: cpp.Int32;
	public var CacheSettings: MediaSourceCacheSettings;
	public function IsMediaPlatePlaying(): Bool;
	private var bPlayOnlyWhenVisible: Bool;
	public function GetLoop(): Bool;
	public function SetLoop(input: Bool): Void;
	private var VisibleMipsTilesCalculations: EMediaTextureVisibleMipsTiles;
	private var MipMapBias: cpp.Float32;
	public function GetIsAspectRatioAuto(): Bool;
	public function SetIsAspectRatioAuto(input: Bool): Void;
	private var bEnableMipMapUpscaling: Bool;
	private var MipLevelToUpscale: cpp.Int32;
	private var LetterboxAspectRatio: cpp.Float32;
	private var MeshRange: Vector2D;
	private var MediaTextures: TArray<cpp.Star<MediaTexture>>;
	private var MediaPlayer: cpp.Star<MediaPlayer>;

	public function SetPlayOnlyWhenVisible(bInPlayOnlyWhenVisible: Bool): Void;
	public function SetMeshRange(InMeshRange: Vector2D): Void;
	public function SetLetterboxAspectRatio(AspectRatio: cpp.Float32): Void;
	public function Seek(Time: cpp.Reference<Timespan>): Bool;
	public function Rewind(): Bool;
	public function Play(): Void;
	public function Pause(): Void;
	public function Open(): Void;
	private function OnMediaOpened(DeviceUrl: FString): Void;
	private function OnMediaEnd(): Void;
	public function GetMeshRange(): Vector2D;
	public function GetMediaTexture(Index: cpp.Int32): cpp.Star<MediaTexture>;
	public function GetMediaPlayer(): cpp.Star<MediaPlayer>;
	public function GetLetterboxAspectRatio(): cpp.Float32;
	public function Close(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetMeshRange)
@:nativeGen
abstract ConstMediaPlateComp(MediaPlateComp) from MediaPlateComp {
	public extern var bPlayOnOpen(get, never): Bool;
	public inline extern function get_bPlayOnOpen(): Bool return this.bPlayOnOpen;
	public extern var bAutoPlay(get, never): Bool;
	public inline extern function get_bAutoPlay(): Bool return this.bAutoPlay;
	public extern var bEnableAudio(get, never): Bool;
	public inline extern function get_bEnableAudio(): Bool return this.bEnableAudio;
	public extern var StartTime(get, never): cpp.Float32;
	public inline extern function get_StartTime(): cpp.Float32 return this.StartTime;
	public extern var SoundComponent(get, never): cpp.Star<MediaSoundComp.ConstMediaSoundComp>;
	public inline extern function get_SoundComponent(): cpp.Star<MediaSoundComp.ConstMediaSoundComp> return this.SoundComponent;
	public extern var StaticMeshComponent(get, never): cpp.Star<StaticMeshComp.ConstStaticMeshComp>;
	public inline extern function get_StaticMeshComponent(): cpp.Star<StaticMeshComp.ConstStaticMeshComp> return this.StaticMeshComponent;
	public extern var Letterboxes(get, never): TArray<cpp.Star<StaticMeshComp.ConstStaticMeshComp>>;
	public inline extern function get_Letterboxes(): TArray<cpp.Star<StaticMeshComp.ConstStaticMeshComp>> return this.Letterboxes;
	public extern var MediaPlaylist(get, never): cpp.Star<MediaPlaylist.ConstMediaPlaylist>;
	public inline extern function get_MediaPlaylist(): cpp.Star<MediaPlaylist.ConstMediaPlaylist> return this.MediaPlaylist;
	public extern var PlaylistIndex(get, never): cpp.Int32;
	public inline extern function get_PlaylistIndex(): cpp.Int32 return this.PlaylistIndex;
	public extern var CacheSettings(get, never): MediaSourceCacheSettings;
	public inline extern function get_CacheSettings(): MediaSourceCacheSettings return this.CacheSettings;
}

@:forward
@:nativeGen
@:native("MediaPlateComp*")
abstract MediaPlateCompPtr(cpp.Star<MediaPlateComp>) from cpp.Star<MediaPlateComp> to cpp.Star<MediaPlateComp>{
	@:from
	public static extern inline function fromValue(v: MediaPlateComp): MediaPlateCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MediaPlateComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}