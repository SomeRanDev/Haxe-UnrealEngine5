// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEllipseSplineGenerator")
@:include("SplineGeneratorPanel.h")
@:valueType
extern class EllipseSplineGenerator extends SplineGeneratorBase {
	public var NumberOfPoints: ucpp.num.Int32;
	public var Length: ucpp.num.Float32;
	public var Width: ucpp.num.Float32;
	public var bReverseDir: Bool;
	public var bKeepFirstKeyTangent: Bool;
	public var bBranchRight: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstEllipseSplineGenerator(EllipseSplineGenerator) from EllipseSplineGenerator {
	public extern var NumberOfPoints(get, never): ucpp.num.Int32;
	public inline extern function get_NumberOfPoints(): ucpp.num.Int32 return this.NumberOfPoints;
	public extern var Length(get, never): ucpp.num.Float32;
	public inline extern function get_Length(): ucpp.num.Float32 return this.Length;
	public extern var Width(get, never): ucpp.num.Float32;
	public inline extern function get_Width(): ucpp.num.Float32 return this.Width;
	public extern var bReverseDir(get, never): Bool;
	public inline extern function get_bReverseDir(): Bool return this.bReverseDir;
	public extern var bKeepFirstKeyTangent(get, never): Bool;
	public inline extern function get_bKeepFirstKeyTangent(): Bool return this.bKeepFirstKeyTangent;
	public extern var bBranchRight(get, never): Bool;
	public inline extern function get_bBranchRight(): Bool return this.bBranchRight;
}

@:forward
@:nativeGen
@:native("EllipseSplineGenerator*")
abstract EllipseSplineGeneratorPtr(ucpp.Ptr<EllipseSplineGenerator>) from ucpp.Ptr<EllipseSplineGenerator> to ucpp.Ptr<EllipseSplineGenerator>{
	@:from
	public static extern inline function fromValue(v: EllipseSplineGenerator): EllipseSplineGeneratorPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EllipseSplineGenerator {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}