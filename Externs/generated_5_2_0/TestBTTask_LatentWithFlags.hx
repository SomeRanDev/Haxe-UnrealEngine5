// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTestBTTask_LatentWithFlags")
@:include("BehaviorTree/TestBTTask_LatentWithFlags.h")
@:valueType
extern class TestBTTask_LatentWithFlags extends BTTaskNode {
	public var LogIndexExecuteStart: ucpp.num.Int32;
	public var LogIndexExecuting: ucpp.num.Int32;
	public var LogIndexExecuteFinish: ucpp.num.Int32;
	public var LogIndexAbortStart: ucpp.num.Int32;
	public var LogIndexAborting: ucpp.num.Int32;
	public var LogIndexAbortFinish: ucpp.num.Int32;
	public var ExecuteHalfTicks: ucpp.num.Int32;
	public var AbortHalfTicks: ucpp.num.Int32;
	public var KeyNameExecute: FName;
	public var KeyNameAbort: FName;
	public var LogResult: TEnumAsByte<EBTNodeResult>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstTestBTTask_LatentWithFlags(TestBTTask_LatentWithFlags) from TestBTTask_LatentWithFlags {
	public extern var LogIndexExecuteStart(get, never): ucpp.num.Int32;
	public inline extern function get_LogIndexExecuteStart(): ucpp.num.Int32 return this.LogIndexExecuteStart;
	public extern var LogIndexExecuting(get, never): ucpp.num.Int32;
	public inline extern function get_LogIndexExecuting(): ucpp.num.Int32 return this.LogIndexExecuting;
	public extern var LogIndexExecuteFinish(get, never): ucpp.num.Int32;
	public inline extern function get_LogIndexExecuteFinish(): ucpp.num.Int32 return this.LogIndexExecuteFinish;
	public extern var LogIndexAbortStart(get, never): ucpp.num.Int32;
	public inline extern function get_LogIndexAbortStart(): ucpp.num.Int32 return this.LogIndexAbortStart;
	public extern var LogIndexAborting(get, never): ucpp.num.Int32;
	public inline extern function get_LogIndexAborting(): ucpp.num.Int32 return this.LogIndexAborting;
	public extern var LogIndexAbortFinish(get, never): ucpp.num.Int32;
	public inline extern function get_LogIndexAbortFinish(): ucpp.num.Int32 return this.LogIndexAbortFinish;
	public extern var ExecuteHalfTicks(get, never): ucpp.num.Int32;
	public inline extern function get_ExecuteHalfTicks(): ucpp.num.Int32 return this.ExecuteHalfTicks;
	public extern var AbortHalfTicks(get, never): ucpp.num.Int32;
	public inline extern function get_AbortHalfTicks(): ucpp.num.Int32 return this.AbortHalfTicks;
	public extern var KeyNameExecute(get, never): FName;
	public inline extern function get_KeyNameExecute(): FName return this.KeyNameExecute;
	public extern var KeyNameAbort(get, never): FName;
	public inline extern function get_KeyNameAbort(): FName return this.KeyNameAbort;
	public extern var LogResult(get, never): TEnumAsByte<EBTNodeResult>;
	public inline extern function get_LogResult(): TEnumAsByte<EBTNodeResult> return this.LogResult;
}

@:forward
@:nativeGen
@:native("TestBTTask_LatentWithFlags*")
abstract TestBTTask_LatentWithFlagsPtr(ucpp.Ptr<TestBTTask_LatentWithFlags>) from ucpp.Ptr<TestBTTask_LatentWithFlags> to ucpp.Ptr<TestBTTask_LatentWithFlags>{
	@:from
	public static extern inline function fromValue(v: TestBTTask_LatentWithFlags): TestBTTask_LatentWithFlagsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TestBTTask_LatentWithFlags {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}