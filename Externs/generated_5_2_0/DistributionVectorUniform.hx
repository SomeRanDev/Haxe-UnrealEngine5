// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UDistributionVectorUniform")
@:include("Distributions/DistributionVectorUniform.h")
@:valueType
extern class DistributionVectorUniform extends DistributionVector {
	public var Max: Vector;
	public var Min: Vector;
	public var bLockAxes: Bool;
	public var LockedAxes: TEnumAsByte<EDistributionVectorLockFlags>;
	public var MirrorFlags: TEnumAsByte<EDistributionVectorMirrorFlags>;
	public var bUseExtremes: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstDistributionVectorUniform(DistributionVectorUniform) from DistributionVectorUniform {
	public extern var Max(get, never): Vector;
	public inline extern function get_Max(): Vector return this.Max;
	public extern var Min(get, never): Vector;
	public inline extern function get_Min(): Vector return this.Min;
	public extern var bLockAxes(get, never): Bool;
	public inline extern function get_bLockAxes(): Bool return this.bLockAxes;
	public extern var LockedAxes(get, never): TEnumAsByte<EDistributionVectorLockFlags>;
	public inline extern function get_LockedAxes(): TEnumAsByte<EDistributionVectorLockFlags> return this.LockedAxes;
	public extern var MirrorFlags(get, never): TEnumAsByte<EDistributionVectorMirrorFlags>;
	public inline extern function get_MirrorFlags(): TEnumAsByte<EDistributionVectorMirrorFlags> return this.MirrorFlags;
	public extern var bUseExtremes(get, never): Bool;
	public inline extern function get_bUseExtremes(): Bool return this.bUseExtremes;
}

@:forward
@:nativeGen
@:native("DistributionVectorUniform*")
abstract DistributionVectorUniformPtr(ucpp.Ptr<DistributionVectorUniform>) from ucpp.Ptr<DistributionVectorUniform> to ucpp.Ptr<DistributionVectorUniform>{
	@:from
	public static extern inline function fromValue(v: DistributionVectorUniform): DistributionVectorUniformPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): DistributionVectorUniform {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}