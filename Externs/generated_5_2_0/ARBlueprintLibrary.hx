// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UARBlueprintLibrary")
@:include("ARBlueprintLibrary.h")
@:structAccess
extern class ARBlueprintLibrary extends BlueprintFunctionLibrary {
	public function UnpinComponent(ComponentToUnpin: cpp.Star<SceneComp>): Void;
	public function ToggleARCapture(bOnOff: Bool, CaptureType: EARCaptureType): Bool;
	public function StopARSession(): Void;
	public function StartARSession(SessionConfig: cpp.Star<ARSessionConfig>): Void;
	public function SetEnabledXRCamera(bOnOff: Bool): Void;
	public function SetARWorldScale(InWorldScale: cpp.Float32): Void;
	public function SetARWorldOriginLocationAndRotation(OriginLocation: Vector, OriginRotation: Rotator, bIsTransformInWorldSpace: Bool, bMaintainUpDirection: Bool): Void;
	public function SetAlignmentTransform(InAlignmentTransform: cpp.Reference<Transform>): Void;
	public function SaveARPinToLocalStore(InSaveName: FName, InPin: cpp.Star<ARPin>): Bool;
	public function ResizeXRCamera(InSize: cpp.Reference<IntPoint>): IntPoint;
	public function RemovePin(PinToRemove: cpp.Star<ARPin>): Void;
	public function RemoveARPinFromLocalStore(InSaveName: FName): Void;
	public function RemoveAllARPinsFromLocalStore(): Void;
	public function PinComponentToTraceResult(ComponentToPin: cpp.Star<SceneComp>, TraceResult: cpp.Reference<ARTraceResult>, DebugName: FName): cpp.Star<ARPin>;
	public function PinComponentToARPin(ComponentToPin: cpp.Star<SceneComp>, Pin: cpp.Star<ARPin>): Bool;
	public function PinComponent(ComponentToPin: cpp.Star<SceneComp>, PinToWorldTransform: cpp.Reference<Transform>, TrackedGeometry: cpp.Star<ARTrackedGeometry>, DebugName: FName): cpp.Star<ARPin>;
	public function PauseARSession(): Void;
	public function LoadARPinsFromLocalStore(): TMap<FName, cpp.Star<ARPin>>;
	public function LineTraceTrackedObjects3D(Start: Vector, End: Vector, bTestFeaturePoints: Bool, bTestGroundPlane: Bool, bTestPlaneExtents: Bool, bTestPlaneBoundaryPolygon: Bool): TArray<ARTraceResult>;
	public function LineTraceTrackedObjects(ScreenCoord: Vector2D, bTestFeaturePoints: Bool, bTestGroundPlane: Bool, bTestPlaneExtents: Bool, bTestPlaneBoundaryPolygon: Bool): TArray<ARTraceResult>;
	public function IsSessionTypeSupported(SessionType: EARSessionType): Bool;
	public function IsSessionTrackingFeatureSupported(SessionType: EARSessionType, SessionTrackingFeature: EARSessionTrackingFeature): Bool;
	public function IsSceneReconstructionSupported(SessionType: EARSessionType, SceneReconstructionMethod: EARSceneReconstruction): Bool;
	public function IsARSupported(): Bool;
	public function IsARPinLocalStoreSupported(): Bool;
	public function IsARPinLocalStoreReady(): Bool;
	public function GetWorldMappingStatus(): EARWorldMappingState;
	public function GetTrackingQualityReason(): EARTrackingQualityReason;
	public function GetTrackingQuality(): EARTrackingQuality;
	public function GetSupportedVideoFormats(SessionType: EARSessionType): TArray<ARVideoFormat>;
	public function GetSessionConfig(): cpp.Star<ARSessionConfig>;
	public function GetPointCloud(): TArray<Vector>;
	public function GetPersonSegmentationImage(): cpp.Star<ARTexture>;
	public function GetPersonSegmentationDepthImage(): cpp.Star<ARTexture>;
	public function GetObjectClassificationAtLocation(InWorldLocation: cpp.Reference<Vector>, OutClassification: cpp.Reference<EARObjectClassification>, OutClassificationLocation: cpp.Reference<Vector>, MaxLocationDiff: cpp.Float32): Bool;
	public function GetNumberOfTrackedFacesSupported(): cpp.Int32;
	public function GetCurrentLightEstimate(): cpp.Star<ARLightEstimate>;
	public function GetCameraIntrinsics(OutCameraIntrinsics: cpp.Reference<ARCameraIntrinsics>): Bool;
	public function GetCameraImage(): cpp.Star<ARTextureCameraImage>;
	public function GetCameraDepth(): cpp.Star<ARTextureCameraDepth>;
	public function GetARWorldScale(): cpp.Float32;
	public function GetARTexture(TextureType: EARTextureType): cpp.Star<ARTexture>;
	public function GetARSessionStatus(): ARSessionStatus;
	public function GetAllTrackedPoses(): TArray<cpp.Star<ARTrackedPose>>;
	public function GetAllTrackedPoints(): TArray<cpp.Star<ARTrackedPoint>>;
	public function GetAllTrackedPlanes(): TArray<cpp.Star<ARPlaneGeometry>>;
	public function GetAllTrackedImages(): TArray<cpp.Star<ARTrackedImage>>;
	public function GetAllTrackedEnvironmentCaptureProbes(): TArray<cpp.Star<AREnvironmentCaptureProbe>>;
	public function GetAllTracked2DPoses(): TArray<ARPose2D>;
	public function GetAllPins(): TArray<cpp.Star<ARPin>>;
	public function GetAllGeometriesByClass(GeometryClass: TSubclassOf<ARTrackedGeometry>): TArray<cpp.Star<ARTrackedGeometry>>;
	public function GetAllGeometries(): TArray<cpp.Star<ARTrackedGeometry>>;
	public function GetAlignmentTransform(): Transform;
	public function FindTrackedPointsByName(PointName: FString): TArray<cpp.Star<ARTrackedPoint>>;
	public function DebugDrawTrackedGeometry(TrackedGeometry: cpp.Star<ARTrackedGeometry>, WorldContextObject: cpp.Star<Object>, Color: LinearColor, OutlineThickness: cpp.Float32, PersistForSeconds: cpp.Float32): Void;
	public function DebugDrawPin(ARPin: cpp.Star<ARPin>, WorldContextObject: cpp.Star<Object>, Color: LinearColor, Scale: cpp.Float32, PersistForSeconds: cpp.Float32): Void;
	public function CalculateClosestIntersection(StartPoints: cpp.Reference<TArray<Vector>>, EndPoints: cpp.Reference<TArray<Vector>>, ClosestIntersection: cpp.Reference<Vector>): Void;
	public function CalculateAlignmentTransform(TransformInFirstCoordinateSystem: cpp.Reference<Transform>, TransformInSecondCoordinateSystem: cpp.Reference<Transform>, AlignmentTransform: cpp.Reference<Transform>): Void;
	public function AddTrackedPointWithName(WorldTransform: cpp.Reference<Transform>, PointName: FString, bDeletePointsWithSameName: Bool): Bool;
	public function AddRuntimeCandidateImage(SessionConfig: cpp.Star<ARSessionConfig>, CandidateTexture: cpp.Star<Texture2D>, FriendlyName: FString, PhysicalWidth: cpp.Float32): cpp.Star<ARCandidateImage>;
	public function AddManualEnvironmentCaptureProbe(Location: Vector, Extent: Vector): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstARBlueprintLibrary(ARBlueprintLibrary) from ARBlueprintLibrary {
}

@:forward
@:nativeGen
@:native("ARBlueprintLibrary*")
abstract ARBlueprintLibraryPtr(cpp.Star<ARBlueprintLibrary>) from cpp.Star<ARBlueprintLibrary> to cpp.Star<ARBlueprintLibrary>{
	@:from
	public static extern inline function fromValue(v: ARBlueprintLibrary): ARBlueprintLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ARBlueprintLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}