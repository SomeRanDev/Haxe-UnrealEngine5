// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UARBlueprintLibrary")
@:include("ARBlueprintLibrary.h")
@:valueType
extern class ARBlueprintLibrary extends BlueprintFunctionLibrary {
	public function UnpinComponent(ComponentToUnpin: ucpp.Ptr<SceneComp>): Void;
	public function ToggleARCapture(bOnOff: Bool, CaptureType: EARCaptureType): Bool;
	public function StopARSession(): Void;
	public function StartARSession(SessionConfig: ucpp.Ptr<ARSessionConfig>): Void;
	public function SetEnabledXRCamera(bOnOff: Bool): Void;
	public function SetARWorldScale(InWorldScale: ucpp.num.Float32): Void;
	public function SetARWorldOriginLocationAndRotation(OriginLocation: Vector, OriginRotation: Rotator, bIsTransformInWorldSpace: Bool, bMaintainUpDirection: Bool): Void;
	public function SetAlignmentTransform(InAlignmentTransform: ucpp.Ref<Transform>): Void;
	public function SaveARPinToLocalStore(InSaveName: FName, InPin: ucpp.Ptr<ARPin>): Bool;
	public function ResizeXRCamera(InSize: ucpp.Ref<IntPoint>): IntPoint;
	public function RemovePin(PinToRemove: ucpp.Ptr<ARPin>): Void;
	public function RemoveARPinFromLocalStore(InSaveName: FName): Void;
	public function RemoveAllARPinsFromLocalStore(): Void;
	public function PinComponentToTraceResult(ComponentToPin: ucpp.Ptr<SceneComp>, TraceResult: ucpp.Ref<ARTraceResult>, DebugName: FName): ucpp.Ptr<ARPin>;
	public function PinComponentToARPin(ComponentToPin: ucpp.Ptr<SceneComp>, Pin: ucpp.Ptr<ARPin>): Bool;
	public function PinComponent(ComponentToPin: ucpp.Ptr<SceneComp>, PinToWorldTransform: ucpp.Ref<Transform>, TrackedGeometry: ucpp.Ptr<ARTrackedGeometry>, DebugName: FName): ucpp.Ptr<ARPin>;
	public function PauseARSession(): Void;
	public function LoadARPinsFromLocalStore(): TMap<FName, ucpp.Ptr<ARPin>>;
	public function LineTraceTrackedObjects3D(Start: Vector, End: Vector, bTestFeaturePoints: Bool, bTestGroundPlane: Bool, bTestPlaneExtents: Bool, bTestPlaneBoundaryPolygon: Bool): TArray<ARTraceResult>;
	public function LineTraceTrackedObjects(ScreenCoord: Vector2D, bTestFeaturePoints: Bool, bTestGroundPlane: Bool, bTestPlaneExtents: Bool, bTestPlaneBoundaryPolygon: Bool): TArray<ARTraceResult>;
	public function IsSessionTypeSupported(SessionType: EARSessionType): Bool;
	public function IsSessionTrackingFeatureSupported(SessionType: EARSessionType, SessionTrackingFeature: EARSessionTrackingFeature): Bool;
	public function IsSceneReconstructionSupported(SessionType: EARSessionType, SceneReconstructionMethod: EARSceneReconstruction): Bool;
	public function IsARSupported(): Bool;
	public function IsARPinLocalStoreSupported(): Bool;
	public function IsARPinLocalStoreReady(): Bool;
	public function GetWorldMappingStatus(): EARWorldMappingState;
	public function GetTrackingQualityReason(): EARTrackingQualityReason;
	public function GetTrackingQuality(): EARTrackingQuality;
	public function GetSupportedVideoFormats(SessionType: EARSessionType): TArray<ARVideoFormat>;
	public function GetSessionConfig(): ucpp.Ptr<ARSessionConfig>;
	public function GetPointCloud(): TArray<Vector>;
	public function GetPersonSegmentationImage(): ucpp.Ptr<ARTexture>;
	public function GetPersonSegmentationDepthImage(): ucpp.Ptr<ARTexture>;
	public function GetObjectClassificationAtLocation(InWorldLocation: ucpp.Ref<Vector>, OutClassification: ucpp.Ref<EARObjectClassification>, OutClassificationLocation: ucpp.Ref<Vector>, MaxLocationDiff: ucpp.num.Float32): Bool;
	public function GetNumberOfTrackedFacesSupported(): ucpp.num.Int32;
	public function GetCurrentLightEstimate(): ucpp.Ptr<ARLightEstimate>;
	public function GetCameraIntrinsics(OutCameraIntrinsics: ucpp.Ref<ARCameraIntrinsics>): Bool;
	public function GetCameraImage(): ucpp.Ptr<ARTextureCameraImage>;
	public function GetCameraDepth(): ucpp.Ptr<ARTextureCameraDepth>;
	public function GetARWorldScale(): ucpp.num.Float32;
	public function GetARTexture(TextureType: EARTextureType): ucpp.Ptr<ARTexture>;
	public function GetARSessionStatus(): ARSessionStatus;
	public function GetAllTrackedPoses(): TArray<ucpp.Ptr<ARTrackedPose>>;
	public function GetAllTrackedPoints(): TArray<ucpp.Ptr<ARTrackedPoint>>;
	public function GetAllTrackedPlanes(): TArray<ucpp.Ptr<ARPlaneGeometry>>;
	public function GetAllTrackedImages(): TArray<ucpp.Ptr<ARTrackedImage>>;
	public function GetAllTrackedEnvironmentCaptureProbes(): TArray<ucpp.Ptr<AREnvironmentCaptureProbe>>;
	public function GetAllTracked2DPoses(): TArray<ARPose2D>;
	public function GetAllPins(): TArray<ucpp.Ptr<ARPin>>;
	public function GetAllGeometriesByClass(GeometryClass: TSubclassOf<ARTrackedGeometry>): TArray<ucpp.Ptr<ARTrackedGeometry>>;
	public function GetAllGeometries(): TArray<ucpp.Ptr<ARTrackedGeometry>>;
	public function GetAlignmentTransform(): Transform;
	public function FindTrackedPointsByName(PointName: FString): TArray<ucpp.Ptr<ARTrackedPoint>>;
	public function DebugDrawTrackedGeometry(TrackedGeometry: ucpp.Ptr<ARTrackedGeometry>, WorldContextObject: ucpp.Ptr<Object>, Color: LinearColor, OutlineThickness: ucpp.num.Float32, PersistForSeconds: ucpp.num.Float32): Void;
	public function DebugDrawPin(ARPin: ucpp.Ptr<ARPin>, WorldContextObject: ucpp.Ptr<Object>, Color: LinearColor, Scale: ucpp.num.Float32, PersistForSeconds: ucpp.num.Float32): Void;
	public function CalculateClosestIntersection(StartPoints: ucpp.Ref<TArray<Vector>>, EndPoints: ucpp.Ref<TArray<Vector>>, ClosestIntersection: ucpp.Ref<Vector>): Void;
	public function CalculateAlignmentTransform(TransformInFirstCoordinateSystem: ucpp.Ref<Transform>, TransformInSecondCoordinateSystem: ucpp.Ref<Transform>, AlignmentTransform: ucpp.Ref<Transform>): Void;
	public function AddTrackedPointWithName(WorldTransform: ucpp.Ref<Transform>, PointName: FString, bDeletePointsWithSameName: Bool): Bool;
	public function AddRuntimeCandidateImage(SessionConfig: ucpp.Ptr<ARSessionConfig>, CandidateTexture: ucpp.Ptr<Texture2D>, FriendlyName: FString, PhysicalWidth: ucpp.num.Float32): ucpp.Ptr<ARCandidateImage>;
	public function AddManualEnvironmentCaptureProbe(Location: Vector, Extent: Vector): Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstARBlueprintLibrary(ARBlueprintLibrary) from ARBlueprintLibrary {
}

@:forward
@:nativeGen
@:native("ARBlueprintLibrary*")
abstract ARBlueprintLibraryPtr(ucpp.Ptr<ARBlueprintLibrary>) from ucpp.Ptr<ARBlueprintLibrary> to ucpp.Ptr<ARBlueprintLibrary>{
	@:from
	public static extern inline function fromValue(v: ARBlueprintLibrary): ARBlueprintLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ARBlueprintLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}