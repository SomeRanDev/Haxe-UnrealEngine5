// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTypedElementWorldInterface")
@:structAccess
extern class TypedElementWorldInterface extends Interface {
	public function SetWorldTransform(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, InTransform: cpp.Reference<Transform>): Bool;
	public function SetRelativeTransform(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, InTransform: cpp.Reference<Transform>): Bool;
	public function SetPivotOffset(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, InPivotOffset: cpp.Reference<Vector>): Bool;
	public function PromoteElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, OverrideWorld: cpp.Star<World>): ScriptTypedElementHandle;
	public function NotifyMovementStarted(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): Void;
	public function NotifyMovementOngoing(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): Void;
	public function NotifyMovementEnded(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): Void;
	public function IsTemplateElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): Bool;
	public function GetWorldTransform(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, OutTransform: cpp.Reference<Transform>): Bool;
	public function GetRelativeTransform(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, OutTransform: cpp.Reference<Transform>): Bool;
	public function GetPivotOffset(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, OutPivotOffset: cpp.Reference<Vector>): Bool;
	public function GetOwnerWorld(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): cpp.Star<World>;
	public function GetOwnerLevel(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): cpp.Star<Level>;
	public function GetBounds(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, OutBounds: cpp.Reference<BoxSphereBounds>): Bool;
	public function DuplicateElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, InWorld: cpp.Star<World>, InLocationOffset: cpp.Reference<Vector>): ScriptTypedElementHandle;
	public function DeleteElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, InWorld: cpp.Star<World>, InSelectionSet: cpp.Star<TypedElementSelectionSet>, InDeletionOptions: cpp.Reference<TypedElementDeletionOptions>): Bool;
	public function CanPromoteElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): Bool;
	public function CanMoveElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>, InWorldType: ETypedElementWorldType): Bool;
	public function CanEditElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): Bool;
	public function CanDuplicateElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): Bool;
	public function CanDeleteElement(InElementHandle: cpp.Reference<ScriptTypedElementHandle>): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstTypedElementWorldInterface(TypedElementWorldInterface) from TypedElementWorldInterface {
}

@:forward
@:nativeGen
@:native("TypedElementWorldInterface*")
abstract TypedElementWorldInterfacePtr(cpp.Star<TypedElementWorldInterface>) from cpp.Star<TypedElementWorldInterface> to cpp.Star<TypedElementWorldInterface>{
	@:from
	public static extern inline function fromValue(v: TypedElementWorldInterface): TypedElementWorldInterfacePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TypedElementWorldInterface {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}