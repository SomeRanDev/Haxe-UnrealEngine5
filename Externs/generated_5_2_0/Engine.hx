// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEngine")
@:include("Engine/Engine.h")
@:structAccess
extern class Engine extends Object {
	private var TinyFont: cpp.Star<Font>;
	public var TinyFontName: SoftObjectPath;
	private var SmallFont: cpp.Star<Font>;
	public var SmallFontName: SoftObjectPath;
	private var MediumFont: cpp.Star<Font>;
	public var MediumFontName: SoftObjectPath;
	private var LargeFont: cpp.Star<Font>;
	public var LargeFontName: SoftObjectPath;
	private var SubtitleFont: cpp.Star<Font>;
	public var SubtitleFontName: SoftObjectPath;
	private var AdditionalFonts: TArray<cpp.Star<Font>>;
	public var AdditionalFontNames: TArray<FString>;
	public var ConsoleClass: TSubclassOf<Console>;
	public var ConsoleClassName: SoftClassPath;
	public var GameViewportClientClass: TSubclassOf<GameViewportClient>;
	public var GameViewportClientClassName: SoftClassPath;
	public var LocalPlayerClass: TSubclassOf<LocalPlayer>;
	public var LocalPlayerClassName: SoftClassPath;
	public var WorldSettingsClass: TSubclassOf<WorldSettings>;
	public var WorldSettingsClassName: SoftClassPath;
	public var NavigationSystemClassName: SoftClassPath;
	public var NavigationSystemClass: TSubclassOf<NavigationSystemBase>;
	public var NavigationSystemConfigClassName: SoftClassPath;
	public var NavigationSystemConfigClass: TSubclassOf<NavigationSystemConfig>;
	public var AvoidanceManagerClassName: SoftClassPath;
	public var AvoidanceManagerClass: TSubclassOf<AvoidanceManager>;
	public var AIControllerClassName: SoftClassPath;
	public var PhysicsCollisionHandlerClass: TSubclassOf<PhysicsCollisionHandler>;
	public var PhysicsCollisionHandlerClassName: SoftClassPath;
	public var GameUserSettingsClassName: SoftClassPath;
	public var GameUserSettingsClass: TSubclassOf<GameUserSettings>;
	public var GameUserSettings: cpp.Star<GameUserSettings>;
	public var LevelScriptActorClass: TSubclassOf<LevelScriptActor>;
	public var LevelScriptActorClassName: SoftClassPath;
	public var DefaultBlueprintBaseClassName: SoftClassPath;
	public var GameSingletonClassName: SoftClassPath;
	public var GameSingleton: cpp.Star<Object>;
	public var AssetManagerClassName: SoftClassPath;
	public var AssetManager: cpp.Star<AssetManager>;
	public var DefaultTexture: cpp.Star<Texture2D>;
	public var DefaultTextureName: SoftObjectPath;
	public var DefaultDiffuseTexture: cpp.Star<Texture>;
	public var DefaultDiffuseTextureName: SoftObjectPath;
	public var DefaultBSPVertexTexture: cpp.Star<Texture2D>;
	public var DefaultBSPVertexTextureName: SoftObjectPath;
	public var HighFrequencyNoiseTexture: cpp.Star<Texture2D>;
	public var HighFrequencyNoiseTextureName: SoftObjectPath;
	public var DefaultBokehTexture: cpp.Star<Texture2D>;
	public var DefaultBokehTextureName: SoftObjectPath;
	public var DefaultBloomKernelTexture: cpp.Star<Texture2D>;
	public var DefaultBloomKernelTextureName: SoftObjectPath;
	public var DefaultFilmGrainTexture: cpp.Star<Texture2D>;
	public var DefaultFilmGrainTextureName: SoftObjectPath;
	public var WireframeMaterial: cpp.Star<Material>;
	public var WireframeMaterialName: FString;
	public var DebugMeshMaterial: cpp.Star<Material>;
	public var DebugMeshMaterialName: SoftObjectPath;
	public var NaniteHiddenSectionMaterial: cpp.Star<Material>;
	public var NaniteHiddenSectionMaterialName: FString;
	public var EmissiveMeshMaterial: cpp.Star<Material>;
	public var EmissiveMeshMaterialName: SoftObjectPath;
	public var LevelColorationLitMaterial: cpp.Star<Material>;
	public var LevelColorationLitMaterialName: FString;
	public var LevelColorationUnlitMaterial: cpp.Star<Material>;
	public var LevelColorationUnlitMaterialName: FString;
	public var LightingTexelDensityMaterial: cpp.Star<Material>;
	public var LightingTexelDensityName: FString;
	public var ShadedLevelColorationLitMaterial: cpp.Star<Material>;
	public var ShadedLevelColorationLitMaterialName: FString;
	public var ShadedLevelColorationUnlitMaterial: cpp.Star<Material>;
	public var ShadedLevelColorationUnlitMaterialName: FString;
	public var RemoveSurfaceMaterial: cpp.Star<Material>;
	public var RemoveSurfaceMaterialName: SoftObjectPath;
	public var VertexColorMaterial: cpp.Star<Material>;
	public var VertexColorMaterialName: FString;
	public var VertexColorViewModeMaterial_ColorOnly: cpp.Star<Material>;
	public var VertexColorViewModeMaterialName_ColorOnly: FString;
	public var VertexColorViewModeMaterial_AlphaAsColor: cpp.Star<Material>;
	public var VertexColorViewModeMaterialName_AlphaAsColor: FString;
	public var VertexColorViewModeMaterial_RedOnly: cpp.Star<Material>;
	public var VertexColorViewModeMaterialName_RedOnly: FString;
	public var VertexColorViewModeMaterial_GreenOnly: cpp.Star<Material>;
	public var VertexColorViewModeMaterialName_GreenOnly: FString;
	public var VertexColorViewModeMaterial_BlueOnly: cpp.Star<Material>;
	public var VertexColorViewModeMaterialName_BlueOnly: FString;
	public var DebugEditorMaterialName: SoftObjectPath;
	public var ConstraintLimitMaterial: cpp.Star<Material>;
	public var ConstraintLimitMaterialX: cpp.Star<MaterialInstanceDynamic>;
	public var ConstraintLimitMaterialXAxis: cpp.Star<MaterialInstanceDynamic>;
	public var ConstraintLimitMaterialY: cpp.Star<MaterialInstanceDynamic>;
	public var ConstraintLimitMaterialYAxis: cpp.Star<MaterialInstanceDynamic>;
	public var ConstraintLimitMaterialZ: cpp.Star<MaterialInstanceDynamic>;
	public var ConstraintLimitMaterialZAxis: cpp.Star<MaterialInstanceDynamic>;
	public var ConstraintLimitMaterialPrismatic: cpp.Star<MaterialInstanceDynamic>;
	public var InvalidLightmapSettingsMaterial: cpp.Star<Material>;
	public var InvalidLightmapSettingsMaterialName: SoftObjectPath;
	public var PreviewShadowsIndicatorMaterial: cpp.Star<Material>;
	public var PreviewShadowsIndicatorMaterialName: SoftObjectPath;
	public var ArrowMaterial: cpp.Star<Material>;
	public var ArrowMaterialYellow: cpp.Star<MaterialInstanceDynamic>;
	public var ArrowMaterialName: SoftObjectPath;
	public var LightingOnlyBrightness: LinearColor;
	public var ShaderComplexityColors: TArray<LinearColor>;
	public var QuadComplexityColors: TArray<LinearColor>;
	public var LightComplexityColors: TArray<LinearColor>;
	public var StationaryLightOverlapColors: TArray<LinearColor>;
	public var LODColorationColors: TArray<LinearColor>;
	public var HLODColorationColors: TArray<LinearColor>;
	public var StreamingAccuracyColors: TArray<LinearColor>;
	public var GPUSkinCacheVisualizationExcludedColor: LinearColor;
	public var GPUSkinCacheVisualizationIncludedColor: LinearColor;
	public var GPUSkinCacheVisualizationRecomputeTangentsColor: LinearColor;
	public var GPUSkinCacheVisualizationLowMemoryThresholdInMB: cpp.Float32;
	public var GPUSkinCacheVisualizationHighMemoryThresholdInMB: cpp.Float32;
	public var GPUSkinCacheVisualizationLowMemoryColor: LinearColor;
	public var GPUSkinCacheVisualizationMidMemoryColor: LinearColor;
	public var GPUSkinCacheVisualizationHighMemoryColor: LinearColor;
	public var GPUSkinCacheVisualizationRayTracingLODOffsetColors: TArray<LinearColor>;
	public var MaxPixelShaderAdditiveComplexityCount: cpp.Float32;
	public var MaxES3PixelShaderAdditiveComplexityCount: cpp.Float32;
	public var MinLightMapDensity: cpp.Float32;
	public var IdealLightMapDensity: cpp.Float32;
	public var MaxLightMapDensity: cpp.Float32;
	public var bRenderLightMapDensityGrayscale: Bool;
	public var RenderLightMapDensityGrayscaleScale: cpp.Float32;
	public var RenderLightMapDensityColorScale: cpp.Float32;
	public var LightMapDensityVertexMappedColor: LinearColor;
	public var LightMapDensitySelectedColor: LinearColor;
	public var StatColorMappings: TArray<StatColorMapping>;
	public var DefaultPhysMaterial: cpp.Star<PhysicalMaterial>;
	public var DefaultPhysMaterialName: SoftObjectPath;
	public var DefaultDestructiblePhysMaterial: cpp.Star<PhysicalMaterial>;
	public var DefaultDestructiblePhysMaterialName: SoftObjectPath;
	public var ActiveGameNameRedirects: TArray<GameNameRedirect>;
	public var ActiveClassRedirects: TArray<ClassRedirect>;
	public var ActivePluginRedirects: TArray<PluginRedirect>;
	public var ActiveStructRedirects: TArray<StructRedirect>;
	public var PreIntegratedSkinBRDFTexture: cpp.Star<Texture2D>;
	public var PreIntegratedSkinBRDFTextureName: SoftObjectPath;
	public var BlueNoiseScalarTexture: cpp.Star<Texture2D>;
	public var BlueNoiseVec2Texture: cpp.Star<Texture2D>;
	public var BlueNoiseScalarTextureName: SoftObjectPath;
	public var BlueNoiseVec2TextureName: SoftObjectPath;
	public var MiniFontTexture: cpp.Star<Texture2D>;
	public var MiniFontTextureName: SoftObjectPath;
	public var WeightMapPlaceholderTexture: cpp.Star<Texture>;
	public var WeightMapPlaceholderTextureName: SoftObjectPath;
	public var LightMapDensityTexture: cpp.Star<Texture2D>;
	public var LightMapDensityTextureName: SoftObjectPath;
	public var GameViewport: cpp.Star<GameViewportClient>;
	public var DeferredCommands: TArray<FString>;
	public var NearClipPlane: cpp.Float32;
	public var bSubtitlesEnabled: Bool;
	public var bSubtitlesForcedOff: Bool;
	public var MaximumLoopIterationCount: cpp.Int32;
	public var bCanBlueprintsTickByDefault: Bool;
	public var bOptimizeAnimBlueprintMemberVariableAccess: Bool;
	public var bAllowMultiThreadedAnimationUpdate: Bool;
	public var bEnableEditorPSysRealtimeLOD: Bool;
	public var bSmoothFrameRate: Bool;
	public var bUseFixedFrameRate: Bool;
	public var FixedFrameRate: cpp.Float32;
	public var SmoothedFrameRateRange: FloatRange;
	private var CustomTimeStep: cpp.Star<EngineCustomTimeStep>;
	public var CustomTimeStepClassName: SoftClassPath;
	private var TimecodeProvider: cpp.Star<TimecodeProvider>;
	public var TimecodeProviderClassName: SoftClassPath;
	public var bGenerateDefaultTimecode: Bool;
	public var GenerateDefaultTimecodeFrameRate: FrameRate;
	public var GenerateDefaultTimecodeFrameDelay: cpp.Float32;
	public var bCheckForMultiplePawnsSpawnedInAFrame: Bool;
	public var NumPawnsAllowedToBeSpawnedInAFrame: cpp.Int32;
	public var C_WorldBox: Color;
	public var C_BrushWire: Color;
	public var C_AddWire: Color;
	public var C_SubtractWire: Color;
	public var C_SemiSolidWire: Color;
	public var C_NonSolidWire: Color;
	public var C_WireBackground: Color;
	public var C_ScaleBoxHi: Color;
	public var C_VolumeCollision: Color;
	public var C_BSPCollision: Color;
	public var C_OrthoBackground: Color;
	public var C_Volume: Color;
	public var C_BrushShape: Color;
	public var GameScreenshotSaveDirectory: DirectoryPath;
	public var UseStaticMeshMinLODPerQualityLevels: Bool;
	public var UseSkeletalMeshMinLODPerQualityLevels: Bool;
	public var UseGrassVarityPerQualityLevels: Bool;
	public var TransitionType: ETransitionType;
	public var TransitionDescription: FString;
	public var TransitionGameMode: FString;
	public var bAllowMatureLanguage: Bool;
	public var CameraRotationThreshold: cpp.Float32;
	public var CameraTranslationThreshold: cpp.Float32;
	public var PrimitiveProbablyVisibleTime: cpp.Float32;
	public var MaxOcclusionPixelsFraction: cpp.Float32;
	public var bPauseOnLossOfFocus: Bool;
	public var MaxParticleResize: cpp.Int32;
	public var MaxParticleResizeWarn: cpp.Int32;
	public var PendingDroppedNotes: TArray<DropNoteInfo>;
	public var NetClientTicksPerSecond: cpp.Float32;
	public var DisplayGamma: cpp.Float32;
	public var MinDesiredFrameRate: cpp.Float32;
	private var DefaultSelectedMaterialColor: LinearColor;
	private var SelectedMaterialColor: LinearColor;
	private var SelectionOutlineColor: LinearColor;
	private var SubduedSelectionOutlineColor: LinearColor;
	private var SelectedMaterialColorOverride: LinearColor;
	private var bIsOverridingSelectedColor: Bool;
	public var bEnableOnScreenDebugMessages: Bool;
	public var bEnableOnScreenDebugMessagesDisplay: Bool;
	public var bSuppressMapWarnings: Bool;
	public var bDisableAILogging: Bool;
	public var bEnableVisualLogRecordingOnStart: cpp.UInt32;
	private var ScreenSaverInhibitorSemaphore: cpp.Int32;
	public var bLockReadOnlyLevels: Bool;
	public var ParticleEventManagerClassPath: FString;
	public var SelectionHighlightIntensity: cpp.Float32;
	public var BSPSelectionHighlightIntensity: cpp.Float32;
	public var SelectionHighlightIntensityBillboards: cpp.Float32;
	private var GlobalNetTravelCount: cpp.UInt32;
	public var NetDriverDefinitions: TArray<NetDriverDefinition>;
	public var IrisNetDriverConfigs: TArray<IrisNetDriverConfig>;
	public var ServerActors: TArray<FString>;
	public var RuntimeServerActors: TArray<FString>;
	public var NetErrorLogInterval: cpp.Float32;
	public var bStartedLoadMapMovie: Bool;
	@:protected public var NextWorldContextHandle: cpp.Int32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstEngine(Engine) from Engine {
	public extern var TinyFontName(get, never): SoftObjectPath;
	public inline extern function get_TinyFontName(): SoftObjectPath return this.TinyFontName;
	public extern var SmallFontName(get, never): SoftObjectPath;
	public inline extern function get_SmallFontName(): SoftObjectPath return this.SmallFontName;
	public extern var MediumFontName(get, never): SoftObjectPath;
	public inline extern function get_MediumFontName(): SoftObjectPath return this.MediumFontName;
	public extern var LargeFontName(get, never): SoftObjectPath;
	public inline extern function get_LargeFontName(): SoftObjectPath return this.LargeFontName;
	public extern var SubtitleFontName(get, never): SoftObjectPath;
	public inline extern function get_SubtitleFontName(): SoftObjectPath return this.SubtitleFontName;
	public extern var AdditionalFontNames(get, never): TArray<FString>;
	public inline extern function get_AdditionalFontNames(): TArray<FString> return this.AdditionalFontNames;
	public extern var ConsoleClass(get, never): TSubclassOf<Console.ConstConsole>;
	public inline extern function get_ConsoleClass(): TSubclassOf<Console.ConstConsole> return this.ConsoleClass;
	public extern var ConsoleClassName(get, never): SoftClassPath;
	public inline extern function get_ConsoleClassName(): SoftClassPath return this.ConsoleClassName;
	public extern var GameViewportClientClass(get, never): TSubclassOf<GameViewportClient.ConstGameViewportClient>;
	public inline extern function get_GameViewportClientClass(): TSubclassOf<GameViewportClient.ConstGameViewportClient> return this.GameViewportClientClass;
	public extern var GameViewportClientClassName(get, never): SoftClassPath;
	public inline extern function get_GameViewportClientClassName(): SoftClassPath return this.GameViewportClientClassName;
	public extern var LocalPlayerClass(get, never): TSubclassOf<LocalPlayer.ConstLocalPlayer>;
	public inline extern function get_LocalPlayerClass(): TSubclassOf<LocalPlayer.ConstLocalPlayer> return this.LocalPlayerClass;
	public extern var LocalPlayerClassName(get, never): SoftClassPath;
	public inline extern function get_LocalPlayerClassName(): SoftClassPath return this.LocalPlayerClassName;
	public extern var WorldSettingsClass(get, never): TSubclassOf<WorldSettings.ConstWorldSettings>;
	public inline extern function get_WorldSettingsClass(): TSubclassOf<WorldSettings.ConstWorldSettings> return this.WorldSettingsClass;
	public extern var WorldSettingsClassName(get, never): SoftClassPath;
	public inline extern function get_WorldSettingsClassName(): SoftClassPath return this.WorldSettingsClassName;
	public extern var NavigationSystemClassName(get, never): SoftClassPath;
	public inline extern function get_NavigationSystemClassName(): SoftClassPath return this.NavigationSystemClassName;
	public extern var NavigationSystemClass(get, never): TSubclassOf<NavigationSystemBase.ConstNavigationSystemBase>;
	public inline extern function get_NavigationSystemClass(): TSubclassOf<NavigationSystemBase.ConstNavigationSystemBase> return this.NavigationSystemClass;
	public extern var NavigationSystemConfigClassName(get, never): SoftClassPath;
	public inline extern function get_NavigationSystemConfigClassName(): SoftClassPath return this.NavigationSystemConfigClassName;
	public extern var NavigationSystemConfigClass(get, never): TSubclassOf<NavigationSystemConfig.ConstNavigationSystemConfig>;
	public inline extern function get_NavigationSystemConfigClass(): TSubclassOf<NavigationSystemConfig.ConstNavigationSystemConfig> return this.NavigationSystemConfigClass;
	public extern var AvoidanceManagerClassName(get, never): SoftClassPath;
	public inline extern function get_AvoidanceManagerClassName(): SoftClassPath return this.AvoidanceManagerClassName;
	public extern var AvoidanceManagerClass(get, never): TSubclassOf<AvoidanceManager.ConstAvoidanceManager>;
	public inline extern function get_AvoidanceManagerClass(): TSubclassOf<AvoidanceManager.ConstAvoidanceManager> return this.AvoidanceManagerClass;
	public extern var AIControllerClassName(get, never): SoftClassPath;
	public inline extern function get_AIControllerClassName(): SoftClassPath return this.AIControllerClassName;
	public extern var PhysicsCollisionHandlerClass(get, never): TSubclassOf<PhysicsCollisionHandler.ConstPhysicsCollisionHandler>;
	public inline extern function get_PhysicsCollisionHandlerClass(): TSubclassOf<PhysicsCollisionHandler.ConstPhysicsCollisionHandler> return this.PhysicsCollisionHandlerClass;
	public extern var PhysicsCollisionHandlerClassName(get, never): SoftClassPath;
	public inline extern function get_PhysicsCollisionHandlerClassName(): SoftClassPath return this.PhysicsCollisionHandlerClassName;
	public extern var GameUserSettingsClassName(get, never): SoftClassPath;
	public inline extern function get_GameUserSettingsClassName(): SoftClassPath return this.GameUserSettingsClassName;
	public extern var GameUserSettingsClass(get, never): TSubclassOf<GameUserSettings.ConstGameUserSettings>;
	public inline extern function get_GameUserSettingsClass(): TSubclassOf<GameUserSettings.ConstGameUserSettings> return this.GameUserSettingsClass;
	public extern var GameUserSettings(get, never): cpp.Star<GameUserSettings.ConstGameUserSettings>;
	public inline extern function get_GameUserSettings(): cpp.Star<GameUserSettings.ConstGameUserSettings> return this.GameUserSettings;
	public extern var LevelScriptActorClass(get, never): TSubclassOf<LevelScriptActor.ConstLevelScriptActor>;
	public inline extern function get_LevelScriptActorClass(): TSubclassOf<LevelScriptActor.ConstLevelScriptActor> return this.LevelScriptActorClass;
	public extern var LevelScriptActorClassName(get, never): SoftClassPath;
	public inline extern function get_LevelScriptActorClassName(): SoftClassPath return this.LevelScriptActorClassName;
	public extern var DefaultBlueprintBaseClassName(get, never): SoftClassPath;
	public inline extern function get_DefaultBlueprintBaseClassName(): SoftClassPath return this.DefaultBlueprintBaseClassName;
	public extern var GameSingletonClassName(get, never): SoftClassPath;
	public inline extern function get_GameSingletonClassName(): SoftClassPath return this.GameSingletonClassName;
	public extern var GameSingleton(get, never): cpp.Star<Object.ConstObject>;
	public inline extern function get_GameSingleton(): cpp.Star<Object.ConstObject> return this.GameSingleton;
	public extern var AssetManagerClassName(get, never): SoftClassPath;
	public inline extern function get_AssetManagerClassName(): SoftClassPath return this.AssetManagerClassName;
	public extern var AssetManager(get, never): cpp.Star<AssetManager.ConstAssetManager>;
	public inline extern function get_AssetManager(): cpp.Star<AssetManager.ConstAssetManager> return this.AssetManager;
	public extern var DefaultTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_DefaultTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.DefaultTexture;
	public extern var DefaultTextureName(get, never): SoftObjectPath;
	public inline extern function get_DefaultTextureName(): SoftObjectPath return this.DefaultTextureName;
	public extern var DefaultDiffuseTexture(get, never): cpp.Star<Texture.ConstTexture>;
	public inline extern function get_DefaultDiffuseTexture(): cpp.Star<Texture.ConstTexture> return this.DefaultDiffuseTexture;
	public extern var DefaultDiffuseTextureName(get, never): SoftObjectPath;
	public inline extern function get_DefaultDiffuseTextureName(): SoftObjectPath return this.DefaultDiffuseTextureName;
	public extern var DefaultBSPVertexTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_DefaultBSPVertexTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.DefaultBSPVertexTexture;
	public extern var DefaultBSPVertexTextureName(get, never): SoftObjectPath;
	public inline extern function get_DefaultBSPVertexTextureName(): SoftObjectPath return this.DefaultBSPVertexTextureName;
	public extern var HighFrequencyNoiseTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_HighFrequencyNoiseTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.HighFrequencyNoiseTexture;
	public extern var HighFrequencyNoiseTextureName(get, never): SoftObjectPath;
	public inline extern function get_HighFrequencyNoiseTextureName(): SoftObjectPath return this.HighFrequencyNoiseTextureName;
	public extern var DefaultBokehTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_DefaultBokehTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.DefaultBokehTexture;
	public extern var DefaultBokehTextureName(get, never): SoftObjectPath;
	public inline extern function get_DefaultBokehTextureName(): SoftObjectPath return this.DefaultBokehTextureName;
	public extern var DefaultBloomKernelTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_DefaultBloomKernelTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.DefaultBloomKernelTexture;
	public extern var DefaultBloomKernelTextureName(get, never): SoftObjectPath;
	public inline extern function get_DefaultBloomKernelTextureName(): SoftObjectPath return this.DefaultBloomKernelTextureName;
	public extern var DefaultFilmGrainTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_DefaultFilmGrainTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.DefaultFilmGrainTexture;
	public extern var DefaultFilmGrainTextureName(get, never): SoftObjectPath;
	public inline extern function get_DefaultFilmGrainTextureName(): SoftObjectPath return this.DefaultFilmGrainTextureName;
	public extern var WireframeMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_WireframeMaterial(): cpp.Star<Material.ConstMaterial> return this.WireframeMaterial;
	public extern var WireframeMaterialName(get, never): FString;
	public inline extern function get_WireframeMaterialName(): FString return this.WireframeMaterialName;
	public extern var DebugMeshMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_DebugMeshMaterial(): cpp.Star<Material.ConstMaterial> return this.DebugMeshMaterial;
	public extern var DebugMeshMaterialName(get, never): SoftObjectPath;
	public inline extern function get_DebugMeshMaterialName(): SoftObjectPath return this.DebugMeshMaterialName;
	public extern var NaniteHiddenSectionMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_NaniteHiddenSectionMaterial(): cpp.Star<Material.ConstMaterial> return this.NaniteHiddenSectionMaterial;
	public extern var NaniteHiddenSectionMaterialName(get, never): FString;
	public inline extern function get_NaniteHiddenSectionMaterialName(): FString return this.NaniteHiddenSectionMaterialName;
	public extern var EmissiveMeshMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_EmissiveMeshMaterial(): cpp.Star<Material.ConstMaterial> return this.EmissiveMeshMaterial;
	public extern var EmissiveMeshMaterialName(get, never): SoftObjectPath;
	public inline extern function get_EmissiveMeshMaterialName(): SoftObjectPath return this.EmissiveMeshMaterialName;
	public extern var LevelColorationLitMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_LevelColorationLitMaterial(): cpp.Star<Material.ConstMaterial> return this.LevelColorationLitMaterial;
	public extern var LevelColorationLitMaterialName(get, never): FString;
	public inline extern function get_LevelColorationLitMaterialName(): FString return this.LevelColorationLitMaterialName;
	public extern var LevelColorationUnlitMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_LevelColorationUnlitMaterial(): cpp.Star<Material.ConstMaterial> return this.LevelColorationUnlitMaterial;
	public extern var LevelColorationUnlitMaterialName(get, never): FString;
	public inline extern function get_LevelColorationUnlitMaterialName(): FString return this.LevelColorationUnlitMaterialName;
	public extern var LightingTexelDensityMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_LightingTexelDensityMaterial(): cpp.Star<Material.ConstMaterial> return this.LightingTexelDensityMaterial;
	public extern var LightingTexelDensityName(get, never): FString;
	public inline extern function get_LightingTexelDensityName(): FString return this.LightingTexelDensityName;
	public extern var ShadedLevelColorationLitMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_ShadedLevelColorationLitMaterial(): cpp.Star<Material.ConstMaterial> return this.ShadedLevelColorationLitMaterial;
	public extern var ShadedLevelColorationLitMaterialName(get, never): FString;
	public inline extern function get_ShadedLevelColorationLitMaterialName(): FString return this.ShadedLevelColorationLitMaterialName;
	public extern var ShadedLevelColorationUnlitMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_ShadedLevelColorationUnlitMaterial(): cpp.Star<Material.ConstMaterial> return this.ShadedLevelColorationUnlitMaterial;
	public extern var ShadedLevelColorationUnlitMaterialName(get, never): FString;
	public inline extern function get_ShadedLevelColorationUnlitMaterialName(): FString return this.ShadedLevelColorationUnlitMaterialName;
	public extern var RemoveSurfaceMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_RemoveSurfaceMaterial(): cpp.Star<Material.ConstMaterial> return this.RemoveSurfaceMaterial;
	public extern var RemoveSurfaceMaterialName(get, never): SoftObjectPath;
	public inline extern function get_RemoveSurfaceMaterialName(): SoftObjectPath return this.RemoveSurfaceMaterialName;
	public extern var VertexColorMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_VertexColorMaterial(): cpp.Star<Material.ConstMaterial> return this.VertexColorMaterial;
	public extern var VertexColorMaterialName(get, never): FString;
	public inline extern function get_VertexColorMaterialName(): FString return this.VertexColorMaterialName;
	public extern var VertexColorViewModeMaterial_ColorOnly(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_VertexColorViewModeMaterial_ColorOnly(): cpp.Star<Material.ConstMaterial> return this.VertexColorViewModeMaterial_ColorOnly;
	public extern var VertexColorViewModeMaterialName_ColorOnly(get, never): FString;
	public inline extern function get_VertexColorViewModeMaterialName_ColorOnly(): FString return this.VertexColorViewModeMaterialName_ColorOnly;
	public extern var VertexColorViewModeMaterial_AlphaAsColor(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_VertexColorViewModeMaterial_AlphaAsColor(): cpp.Star<Material.ConstMaterial> return this.VertexColorViewModeMaterial_AlphaAsColor;
	public extern var VertexColorViewModeMaterialName_AlphaAsColor(get, never): FString;
	public inline extern function get_VertexColorViewModeMaterialName_AlphaAsColor(): FString return this.VertexColorViewModeMaterialName_AlphaAsColor;
	public extern var VertexColorViewModeMaterial_RedOnly(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_VertexColorViewModeMaterial_RedOnly(): cpp.Star<Material.ConstMaterial> return this.VertexColorViewModeMaterial_RedOnly;
	public extern var VertexColorViewModeMaterialName_RedOnly(get, never): FString;
	public inline extern function get_VertexColorViewModeMaterialName_RedOnly(): FString return this.VertexColorViewModeMaterialName_RedOnly;
	public extern var VertexColorViewModeMaterial_GreenOnly(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_VertexColorViewModeMaterial_GreenOnly(): cpp.Star<Material.ConstMaterial> return this.VertexColorViewModeMaterial_GreenOnly;
	public extern var VertexColorViewModeMaterialName_GreenOnly(get, never): FString;
	public inline extern function get_VertexColorViewModeMaterialName_GreenOnly(): FString return this.VertexColorViewModeMaterialName_GreenOnly;
	public extern var VertexColorViewModeMaterial_BlueOnly(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_VertexColorViewModeMaterial_BlueOnly(): cpp.Star<Material.ConstMaterial> return this.VertexColorViewModeMaterial_BlueOnly;
	public extern var VertexColorViewModeMaterialName_BlueOnly(get, never): FString;
	public inline extern function get_VertexColorViewModeMaterialName_BlueOnly(): FString return this.VertexColorViewModeMaterialName_BlueOnly;
	public extern var DebugEditorMaterialName(get, never): SoftObjectPath;
	public inline extern function get_DebugEditorMaterialName(): SoftObjectPath return this.DebugEditorMaterialName;
	public extern var ConstraintLimitMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_ConstraintLimitMaterial(): cpp.Star<Material.ConstMaterial> return this.ConstraintLimitMaterial;
	public extern var ConstraintLimitMaterialX(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_ConstraintLimitMaterialX(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.ConstraintLimitMaterialX;
	public extern var ConstraintLimitMaterialXAxis(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_ConstraintLimitMaterialXAxis(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.ConstraintLimitMaterialXAxis;
	public extern var ConstraintLimitMaterialY(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_ConstraintLimitMaterialY(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.ConstraintLimitMaterialY;
	public extern var ConstraintLimitMaterialYAxis(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_ConstraintLimitMaterialYAxis(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.ConstraintLimitMaterialYAxis;
	public extern var ConstraintLimitMaterialZ(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_ConstraintLimitMaterialZ(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.ConstraintLimitMaterialZ;
	public extern var ConstraintLimitMaterialZAxis(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_ConstraintLimitMaterialZAxis(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.ConstraintLimitMaterialZAxis;
	public extern var ConstraintLimitMaterialPrismatic(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_ConstraintLimitMaterialPrismatic(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.ConstraintLimitMaterialPrismatic;
	public extern var InvalidLightmapSettingsMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_InvalidLightmapSettingsMaterial(): cpp.Star<Material.ConstMaterial> return this.InvalidLightmapSettingsMaterial;
	public extern var InvalidLightmapSettingsMaterialName(get, never): SoftObjectPath;
	public inline extern function get_InvalidLightmapSettingsMaterialName(): SoftObjectPath return this.InvalidLightmapSettingsMaterialName;
	public extern var PreviewShadowsIndicatorMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_PreviewShadowsIndicatorMaterial(): cpp.Star<Material.ConstMaterial> return this.PreviewShadowsIndicatorMaterial;
	public extern var PreviewShadowsIndicatorMaterialName(get, never): SoftObjectPath;
	public inline extern function get_PreviewShadowsIndicatorMaterialName(): SoftObjectPath return this.PreviewShadowsIndicatorMaterialName;
	public extern var ArrowMaterial(get, never): cpp.Star<Material.ConstMaterial>;
	public inline extern function get_ArrowMaterial(): cpp.Star<Material.ConstMaterial> return this.ArrowMaterial;
	public extern var ArrowMaterialYellow(get, never): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic>;
	public inline extern function get_ArrowMaterialYellow(): cpp.Star<MaterialInstanceDynamic.ConstMaterialInstanceDynamic> return this.ArrowMaterialYellow;
	public extern var ArrowMaterialName(get, never): SoftObjectPath;
	public inline extern function get_ArrowMaterialName(): SoftObjectPath return this.ArrowMaterialName;
	public extern var LightingOnlyBrightness(get, never): LinearColor;
	public inline extern function get_LightingOnlyBrightness(): LinearColor return this.LightingOnlyBrightness;
	public extern var ShaderComplexityColors(get, never): TArray<LinearColor>;
	public inline extern function get_ShaderComplexityColors(): TArray<LinearColor> return this.ShaderComplexityColors;
	public extern var QuadComplexityColors(get, never): TArray<LinearColor>;
	public inline extern function get_QuadComplexityColors(): TArray<LinearColor> return this.QuadComplexityColors;
	public extern var LightComplexityColors(get, never): TArray<LinearColor>;
	public inline extern function get_LightComplexityColors(): TArray<LinearColor> return this.LightComplexityColors;
	public extern var StationaryLightOverlapColors(get, never): TArray<LinearColor>;
	public inline extern function get_StationaryLightOverlapColors(): TArray<LinearColor> return this.StationaryLightOverlapColors;
	public extern var LODColorationColors(get, never): TArray<LinearColor>;
	public inline extern function get_LODColorationColors(): TArray<LinearColor> return this.LODColorationColors;
	public extern var HLODColorationColors(get, never): TArray<LinearColor>;
	public inline extern function get_HLODColorationColors(): TArray<LinearColor> return this.HLODColorationColors;
	public extern var StreamingAccuracyColors(get, never): TArray<LinearColor>;
	public inline extern function get_StreamingAccuracyColors(): TArray<LinearColor> return this.StreamingAccuracyColors;
	public extern var GPUSkinCacheVisualizationExcludedColor(get, never): LinearColor;
	public inline extern function get_GPUSkinCacheVisualizationExcludedColor(): LinearColor return this.GPUSkinCacheVisualizationExcludedColor;
	public extern var GPUSkinCacheVisualizationIncludedColor(get, never): LinearColor;
	public inline extern function get_GPUSkinCacheVisualizationIncludedColor(): LinearColor return this.GPUSkinCacheVisualizationIncludedColor;
	public extern var GPUSkinCacheVisualizationRecomputeTangentsColor(get, never): LinearColor;
	public inline extern function get_GPUSkinCacheVisualizationRecomputeTangentsColor(): LinearColor return this.GPUSkinCacheVisualizationRecomputeTangentsColor;
	public extern var GPUSkinCacheVisualizationLowMemoryThresholdInMB(get, never): cpp.Float32;
	public inline extern function get_GPUSkinCacheVisualizationLowMemoryThresholdInMB(): cpp.Float32 return this.GPUSkinCacheVisualizationLowMemoryThresholdInMB;
	public extern var GPUSkinCacheVisualizationHighMemoryThresholdInMB(get, never): cpp.Float32;
	public inline extern function get_GPUSkinCacheVisualizationHighMemoryThresholdInMB(): cpp.Float32 return this.GPUSkinCacheVisualizationHighMemoryThresholdInMB;
	public extern var GPUSkinCacheVisualizationLowMemoryColor(get, never): LinearColor;
	public inline extern function get_GPUSkinCacheVisualizationLowMemoryColor(): LinearColor return this.GPUSkinCacheVisualizationLowMemoryColor;
	public extern var GPUSkinCacheVisualizationMidMemoryColor(get, never): LinearColor;
	public inline extern function get_GPUSkinCacheVisualizationMidMemoryColor(): LinearColor return this.GPUSkinCacheVisualizationMidMemoryColor;
	public extern var GPUSkinCacheVisualizationHighMemoryColor(get, never): LinearColor;
	public inline extern function get_GPUSkinCacheVisualizationHighMemoryColor(): LinearColor return this.GPUSkinCacheVisualizationHighMemoryColor;
	public extern var GPUSkinCacheVisualizationRayTracingLODOffsetColors(get, never): TArray<LinearColor>;
	public inline extern function get_GPUSkinCacheVisualizationRayTracingLODOffsetColors(): TArray<LinearColor> return this.GPUSkinCacheVisualizationRayTracingLODOffsetColors;
	public extern var MaxPixelShaderAdditiveComplexityCount(get, never): cpp.Float32;
	public inline extern function get_MaxPixelShaderAdditiveComplexityCount(): cpp.Float32 return this.MaxPixelShaderAdditiveComplexityCount;
	public extern var MaxES3PixelShaderAdditiveComplexityCount(get, never): cpp.Float32;
	public inline extern function get_MaxES3PixelShaderAdditiveComplexityCount(): cpp.Float32 return this.MaxES3PixelShaderAdditiveComplexityCount;
	public extern var MinLightMapDensity(get, never): cpp.Float32;
	public inline extern function get_MinLightMapDensity(): cpp.Float32 return this.MinLightMapDensity;
	public extern var IdealLightMapDensity(get, never): cpp.Float32;
	public inline extern function get_IdealLightMapDensity(): cpp.Float32 return this.IdealLightMapDensity;
	public extern var MaxLightMapDensity(get, never): cpp.Float32;
	public inline extern function get_MaxLightMapDensity(): cpp.Float32 return this.MaxLightMapDensity;
	public extern var bRenderLightMapDensityGrayscale(get, never): Bool;
	public inline extern function get_bRenderLightMapDensityGrayscale(): Bool return this.bRenderLightMapDensityGrayscale;
	public extern var RenderLightMapDensityGrayscaleScale(get, never): cpp.Float32;
	public inline extern function get_RenderLightMapDensityGrayscaleScale(): cpp.Float32 return this.RenderLightMapDensityGrayscaleScale;
	public extern var RenderLightMapDensityColorScale(get, never): cpp.Float32;
	public inline extern function get_RenderLightMapDensityColorScale(): cpp.Float32 return this.RenderLightMapDensityColorScale;
	public extern var LightMapDensityVertexMappedColor(get, never): LinearColor;
	public inline extern function get_LightMapDensityVertexMappedColor(): LinearColor return this.LightMapDensityVertexMappedColor;
	public extern var LightMapDensitySelectedColor(get, never): LinearColor;
	public inline extern function get_LightMapDensitySelectedColor(): LinearColor return this.LightMapDensitySelectedColor;
	public extern var StatColorMappings(get, never): TArray<StatColorMapping>;
	public inline extern function get_StatColorMappings(): TArray<StatColorMapping> return this.StatColorMappings;
	public extern var DefaultPhysMaterial(get, never): cpp.Star<PhysicalMaterial.ConstPhysicalMaterial>;
	public inline extern function get_DefaultPhysMaterial(): cpp.Star<PhysicalMaterial.ConstPhysicalMaterial> return this.DefaultPhysMaterial;
	public extern var DefaultPhysMaterialName(get, never): SoftObjectPath;
	public inline extern function get_DefaultPhysMaterialName(): SoftObjectPath return this.DefaultPhysMaterialName;
	public extern var DefaultDestructiblePhysMaterial(get, never): cpp.Star<PhysicalMaterial.ConstPhysicalMaterial>;
	public inline extern function get_DefaultDestructiblePhysMaterial(): cpp.Star<PhysicalMaterial.ConstPhysicalMaterial> return this.DefaultDestructiblePhysMaterial;
	public extern var DefaultDestructiblePhysMaterialName(get, never): SoftObjectPath;
	public inline extern function get_DefaultDestructiblePhysMaterialName(): SoftObjectPath return this.DefaultDestructiblePhysMaterialName;
	public extern var ActiveGameNameRedirects(get, never): TArray<GameNameRedirect>;
	public inline extern function get_ActiveGameNameRedirects(): TArray<GameNameRedirect> return this.ActiveGameNameRedirects;
	public extern var ActiveClassRedirects(get, never): TArray<ClassRedirect>;
	public inline extern function get_ActiveClassRedirects(): TArray<ClassRedirect> return this.ActiveClassRedirects;
	public extern var ActivePluginRedirects(get, never): TArray<PluginRedirect>;
	public inline extern function get_ActivePluginRedirects(): TArray<PluginRedirect> return this.ActivePluginRedirects;
	public extern var ActiveStructRedirects(get, never): TArray<StructRedirect>;
	public inline extern function get_ActiveStructRedirects(): TArray<StructRedirect> return this.ActiveStructRedirects;
	public extern var PreIntegratedSkinBRDFTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_PreIntegratedSkinBRDFTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.PreIntegratedSkinBRDFTexture;
	public extern var PreIntegratedSkinBRDFTextureName(get, never): SoftObjectPath;
	public inline extern function get_PreIntegratedSkinBRDFTextureName(): SoftObjectPath return this.PreIntegratedSkinBRDFTextureName;
	public extern var BlueNoiseScalarTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_BlueNoiseScalarTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.BlueNoiseScalarTexture;
	public extern var BlueNoiseVec2Texture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_BlueNoiseVec2Texture(): cpp.Star<Texture2D.ConstTexture2D> return this.BlueNoiseVec2Texture;
	public extern var BlueNoiseScalarTextureName(get, never): SoftObjectPath;
	public inline extern function get_BlueNoiseScalarTextureName(): SoftObjectPath return this.BlueNoiseScalarTextureName;
	public extern var BlueNoiseVec2TextureName(get, never): SoftObjectPath;
	public inline extern function get_BlueNoiseVec2TextureName(): SoftObjectPath return this.BlueNoiseVec2TextureName;
	public extern var MiniFontTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_MiniFontTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.MiniFontTexture;
	public extern var MiniFontTextureName(get, never): SoftObjectPath;
	public inline extern function get_MiniFontTextureName(): SoftObjectPath return this.MiniFontTextureName;
	public extern var WeightMapPlaceholderTexture(get, never): cpp.Star<Texture.ConstTexture>;
	public inline extern function get_WeightMapPlaceholderTexture(): cpp.Star<Texture.ConstTexture> return this.WeightMapPlaceholderTexture;
	public extern var WeightMapPlaceholderTextureName(get, never): SoftObjectPath;
	public inline extern function get_WeightMapPlaceholderTextureName(): SoftObjectPath return this.WeightMapPlaceholderTextureName;
	public extern var LightMapDensityTexture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_LightMapDensityTexture(): cpp.Star<Texture2D.ConstTexture2D> return this.LightMapDensityTexture;
	public extern var LightMapDensityTextureName(get, never): SoftObjectPath;
	public inline extern function get_LightMapDensityTextureName(): SoftObjectPath return this.LightMapDensityTextureName;
	public extern var GameViewport(get, never): cpp.Star<GameViewportClient.ConstGameViewportClient>;
	public inline extern function get_GameViewport(): cpp.Star<GameViewportClient.ConstGameViewportClient> return this.GameViewport;
	public extern var DeferredCommands(get, never): TArray<FString>;
	public inline extern function get_DeferredCommands(): TArray<FString> return this.DeferredCommands;
	public extern var NearClipPlane(get, never): cpp.Float32;
	public inline extern function get_NearClipPlane(): cpp.Float32 return this.NearClipPlane;
	public extern var bSubtitlesEnabled(get, never): Bool;
	public inline extern function get_bSubtitlesEnabled(): Bool return this.bSubtitlesEnabled;
	public extern var bSubtitlesForcedOff(get, never): Bool;
	public inline extern function get_bSubtitlesForcedOff(): Bool return this.bSubtitlesForcedOff;
	public extern var MaximumLoopIterationCount(get, never): cpp.Int32;
	public inline extern function get_MaximumLoopIterationCount(): cpp.Int32 return this.MaximumLoopIterationCount;
	public extern var bCanBlueprintsTickByDefault(get, never): Bool;
	public inline extern function get_bCanBlueprintsTickByDefault(): Bool return this.bCanBlueprintsTickByDefault;
	public extern var bOptimizeAnimBlueprintMemberVariableAccess(get, never): Bool;
	public inline extern function get_bOptimizeAnimBlueprintMemberVariableAccess(): Bool return this.bOptimizeAnimBlueprintMemberVariableAccess;
	public extern var bAllowMultiThreadedAnimationUpdate(get, never): Bool;
	public inline extern function get_bAllowMultiThreadedAnimationUpdate(): Bool return this.bAllowMultiThreadedAnimationUpdate;
	public extern var bEnableEditorPSysRealtimeLOD(get, never): Bool;
	public inline extern function get_bEnableEditorPSysRealtimeLOD(): Bool return this.bEnableEditorPSysRealtimeLOD;
	public extern var bSmoothFrameRate(get, never): Bool;
	public inline extern function get_bSmoothFrameRate(): Bool return this.bSmoothFrameRate;
	public extern var bUseFixedFrameRate(get, never): Bool;
	public inline extern function get_bUseFixedFrameRate(): Bool return this.bUseFixedFrameRate;
	public extern var FixedFrameRate(get, never): cpp.Float32;
	public inline extern function get_FixedFrameRate(): cpp.Float32 return this.FixedFrameRate;
	public extern var SmoothedFrameRateRange(get, never): FloatRange;
	public inline extern function get_SmoothedFrameRateRange(): FloatRange return this.SmoothedFrameRateRange;
	public extern var CustomTimeStepClassName(get, never): SoftClassPath;
	public inline extern function get_CustomTimeStepClassName(): SoftClassPath return this.CustomTimeStepClassName;
	public extern var TimecodeProviderClassName(get, never): SoftClassPath;
	public inline extern function get_TimecodeProviderClassName(): SoftClassPath return this.TimecodeProviderClassName;
	public extern var bGenerateDefaultTimecode(get, never): Bool;
	public inline extern function get_bGenerateDefaultTimecode(): Bool return this.bGenerateDefaultTimecode;
	public extern var GenerateDefaultTimecodeFrameRate(get, never): FrameRate;
	public inline extern function get_GenerateDefaultTimecodeFrameRate(): FrameRate return this.GenerateDefaultTimecodeFrameRate;
	public extern var GenerateDefaultTimecodeFrameDelay(get, never): cpp.Float32;
	public inline extern function get_GenerateDefaultTimecodeFrameDelay(): cpp.Float32 return this.GenerateDefaultTimecodeFrameDelay;
	public extern var bCheckForMultiplePawnsSpawnedInAFrame(get, never): Bool;
	public inline extern function get_bCheckForMultiplePawnsSpawnedInAFrame(): Bool return this.bCheckForMultiplePawnsSpawnedInAFrame;
	public extern var NumPawnsAllowedToBeSpawnedInAFrame(get, never): cpp.Int32;
	public inline extern function get_NumPawnsAllowedToBeSpawnedInAFrame(): cpp.Int32 return this.NumPawnsAllowedToBeSpawnedInAFrame;
	public extern var C_WorldBox(get, never): Color;
	public inline extern function get_C_WorldBox(): Color return this.C_WorldBox;
	public extern var C_BrushWire(get, never): Color;
	public inline extern function get_C_BrushWire(): Color return this.C_BrushWire;
	public extern var C_AddWire(get, never): Color;
	public inline extern function get_C_AddWire(): Color return this.C_AddWire;
	public extern var C_SubtractWire(get, never): Color;
	public inline extern function get_C_SubtractWire(): Color return this.C_SubtractWire;
	public extern var C_SemiSolidWire(get, never): Color;
	public inline extern function get_C_SemiSolidWire(): Color return this.C_SemiSolidWire;
	public extern var C_NonSolidWire(get, never): Color;
	public inline extern function get_C_NonSolidWire(): Color return this.C_NonSolidWire;
	public extern var C_WireBackground(get, never): Color;
	public inline extern function get_C_WireBackground(): Color return this.C_WireBackground;
	public extern var C_ScaleBoxHi(get, never): Color;
	public inline extern function get_C_ScaleBoxHi(): Color return this.C_ScaleBoxHi;
	public extern var C_VolumeCollision(get, never): Color;
	public inline extern function get_C_VolumeCollision(): Color return this.C_VolumeCollision;
	public extern var C_BSPCollision(get, never): Color;
	public inline extern function get_C_BSPCollision(): Color return this.C_BSPCollision;
	public extern var C_OrthoBackground(get, never): Color;
	public inline extern function get_C_OrthoBackground(): Color return this.C_OrthoBackground;
	public extern var C_Volume(get, never): Color;
	public inline extern function get_C_Volume(): Color return this.C_Volume;
	public extern var C_BrushShape(get, never): Color;
	public inline extern function get_C_BrushShape(): Color return this.C_BrushShape;
	public extern var GameScreenshotSaveDirectory(get, never): DirectoryPath;
	public inline extern function get_GameScreenshotSaveDirectory(): DirectoryPath return this.GameScreenshotSaveDirectory;
	public extern var UseStaticMeshMinLODPerQualityLevels(get, never): Bool;
	public inline extern function get_UseStaticMeshMinLODPerQualityLevels(): Bool return this.UseStaticMeshMinLODPerQualityLevels;
	public extern var UseSkeletalMeshMinLODPerQualityLevels(get, never): Bool;
	public inline extern function get_UseSkeletalMeshMinLODPerQualityLevels(): Bool return this.UseSkeletalMeshMinLODPerQualityLevels;
	public extern var UseGrassVarityPerQualityLevels(get, never): Bool;
	public inline extern function get_UseGrassVarityPerQualityLevels(): Bool return this.UseGrassVarityPerQualityLevels;
	public extern var TransitionType(get, never): ETransitionType;
	public inline extern function get_TransitionType(): ETransitionType return this.TransitionType;
	public extern var TransitionDescription(get, never): FString;
	public inline extern function get_TransitionDescription(): FString return this.TransitionDescription;
	public extern var TransitionGameMode(get, never): FString;
	public inline extern function get_TransitionGameMode(): FString return this.TransitionGameMode;
	public extern var bAllowMatureLanguage(get, never): Bool;
	public inline extern function get_bAllowMatureLanguage(): Bool return this.bAllowMatureLanguage;
	public extern var CameraRotationThreshold(get, never): cpp.Float32;
	public inline extern function get_CameraRotationThreshold(): cpp.Float32 return this.CameraRotationThreshold;
	public extern var CameraTranslationThreshold(get, never): cpp.Float32;
	public inline extern function get_CameraTranslationThreshold(): cpp.Float32 return this.CameraTranslationThreshold;
	public extern var PrimitiveProbablyVisibleTime(get, never): cpp.Float32;
	public inline extern function get_PrimitiveProbablyVisibleTime(): cpp.Float32 return this.PrimitiveProbablyVisibleTime;
	public extern var MaxOcclusionPixelsFraction(get, never): cpp.Float32;
	public inline extern function get_MaxOcclusionPixelsFraction(): cpp.Float32 return this.MaxOcclusionPixelsFraction;
	public extern var bPauseOnLossOfFocus(get, never): Bool;
	public inline extern function get_bPauseOnLossOfFocus(): Bool return this.bPauseOnLossOfFocus;
	public extern var MaxParticleResize(get, never): cpp.Int32;
	public inline extern function get_MaxParticleResize(): cpp.Int32 return this.MaxParticleResize;
	public extern var MaxParticleResizeWarn(get, never): cpp.Int32;
	public inline extern function get_MaxParticleResizeWarn(): cpp.Int32 return this.MaxParticleResizeWarn;
	public extern var PendingDroppedNotes(get, never): TArray<DropNoteInfo>;
	public inline extern function get_PendingDroppedNotes(): TArray<DropNoteInfo> return this.PendingDroppedNotes;
	public extern var NetClientTicksPerSecond(get, never): cpp.Float32;
	public inline extern function get_NetClientTicksPerSecond(): cpp.Float32 return this.NetClientTicksPerSecond;
	public extern var DisplayGamma(get, never): cpp.Float32;
	public inline extern function get_DisplayGamma(): cpp.Float32 return this.DisplayGamma;
	public extern var MinDesiredFrameRate(get, never): cpp.Float32;
	public inline extern function get_MinDesiredFrameRate(): cpp.Float32 return this.MinDesiredFrameRate;
	public extern var bEnableOnScreenDebugMessages(get, never): Bool;
	public inline extern function get_bEnableOnScreenDebugMessages(): Bool return this.bEnableOnScreenDebugMessages;
	public extern var bEnableOnScreenDebugMessagesDisplay(get, never): Bool;
	public inline extern function get_bEnableOnScreenDebugMessagesDisplay(): Bool return this.bEnableOnScreenDebugMessagesDisplay;
	public extern var bSuppressMapWarnings(get, never): Bool;
	public inline extern function get_bSuppressMapWarnings(): Bool return this.bSuppressMapWarnings;
	public extern var bDisableAILogging(get, never): Bool;
	public inline extern function get_bDisableAILogging(): Bool return this.bDisableAILogging;
	public extern var bEnableVisualLogRecordingOnStart(get, never): cpp.UInt32;
	public inline extern function get_bEnableVisualLogRecordingOnStart(): cpp.UInt32 return this.bEnableVisualLogRecordingOnStart;
	public extern var bLockReadOnlyLevels(get, never): Bool;
	public inline extern function get_bLockReadOnlyLevels(): Bool return this.bLockReadOnlyLevels;
	public extern var ParticleEventManagerClassPath(get, never): FString;
	public inline extern function get_ParticleEventManagerClassPath(): FString return this.ParticleEventManagerClassPath;
	public extern var SelectionHighlightIntensity(get, never): cpp.Float32;
	public inline extern function get_SelectionHighlightIntensity(): cpp.Float32 return this.SelectionHighlightIntensity;
	public extern var BSPSelectionHighlightIntensity(get, never): cpp.Float32;
	public inline extern function get_BSPSelectionHighlightIntensity(): cpp.Float32 return this.BSPSelectionHighlightIntensity;
	public extern var SelectionHighlightIntensityBillboards(get, never): cpp.Float32;
	public inline extern function get_SelectionHighlightIntensityBillboards(): cpp.Float32 return this.SelectionHighlightIntensityBillboards;
	public extern var NetDriverDefinitions(get, never): TArray<NetDriverDefinition>;
	public inline extern function get_NetDriverDefinitions(): TArray<NetDriverDefinition> return this.NetDriverDefinitions;
	public extern var IrisNetDriverConfigs(get, never): TArray<IrisNetDriverConfig>;
	public inline extern function get_IrisNetDriverConfigs(): TArray<IrisNetDriverConfig> return this.IrisNetDriverConfigs;
	public extern var ServerActors(get, never): TArray<FString>;
	public inline extern function get_ServerActors(): TArray<FString> return this.ServerActors;
	public extern var RuntimeServerActors(get, never): TArray<FString>;
	public inline extern function get_RuntimeServerActors(): TArray<FString> return this.RuntimeServerActors;
	public extern var NetErrorLogInterval(get, never): cpp.Float32;
	public inline extern function get_NetErrorLogInterval(): cpp.Float32 return this.NetErrorLogInterval;
	public extern var bStartedLoadMapMovie(get, never): Bool;
	public inline extern function get_bStartedLoadMapMovie(): Bool return this.bStartedLoadMapMovie;
}

@:forward
@:nativeGen
@:native("Engine*")
abstract EnginePtr(cpp.Star<Engine>) from cpp.Star<Engine> to cpp.Star<Engine>{
	@:from
	public static extern inline function fromValue(v: Engine): EnginePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Engine {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}