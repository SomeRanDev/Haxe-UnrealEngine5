// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UStaticMeshEditorSubsystem")
@:include("StaticMeshEditorSubsystem.h")
@:structAccess
extern class StaticMeshEditorSubsystem extends EditorSubsystem {
	public function SetNaniteSettings(StaticMesh: cpp.Star<StaticMesh>, NaniteSettings: MeshNaniteSettings, bApplyChanges: Bool): Void;
	public function SetLodsWithNotification(StaticMesh: cpp.Star<StaticMesh>, ReductionOptions: cpp.Reference<StaticMeshReductionOptions>, bApplyChanges: Bool): cpp.Int32;
	public function SetLodScreenSizes(StaticMesh: cpp.Star<StaticMesh>, ScreenSizes: cpp.Reference<TArray<cpp.Float32>>): Bool;
	public function SetLods(StaticMesh: cpp.Star<StaticMesh>, ReductionOptions: cpp.Reference<StaticMeshReductionOptions>): cpp.Int32;
	public function SetLodReductionSettings(StaticMesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ReductionOptions: cpp.Reference<MeshReductionSettings>): Void;
	public function SetLODMaterialSlot(StaticMesh: cpp.Star<StaticMesh>, MaterialSlotIndex: cpp.Int32, LODIndex: cpp.Int32, SectionIndex: cpp.Int32): Void;
	public function SetLODGroup(StaticMesh: cpp.Star<StaticMesh>, LODGroup: FName, bRebuildImmediately: Bool): Bool;
	public function SetLodFromStaticMesh(DestinationStaticMesh: cpp.Star<StaticMesh>, DestinationLodIndex: cpp.Int32, SourceStaticMesh: cpp.Star<StaticMesh>, SourceLodIndex: cpp.Int32, bReuseExistingMaterialSlots: Bool): cpp.Int32;
	public function SetLodBuildSettings(StaticMesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, BuildOptions: cpp.Reference<MeshBuildSettings>): Void;
	public function SetGenerateLightmapUVs(StaticMesh: cpp.Star<StaticMesh>, bGenerateLightmapUVs: Bool): Bool;
	public function SetConvexDecompositionCollisionsWithNotification(StaticMesh: cpp.Star<StaticMesh>, HullCount: cpp.Int32, MaxHullVerts: cpp.Int32, HullPrecision: cpp.Int32, bApplyChanges: Bool): Bool;
	public function SetConvexDecompositionCollisions(StaticMesh: cpp.Star<StaticMesh>, HullCount: cpp.Int32, MaxHullVerts: cpp.Int32, HullPrecision: cpp.Int32): Bool;
	public function SetAllowCPUAccess(StaticMesh: cpp.Star<StaticMesh>, bAllowCPUAccess: Bool): Void;
	public function ReplaceMeshComponentsMeshesOnActors(Actors: cpp.Reference<TArray<cpp.Star<Actor>>>, MeshToBeReplaced: cpp.Star<StaticMesh>, NewMesh: cpp.Star<StaticMesh>): Void;
	public function ReplaceMeshComponentsMeshes(MeshComponents: cpp.Reference<TArray<cpp.Star<StaticMeshComp>>>, MeshToBeReplaced: cpp.Star<StaticMesh>, NewMesh: cpp.Star<StaticMesh>): Void;
	public function ReplaceMeshComponentsMaterialsOnActors(Actors: cpp.Reference<TArray<cpp.Star<Actor>>>, MaterialToBeReplaced: cpp.Star<MaterialInterface>, NewMaterial: cpp.Star<MaterialInterface>): Void;
	public function ReplaceMeshComponentsMaterials(MeshComponents: cpp.Reference<TArray<cpp.Star<MeshComp>>>, MaterialToBeReplaced: cpp.Star<MaterialInterface>, NewMaterial: cpp.Star<MaterialInterface>): Void;
	public function RemoveUVChannel(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, UVChannelIndex: cpp.Int32): Bool;
	public function RemoveLods(StaticMesh: cpp.Star<StaticMesh>): Bool;
	public function RemoveCollisionsWithNotification(StaticMesh: cpp.Star<StaticMesh>, bApplyChanges: Bool): Bool;
	public function RemoveCollisions(StaticMesh: cpp.Star<StaticMesh>): Bool;
	public function ReimportAllCustomLODs(StaticMesh: cpp.Star<StaticMesh>): Bool;
	public function MergeStaticMeshActors(ActorsToMerge: cpp.Reference<TArray<cpp.Star<StaticMeshActor>>>, MergeOptions: cpp.Reference<MergeStaticMeshActorsOptions>, OutMergedActor: cpp.Reference<cpp.Star<StaticMeshActor>>): Bool;
	public function JoinStaticMeshActors(ActorsToJoin: cpp.Reference<TArray<cpp.Star<StaticMeshActor>>>, JoinOptions: cpp.Reference<JoinStaticMeshActorsOptions>): cpp.Star<Actor>;
	public function IsSectionCollisionEnabled(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, SectionIndex: cpp.Int32): Bool;
	public function InsertUVChannel(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, UVChannelIndex: cpp.Int32): Bool;
	public function ImportLOD(BaseStaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, SourceFilename: FString): cpp.Int32;
	public function HasVertexColors(StaticMesh: cpp.Star<StaticMesh>): Bool;
	public function HasInstanceVertexColors(StaticMeshComponent: cpp.Star<StaticMeshComp>): Bool;
	public function GetSimpleCollisionCount(StaticMesh: cpp.Star<StaticMesh>): cpp.Int32;
	public function GetNumUVChannels(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32): cpp.Int32;
	public function GetNumberVerts(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32): cpp.Int32;
	public function GetNumberMaterials(StaticMesh: cpp.Star<StaticMesh>): cpp.Int32;
	public function GetNaniteSettings(StaticMesh: cpp.Star<StaticMesh>): MeshNaniteSettings;
	public function GetLodScreenSizes(StaticMesh: cpp.Star<StaticMesh>): TArray<cpp.Float32>;
	public function GetLodReductionSettings(StaticMesh: cpp.Star<StaticMesh.ConstStaticMesh>, LodIndex: cpp.Int32, OutReductionOptions: cpp.Reference<MeshReductionSettings>): Void;
	public function GetLODMaterialSlot(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, SectionIndex: cpp.Int32): cpp.Int32;
	public function GetLODGroup(StaticMesh: cpp.Star<StaticMesh>): FName;
	public function GetLodCount(StaticMesh: cpp.Star<StaticMesh>): cpp.Int32;
	public function GetLodBuildSettings(StaticMesh: cpp.Star<StaticMesh.ConstStaticMesh>, LodIndex: cpp.Int32, OutBuildOptions: cpp.Reference<MeshBuildSettings>): Void;
	public function GetConvexCollisionCount(StaticMesh: cpp.Star<StaticMesh>): cpp.Int32;
	public function GetCollisionComplexity(StaticMesh: cpp.Star<StaticMesh>): TEnumAsByte<ECollisionTraceFlag>;
	public function GeneratePlanarUVChannel(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, UVChannelIndex: cpp.Int32, Position: cpp.Reference<Vector>, Orientation: cpp.Reference<Rotator>, Tiling: cpp.Reference<Vector2D>): Bool;
	public function GenerateCylindricalUVChannel(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, UVChannelIndex: cpp.Int32, Position: cpp.Reference<Vector>, Orientation: cpp.Reference<Rotator>, Tiling: cpp.Reference<Vector2D>): Bool;
	public function GenerateBoxUVChannel(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, UVChannelIndex: cpp.Int32, Position: cpp.Reference<Vector>, Orientation: cpp.Reference<Rotator>, Size: cpp.Reference<Vector>): Bool;
	public function EnableSectionCollision(StaticMesh: cpp.Star<StaticMesh>, bCollisionEnabled: Bool, LODIndex: cpp.Int32, SectionIndex: cpp.Int32): Void;
	public function EnableSectionCastShadow(StaticMesh: cpp.Star<StaticMesh>, bCastShadow: Bool, LODIndex: cpp.Int32, SectionIndex: cpp.Int32): Void;
	public function CreateProxyMeshActor(ActorsToMerge: cpp.Reference<TArray<cpp.Star<StaticMeshActor>>>, MergeOptions: cpp.Reference<CreateProxyMeshActorOptions>, OutMergedActor: cpp.Reference<cpp.Star<StaticMeshActor>>): Bool;
	public function BulkSetConvexDecompositionCollisionsWithNotification(StaticMeshes: cpp.Reference<TArray<cpp.Star<StaticMesh>>>, HullCount: cpp.Int32, MaxHullVerts: cpp.Int32, HullPrecision: cpp.Int32, bApplyChanges: Bool): Bool;
	public function BulkSetConvexDecompositionCollisions(StaticMeshes: cpp.Reference<TArray<cpp.Star<StaticMesh>>>, HullCount: cpp.Int32, MaxHullVerts: cpp.Int32, HullPrecision: cpp.Int32): Bool;
	public function AddUVChannel(StaticMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32): Bool;
	public function AddSimpleCollisionsWithNotification(StaticMesh: cpp.Star<StaticMesh>, ShapeType: EScriptCollisionShapeType, bApplyChanges: Bool): cpp.Int32;
	public function AddSimpleCollisions(StaticMesh: cpp.Star<StaticMesh>, ShapeType: EScriptCollisionShapeType): cpp.Int32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstStaticMeshEditorSubsystem(StaticMeshEditorSubsystem) from StaticMeshEditorSubsystem {
}

@:forward
@:nativeGen
@:native("StaticMeshEditorSubsystem*")
abstract StaticMeshEditorSubsystemPtr(cpp.Star<StaticMeshEditorSubsystem>) from cpp.Star<StaticMeshEditorSubsystem> to cpp.Star<StaticMeshEditorSubsystem>{
	@:from
	public static extern inline function fromValue(v: StaticMeshEditorSubsystem): StaticMeshEditorSubsystemPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): StaticMeshEditorSubsystem {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}