// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UVREditorMode")
@:include("VREditorMode.h")
@:valueType
extern class VREditorMode extends VREditorModeBase {
	@:protected public var AvatarActor: ucpp.Ptr<VREditorAvatarActor>;
	@:protected public var UISystem: ucpp.Ptr<VREditorUISystem>;
	@:protected public var TeleportActor: ucpp.Ptr<VREditorTeleporter>;
	@:protected public var AutoScalerSystem: ucpp.Ptr<VREditorAutoScaler>;
	@:protected public var WorldInteraction: ucpp.Ptr<ViewportWorldInteraction>;
	@:protected public var PlacementSystem: ucpp.Ptr<VREditorPlacement>;
	@:protected public var Interactors: TArray<ucpp.Ptr<VREditorInteractor>>;
	public var InteractorClass: TSoftClassPtr<Class>;
	public var TeleporterClass: TSoftClassPtr<Class>;
	private var AssetContainer: ucpp.Ptr<VREditorAssetContainer>;

	public function SetGameView(bGameView: Bool): Void;
	public function IsInGameView(): Bool;
	public function GetWorldScaleFactor(): ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(IsInGameView, GetWorldScaleFactor)
@:nativeGen
abstract ConstVREditorMode(VREditorMode) from VREditorMode {
	public extern var InteractorClass(get, never): TSoftClassPtr<Class.ConstClass>;
	public inline extern function get_InteractorClass(): TSoftClassPtr<Class.ConstClass> return this.InteractorClass;
	public extern var TeleporterClass(get, never): TSoftClassPtr<Class.ConstClass>;
	public inline extern function get_TeleporterClass(): TSoftClassPtr<Class.ConstClass> return this.TeleporterClass;
}

@:forward
@:nativeGen
@:native("VREditorMode*")
abstract VREditorModePtr(ucpp.Ptr<VREditorMode>) from ucpp.Ptr<VREditorMode> to ucpp.Ptr<VREditorMode>{
	@:from
	public static extern inline function fromValue(v: VREditorMode): VREditorModePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): VREditorMode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}