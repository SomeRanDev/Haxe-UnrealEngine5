// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInputAction")
@:include("InputAction.h")
@:structAccess
extern class InputAction extends DataAsset {
	public var ActionDescription: FText;
	public var bConsumeInput: Bool;
	public var bTriggerWhenPaused: Bool;
	public var bReserveAllMappings: Bool;
	public var ValueType: EInputActionValueType;
	public var Triggers: TArray<cpp.Star<InputTrigger>>;
	public var Modifiers: TArray<cpp.Star<InputModifier>>;
	private var PlayerMappableKeySettings: cpp.Star<PlayerMappableKeySettings>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstInputAction(InputAction) from InputAction {
	public extern var ActionDescription(get, never): FText;
	public inline extern function get_ActionDescription(): FText return this.ActionDescription;
	public extern var bConsumeInput(get, never): Bool;
	public inline extern function get_bConsumeInput(): Bool return this.bConsumeInput;
	public extern var bTriggerWhenPaused(get, never): Bool;
	public inline extern function get_bTriggerWhenPaused(): Bool return this.bTriggerWhenPaused;
	public extern var bReserveAllMappings(get, never): Bool;
	public inline extern function get_bReserveAllMappings(): Bool return this.bReserveAllMappings;
	public extern var ValueType(get, never): EInputActionValueType;
	public inline extern function get_ValueType(): EInputActionValueType return this.ValueType;
	public extern var Triggers(get, never): TArray<cpp.Star<InputTrigger.ConstInputTrigger>>;
	public inline extern function get_Triggers(): TArray<cpp.Star<InputTrigger.ConstInputTrigger>> return this.Triggers;
	public extern var Modifiers(get, never): TArray<cpp.Star<InputModifier.ConstInputModifier>>;
	public inline extern function get_Modifiers(): TArray<cpp.Star<InputModifier.ConstInputModifier>> return this.Modifiers;
}

@:forward
@:nativeGen
@:native("InputAction*")
abstract InputActionPtr(cpp.Star<InputAction>) from cpp.Star<InputAction> to cpp.Star<InputAction>{
	@:from
	public static extern inline function fromValue(v: InputAction): InputActionPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InputAction {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}