// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPaperSprite")
@:include("PaperSprite.h")
@:valueType
extern class PaperSprite extends Object {
	@:protected public var AdditionalSourceTextures: TArray<ucpp.Ptr<Texture>>;
	@:protected public var BakedSourceUV: Vector2D;
	@:protected public var BakedSourceDimension: Vector2D;
	@:protected public var BakedSourceTexture: ucpp.Ptr<Texture2D>;
	@:protected public var DefaultMaterial: ucpp.Ptr<MaterialInterface>;
	@:protected public var AlternateMaterial: ucpp.Ptr<MaterialInterface>;
	@:protected public var Sockets: TArray<PaperSpriteSocket>;
	@:protected public var SpriteCollisionDomain: TEnumAsByte<ESpriteCollisionMode>;
	@:protected public var PixelsPerUnrealUnit: ucpp.num.Float32;
	public var BodySetup: ucpp.Ptr<BodySetup>;
	public var AlternateMaterialSplitIndex: ucpp.num.Int32;
	public var BakedRenderData: TArray<Vector4>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstPaperSprite(PaperSprite) from PaperSprite {
	public extern var BodySetup(get, never): ucpp.Ptr<BodySetup.ConstBodySetup>;
	public inline extern function get_BodySetup(): ucpp.Ptr<BodySetup.ConstBodySetup> return this.BodySetup;
	public extern var AlternateMaterialSplitIndex(get, never): ucpp.num.Int32;
	public inline extern function get_AlternateMaterialSplitIndex(): ucpp.num.Int32 return this.AlternateMaterialSplitIndex;
	public extern var BakedRenderData(get, never): TArray<Vector4>;
	public inline extern function get_BakedRenderData(): TArray<Vector4> return this.BakedRenderData;
}

@:forward
@:nativeGen
@:native("PaperSprite*")
abstract PaperSpritePtr(ucpp.Ptr<PaperSprite>) from ucpp.Ptr<PaperSprite> to ucpp.Ptr<PaperSprite>{
	@:from
	public static extern inline function fromValue(v: PaperSprite): PaperSpritePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PaperSprite {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}