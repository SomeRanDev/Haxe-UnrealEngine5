// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeMaterialFactoryNode")
@:include("InterchangeMaterialFactoryNode.h")
@:structAccess
extern class InterchangeMaterialFactoryNode extends InterchangeBaseMaterialFactoryNode {
	public function SetCustomTwoSided(AttributeValue: cpp.Reference<Bool>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomTranslucencyLightingMode(AttributeValue: cpp.Reference<TEnumAsByte<ETranslucencyLightingMode>>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomShadingModel(AttributeValue: cpp.Reference<TEnumAsByte<EMaterialShadingModel>>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomOpacityMaskClipValue(AttributeValue: cpp.Reference<cpp.Float32>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomBlendMode(AttributeValue: cpp.Reference<TEnumAsByte<EBlendMode>>, bAddApplyDelegate: Bool): Bool;
	public function GetTransmissionColorConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetTangentConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetSubsurfaceConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetSpecularConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetRoughnessConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetRefractionConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetOpacityConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetOcclusionConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetObjectClass(): cpp.Star<Class>;
	public function GetNormalConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetMetallicConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetFuzzColorConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetEmissiveColorConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetCustomTwoSided(AttributeValue: cpp.Reference<Bool>): Bool;
	public function GetCustomTranslucencyLightingMode(AttributeValue: cpp.Reference<TEnumAsByte<ETranslucencyLightingMode>>): Bool;
	public function GetCustomShadingModel(AttributeValue: cpp.Reference<TEnumAsByte<EMaterialShadingModel>>): Bool;
	public function GetCustomOpacityMaskClipValue(AttributeValue: cpp.Reference<cpp.Float32>): Bool;
	public function GetCustomBlendMode(AttributeValue: cpp.Reference<TEnumAsByte<EBlendMode>>): Bool;
	public function GetClothConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetClearCoatRoughnessConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetClearCoatNormalConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetClearCoatConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetBaseColorConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function GetAnisotropyConnection(ExpressionNodeUid: cpp.Reference<FString>, OutputName: cpp.Reference<FString>): Bool;
	public function ConnectToTransmissionColor(AttributeValue: FString): Bool;
	public function ConnectToTangent(ExpressionNodeUid: FString): Bool;
	public function ConnectToSubsurface(ExpressionNodeUid: FString): Bool;
	public function ConnectToSpecular(ExpressionNodeUid: FString): Bool;
	public function ConnectToRoughness(ExpressionNodeUid: FString): Bool;
	public function ConnectToRefraction(AttributeValue: FString): Bool;
	public function ConnectToOpacity(AttributeValue: FString): Bool;
	public function ConnectToOcclusion(AttributeValue: FString): Bool;
	public function ConnectToNormal(ExpressionNodeUid: FString): Bool;
	public function ConnectToMetallic(AttributeValue: FString): Bool;
	public function ConnectToFuzzColor(AttributeValue: FString): Bool;
	public function ConnectToEmissiveColor(ExpressionNodeUid: FString): Bool;
	public function ConnectToCloth(AttributeValue: FString): Bool;
	public function ConnectToClearCoatRoughness(AttributeValue: FString): Bool;
	public function ConnectToClearCoatNormal(AttributeValue: FString): Bool;
	public function ConnectToClearCoat(AttributeValue: FString): Bool;
	public function ConnectToBaseColor(AttributeValue: FString): Bool;
	public function ConnectToAnisotropy(ExpressionNodeUid: FString): Bool;
	public function ConnectOutputToTransmissionColor(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToTangent(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToSubsurface(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToSpecular(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToRoughness(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToRefraction(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToOpacity(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToOcclusion(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToNormal(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToMetallic(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToFuzzColor(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToEmissiveColor(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToCloth(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToClearCoatRoughness(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToClearCoatNormal(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToClearCoat(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToBaseColor(ExpressionNodeUid: FString, OutputName: FString): Bool;
	public function ConnectOutputToAnisotropy(ExpressionNodeUid: FString, OutputName: FString): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	GetTransmissionColorConnection, GetTangentConnection, GetSubsurfaceConnection, GetSpecularConnection, GetRoughnessConnection,
	GetRefractionConnection, GetOpacityConnection, GetOcclusionConnection, GetObjectClass, GetNormalConnection,
	GetMetallicConnection, GetFuzzColorConnection, GetEmissiveColorConnection, GetCustomTwoSided, GetCustomTranslucencyLightingMode,
	GetCustomShadingModel, GetCustomOpacityMaskClipValue, GetCustomBlendMode, GetClothConnection, GetClearCoatRoughnessConnection,
	GetClearCoatNormalConnection, GetClearCoatConnection, GetBaseColorConnection, GetAnisotropyConnection
)
@:nativeGen
abstract ConstInterchangeMaterialFactoryNode(InterchangeMaterialFactoryNode) from InterchangeMaterialFactoryNode {
}

@:forward
@:nativeGen
@:native("InterchangeMaterialFactoryNode*")
abstract InterchangeMaterialFactoryNodePtr(cpp.Star<InterchangeMaterialFactoryNode>) from cpp.Star<InterchangeMaterialFactoryNode> to cpp.Star<InterchangeMaterialFactoryNode>{
	@:from
	public static extern inline function fromValue(v: InterchangeMaterialFactoryNode): InterchangeMaterialFactoryNodePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeMaterialFactoryNode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}