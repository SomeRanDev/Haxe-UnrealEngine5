// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UNetDriver")
@:include("Engine/NetDriver.h")
@:valueType
extern class NetDriver extends Object {
	public var NetConnectionClassName: FString;
	public var ReplicationDriverClassName: FString;
	public var ReplicationBridgeClassName: FString;
	public var MaxDownloadSize: ucpp.num.Int32;
	public var bClampListenServerTickRate: Bool;
	public var NetServerMaxTickRate: ucpp.num.Int32;
	public var MaxNetTickRate: ucpp.num.Int32;
	public var MaxInternetClientRate: ucpp.num.Int32;
	public var MaxClientRate: ucpp.num.Int32;
	public var ServerTravelPause: ucpp.num.Float32;
	public var SpawnPrioritySeconds: ucpp.num.Float32;
	public var RelevantTimeout: ucpp.num.Float32;
	public var KeepAliveTime: ucpp.num.Float32;
	public var InitialConnectTimeout: ucpp.num.Float32;
	public var ConnectionTimeout: ucpp.num.Float32;
	public var TimeoutMultiplierForUnoptimizedBuilds: ucpp.num.Float32;
	public var ServerConnection: ucpp.Ptr<NetConnection>;
	public var ClientConnections: TArray<ucpp.Ptr<NetConnection>>;
	public var RecentlyDisconnectedTrackingTime: ucpp.num.Int32;
	public var World: ucpp.Ptr<World>;
	public var WorldPackage: ucpp.Ptr<Package>;
	public var NetConnectionClass: TSubclassOf<Object>;
	public var ReplicationDriverClass: TSubclassOf<Object>;
	public var ReplicationBridgeClass: TSubclassOf<Object>;
	public var NetDriverName: FName;
	public var ChannelDefinitions: TArray<ChannelDefinition>;
	public var ChannelDefinitionMap: TMap<FName, ChannelDefinition>;
	private var ActorChannelPool: TArray<ucpp.Ptr<Channel>>;
	public var bNoTimeouts: Bool;
	public var bNeverApplyNetworkEmulationSettings: Bool;
	private var ReplicationDriver: ucpp.Ptr<ReplicationDriver>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstNetDriver(NetDriver) from NetDriver {
	public extern var NetConnectionClassName(get, never): FString;
	public inline extern function get_NetConnectionClassName(): FString return this.NetConnectionClassName;
	public extern var ReplicationDriverClassName(get, never): FString;
	public inline extern function get_ReplicationDriverClassName(): FString return this.ReplicationDriverClassName;
	public extern var ReplicationBridgeClassName(get, never): FString;
	public inline extern function get_ReplicationBridgeClassName(): FString return this.ReplicationBridgeClassName;
	public extern var MaxDownloadSize(get, never): ucpp.num.Int32;
	public inline extern function get_MaxDownloadSize(): ucpp.num.Int32 return this.MaxDownloadSize;
	public extern var bClampListenServerTickRate(get, never): Bool;
	public inline extern function get_bClampListenServerTickRate(): Bool return this.bClampListenServerTickRate;
	public extern var NetServerMaxTickRate(get, never): ucpp.num.Int32;
	public inline extern function get_NetServerMaxTickRate(): ucpp.num.Int32 return this.NetServerMaxTickRate;
	public extern var MaxNetTickRate(get, never): ucpp.num.Int32;
	public inline extern function get_MaxNetTickRate(): ucpp.num.Int32 return this.MaxNetTickRate;
	public extern var MaxInternetClientRate(get, never): ucpp.num.Int32;
	public inline extern function get_MaxInternetClientRate(): ucpp.num.Int32 return this.MaxInternetClientRate;
	public extern var MaxClientRate(get, never): ucpp.num.Int32;
	public inline extern function get_MaxClientRate(): ucpp.num.Int32 return this.MaxClientRate;
	public extern var ServerTravelPause(get, never): ucpp.num.Float32;
	public inline extern function get_ServerTravelPause(): ucpp.num.Float32 return this.ServerTravelPause;
	public extern var SpawnPrioritySeconds(get, never): ucpp.num.Float32;
	public inline extern function get_SpawnPrioritySeconds(): ucpp.num.Float32 return this.SpawnPrioritySeconds;
	public extern var RelevantTimeout(get, never): ucpp.num.Float32;
	public inline extern function get_RelevantTimeout(): ucpp.num.Float32 return this.RelevantTimeout;
	public extern var KeepAliveTime(get, never): ucpp.num.Float32;
	public inline extern function get_KeepAliveTime(): ucpp.num.Float32 return this.KeepAliveTime;
	public extern var InitialConnectTimeout(get, never): ucpp.num.Float32;
	public inline extern function get_InitialConnectTimeout(): ucpp.num.Float32 return this.InitialConnectTimeout;
	public extern var ConnectionTimeout(get, never): ucpp.num.Float32;
	public inline extern function get_ConnectionTimeout(): ucpp.num.Float32 return this.ConnectionTimeout;
	public extern var TimeoutMultiplierForUnoptimizedBuilds(get, never): ucpp.num.Float32;
	public inline extern function get_TimeoutMultiplierForUnoptimizedBuilds(): ucpp.num.Float32 return this.TimeoutMultiplierForUnoptimizedBuilds;
	public extern var ServerConnection(get, never): ucpp.Ptr<NetConnection.ConstNetConnection>;
	public inline extern function get_ServerConnection(): ucpp.Ptr<NetConnection.ConstNetConnection> return this.ServerConnection;
	public extern var ClientConnections(get, never): TArray<ucpp.Ptr<NetConnection.ConstNetConnection>>;
	public inline extern function get_ClientConnections(): TArray<ucpp.Ptr<NetConnection.ConstNetConnection>> return this.ClientConnections;
	public extern var RecentlyDisconnectedTrackingTime(get, never): ucpp.num.Int32;
	public inline extern function get_RecentlyDisconnectedTrackingTime(): ucpp.num.Int32 return this.RecentlyDisconnectedTrackingTime;
	public extern var World(get, never): ucpp.Ptr<World.ConstWorld>;
	public inline extern function get_World(): ucpp.Ptr<World.ConstWorld> return this.World;
	public extern var WorldPackage(get, never): ucpp.Ptr<Package.ConstPackage>;
	public inline extern function get_WorldPackage(): ucpp.Ptr<Package.ConstPackage> return this.WorldPackage;
	public extern var NetConnectionClass(get, never): TSubclassOf<Object.ConstObject>;
	public inline extern function get_NetConnectionClass(): TSubclassOf<Object.ConstObject> return this.NetConnectionClass;
	public extern var ReplicationDriverClass(get, never): TSubclassOf<Object.ConstObject>;
	public inline extern function get_ReplicationDriverClass(): TSubclassOf<Object.ConstObject> return this.ReplicationDriverClass;
	public extern var ReplicationBridgeClass(get, never): TSubclassOf<Object.ConstObject>;
	public inline extern function get_ReplicationBridgeClass(): TSubclassOf<Object.ConstObject> return this.ReplicationBridgeClass;
	public extern var NetDriverName(get, never): FName;
	public inline extern function get_NetDriverName(): FName return this.NetDriverName;
	public extern var ChannelDefinitions(get, never): TArray<ChannelDefinition>;
	public inline extern function get_ChannelDefinitions(): TArray<ChannelDefinition> return this.ChannelDefinitions;
	public extern var ChannelDefinitionMap(get, never): TMap<FName, ChannelDefinition>;
	public inline extern function get_ChannelDefinitionMap(): TMap<FName, ChannelDefinition> return this.ChannelDefinitionMap;
	public extern var bNoTimeouts(get, never): Bool;
	public inline extern function get_bNoTimeouts(): Bool return this.bNoTimeouts;
	public extern var bNeverApplyNetworkEmulationSettings(get, never): Bool;
	public inline extern function get_bNeverApplyNetworkEmulationSettings(): Bool return this.bNeverApplyNetworkEmulationSettings;
}

@:forward
@:nativeGen
@:native("NetDriver*")
abstract NetDriverPtr(ucpp.Ptr<NetDriver>) from ucpp.Ptr<NetDriver> to ucpp.Ptr<NetDriver>{
	@:from
	public static extern inline function fromValue(v: NetDriver): NetDriverPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): NetDriver {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}