// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UConstraintsManager")
@:include("ConstraintsManager.h")
@:structAccess
extern class ConstraintsManager extends Object {
	public var OnConstraintAdded_BP: HaxeMulticastSparseDelegateProperty<(cpp.Star<ConstraintsManager>, cpp.Star<TickableConstraint>) -> Void>;
	public var OnConstraintRemoved_BP: HaxeMulticastSparseDelegateProperty<(cpp.Star<ConstraintsManager>, cpp.Star<TickableConstraint>, Bool) -> Void>;
	private var Constraints: TArray<cpp.Star<TickableConstraint>>;

	public function OnConstraintRemoved__DelegateSignature(Mananger: cpp.Star<ConstraintsManager>, Constraint: cpp.Star<TickableConstraint>, bDoNotCompensate: Bool): Void;
	public function OnConstraintAdded__DelegateSignature(Mananger: cpp.Star<ConstraintsManager>, Constraint: cpp.Star<TickableConstraint>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstConstraintsManager(ConstraintsManager) from ConstraintsManager {
	public extern var OnConstraintAdded_BP(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<ConstraintsManager.ConstConstraintsManager>, cpp.Star<TickableConstraint.ConstTickableConstraint>) -> Void>;
	public inline extern function get_OnConstraintAdded_BP(): HaxeMulticastSparseDelegateProperty<(cpp.Star<ConstraintsManager.ConstConstraintsManager>, cpp.Star<TickableConstraint.ConstTickableConstraint>) -> Void> return this.OnConstraintAdded_BP;
	public extern var OnConstraintRemoved_BP(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<ConstraintsManager.ConstConstraintsManager>, cpp.Star<TickableConstraint.ConstTickableConstraint>, Bool) -> Void>;
	public inline extern function get_OnConstraintRemoved_BP(): HaxeMulticastSparseDelegateProperty<(cpp.Star<ConstraintsManager.ConstConstraintsManager>, cpp.Star<TickableConstraint.ConstTickableConstraint>, Bool) -> Void> return this.OnConstraintRemoved_BP;
}

@:forward
@:nativeGen
@:native("ConstraintsManager*")
abstract ConstraintsManagerPtr(cpp.Star<ConstraintsManager>) from cpp.Star<ConstraintsManager> to cpp.Star<ConstraintsManager>{
	@:from
	public static extern inline function fromValue(v: ConstraintsManager): ConstraintsManagerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ConstraintsManager {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}