// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UUVProjectionToolProperties")
@:include("UVProjectionTool.h")
@:structAccess
extern class UVProjectionToolProperties extends InteractiveToolPropertySet {
	public var ProjectionType: EUVProjectionMethod;
	public var Dimensions: Vector;
	public var bProportionalDimensions: Bool;
	public var Initialization: EUVProjectionToolInitializationMode;
	public var CylinderSplitAngle: cpp.Float32;
	public var ExpMapNormalBlending: cpp.Float32;
	public var ExpMapSmoothingSteps: cpp.Int32;
	public var ExpMapSmoothingAlpha: cpp.Float32;
	public var Rotation: cpp.Float32;
	public var Scale: Vector2D;
	public var Translation: Vector2D;
	public var SavedDimensions: Vector;
	public var bSavedProportionalDimensions: Bool;
	public var SavedTransform: Transform;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstUVProjectionToolProperties(UVProjectionToolProperties) from UVProjectionToolProperties {
	public extern var ProjectionType(get, never): EUVProjectionMethod;
	public inline extern function get_ProjectionType(): EUVProjectionMethod return this.ProjectionType;
	public extern var Dimensions(get, never): Vector;
	public inline extern function get_Dimensions(): Vector return this.Dimensions;
	public extern var bProportionalDimensions(get, never): Bool;
	public inline extern function get_bProportionalDimensions(): Bool return this.bProportionalDimensions;
	public extern var Initialization(get, never): EUVProjectionToolInitializationMode;
	public inline extern function get_Initialization(): EUVProjectionToolInitializationMode return this.Initialization;
	public extern var CylinderSplitAngle(get, never): cpp.Float32;
	public inline extern function get_CylinderSplitAngle(): cpp.Float32 return this.CylinderSplitAngle;
	public extern var ExpMapNormalBlending(get, never): cpp.Float32;
	public inline extern function get_ExpMapNormalBlending(): cpp.Float32 return this.ExpMapNormalBlending;
	public extern var ExpMapSmoothingSteps(get, never): cpp.Int32;
	public inline extern function get_ExpMapSmoothingSteps(): cpp.Int32 return this.ExpMapSmoothingSteps;
	public extern var ExpMapSmoothingAlpha(get, never): cpp.Float32;
	public inline extern function get_ExpMapSmoothingAlpha(): cpp.Float32 return this.ExpMapSmoothingAlpha;
	public extern var Rotation(get, never): cpp.Float32;
	public inline extern function get_Rotation(): cpp.Float32 return this.Rotation;
	public extern var Scale(get, never): Vector2D;
	public inline extern function get_Scale(): Vector2D return this.Scale;
	public extern var Translation(get, never): Vector2D;
	public inline extern function get_Translation(): Vector2D return this.Translation;
	public extern var SavedDimensions(get, never): Vector;
	public inline extern function get_SavedDimensions(): Vector return this.SavedDimensions;
	public extern var bSavedProportionalDimensions(get, never): Bool;
	public inline extern function get_bSavedProportionalDimensions(): Bool return this.bSavedProportionalDimensions;
	public extern var SavedTransform(get, never): Transform;
	public inline extern function get_SavedTransform(): Transform return this.SavedTransform;
}

@:forward
@:nativeGen
@:native("UVProjectionToolProperties*")
abstract UVProjectionToolPropertiesPtr(cpp.Star<UVProjectionToolProperties>) from cpp.Star<UVProjectionToolProperties> to cpp.Star<UVProjectionToolProperties>{
	@:from
	public static extern inline function fromValue(v: UVProjectionToolProperties): UVProjectionToolPropertiesPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): UVProjectionToolProperties {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}