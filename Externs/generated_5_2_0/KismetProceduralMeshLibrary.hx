// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetProceduralMeshLibrary")
@:include("KismetProceduralMeshLibrary.h")
@:valueType
extern class KismetProceduralMeshLibrary extends BlueprintFunctionLibrary {
	public function SliceProceduralMesh(InProcMesh: ucpp.Ptr<ProceduralMeshComp>, PlanePosition: Vector, PlaneNormal: Vector, bCreateOtherHalf: Bool, OutOtherHalfProcMesh: ucpp.Ref<ucpp.Ptr<ProceduralMeshComp>>, CapOption: EProcMeshSliceCapOption, CapMaterial: ucpp.Ptr<MaterialInterface>): Void;
	public function GetSectionFromStaticMesh(InMesh: ucpp.Ptr<StaticMesh>, LODIndex: ucpp.num.Int32, SectionIndex: ucpp.num.Int32, Vertices: ucpp.Ref<TArray<Vector>>, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Normals: ucpp.Ref<TArray<Vector>>, UVs: ucpp.Ref<TArray<Vector2D>>, Tangents: ucpp.Ref<TArray<ProcMeshTangent>>): Void;
	public function GetSectionFromProceduralMesh(InProcMesh: ucpp.Ptr<ProceduralMeshComp>, SectionIndex: ucpp.num.Int32, Vertices: ucpp.Ref<TArray<Vector>>, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Normals: ucpp.Ref<TArray<Vector>>, UVs: ucpp.Ref<TArray<Vector2D>>, Tangents: ucpp.Ref<TArray<ProcMeshTangent>>): Void;
	public function GenerateBoxMesh(BoxRadius: Vector, Vertices: ucpp.Ref<TArray<Vector>>, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Normals: ucpp.Ref<TArray<Vector>>, UVs: ucpp.Ref<TArray<Vector2D>>, Tangents: ucpp.Ref<TArray<ProcMeshTangent>>): Void;
	public function CreateGridMeshWelded(NumX: ucpp.num.Int32, NumY: ucpp.num.Int32, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Vertices: ucpp.Ref<TArray<Vector>>, UVs: ucpp.Ref<TArray<Vector2D>>, GridSpacing: ucpp.num.Float32): Void;
	public function CreateGridMeshTriangles(NumX: ucpp.num.Int32, NumY: ucpp.num.Int32, bWinding: Bool, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>): Void;
	public function CreateGridMeshSplit(NumX: ucpp.num.Int32, NumY: ucpp.num.Int32, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Vertices: ucpp.Ref<TArray<Vector>>, UVs: ucpp.Ref<TArray<Vector2D>>, UV1s: ucpp.Ref<TArray<Vector2D>>, GridSpacing: ucpp.num.Float32): Void;
	public function CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: ucpp.Ptr<StaticMeshComp>, LODIndex: ucpp.num.Int32, ProcMeshComponent: ucpp.Ptr<ProceduralMeshComp>, bCreateCollision: Bool): Void;
	public function ConvertQuadToTriangles(Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Vert0: ucpp.num.Int32, Vert1: ucpp.num.Int32, Vert2: ucpp.num.Int32, Vert3: ucpp.num.Int32): Void;
	public function CalculateTangentsForMesh(Vertices: ucpp.Ref<TArray<Vector>>, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, UVs: ucpp.Ref<TArray<Vector2D>>, Normals: ucpp.Ref<TArray<Vector>>, Tangents: ucpp.Ref<TArray<ProcMeshTangent>>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstKismetProceduralMeshLibrary(KismetProceduralMeshLibrary) from KismetProceduralMeshLibrary {
}

@:forward
@:nativeGen
@:native("KismetProceduralMeshLibrary*")
abstract KismetProceduralMeshLibraryPtr(ucpp.Ptr<KismetProceduralMeshLibrary>) from ucpp.Ptr<KismetProceduralMeshLibrary> to ucpp.Ptr<KismetProceduralMeshLibrary>{
	@:from
	public static extern inline function fromValue(v: KismetProceduralMeshLibrary): KismetProceduralMeshLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): KismetProceduralMeshLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}