// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ADatasmithAreaLightActor")
@:include("DatasmithAreaLightActor.h")
@:structAccess
extern class DatasmithAreaLightActor extends Actor {
	public var Mobility: TEnumAsByte<EComponentMobility>;
	public var LightType: EDatasmithAreaLightActorType;
	public var LightShape: EDatasmithAreaLightActorShape;
	public var Dimensions: Vector2D;
	public var Intensity: cpp.Float32;
	public var IntensityUnits: ELightUnits;
	public var Color: LinearColor;
	public var Temperature: cpp.Float32;
	public var IESTexture: cpp.Star<TextureLightProfile>;
	public var bUseIESBrightness: Bool;
	public var IESBrightnessScale: cpp.Float32;
	public var Rotation: Rotator;
	public var SourceRadius: cpp.Float32;
	public var SourceLength: cpp.Float32;
	public var AttenuationRadius: cpp.Float32;
	public var SpotlightInnerAngle: cpp.Float32;
	public var SpotlightOuterAngle: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstDatasmithAreaLightActor(DatasmithAreaLightActor) from DatasmithAreaLightActor {
	public extern var Mobility(get, never): TEnumAsByte<EComponentMobility>;
	public inline extern function get_Mobility(): TEnumAsByte<EComponentMobility> return this.Mobility;
	public extern var LightType(get, never): EDatasmithAreaLightActorType;
	public inline extern function get_LightType(): EDatasmithAreaLightActorType return this.LightType;
	public extern var LightShape(get, never): EDatasmithAreaLightActorShape;
	public inline extern function get_LightShape(): EDatasmithAreaLightActorShape return this.LightShape;
	public extern var Dimensions(get, never): Vector2D;
	public inline extern function get_Dimensions(): Vector2D return this.Dimensions;
	public extern var Intensity(get, never): cpp.Float32;
	public inline extern function get_Intensity(): cpp.Float32 return this.Intensity;
	public extern var IntensityUnits(get, never): ELightUnits;
	public inline extern function get_IntensityUnits(): ELightUnits return this.IntensityUnits;
	public extern var Color(get, never): LinearColor;
	public inline extern function get_Color(): LinearColor return this.Color;
	public extern var Temperature(get, never): cpp.Float32;
	public inline extern function get_Temperature(): cpp.Float32 return this.Temperature;
	public extern var IESTexture(get, never): cpp.Star<TextureLightProfile.ConstTextureLightProfile>;
	public inline extern function get_IESTexture(): cpp.Star<TextureLightProfile.ConstTextureLightProfile> return this.IESTexture;
	public extern var bUseIESBrightness(get, never): Bool;
	public inline extern function get_bUseIESBrightness(): Bool return this.bUseIESBrightness;
	public extern var IESBrightnessScale(get, never): cpp.Float32;
	public inline extern function get_IESBrightnessScale(): cpp.Float32 return this.IESBrightnessScale;
	public extern var Rotation(get, never): Rotator;
	public inline extern function get_Rotation(): Rotator return this.Rotation;
	public extern var SourceRadius(get, never): cpp.Float32;
	public inline extern function get_SourceRadius(): cpp.Float32 return this.SourceRadius;
	public extern var SourceLength(get, never): cpp.Float32;
	public inline extern function get_SourceLength(): cpp.Float32 return this.SourceLength;
	public extern var AttenuationRadius(get, never): cpp.Float32;
	public inline extern function get_AttenuationRadius(): cpp.Float32 return this.AttenuationRadius;
	public extern var SpotlightInnerAngle(get, never): cpp.Float32;
	public inline extern function get_SpotlightInnerAngle(): cpp.Float32 return this.SpotlightInnerAngle;
	public extern var SpotlightOuterAngle(get, never): cpp.Float32;
	public inline extern function get_SpotlightOuterAngle(): cpp.Float32 return this.SpotlightOuterAngle;
}

@:forward
@:nativeGen
@:native("DatasmithAreaLightActor*")
abstract DatasmithAreaLightActorPtr(cpp.Star<DatasmithAreaLightActor>) from cpp.Star<DatasmithAreaLightActor> to cpp.Star<DatasmithAreaLightActor>{
	@:from
	public static extern inline function fromValue(v: DatasmithAreaLightActor): DatasmithAreaLightActorPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): DatasmithAreaLightActor {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}