// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEnhancedInputLibrary")
@:include("EnhancedInputLibrary.h")
@:structAccess
extern class EnhancedInputLibrary extends BlueprintFunctionLibrary {
	public function RequestRebuildControlMappingsUsingContext(Context: cpp.Star<InputMappingContext.ConstInputMappingContext>, bForceImmediately: Bool): Void;
	public function MakeInputActionValueOfType(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64, ValueType: EInputActionValueType): InputActionValue;
	public function MakeInputActionValue(X: cpp.Float64, Y: cpp.Float64, Z: cpp.Float64, MatchValueType: cpp.Reference<InputActionValue>): InputActionValue;
	public function IsActionKeyMappingPlayerMappable(ActionKeyMapping: cpp.Reference<EnhancedActionKeyMapping>): Bool;
	public function GetThirdPlayerMappableKeySlot(): PlayerMappableKeySlot;
	public function GetSecondPlayerMappableKeySlot(): PlayerMappableKeySlot;
	public function GetPlayerMappableKeySettings(ActionKeyMapping: cpp.Reference<EnhancedActionKeyMapping>): cpp.Star<PlayerMappableKeySettings>;
	public function GetMappingName(ActionKeyMapping: cpp.Reference<EnhancedActionKeyMapping>): FName;
	public function GetFourthPlayerMappableKeySlot(): PlayerMappableKeySlot;
	public function GetFirstPlayerMappableKeySlot(): PlayerMappableKeySlot;
	public function GetBoundActionValue(Actor: cpp.Star<Actor>, Action: cpp.Star<InputAction.ConstInputAction>): InputActionValue;
	public function Conv_InputActionValueToString(ActionValue: InputActionValue): FString;
	public function Conv_InputActionValueToBool(InValue: InputActionValue): Bool;
	public function Conv_InputActionValueToAxis3D(ActionValue: InputActionValue): Vector;
	public function Conv_InputActionValueToAxis2D(InValue: InputActionValue): Vector2D;
	public function Conv_InputActionValueToAxis1D(InValue: InputActionValue): cpp.Float64;
	public function BreakInputActionValue(InActionValue: InputActionValue, X: cpp.Reference<cpp.Float64>, Y: cpp.Reference<cpp.Float64>, Z: cpp.Reference<cpp.Float64>, Type: cpp.Reference<EInputActionValueType>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstEnhancedInputLibrary(EnhancedInputLibrary) from EnhancedInputLibrary {
}

@:forward
@:nativeGen
@:native("EnhancedInputLibrary*")
abstract EnhancedInputLibraryPtr(cpp.Star<EnhancedInputLibrary>) from cpp.Star<EnhancedInputLibrary> to cpp.Star<EnhancedInputLibrary>{
	@:from
	public static extern inline function fromValue(v: EnhancedInputLibrary): EnhancedInputLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EnhancedInputLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}