// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEnhancedInputLibrary")
@:include("EnhancedInputLibrary.h")
@:valueType
extern class EnhancedInputLibrary extends BlueprintFunctionLibrary {
	public function RequestRebuildControlMappingsUsingContext(Context: ucpp.Ptr<InputMappingContext.ConstInputMappingContext>, bForceImmediately: Bool): Void;
	public function MakeInputActionValueOfType(X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64, ValueType: EInputActionValueType): InputActionValue;
	public function MakeInputActionValue(X: ucpp.num.Float64, Y: ucpp.num.Float64, Z: ucpp.num.Float64, MatchValueType: ucpp.Ref<InputActionValue>): InputActionValue;
	public function IsActionKeyMappingPlayerMappable(ActionKeyMapping: ucpp.Ref<EnhancedActionKeyMapping>): Bool;
	public function GetThirdPlayerMappableKeySlot(): PlayerMappableKeySlot;
	public function GetSecondPlayerMappableKeySlot(): PlayerMappableKeySlot;
	public function GetPlayerMappableKeySettings(ActionKeyMapping: ucpp.Ref<EnhancedActionKeyMapping>): ucpp.Ptr<PlayerMappableKeySettings>;
	public function GetMappingName(ActionKeyMapping: ucpp.Ref<EnhancedActionKeyMapping>): FName;
	public function GetFourthPlayerMappableKeySlot(): PlayerMappableKeySlot;
	public function GetFirstPlayerMappableKeySlot(): PlayerMappableKeySlot;
	public function GetBoundActionValue(Actor: ucpp.Ptr<Actor>, Action: ucpp.Ptr<InputAction.ConstInputAction>): InputActionValue;
	public function Conv_InputActionValueToString(ActionValue: InputActionValue): FString;
	public function Conv_InputActionValueToBool(InValue: InputActionValue): Bool;
	public function Conv_InputActionValueToAxis3D(ActionValue: InputActionValue): Vector;
	public function Conv_InputActionValueToAxis2D(InValue: InputActionValue): Vector2D;
	public function Conv_InputActionValueToAxis1D(InValue: InputActionValue): ucpp.num.Float64;
	public function BreakInputActionValue(InActionValue: InputActionValue, X: ucpp.Ref<ucpp.num.Float64>, Y: ucpp.Ref<ucpp.num.Float64>, Z: ucpp.Ref<ucpp.num.Float64>, Type: ucpp.Ref<EInputActionValueType>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstEnhancedInputLibrary(EnhancedInputLibrary) from EnhancedInputLibrary {
}

@:forward
@:nativeGen
@:native("EnhancedInputLibrary*")
abstract EnhancedInputLibraryPtr(ucpp.Ptr<EnhancedInputLibrary>) from ucpp.Ptr<EnhancedInputLibrary> to ucpp.Ptr<EnhancedInputLibrary>{
	@:from
	public static extern inline function fromValue(v: EnhancedInputLibrary): EnhancedInputLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EnhancedInputLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}