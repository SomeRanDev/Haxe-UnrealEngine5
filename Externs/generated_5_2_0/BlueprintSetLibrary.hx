// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlueprintSetLibrary")
@:include("Kismet/BlueprintSetLibrary.h")
@:valueType
extern class BlueprintSetLibrary extends BlueprintFunctionLibrary {
	public function SetSetPropertyByName(Object: ucpp.Ptr<Object>, PropertyName: FName, Value: ucpp.Ref<TSet<ucpp.num.Int32>>): Void;
	public function Set_Union(A: ucpp.Ref<TSet<ucpp.num.Int32>>, B: ucpp.Ref<TSet<ucpp.num.Int32>>, Result: ucpp.Ref<TSet<ucpp.num.Int32>>): Void;
	public function Set_ToArray(A: ucpp.Ref<TSet<ucpp.num.Int32>>, Result: ucpp.Ref<TArray<ucpp.num.Int32>>): Void;
	public function Set_RemoveItems(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>, Items: ucpp.Ref<TArray<ucpp.num.Int32>>): Void;
	public function Set_Remove(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>, Item: ucpp.Ref<ucpp.num.Int32>): Bool;
	public function Set_Length(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>): ucpp.num.Int32;
	public function Set_IsNotEmpty(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>): Bool;
	public function Set_IsEmpty(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>): Bool;
	public function Set_Intersection(A: ucpp.Ref<TSet<ucpp.num.Int32>>, B: ucpp.Ref<TSet<ucpp.num.Int32>>, Result: ucpp.Ref<TSet<ucpp.num.Int32>>): Void;
	public function Set_Difference(A: ucpp.Ref<TSet<ucpp.num.Int32>>, B: ucpp.Ref<TSet<ucpp.num.Int32>>, Result: ucpp.Ref<TSet<ucpp.num.Int32>>): Void;
	public function Set_Contains(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>, ItemToFind: ucpp.Ref<ucpp.num.Int32>): Bool;
	public function Set_Clear(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>): Void;
	public function Set_AddItems(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>, NewItems: ucpp.Ref<TArray<ucpp.num.Int32>>): Void;
	public function Set_Add(TargetSet: ucpp.Ref<TSet<ucpp.num.Int32>>, NewItem: ucpp.Ref<ucpp.num.Int32>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstBlueprintSetLibrary(BlueprintSetLibrary) from BlueprintSetLibrary {
}

@:forward
@:nativeGen
@:native("BlueprintSetLibrary*")
abstract BlueprintSetLibraryPtr(ucpp.Ptr<BlueprintSetLibrary>) from ucpp.Ptr<BlueprintSetLibrary> to ucpp.Ptr<BlueprintSetLibrary>{
	@:from
	public static extern inline function fromValue(v: BlueprintSetLibrary): BlueprintSetLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): BlueprintSetLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}