// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMaterialExpressionSphereMask")
@:include("Materials/MaterialExpressionSphereMask.h")
@:structAccess
extern class MaterialExpressionSphereMask extends MaterialExpression {
	public var A: ExpressionInput;
	public var B: ExpressionInput;
	public var Radius: ExpressionInput;
	public var Hardness: ExpressionInput;
	public var AttenuationRadius: cpp.Float32;
	public var HardnessPercent: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstMaterialExpressionSphereMask(MaterialExpressionSphereMask) from MaterialExpressionSphereMask {
	public extern var A(get, never): ExpressionInput;
	public inline extern function get_A(): ExpressionInput return this.A;
	public extern var B(get, never): ExpressionInput;
	public inline extern function get_B(): ExpressionInput return this.B;
	public extern var Radius(get, never): ExpressionInput;
	public inline extern function get_Radius(): ExpressionInput return this.Radius;
	public extern var Hardness(get, never): ExpressionInput;
	public inline extern function get_Hardness(): ExpressionInput return this.Hardness;
	public extern var AttenuationRadius(get, never): cpp.Float32;
	public inline extern function get_AttenuationRadius(): cpp.Float32 return this.AttenuationRadius;
	public extern var HardnessPercent(get, never): cpp.Float32;
	public inline extern function get_HardnessPercent(): cpp.Float32 return this.HardnessPercent;
}

@:forward
@:nativeGen
@:native("MaterialExpressionSphereMask*")
abstract MaterialExpressionSphereMaskPtr(cpp.Star<MaterialExpressionSphereMask>) from cpp.Star<MaterialExpressionSphereMask> to cpp.Star<MaterialExpressionSphereMask>{
	@:from
	public static extern inline function fromValue(v: MaterialExpressionSphereMask): MaterialExpressionSphereMaskPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MaterialExpressionSphereMask {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}