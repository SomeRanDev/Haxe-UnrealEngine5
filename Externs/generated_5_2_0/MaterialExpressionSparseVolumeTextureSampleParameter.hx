// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMaterialExpressionSparseVolumeTextureSampleParameter")
@:include("Materials/MaterialExpressionSparseVolumeTextureSample.h")
@:structAccess
extern class MaterialExpressionSparseVolumeTextureSampleParameter extends MaterialExpressionSparseVolumeTextureSample {
	public var ParameterName: FName;
	public var ExpressionGUID: Guid;
	public var Group: FName;
	public var SortPriority: cpp.Int32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstMaterialExpressionSparseVolumeTextureSampleParameter(MaterialExpressionSparseVolumeTextureSampleParameter) from MaterialExpressionSparseVolumeTextureSampleParameter {
	public extern var ParameterName(get, never): FName;
	public inline extern function get_ParameterName(): FName return this.ParameterName;
	public extern var ExpressionGUID(get, never): Guid;
	public inline extern function get_ExpressionGUID(): Guid return this.ExpressionGUID;
	public extern var Group(get, never): FName;
	public inline extern function get_Group(): FName return this.Group;
	public extern var SortPriority(get, never): cpp.Int32;
	public inline extern function get_SortPriority(): cpp.Int32 return this.SortPriority;
}

@:forward
@:nativeGen
@:native("MaterialExpressionSparseVolumeTextureSampleParameter*")
abstract MaterialExpressionSparseVolumeTextureSampleParameterPtr(cpp.Star<MaterialExpressionSparseVolumeTextureSampleParameter>) from cpp.Star<MaterialExpressionSparseVolumeTextureSampleParameter> to cpp.Star<MaterialExpressionSparseVolumeTextureSampleParameter>{
	@:from
	public static extern inline function fromValue(v: MaterialExpressionSparseVolumeTextureSampleParameter): MaterialExpressionSparseVolumeTextureSampleParameterPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MaterialExpressionSparseVolumeTextureSampleParameter {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}