// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AController")
@:include("GameFramework/Controller.h")
@:valueType
extern class Controller extends Actor {
	public var PlayerState: ucpp.Ptr<PlayerState>;
	public var OnInstigatedAnyDamage: HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32, ucpp.Ptr<DamageType.ConstDamageType>, ucpp.Ptr<Actor>, ucpp.Ptr<Actor>) -> Void>;
	public var OnPossessedPawnChanged: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn>, ucpp.Ptr<Pawn>) -> Void>;
	public var StateName: FName;
	private var Pawn: ucpp.Ptr<Pawn>;
	private var Character: ucpp.Ptr<Character>;
	private var TransformComponent: ucpp.Ptr<SceneComp>;
	@:protected public var ControlRotation: Rotator;
	@:protected public var bAttachToPawn: Bool;

	public function UnPossess(): Void;
	public function StopMovement(): Void;
	public function SetInitialLocationAndRotation(NewLocation: ucpp.Ref<Vector>, NewRotation: ucpp.Ref<Rotator>): Void;
	public function SetIgnoreMoveInput(bNewMoveInput: Bool): Void;
	public function SetIgnoreLookInput(bNewLookInput: Bool): Void;
	public function SetControlRotation(NewRotation: ucpp.Ref<Rotator>): Void;
	public function ResetIgnoreMoveInput(): Void;
	public function ResetIgnoreLookInput(): Void;
	public function ResetIgnoreInputFlags(): Void;
	@:protected public function ReceiveUnPossess(UnpossessedPawn: ucpp.Ptr<Pawn>): Void;
	@:protected public function ReceivePossess(PossessedPawn: ucpp.Ptr<Pawn>): Void;
	@:protected public function ReceiveInstigatedAnyDamage(Damage: ucpp.num.Float32, DamageType: ucpp.Ptr<DamageType.ConstDamageType>, DamagedActor: ucpp.Ptr<Actor>, DamageCauser: ucpp.Ptr<Actor>): Void;
	public function Possess(InPawn: ucpp.Ptr<Pawn>): Void;
	public function OnRep_PlayerState(): Void;
	public function OnRep_Pawn(): Void;
	public function LineOfSightTo(Other: ucpp.Ptr<Actor.ConstActor>, ViewPoint: Vector, bAlternateChecks: Bool): Bool;
	public function K2_GetPawn(): ucpp.Ptr<Pawn>;
	public function IsPlayerController(): Bool;
	public function IsMoveInputIgnored(): Bool;
	public function IsLookInputIgnored(): Bool;
	public function IsLocalPlayerController(): Bool;
	public function IsLocalController(): Bool;
	public function GetViewTarget(): ucpp.Ptr<Actor>;
	public function GetPlayerViewPoint(Location: ucpp.Ref<Vector>, Rotation: ucpp.Ref<Rotator>): Void;
	public function GetDesiredRotation(): Rotator;
	public function GetControlRotation(): Rotator;
	public function ClientSetRotation(NewRotation: Rotator, bResetCamera: Bool): Void;
	public function ClientSetLocation(NewLocation: Vector, NewRotation: Rotator): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	LineOfSightTo, K2_GetPawn, IsPlayerController, IsMoveInputIgnored, IsLookInputIgnored,
	IsLocalPlayerController, IsLocalController, GetViewTarget, GetPlayerViewPoint, GetDesiredRotation,
	GetControlRotation
)
@:nativeGen
abstract ConstController(Controller) from Controller {
	public extern var PlayerState(get, never): ucpp.Ptr<PlayerState.ConstPlayerState>;
	public inline extern function get_PlayerState(): ucpp.Ptr<PlayerState.ConstPlayerState> return this.PlayerState;
	public extern var OnInstigatedAnyDamage(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32, ucpp.Ptr<DamageType.ConstDamageType>, ucpp.Ptr<Actor.ConstActor>, ucpp.Ptr<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInstigatedAnyDamage(): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32, ucpp.Ptr<DamageType.ConstDamageType>, ucpp.Ptr<Actor.ConstActor>, ucpp.Ptr<Actor.ConstActor>) -> Void> return this.OnInstigatedAnyDamage;
	public extern var OnPossessedPawnChanged(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>, ucpp.Ptr<Pawn.ConstPawn>) -> Void>;
	public inline extern function get_OnPossessedPawnChanged(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Pawn.ConstPawn>, ucpp.Ptr<Pawn.ConstPawn>) -> Void> return this.OnPossessedPawnChanged;
	public extern var StateName(get, never): FName;
	public inline extern function get_StateName(): FName return this.StateName;
}

@:forward
@:nativeGen
@:native("Controller*")
abstract ControllerPtr(ucpp.Ptr<Controller>) from ucpp.Ptr<Controller> to ucpp.Ptr<Controller>{
	@:from
	public static extern inline function fromValue(v: Controller): ControllerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Controller {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}