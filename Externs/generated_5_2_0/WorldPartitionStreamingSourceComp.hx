// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWorldPartitionStreamingSourceComponent")
@:include("Components/WorldPartitionStreamingSourceComponent.h")
@:structAccess
extern class WorldPartitionStreamingSourceComp extends ActorComp {
	public var TargetBehavior: EStreamingSourceTargetBehavior;
	public var TargetGrids: TArray<FName>;
	public var DebugColor: Color;
	public var TargetHLODLayers: TArray<cpp.Star<HLODLayer>>;
	public var Shapes: TArray<StreamingSourceShape>;
	public var Priority: EStreamingSourcePriority;
	private var bStreamingSourceEnabled: Bool;
	private var TargetState: EStreamingSourceTargetState;

	public function IsStreamingSourceEnabled(): Bool;
	public function IsStreamingCompleted(): Bool;
	public function EnableStreamingSource(): Void;
	public function DisableStreamingSource(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsStreamingSourceEnabled, IsStreamingCompleted)
@:nativeGen
abstract ConstWorldPartitionStreamingSourceComp(WorldPartitionStreamingSourceComp) from WorldPartitionStreamingSourceComp {
	public extern var TargetBehavior(get, never): EStreamingSourceTargetBehavior;
	public inline extern function get_TargetBehavior(): EStreamingSourceTargetBehavior return this.TargetBehavior;
	public extern var TargetGrids(get, never): TArray<FName>;
	public inline extern function get_TargetGrids(): TArray<FName> return this.TargetGrids;
	public extern var DebugColor(get, never): Color;
	public inline extern function get_DebugColor(): Color return this.DebugColor;
	public extern var TargetHLODLayers(get, never): TArray<cpp.Star<HLODLayer.ConstHLODLayer>>;
	public inline extern function get_TargetHLODLayers(): TArray<cpp.Star<HLODLayer.ConstHLODLayer>> return this.TargetHLODLayers;
	public extern var Shapes(get, never): TArray<StreamingSourceShape>;
	public inline extern function get_Shapes(): TArray<StreamingSourceShape> return this.Shapes;
	public extern var Priority(get, never): EStreamingSourcePriority;
	public inline extern function get_Priority(): EStreamingSourcePriority return this.Priority;
}

@:forward
@:nativeGen
@:native("WorldPartitionStreamingSourceComp*")
abstract WorldPartitionStreamingSourceCompPtr(cpp.Star<WorldPartitionStreamingSourceComp>) from cpp.Star<WorldPartitionStreamingSourceComp> to cpp.Star<WorldPartitionStreamingSourceComp>{
	@:from
	public static extern inline function fromValue(v: WorldPartitionStreamingSourceComp): WorldPartitionStreamingSourceCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): WorldPartitionStreamingSourceComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}