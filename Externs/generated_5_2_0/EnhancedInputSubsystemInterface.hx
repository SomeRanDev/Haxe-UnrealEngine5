// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEnhancedInputSubsystemInterface")
@:structAccess
extern class EnhancedInputSubsystemInterface extends Interface {
	public function RequestRebuildControlMappings(Options: cpp.Reference<ModifyContextOptions>, RebuildType: EInputMappingRebuildType): Void;
	public function RemovePlayerMappableConfig(Config: cpp.Star<PlayerMappableInputConfig.ConstPlayerMappableInputConfig>, Options: cpp.Reference<ModifyContextOptions>): Void;
	public function RemoveMappingContext(MappingContext: cpp.Star<InputMappingContext.ConstInputMappingContext>, Options: cpp.Reference<ModifyContextOptions>): Void;
	public function RemoveAllPlayerMappedKeysForMapping(MappingName: FName, Options: cpp.Reference<ModifyContextOptions>): cpp.Int32;
	public function RemoveAllPlayerMappedKeys(Options: cpp.Reference<ModifyContextOptions>): Void;
	public function QueryMapKeyInContextSet(PrioritizedActiveContexts: cpp.Reference<TArray<cpp.Star<InputMappingContext>>>, InputContext: cpp.Star<InputMappingContext.ConstInputMappingContext>, Action: cpp.Star<InputAction.ConstInputAction>, Key: Key, OutIssues: cpp.Reference<TArray<MappingQueryIssue>>, BlockingIssues: EMappingQueryIssue): EMappingQueryResult;
	public function QueryMapKeyInActiveContextSet(InputContext: cpp.Star<InputMappingContext.ConstInputMappingContext>, Action: cpp.Star<InputAction.ConstInputAction>, Key: Key, OutIssues: cpp.Reference<TArray<MappingQueryIssue>>, BlockingIssues: EMappingQueryIssue): EMappingQueryResult;
	public function QueryKeysMappedToAction(Action: cpp.Star<InputAction.ConstInputAction>): TArray<Key>;
	public function K2_RemovePlayerMappedKeyInSlot(MappingName: FName, KeySlot: cpp.Reference<PlayerMappableKeySlot>, Options: cpp.Reference<ModifyContextOptions>): cpp.Int32;
	public function K2_GetPlayerMappedKeyInSlot(MappingName: FName, KeySlot: cpp.Reference<PlayerMappableKeySlot>): Key;
	public function K2_AddPlayerMappedKeyInSlot(MappingName: FName, NewKey: Key, KeySlot: cpp.Reference<PlayerMappableKeySlot>, Options: cpp.Reference<ModifyContextOptions>): cpp.Int32;
	public function InjectInputVectorForAction(Action: cpp.Star<InputAction.ConstInputAction>, Value: Vector, Modifiers: cpp.Reference<TArray<cpp.Star<InputModifier>>>, Triggers: cpp.Reference<TArray<cpp.Star<InputTrigger>>>): Void;
	public function InjectInputForAction(Action: cpp.Star<InputAction.ConstInputAction>, RawValue: InputActionValue, Modifiers: cpp.Reference<TArray<cpp.Star<InputModifier>>>, Triggers: cpp.Reference<TArray<cpp.Star<InputTrigger>>>): Void;
	public function HasMappingContext(MappingContext: cpp.Star<InputMappingContext.ConstInputMappingContext>, OutFoundPriority: cpp.Reference<cpp.Int32>): Bool;
	public function GetAllPlayerMappedKeys(MappingName: FName): TArray<Key>;
	public function GetAllPlayerMappableActionKeyMappings(): TArray<EnhancedActionKeyMapping>;
	public function ClearAllMappings(): Void;
	public function AddPlayerMappableConfig(Config: cpp.Star<PlayerMappableInputConfig.ConstPlayerMappableInputConfig>, Options: cpp.Reference<ModifyContextOptions>): Void;
	public function AddMappingContext(MappingContext: cpp.Star<InputMappingContext.ConstInputMappingContext>, Priority: cpp.Int32, Options: cpp.Reference<ModifyContextOptions>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(QueryKeysMappedToAction, K2_GetPlayerMappedKeyInSlot, HasMappingContext, GetAllPlayerMappedKeys, GetAllPlayerMappableActionKeyMappings)
@:nativeGen
abstract ConstEnhancedInputSubsystemInterface(EnhancedInputSubsystemInterface) from EnhancedInputSubsystemInterface {
}

@:forward
@:nativeGen
@:native("EnhancedInputSubsystemInterface*")
abstract EnhancedInputSubsystemInterfacePtr(cpp.Star<EnhancedInputSubsystemInterface>) from cpp.Star<EnhancedInputSubsystemInterface> to cpp.Star<EnhancedInputSubsystemInterface>{
	@:from
	public static extern inline function fromValue(v: EnhancedInputSubsystemInterface): EnhancedInputSubsystemInterfacePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EnhancedInputSubsystemInterface {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}