// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URadialSlider")
@:include("Components/RadialSlider.h")
@:valueType
extern class RadialSlider extends Widget {
	public var Value: ucpp.num.Float32;
	public var ValueDelegate: HaxeDelegateProperty<() -> Void>;
	public var bUseCustomDefaultValue: Bool;
	public var CustomDefaultValue: ucpp.num.Float32;
	public var SliderRange: RuntimeFloatCurve;
	public var ValueTags: TArray<ucpp.num.Float32>;
	public var SliderHandleStartAngle: ucpp.num.Float32;
	public var SliderHandleEndAngle: ucpp.num.Float32;
	public var AngularOffset: ucpp.num.Float32;
	public var HandStartEndRatio: Vector2D;
	public var WidgetStyle: SliderStyle;
	public var SliderBarColor: LinearColor;
	public var SliderProgressColor: LinearColor;
	public var SliderHandleColor: LinearColor;
	public var CenterBackgroundColor: LinearColor;
	public var Locked: Bool;
	public var MouseUsesStep: Bool;
	public var RequiresControllerLock: Bool;
	public var StepSize: ucpp.num.Float32;
	public var IsFocusable: Bool;
	public var UseVerticalDrag: Bool;
	public var ShowSliderHandle: Bool;
	public var ShowSliderHand: Bool;
	public var OnMouseCaptureBegin: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnMouseCaptureEnd: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnControllerCaptureBegin: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnControllerCaptureEnd: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnValueChanged: HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void>;

	public function SetValueTags(InValueTags: ucpp.Ref<TArray<ucpp.num.Float32>>): Void;
	public function SetValue(InValue: ucpp.num.Float32): Void;
	public function SetUseVerticalDrag(InUseVerticalDrag: Bool): Void;
	public function SetStepSize(InValue: ucpp.num.Float32): Void;
	public function SetSliderRange(InSliderRange: ucpp.Ref<RuntimeFloatCurve>): Void;
	public function SetSliderProgressColor(InValue: LinearColor): Void;
	public function SetSliderHandleStartAngle(InValue: ucpp.num.Float32): Void;
	public function SetSliderHandleEndAngle(InValue: ucpp.num.Float32): Void;
	public function SetSliderHandleColor(InValue: LinearColor): Void;
	public function SetSliderBarColor(InValue: LinearColor): Void;
	public function SetShowSliderHandle(InShowSliderHandle: Bool): Void;
	public function SetShowSliderHand(InShowSliderHand: Bool): Void;
	public function SetLocked(InValue: Bool): Void;
	public function SetHandStartEndRatio(InValue: Vector2D): Void;
	public function SetCustomDefaultValue(InValue: ucpp.num.Float32): Void;
	public function SetCenterBackgroundColor(InValue: LinearColor): Void;
	public function SetAngularOffset(InValue: ucpp.num.Float32): Void;
	public function GetValue(): ucpp.num.Float32;
	public function GetNormalizedSliderHandlePosition(): ucpp.num.Float32;
	public function GetCustomDefaultValue(): ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetValue, GetNormalizedSliderHandlePosition, GetCustomDefaultValue)
@:nativeGen
abstract ConstRadialSlider(RadialSlider) from RadialSlider {
	public extern var Value(get, never): ucpp.num.Float32;
	public inline extern function get_Value(): ucpp.num.Float32 return this.Value;
	public extern var ValueDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ValueDelegate(): HaxeDelegateProperty<() -> Void> return this.ValueDelegate;
	public extern var bUseCustomDefaultValue(get, never): Bool;
	public inline extern function get_bUseCustomDefaultValue(): Bool return this.bUseCustomDefaultValue;
	public extern var CustomDefaultValue(get, never): ucpp.num.Float32;
	public inline extern function get_CustomDefaultValue(): ucpp.num.Float32 return this.CustomDefaultValue;
	public extern var SliderRange(get, never): RuntimeFloatCurve;
	public inline extern function get_SliderRange(): RuntimeFloatCurve return this.SliderRange;
	public extern var ValueTags(get, never): TArray<ucpp.num.Float32>;
	public inline extern function get_ValueTags(): TArray<ucpp.num.Float32> return this.ValueTags;
	public extern var SliderHandleStartAngle(get, never): ucpp.num.Float32;
	public inline extern function get_SliderHandleStartAngle(): ucpp.num.Float32 return this.SliderHandleStartAngle;
	public extern var SliderHandleEndAngle(get, never): ucpp.num.Float32;
	public inline extern function get_SliderHandleEndAngle(): ucpp.num.Float32 return this.SliderHandleEndAngle;
	public extern var AngularOffset(get, never): ucpp.num.Float32;
	public inline extern function get_AngularOffset(): ucpp.num.Float32 return this.AngularOffset;
	public extern var HandStartEndRatio(get, never): Vector2D;
	public inline extern function get_HandStartEndRatio(): Vector2D return this.HandStartEndRatio;
	public extern var WidgetStyle(get, never): SliderStyle;
	public inline extern function get_WidgetStyle(): SliderStyle return this.WidgetStyle;
	public extern var SliderBarColor(get, never): LinearColor;
	public inline extern function get_SliderBarColor(): LinearColor return this.SliderBarColor;
	public extern var SliderProgressColor(get, never): LinearColor;
	public inline extern function get_SliderProgressColor(): LinearColor return this.SliderProgressColor;
	public extern var SliderHandleColor(get, never): LinearColor;
	public inline extern function get_SliderHandleColor(): LinearColor return this.SliderHandleColor;
	public extern var CenterBackgroundColor(get, never): LinearColor;
	public inline extern function get_CenterBackgroundColor(): LinearColor return this.CenterBackgroundColor;
	public extern var Locked(get, never): Bool;
	public inline extern function get_Locked(): Bool return this.Locked;
	public extern var MouseUsesStep(get, never): Bool;
	public inline extern function get_MouseUsesStep(): Bool return this.MouseUsesStep;
	public extern var RequiresControllerLock(get, never): Bool;
	public inline extern function get_RequiresControllerLock(): Bool return this.RequiresControllerLock;
	public extern var StepSize(get, never): ucpp.num.Float32;
	public inline extern function get_StepSize(): ucpp.num.Float32 return this.StepSize;
	public extern var IsFocusable(get, never): Bool;
	public inline extern function get_IsFocusable(): Bool return this.IsFocusable;
	public extern var UseVerticalDrag(get, never): Bool;
	public inline extern function get_UseVerticalDrag(): Bool return this.UseVerticalDrag;
	public extern var ShowSliderHandle(get, never): Bool;
	public inline extern function get_ShowSliderHandle(): Bool return this.ShowSliderHandle;
	public extern var ShowSliderHand(get, never): Bool;
	public inline extern function get_ShowSliderHand(): Bool return this.ShowSliderHand;
	public extern var OnMouseCaptureBegin(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnMouseCaptureBegin(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnMouseCaptureBegin;
	public extern var OnMouseCaptureEnd(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnMouseCaptureEnd(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnMouseCaptureEnd;
	public extern var OnControllerCaptureBegin(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnControllerCaptureBegin(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnControllerCaptureBegin;
	public extern var OnControllerCaptureEnd(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnControllerCaptureEnd(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnControllerCaptureEnd;
	public extern var OnValueChanged(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void>;
	public inline extern function get_OnValueChanged(): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void> return this.OnValueChanged;
}

@:forward
@:nativeGen
@:native("RadialSlider*")
abstract RadialSliderPtr(ucpp.Ptr<RadialSlider>) from ucpp.Ptr<RadialSlider> to ucpp.Ptr<RadialSlider>{
	@:from
	public static extern inline function fromValue(v: RadialSlider): RadialSliderPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RadialSlider {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}