// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCombinedTransformGizmo")
@:include("BaseGizmos/CombinedTransformGizmo.h")
@:valueType
extern class CombinedTransformGizmo extends InteractiveGizmo {
	public var ActiveTarget: ucpp.Ptr<TransformProxy>;
	public var bSnapToWorldGrid: Bool;
	public var bGridSizeIsExplicit: Bool;
	public var ExplicitGridSize: Vector;
	public var bRotationGridSizeIsExplicit: Bool;
	public var ExplicitRotationGridSize: Rotator;
	public var bSnapToWorldRotGrid: Bool;
	public var bUseContextCoordinateSystem: Bool;
	public var CurrentCoordinateSystem: EToolContextCoordinateSystem;
	public var bUseContextGizmoMode: Bool;
	public var ActiveGizmoMode: EToolContextTransformGizmoMode;
	@:protected public var ActiveComponents: TArray<ucpp.Ptr<PrimitiveComp>>;
	@:protected public var ActiveGizmos: TArray<ucpp.Ptr<InteractiveGizmo>>;
	@:protected public var CameraAxisSource: ucpp.Ptr<GizmoConstantFrameAxisSource>;
	@:protected public var AxisXSource: ucpp.Ptr<GizmoComponentAxisSource>;
	@:protected public var AxisYSource: ucpp.Ptr<GizmoComponentAxisSource>;
	@:protected public var AxisZSource: ucpp.Ptr<GizmoComponentAxisSource>;
	@:protected public var UnitAxisXSource: ucpp.Ptr<GizmoComponentAxisSource>;
	@:protected public var UnitAxisYSource: ucpp.Ptr<GizmoComponentAxisSource>;
	@:protected public var UnitAxisZSource: ucpp.Ptr<GizmoComponentAxisSource>;
	@:protected public var StateTarget: ucpp.Ptr<GizmoTransformChangeStateTarget>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstCombinedTransformGizmo(CombinedTransformGizmo) from CombinedTransformGizmo {
	public extern var ActiveTarget(get, never): ucpp.Ptr<TransformProxy.ConstTransformProxy>;
	public inline extern function get_ActiveTarget(): ucpp.Ptr<TransformProxy.ConstTransformProxy> return this.ActiveTarget;
	public extern var bSnapToWorldGrid(get, never): Bool;
	public inline extern function get_bSnapToWorldGrid(): Bool return this.bSnapToWorldGrid;
	public extern var bGridSizeIsExplicit(get, never): Bool;
	public inline extern function get_bGridSizeIsExplicit(): Bool return this.bGridSizeIsExplicit;
	public extern var ExplicitGridSize(get, never): Vector;
	public inline extern function get_ExplicitGridSize(): Vector return this.ExplicitGridSize;
	public extern var bRotationGridSizeIsExplicit(get, never): Bool;
	public inline extern function get_bRotationGridSizeIsExplicit(): Bool return this.bRotationGridSizeIsExplicit;
	public extern var ExplicitRotationGridSize(get, never): Rotator;
	public inline extern function get_ExplicitRotationGridSize(): Rotator return this.ExplicitRotationGridSize;
	public extern var bSnapToWorldRotGrid(get, never): Bool;
	public inline extern function get_bSnapToWorldRotGrid(): Bool return this.bSnapToWorldRotGrid;
	public extern var bUseContextCoordinateSystem(get, never): Bool;
	public inline extern function get_bUseContextCoordinateSystem(): Bool return this.bUseContextCoordinateSystem;
	public extern var CurrentCoordinateSystem(get, never): EToolContextCoordinateSystem;
	public inline extern function get_CurrentCoordinateSystem(): EToolContextCoordinateSystem return this.CurrentCoordinateSystem;
	public extern var bUseContextGizmoMode(get, never): Bool;
	public inline extern function get_bUseContextGizmoMode(): Bool return this.bUseContextGizmoMode;
	public extern var ActiveGizmoMode(get, never): EToolContextTransformGizmoMode;
	public inline extern function get_ActiveGizmoMode(): EToolContextTransformGizmoMode return this.ActiveGizmoMode;
}

@:forward
@:nativeGen
@:native("CombinedTransformGizmo*")
abstract CombinedTransformGizmoPtr(ucpp.Ptr<CombinedTransformGizmo>) from ucpp.Ptr<CombinedTransformGizmo> to ucpp.Ptr<CombinedTransformGizmo>{
	@:from
	public static extern inline function fromValue(v: CombinedTransformGizmo): CombinedTransformGizmoPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): CombinedTransformGizmo {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}