// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UIpNetDriver")
@:include("IpNetDriver.h")
@:structAccess
extern class IpNetDriver extends NetDriver {
	public var LogPortUnreach: Bool;
	public var AllowPlayerPortUnreach: Bool;
	public var MaxPortCountToTry: cpp.UInt32;
	private var ServerDesiredSocketReceiveBufferBytes: cpp.UInt32;
	private var ServerDesiredSocketSendBufferBytes: cpp.UInt32;
	private var ClientDesiredSocketReceiveBufferBytes: cpp.UInt32;
	private var ClientDesiredSocketSendBufferBytes: cpp.UInt32;
	private var MaxSecondsInReceive: cpp.Float64;
	private var NbPacketsBetweenReceiveTimeTest: cpp.Int32;
	private var ResolutionConnectionTimeout: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstIpNetDriver(IpNetDriver) from IpNetDriver {
	public extern var LogPortUnreach(get, never): Bool;
	public inline extern function get_LogPortUnreach(): Bool return this.LogPortUnreach;
	public extern var AllowPlayerPortUnreach(get, never): Bool;
	public inline extern function get_AllowPlayerPortUnreach(): Bool return this.AllowPlayerPortUnreach;
	public extern var MaxPortCountToTry(get, never): cpp.UInt32;
	public inline extern function get_MaxPortCountToTry(): cpp.UInt32 return this.MaxPortCountToTry;
}

@:forward
@:nativeGen
@:native("IpNetDriver*")
abstract IpNetDriverPtr(cpp.Star<IpNetDriver>) from cpp.Star<IpNetDriver> to cpp.Star<IpNetDriver>{
	@:from
	public static extern inline function fromValue(v: IpNetDriver): IpNetDriverPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): IpNetDriver {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}