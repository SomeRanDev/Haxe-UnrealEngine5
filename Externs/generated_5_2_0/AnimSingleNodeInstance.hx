// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimSingleNodeInstance")
@:include("Animation/AnimSingleNodeInstance.h")
@:valueType
extern class AnimSingleNodeInstance extends AnimInstance {
	public var CurrentAsset: ucpp.Ptr<AnimationAsset>;
	public var PostEvaluateAnimEvent: HaxeDelegateProperty<() -> Void>;

	public function StopAnim(): Void;
	public function SetReverse(bInReverse: Bool): Void;
	public function SetPreviewCurveOverride(PoseName: ucpp.Ref<FName>, Value: ucpp.num.Float32, bRemoveIfZero: Bool): Void;
	public function SetPositionWithPreviousTime(InPosition: ucpp.num.Float32, InPreviousTime: ucpp.num.Float32, bFireNotifies: Bool): Void;
	public function SetPosition(InPosition: ucpp.num.Float32, bFireNotifies: Bool): Void;
	public function SetPlayRate(InPlayRate: ucpp.num.Float32): Void;
	public function SetPlaying(bIsPlaying: Bool): Void;
	public function SetMirrorDataTable(MirrorDataTable: ucpp.Ptr<MirrorDataTable.ConstMirrorDataTable>): Void;
	public function SetLooping(bIsLooping: Bool): Void;
	public function SetBlendSpacePosition(InPosition: ucpp.Ref<Vector>): Void;
	public function SetAnimationAsset(NewAsset: ucpp.Ptr<AnimationAsset>, bIsLooping: Bool, InPlayRate: ucpp.num.Float32): Void;
	public function PlayAnim(bIsLooping: Bool, InPlayRate: ucpp.num.Float32, InStartPosition: ucpp.num.Float32): Void;
	public function GetMirrorDataTable(): ucpp.Ptr<MirrorDataTable.ConstMirrorDataTable>;
	public function GetLength(): ucpp.num.Float32;
	public function GetAnimationAsset(): ucpp.Ptr<AnimationAsset>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetAnimationAsset)
@:nativeGen
abstract ConstAnimSingleNodeInstance(AnimSingleNodeInstance) from AnimSingleNodeInstance {
	public extern var CurrentAsset(get, never): ucpp.Ptr<AnimationAsset.ConstAnimationAsset>;
	public inline extern function get_CurrentAsset(): ucpp.Ptr<AnimationAsset.ConstAnimationAsset> return this.CurrentAsset;
	public extern var PostEvaluateAnimEvent(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_PostEvaluateAnimEvent(): HaxeDelegateProperty<() -> Void> return this.PostEvaluateAnimEvent;
}

@:forward
@:nativeGen
@:native("AnimSingleNodeInstance*")
abstract AnimSingleNodeInstancePtr(ucpp.Ptr<AnimSingleNodeInstance>) from ucpp.Ptr<AnimSingleNodeInstance> to ucpp.Ptr<AnimSingleNodeInstance>{
	@:from
	public static extern inline function fromValue(v: AnimSingleNodeInstance): AnimSingleNodeInstancePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimSingleNodeInstance {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}