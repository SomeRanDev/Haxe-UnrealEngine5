// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTakeRecorderPanel")
@:include("Recorder/TakeRecorderPanel.h")
@:structAccess
extern class TakeRecorderPanel extends Object {
	public function StopRecording(): Void;
	public function StartRecording(): Void;
	public function SetupForViewing(LevelSequenceAsset: cpp.Star<LevelSequence>): Void;
	public function SetupForRecordingInto_LevelSequence(LevelSequenceAsset: cpp.Star<LevelSequence>): Void;
	public function SetupForRecording_TakePreset(TakePresetAsset: cpp.Star<TakePreset>): Void;
	public function SetupForRecording_LevelSequence(LevelSequenceAsset: cpp.Star<LevelSequence>): Void;
	public function SetupForEditing(TakePreset: cpp.Star<TakePreset>): Void;
	public function SetFrameRateFromTimecode(bInFromTimecode: Bool): Void;
	public function SetFrameRate(InFrameRate: FrameRate): Void;
	public function NewTake(): Void;
	public function GetTakeMetaData(): cpp.Star<TakeMetaData>;
	public function GetSources(): cpp.Star<TakeRecorderSources>;
	public function GetMode(): ETakeRecorderPanelMode;
	public function GetLevelSequence(): cpp.Star<LevelSequence>;
	public function GetLastRecordedLevelSequence(): cpp.Star<LevelSequence>;
	public function GetFrameRate(): FrameRate;
	public function ClearPendingTake(): Void;
	public function CanStartRecording(OutErrorText: cpp.Reference<FText>): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(StopRecording, StartRecording, GetTakeMetaData, GetSources, GetMode, GetLevelSequence, GetLastRecordedLevelSequence, GetFrameRate, CanStartRecording)
@:nativeGen
abstract ConstTakeRecorderPanel(TakeRecorderPanel) from TakeRecorderPanel {
}

@:forward
@:nativeGen
@:native("TakeRecorderPanel*")
abstract TakeRecorderPanelPtr(cpp.Star<TakeRecorderPanel>) from cpp.Star<TakeRecorderPanel> to cpp.Star<TakeRecorderPanel>{
	@:from
	public static extern inline function fromValue(v: TakeRecorderPanel): TakeRecorderPanelPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TakeRecorderPanel {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}