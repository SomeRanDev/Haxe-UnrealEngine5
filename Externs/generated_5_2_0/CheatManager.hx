// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCheatManager")
@:include("GameFramework/CheatManager.h")
@:valueType
extern class CheatManager extends Object {
	public var DebugCameraControllerRef: ucpp.Ptr<DebugCameraController>;
	public var DebugCameraControllerClass: TSubclassOf<DebugCameraController>;
	@:protected public var CheatManagerExtensions: TArray<ucpp.Ptr<CheatManagerExtension>>;

	public function Walk(): Void;
	public function ViewSelf(): Void;
	public function ViewPlayer(S: FString): Void;
	public function ViewClass(DesiredClass: TSubclassOf<Actor>): Void;
	public function ViewActor(ActorName: FName): Void;
	public function UpdateSafeArea(): Void;
	public function ToggleServerStatReplicatorUpdateStatNet(): Void;
	public function ToggleServerStatReplicatorClientOverwrite(): Void;
	public function ToggleDebugCamera(): Void;
	public function ToggleAILogging(): Void;
	public function TestCollisionDistance(): Void;
	public function Teleport(): Void;
	public function Summon(ClassName: FString): Void;
	public function StreamLevelOut(PackageName: FName): Void;
	public function StreamLevelIn(PackageName: FName): Void;
	public function SpawnServerStatReplicator(): Void;
	public function Slomo(NewTimeDilation: ucpp.num.Float32): Void;
	public function SetWorldOrigin(): Void;
	public function SetMouseSensitivityToDefault(): Void;
	public function ServerToggleAILogging(): Void;
	public function ReceiveInitCheatManager(): Void;
	public function ReceiveEndPlay(): Void;
	public function PlayersOnly(): Void;
	public function OnPlayerEndPlayed(Player: ucpp.Ptr<Actor>, EndPlayReason: TEnumAsByte<EEndPlayReason>): Void;
	public function OnlyLoadLevel(PackageName: FName): Void;
	public function LogLoc(): Void;
	public function InvertMouse(): Void;
	public function God(): Void;
	public function Ghost(): Void;
	public function GetPlayerController(): ucpp.Ptr<PlayerController>;
	public function FreezeFrame(Delay: ucpp.num.Float32): Void;
	public function Fly(): Void;
	public function FlushLog(): Void;
	@:protected public function EnableDebugCamera(): Void;
	public function DumpVoiceMutingState(): Void;
	public function DumpPartyState(): Void;
	public function DumpOnlineSessionState(): Void;
	public function DumpChatState(): Void;
	@:protected public function DisableDebugCamera(): Void;
	public function DestroyTarget(): Void;
	public function DestroyServerStatReplicator(): Void;
	public function DestroyPawns(aClass: TSubclassOf<Pawn>): Void;
	public function DestroyAllPawnsExceptTarget(): Void;
	public function DestroyAll(aClass: TSubclassOf<Actor>): Void;
	public function DebugCapsuleSweepSize(HalfHeight: ucpp.num.Float32, Radius: ucpp.num.Float32): Void;
	public function DebugCapsuleSweepPawn(): Void;
	public function DebugCapsuleSweepComplex(bTraceComplex: Bool): Void;
	public function DebugCapsuleSweepClear(): Void;
	public function DebugCapsuleSweepChannel(Channel: TEnumAsByte<ECollisionChannel>): Void;
	public function DebugCapsuleSweepCapture(): Void;
	public function DebugCapsuleSweep(): Void;
	public function DamageTarget(DamageAmount: ucpp.num.Float32): Void;
	public function CheatScript(ScriptName: FString): Void;
	public function ChangeSize(F: ucpp.num.Float32): Void;
	public function BugItStringCreator(ViewLocation: Vector, ViewRotation: Rotator, GoString: ucpp.Ref<FString>, LocString: ucpp.Ref<FString>): Void;
	public function BugItGo(X: ucpp.num.Float32, Y: ucpp.num.Float32, Z: ucpp.num.Float32, Pitch: ucpp.num.Float32, Yaw: ucpp.num.Float32, Roll: ucpp.num.Float32): Void;
	public function BugIt(ScreenShotDescription: FString): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetPlayerController)
@:nativeGen
abstract ConstCheatManager(CheatManager) from CheatManager {
	public extern var DebugCameraControllerRef(get, never): ucpp.Ptr<DebugCameraController.ConstDebugCameraController>;
	public inline extern function get_DebugCameraControllerRef(): ucpp.Ptr<DebugCameraController.ConstDebugCameraController> return this.DebugCameraControllerRef;
	public extern var DebugCameraControllerClass(get, never): TSubclassOf<DebugCameraController.ConstDebugCameraController>;
	public inline extern function get_DebugCameraControllerClass(): TSubclassOf<DebugCameraController.ConstDebugCameraController> return this.DebugCameraControllerClass;
}

@:forward
@:nativeGen
@:native("CheatManager*")
abstract CheatManagerPtr(ucpp.Ptr<CheatManager>) from ucpp.Ptr<CheatManager> to ucpp.Ptr<CheatManager>{
	@:from
	public static extern inline function fromValue(v: CheatManager): CheatManagerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): CheatManager {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}