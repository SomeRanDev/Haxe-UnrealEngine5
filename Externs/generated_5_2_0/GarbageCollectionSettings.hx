// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGarbageCollectionSettings")
@:include("Engine/CoreSettings.h")
@:structAccess
extern class GarbageCollectionSettings extends DeveloperSettings {
	@:protected public var TimeBetweenPurgingPendingKillObjects: cpp.Float32;
	@:protected public var FlushStreamingOnGC: Bool;
	@:protected public var AllowParallelGC: Bool;
	@:protected public var IncrementalBeginDestroyEnabled: Bool;
	@:protected public var MultithreadedDestructionEnabled: Bool;
	@:protected public var CreateGCClusters: Bool;
	@:protected public var AssetClusteringEnabled: Bool;
	@:protected public var ActorClusteringEnabled: Bool;
	@:protected public var BlueprintClusteringEnabled: Bool;
	@:protected public var UseDisregardForGCOnDedicatedServers: Bool;
	@:protected public var VerifyGCObjectNames: Bool;
	@:protected public var VerifyUObjectsAreNotFGCObjects: Bool;
	@:protected public var PendingKillEnabled: Bool;
	@:protected public var MinGCClusterSize: cpp.Int32;
	@:protected public var NumRetriesBeforeForcingGC: cpp.Int32;
	@:protected public var MaxObjectsNotConsideredByGC: cpp.Int32;
	@:protected public var SizeOfPermanentObjectPool: cpp.Int32;
	@:protected public var MaxObjectsInGame: cpp.Int32;
	@:protected public var MaxObjectsInEditor: cpp.Int32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstGarbageCollectionSettings(GarbageCollectionSettings) from GarbageCollectionSettings {
}

@:forward
@:nativeGen
@:native("GarbageCollectionSettings*")
abstract GarbageCollectionSettingsPtr(cpp.Star<GarbageCollectionSettings>) from cpp.Star<GarbageCollectionSettings> to cpp.Star<GarbageCollectionSettings>{
	@:from
	public static extern inline function fromValue(v: GarbageCollectionSettings): GarbageCollectionSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GarbageCollectionSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}