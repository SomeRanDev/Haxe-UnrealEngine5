// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTextureRenderTarget2D")
@:include("Engine/TextureRenderTarget2D.h")
@:valueType
extern class TextureRenderTarget2D extends TextureRenderTarget {
	public var SizeX: ucpp.num.Int32;
	public var SizeY: ucpp.num.Int32;
	public var ClearColor: LinearColor;
	public var AddressX: TEnumAsByte<TextureAddress>;
	public var AddressY: TEnumAsByte<TextureAddress>;
	public var bForceLinearGamma: Bool;
	public var bGPUSharedFlag: Bool;
	public var RenderTargetFormat: TEnumAsByte<ETextureRenderTargetFormat>;
	public var bAutoGenerateMips: Bool;
	public var MipsSamplerFilter: TEnumAsByte<TextureFilter>;
	public var MipsAddressU: TEnumAsByte<TextureAddress>;
	public var MipsAddressV: TEnumAsByte<TextureAddress>;
	public var OverrideFormat: TEnumAsByte<EPixelFormat>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstTextureRenderTarget2D(TextureRenderTarget2D) from TextureRenderTarget2D {
	public extern var SizeX(get, never): ucpp.num.Int32;
	public inline extern function get_SizeX(): ucpp.num.Int32 return this.SizeX;
	public extern var SizeY(get, never): ucpp.num.Int32;
	public inline extern function get_SizeY(): ucpp.num.Int32 return this.SizeY;
	public extern var ClearColor(get, never): LinearColor;
	public inline extern function get_ClearColor(): LinearColor return this.ClearColor;
	public extern var AddressX(get, never): TEnumAsByte<TextureAddress>;
	public inline extern function get_AddressX(): TEnumAsByte<TextureAddress> return this.AddressX;
	public extern var AddressY(get, never): TEnumAsByte<TextureAddress>;
	public inline extern function get_AddressY(): TEnumAsByte<TextureAddress> return this.AddressY;
	public extern var bForceLinearGamma(get, never): Bool;
	public inline extern function get_bForceLinearGamma(): Bool return this.bForceLinearGamma;
	public extern var bGPUSharedFlag(get, never): Bool;
	public inline extern function get_bGPUSharedFlag(): Bool return this.bGPUSharedFlag;
	public extern var RenderTargetFormat(get, never): TEnumAsByte<ETextureRenderTargetFormat>;
	public inline extern function get_RenderTargetFormat(): TEnumAsByte<ETextureRenderTargetFormat> return this.RenderTargetFormat;
	public extern var bAutoGenerateMips(get, never): Bool;
	public inline extern function get_bAutoGenerateMips(): Bool return this.bAutoGenerateMips;
	public extern var MipsSamplerFilter(get, never): TEnumAsByte<TextureFilter>;
	public inline extern function get_MipsSamplerFilter(): TEnumAsByte<TextureFilter> return this.MipsSamplerFilter;
	public extern var MipsAddressU(get, never): TEnumAsByte<TextureAddress>;
	public inline extern function get_MipsAddressU(): TEnumAsByte<TextureAddress> return this.MipsAddressU;
	public extern var MipsAddressV(get, never): TEnumAsByte<TextureAddress>;
	public inline extern function get_MipsAddressV(): TEnumAsByte<TextureAddress> return this.MipsAddressV;
	public extern var OverrideFormat(get, never): TEnumAsByte<EPixelFormat>;
	public inline extern function get_OverrideFormat(): TEnumAsByte<EPixelFormat> return this.OverrideFormat;
}

@:forward
@:nativeGen
@:native("TextureRenderTarget2D*")
abstract TextureRenderTarget2DPtr(ucpp.Ptr<TextureRenderTarget2D>) from ucpp.Ptr<TextureRenderTarget2D> to ucpp.Ptr<TextureRenderTarget2D>{
	@:from
	public static extern inline function fromValue(v: TextureRenderTarget2D): TextureRenderTarget2DPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TextureRenderTarget2D {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}