// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAudioMeter")
@:include("AudioMeter.h")
@:structAccess
extern class AudioMeter extends Widget {
	public var MeterChannelInfo: TArray<MeterChannelInfo>;
	public var MeterChannelInfoDelegate: HaxeDelegateProperty<() -> Void>;
	public var WidgetStyle: AudioMeterStyle;
	public var Orientation: TEnumAsByte<EOrientation>;
	public var BackgroundColor: LinearColor;
	public var MeterBackgroundColor: LinearColor;
	public var MeterValueColor: LinearColor;
	public var MeterPeakColor: LinearColor;
	public var MeterClippingColor: LinearColor;
	public var MeterScaleColor: LinearColor;
	public var MeterScaleLabelColor: LinearColor;

	public function SetMeterValueColor(InValue: LinearColor): Void;
	public function SetMeterScaleLabelColor(InValue: LinearColor): Void;
	public function SetMeterScaleColor(InValue: LinearColor): Void;
	public function SetMeterPeakColor(InValue: LinearColor): Void;
	public function SetMeterClippingColor(InValue: LinearColor): Void;
	public function SetMeterChannelInfo(InMeterChannelInfo: cpp.Reference<TArray<MeterChannelInfo>>): Void;
	public function SetMeterBackgroundColor(InValue: LinearColor): Void;
	public function SetBackgroundColor(InValue: LinearColor): Void;
	public function GetMeterChannelInfo__DelegateSignature(): TArray<MeterChannelInfo>;
	public function GetMeterChannelInfo(): TArray<MeterChannelInfo>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetMeterChannelInfo)
@:nativeGen
abstract ConstAudioMeter(AudioMeter) from AudioMeter {
	public extern var MeterChannelInfo(get, never): TArray<MeterChannelInfo>;
	public inline extern function get_MeterChannelInfo(): TArray<MeterChannelInfo> return this.MeterChannelInfo;
	public extern var MeterChannelInfoDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_MeterChannelInfoDelegate(): HaxeDelegateProperty<() -> Void> return this.MeterChannelInfoDelegate;
	public extern var WidgetStyle(get, never): AudioMeterStyle;
	public inline extern function get_WidgetStyle(): AudioMeterStyle return this.WidgetStyle;
	public extern var Orientation(get, never): TEnumAsByte<EOrientation>;
	public inline extern function get_Orientation(): TEnumAsByte<EOrientation> return this.Orientation;
	public extern var BackgroundColor(get, never): LinearColor;
	public inline extern function get_BackgroundColor(): LinearColor return this.BackgroundColor;
	public extern var MeterBackgroundColor(get, never): LinearColor;
	public inline extern function get_MeterBackgroundColor(): LinearColor return this.MeterBackgroundColor;
	public extern var MeterValueColor(get, never): LinearColor;
	public inline extern function get_MeterValueColor(): LinearColor return this.MeterValueColor;
	public extern var MeterPeakColor(get, never): LinearColor;
	public inline extern function get_MeterPeakColor(): LinearColor return this.MeterPeakColor;
	public extern var MeterClippingColor(get, never): LinearColor;
	public inline extern function get_MeterClippingColor(): LinearColor return this.MeterClippingColor;
	public extern var MeterScaleColor(get, never): LinearColor;
	public inline extern function get_MeterScaleColor(): LinearColor return this.MeterScaleColor;
	public extern var MeterScaleLabelColor(get, never): LinearColor;
	public inline extern function get_MeterScaleLabelColor(): LinearColor return this.MeterScaleLabelColor;
}

@:forward
@:nativeGen
@:native("AudioMeter*")
abstract AudioMeterPtr(cpp.Star<AudioMeter>) from cpp.Star<AudioMeter> to cpp.Star<AudioMeter>{
	@:from
	public static extern inline function fromValue(v: AudioMeter): AudioMeterPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AudioMeter {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}