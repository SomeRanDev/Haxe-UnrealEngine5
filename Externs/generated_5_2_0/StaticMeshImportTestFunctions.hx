// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UStaticMeshImportTestFunctions")
@:include("ImportTestFunctions/StaticMeshImportTestFunctions.h")
@:valueType
extern class StaticMeshImportTestFunctions extends ImportTestFunctionsBase {
	public function CheckVertexIndexPosition(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, VertexIndex: ucpp.num.Int32, ExpectedVertexPosition: ucpp.Ref<Vector>): InterchangeTestFunctionResult;
	public function CheckVertexCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfVertices: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckUVChannelCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfUVChannels: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckTriangleCountInPolygonGroup(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, PolygonGroupIndex: ucpp.num.Int32, ExpectedNumberOfTriangles: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckTriangleCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedTotalNumberOfTriangles: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckThatMeshHasQuadsOrNgons(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, bMeshHasQuadsOrNgons: Bool): InterchangeTestFunctionResult;
	public function CheckSocketName(Mesh: ucpp.Ptr<StaticMesh>, SocketIndex: ucpp.num.Int32, ExpectedSocketName: FString): InterchangeTestFunctionResult;
	public function CheckSocketLocation(Mesh: ucpp.Ptr<StaticMesh>, SocketIndex: ucpp.num.Int32, ExpectedSocketLocation: ucpp.Ref<Vector>): InterchangeTestFunctionResult;
	public function CheckSocketCount(Mesh: ucpp.Ptr<StaticMesh>, ExpectedSocketCount: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckSimpleCollisionPrimitiveCount(Mesh: ucpp.Ptr<StaticMesh>, ExpectedSphereElementCount: ucpp.num.Int32, ExpectedBoxElementCount: ucpp.num.Int32, ExpectedCapsuleElementCount: ucpp.num.Int32, ExpectedConvexElementCount: ucpp.num.Int32, ExpectedTaperedCapsuleElementCount: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckSectionMaterialName(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, SectionIndex: ucpp.num.Int32, ExpectedMaterialName: FString): InterchangeTestFunctionResult;
	public function CheckSectionMaterialIndex(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, SectionIndex: ucpp.num.Int32, ExpectedMaterialIndex: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckSectionImportedMaterialSlotName(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, SectionIndex: ucpp.num.Int32, ExpectedImportedMaterialSlotName: FString): InterchangeTestFunctionResult;
	public function CheckSectionCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfSections: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckRenderVertexIndexNormal(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, VertexIndex: ucpp.num.Int32, ExpectedVertexNormal: ucpp.Ref<Vector4f>): InterchangeTestFunctionResult;
	public function CheckRenderVertexIndexColor(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, VertexIndex: ucpp.num.Int32, ExpectedVertexColor: ucpp.Ref<Color>): InterchangeTestFunctionResult;
	public function CheckRenderVertexCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfRenderVertices: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckRenderUVChannelCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfUVChannels: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckRenderTriangleCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedTotalNumberOfTriangles: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckRenderHasVertexColors(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, bExpectedHasVertexColors: Bool): InterchangeTestFunctionResult;
	public function CheckPolygonGroupImportedMaterialSlotName(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, PolygonGroupIndex: ucpp.num.Int32, ExpectedImportedMaterialSlotName: FString): InterchangeTestFunctionResult;
	public function CheckPolygonGroupCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfPolygonGroups: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckPolygonCountInPolygonGroup(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, PolygonGroupIndex: ucpp.num.Int32, ExpectedNumberOfPolygons: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckPolygonCount(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedNumberOfPolygons: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckNaniteSettings(Mesh: ucpp.Ptr<StaticMesh>, ExpectedNaniteSettings: ucpp.Ref<MeshNaniteSettings>): InterchangeTestFunctionResult;
	public function CheckMaterialSlotCount(Mesh: ucpp.Ptr<StaticMesh>, ExpectedNumberOfMaterialSlots: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckLodCount(Mesh: ucpp.Ptr<StaticMesh>, ExpectedNumberOfLods: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckImportedStaticMeshCount(Meshes: ucpp.Ref<TArray<ucpp.Ptr<StaticMesh>>>, ExpectedNumberOfImportedStaticMeshes: ucpp.num.Int32): InterchangeTestFunctionResult;
	public function CheckImportedMaterialSlotName(Mesh: ucpp.Ptr<StaticMesh>, MaterialIndex: ucpp.num.Int32, ExpectedImportedMaterialSlotName: FString): InterchangeTestFunctionResult;
	public function CheckBuildSettings(Mesh: ucpp.Ptr<StaticMesh>, LodIndex: ucpp.num.Int32, ExpectedBuildSettings: ucpp.Ref<MeshBuildSettings>): InterchangeTestFunctionResult;
	public function CheckAgainstGroundTruth(Mesh: ucpp.Ptr<StaticMesh>, MeshToCompare: TSoftObjectPtr<StaticMesh>, bCheckVertexCountEqual: Bool, bCheckTriangleCountEqual: Bool, bCheckUVChannelCountEqual: Bool, bCheckCollisionPrimitiveCountEqual: Bool, bCheckVertexPositionsEqual: Bool, bCheckNormalsEqual: Bool): InterchangeTestFunctionResult;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstStaticMeshImportTestFunctions(StaticMeshImportTestFunctions) from StaticMeshImportTestFunctions {
}

@:forward
@:nativeGen
@:native("StaticMeshImportTestFunctions*")
abstract StaticMeshImportTestFunctionsPtr(ucpp.Ptr<StaticMeshImportTestFunctions>) from ucpp.Ptr<StaticMeshImportTestFunctions> to ucpp.Ptr<StaticMeshImportTestFunctions>{
	@:from
	public static extern inline function fromValue(v: StaticMeshImportTestFunctions): StaticMeshImportTestFunctionsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): StaticMeshImportTestFunctions {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}