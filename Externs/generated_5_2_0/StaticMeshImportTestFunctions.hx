// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UStaticMeshImportTestFunctions")
@:include("ImportTestFunctions/StaticMeshImportTestFunctions.h")
@:structAccess
extern class StaticMeshImportTestFunctions extends ImportTestFunctionsBase {
	public function CheckVertexIndexPosition(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, VertexIndex: cpp.Int32, ExpectedVertexPosition: cpp.Reference<Vector>): InterchangeTestFunctionResult;
	public function CheckVertexCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedNumberOfVertices: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckUVChannelCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedNumberOfUVChannels: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckTriangleCountInPolygonGroup(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, PolygonGroupIndex: cpp.Int32, ExpectedNumberOfTriangles: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckTriangleCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedTotalNumberOfTriangles: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckThatMeshHasQuadsOrNgons(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, bMeshHasQuadsOrNgons: Bool): InterchangeTestFunctionResult;
	public function CheckSocketName(Mesh: cpp.Star<StaticMesh>, SocketIndex: cpp.Int32, ExpectedSocketName: FString): InterchangeTestFunctionResult;
	public function CheckSocketLocation(Mesh: cpp.Star<StaticMesh>, SocketIndex: cpp.Int32, ExpectedSocketLocation: cpp.Reference<Vector>): InterchangeTestFunctionResult;
	public function CheckSocketCount(Mesh: cpp.Star<StaticMesh>, ExpectedSocketCount: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckSimpleCollisionPrimitiveCount(Mesh: cpp.Star<StaticMesh>, ExpectedSphereElementCount: cpp.Int32, ExpectedBoxElementCount: cpp.Int32, ExpectedCapsuleElementCount: cpp.Int32, ExpectedConvexElementCount: cpp.Int32, ExpectedTaperedCapsuleElementCount: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckSectionMaterialName(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, SectionIndex: cpp.Int32, ExpectedMaterialName: FString): InterchangeTestFunctionResult;
	public function CheckSectionMaterialIndex(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, SectionIndex: cpp.Int32, ExpectedMaterialIndex: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckSectionImportedMaterialSlotName(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, SectionIndex: cpp.Int32, ExpectedImportedMaterialSlotName: FString): InterchangeTestFunctionResult;
	public function CheckSectionCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedNumberOfSections: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckRenderVertexIndexNormal(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, VertexIndex: cpp.Int32, ExpectedVertexNormal: cpp.Reference<Vector4f>): InterchangeTestFunctionResult;
	public function CheckRenderVertexIndexColor(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, VertexIndex: cpp.Int32, ExpectedVertexColor: cpp.Reference<Color>): InterchangeTestFunctionResult;
	public function CheckRenderVertexCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedNumberOfRenderVertices: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckRenderUVChannelCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedNumberOfUVChannels: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckRenderTriangleCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedTotalNumberOfTriangles: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckRenderHasVertexColors(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, bExpectedHasVertexColors: Bool): InterchangeTestFunctionResult;
	public function CheckPolygonGroupImportedMaterialSlotName(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, PolygonGroupIndex: cpp.Int32, ExpectedImportedMaterialSlotName: FString): InterchangeTestFunctionResult;
	public function CheckPolygonGroupCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedNumberOfPolygonGroups: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckPolygonCountInPolygonGroup(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, PolygonGroupIndex: cpp.Int32, ExpectedNumberOfPolygons: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckPolygonCount(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedNumberOfPolygons: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckNaniteSettings(Mesh: cpp.Star<StaticMesh>, ExpectedNaniteSettings: cpp.Reference<MeshNaniteSettings>): InterchangeTestFunctionResult;
	public function CheckMaterialSlotCount(Mesh: cpp.Star<StaticMesh>, ExpectedNumberOfMaterialSlots: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckLodCount(Mesh: cpp.Star<StaticMesh>, ExpectedNumberOfLods: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckImportedStaticMeshCount(Meshes: cpp.Reference<TArray<cpp.Star<StaticMesh>>>, ExpectedNumberOfImportedStaticMeshes: cpp.Int32): InterchangeTestFunctionResult;
	public function CheckImportedMaterialSlotName(Mesh: cpp.Star<StaticMesh>, MaterialIndex: cpp.Int32, ExpectedImportedMaterialSlotName: FString): InterchangeTestFunctionResult;
	public function CheckBuildSettings(Mesh: cpp.Star<StaticMesh>, LodIndex: cpp.Int32, ExpectedBuildSettings: cpp.Reference<MeshBuildSettings>): InterchangeTestFunctionResult;
	public function CheckAgainstGroundTruth(Mesh: cpp.Star<StaticMesh>, MeshToCompare: TSoftObjectPtr<StaticMesh>, bCheckVertexCountEqual: Bool, bCheckTriangleCountEqual: Bool, bCheckUVChannelCountEqual: Bool, bCheckCollisionPrimitiveCountEqual: Bool, bCheckVertexPositionsEqual: Bool, bCheckNormalsEqual: Bool): InterchangeTestFunctionResult;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstStaticMeshImportTestFunctions(StaticMeshImportTestFunctions) from StaticMeshImportTestFunctions {
}

@:forward
@:nativeGen
@:native("StaticMeshImportTestFunctions*")
abstract StaticMeshImportTestFunctionsPtr(cpp.Star<StaticMeshImportTestFunctions>) from cpp.Star<StaticMeshImportTestFunctions> to cpp.Star<StaticMeshImportTestFunctions>{
	@:from
	public static extern inline function fromValue(v: StaticMeshImportTestFunctions): StaticMeshImportTestFunctionsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): StaticMeshImportTestFunctions {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}