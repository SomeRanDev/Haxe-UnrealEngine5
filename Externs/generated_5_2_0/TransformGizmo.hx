// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTransformGizmo")
@:include("EditorGizmos/TransformGizmo.h")
@:structAccess
extern class TransformGizmo extends InteractiveGizmo {
	public var ActiveTarget: cpp.Star<TransformProxy>;
	public var HitTarget: cpp.Star<GizmoElementHitMultiTarget>;
	public var MouseBehavior: cpp.Star<ClickDragInputBehavior>;
	public var TransformGizmoSource: TransformGizmoSource;
	public var GizmoElementRoot: cpp.Star<GizmoElementGroup>;
	public var GizmoViewContext: cpp.Star<GizmoViewContext>;
	public var bVisible: Bool;
	public var bInInteraction: Bool;
	public var bSnapToWorldGrid: Bool;
	public var bGridSizeIsExplicit: Bool;
	public var ExplicitGridSize: Vector;
	public var bRotationGridSizeIsExplicit: Bool;
	public var ExplicitRotationGridSize: Rotator;
	public var bSnapToWorldRotGrid: Bool;
	@:protected public var TranslateXAxisElement: cpp.Star<GizmoElementArrow>;
	@:protected public var TranslateYAxisElement: cpp.Star<GizmoElementArrow>;
	@:protected public var TranslateZAxisElement: cpp.Star<GizmoElementArrow>;
	@:protected public var TranslateScreenSpaceElement: cpp.Star<GizmoElementRectangle>;
	@:protected public var TranslatePlanarXYElement: cpp.Star<GizmoElementRectangle>;
	@:protected public var TranslatePlanarYZElement: cpp.Star<GizmoElementRectangle>;
	@:protected public var TranslatePlanarXZElement: cpp.Star<GizmoElementRectangle>;
	@:protected public var RotateXAxisElement: cpp.Star<GizmoElementTorus>;
	@:protected public var RotateYAxisElement: cpp.Star<GizmoElementTorus>;
	@:protected public var RotateZAxisElement: cpp.Star<GizmoElementTorus>;
	@:protected public var RotateOuterCircleElement: cpp.Star<GizmoElementCircle>;
	@:protected public var RotateArcballOuterElement: cpp.Star<GizmoElementCircle>;
	@:protected public var RotateArcballInnerElement: cpp.Star<GizmoElementCircle>;
	@:protected public var RotateScreenSpaceElement: cpp.Star<GizmoElementCircle>;
	@:protected public var ScaleXAxisElement: cpp.Star<GizmoElementArrow>;
	@:protected public var ScaleYAxisElement: cpp.Star<GizmoElementArrow>;
	@:protected public var ScaleZAxisElement: cpp.Star<GizmoElementArrow>;
	@:protected public var ScalePlanarXYElement: cpp.Star<GizmoElementRectangle>;
	@:protected public var ScalePlanarYZElement: cpp.Star<GizmoElementRectangle>;
	@:protected public var ScalePlanarXZElement: cpp.Star<GizmoElementRectangle>;
	@:protected public var ScaleUniformElement: cpp.Star<GizmoElementBox>;
	@:protected public var CameraAxisSource: cpp.Star<GizmoConstantFrameAxisSource>;
	@:protected public var StateTarget: cpp.Star<GizmoObjectModifyStateTarget>;
	@:protected public var TransparentVertexColorMaterial: cpp.Star<MaterialInterface>;
	@:protected public var GridMaterial: cpp.Star<MaterialInterface>;
	@:protected public var AxisMaterialX: cpp.Star<MaterialInstanceDynamic>;
	@:protected public var AxisMaterialY: cpp.Star<MaterialInstanceDynamic>;
	@:protected public var AxisMaterialZ: cpp.Star<MaterialInstanceDynamic>;
	@:protected public var CurrentAxisMaterial: cpp.Star<MaterialInstanceDynamic>;
	@:protected public var GreyMaterial: cpp.Star<MaterialInstanceDynamic>;
	@:protected public var WhiteMaterial: cpp.Star<MaterialInstanceDynamic>;
	@:protected public var OpaquePlaneMaterialXY: cpp.Star<MaterialInstanceDynamic>;
	@:protected public var ScaleMultiplier: cpp.Float64;
	@:protected public var CurrentTransform: Transform;
	@:protected public var CurrentMode: EGizmoTransformMode;
	@:protected public var CurrentAxisToDraw: TEnumAsByte<EAxisList>;
	@:protected public var LastHitPart: ETransformGizmoPartIdentifier;
	@:protected public var InteractionAxisList: TEnumAsByte<EAxisList>;
	@:protected public var InteractionAxisOrigin: Vector;
	@:protected public var InteractionAxisDirection: Vector;
	@:protected public var InteractionAxisStartParam: cpp.Float32;
	@:protected public var InteractionAxisCurrParam: cpp.Float32;
	@:protected public var InteractionPlanarOrigin: Vector;
	@:protected public var InteractionPlanarNormal: Vector;
	@:protected public var InteractionPlanarAxisX: Vector;
	@:protected public var InteractionPlanarAxisY: Vector;
	@:protected public var InteractionPlanarStartPoint: Vector;
	@:protected public var InteractionPlanarCurrPoint: Vector;
	@:protected public var InteractionStartAngle: cpp.Float32;
	@:protected public var InteractionCurrAngle: cpp.Float32;
	@:protected public var InteractionScreenAxisDirection: Vector2D;
	@:protected public var InteractionScreenStartPos: Vector2D;
	@:protected public var InteractionScreenEndPos: Vector2D;
	@:protected public var InteractionScreenCurrPos: Vector2D;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstTransformGizmo(TransformGizmo) from TransformGizmo {
	public extern var ActiveTarget(get, never): cpp.Star<TransformProxy.ConstTransformProxy>;
	public inline extern function get_ActiveTarget(): cpp.Star<TransformProxy.ConstTransformProxy> return this.ActiveTarget;
	public extern var HitTarget(get, never): cpp.Star<GizmoElementHitMultiTarget.ConstGizmoElementHitMultiTarget>;
	public inline extern function get_HitTarget(): cpp.Star<GizmoElementHitMultiTarget.ConstGizmoElementHitMultiTarget> return this.HitTarget;
	public extern var MouseBehavior(get, never): cpp.Star<ClickDragInputBehavior.ConstClickDragInputBehavior>;
	public inline extern function get_MouseBehavior(): cpp.Star<ClickDragInputBehavior.ConstClickDragInputBehavior> return this.MouseBehavior;
	public extern var TransformGizmoSource(get, never): TransformGizmoSource.ConstTransformGizmoSource;
	public inline extern function get_TransformGizmoSource(): TransformGizmoSource.ConstTransformGizmoSource return this.TransformGizmoSource;
	public extern var GizmoElementRoot(get, never): cpp.Star<GizmoElementGroup.ConstGizmoElementGroup>;
	public inline extern function get_GizmoElementRoot(): cpp.Star<GizmoElementGroup.ConstGizmoElementGroup> return this.GizmoElementRoot;
	public extern var GizmoViewContext(get, never): cpp.Star<GizmoViewContext.ConstGizmoViewContext>;
	public inline extern function get_GizmoViewContext(): cpp.Star<GizmoViewContext.ConstGizmoViewContext> return this.GizmoViewContext;
	public extern var bVisible(get, never): Bool;
	public inline extern function get_bVisible(): Bool return this.bVisible;
	public extern var bInInteraction(get, never): Bool;
	public inline extern function get_bInInteraction(): Bool return this.bInInteraction;
	public extern var bSnapToWorldGrid(get, never): Bool;
	public inline extern function get_bSnapToWorldGrid(): Bool return this.bSnapToWorldGrid;
	public extern var bGridSizeIsExplicit(get, never): Bool;
	public inline extern function get_bGridSizeIsExplicit(): Bool return this.bGridSizeIsExplicit;
	public extern var ExplicitGridSize(get, never): Vector;
	public inline extern function get_ExplicitGridSize(): Vector return this.ExplicitGridSize;
	public extern var bRotationGridSizeIsExplicit(get, never): Bool;
	public inline extern function get_bRotationGridSizeIsExplicit(): Bool return this.bRotationGridSizeIsExplicit;
	public extern var ExplicitRotationGridSize(get, never): Rotator;
	public inline extern function get_ExplicitRotationGridSize(): Rotator return this.ExplicitRotationGridSize;
	public extern var bSnapToWorldRotGrid(get, never): Bool;
	public inline extern function get_bSnapToWorldRotGrid(): Bool return this.bSnapToWorldRotGrid;
}

@:forward
@:nativeGen
@:native("TransformGizmo*")
abstract TransformGizmoPtr(cpp.Star<TransformGizmo>) from cpp.Star<TransformGizmo> to cpp.Star<TransformGizmo>{
	@:from
	public static extern inline function fromValue(v: TransformGizmo): TransformGizmoPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TransformGizmo {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}