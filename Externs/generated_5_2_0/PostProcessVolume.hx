// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("APostProcessVolume")
@:include("Engine/PostProcessVolume.h")
@:valueType
extern class PostProcessVolume extends Volume {
	public var Settings: PostProcessSettings;
	public var Priority: ucpp.num.Float32;
	public var BlendRadius: ucpp.num.Float32;
	public var BlendWeight: ucpp.num.Float32;
	public var bEnabled: Bool;
	public var bUnbound: Bool;

	public function AddOrUpdateBlendable(InBlendableObject: BlendableInterface, InWeight: ucpp.num.Float32): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstPostProcessVolume(PostProcessVolume) from PostProcessVolume {
	public extern var Settings(get, never): PostProcessSettings;
	public inline extern function get_Settings(): PostProcessSettings return this.Settings;
	public extern var Priority(get, never): ucpp.num.Float32;
	public inline extern function get_Priority(): ucpp.num.Float32 return this.Priority;
	public extern var BlendRadius(get, never): ucpp.num.Float32;
	public inline extern function get_BlendRadius(): ucpp.num.Float32 return this.BlendRadius;
	public extern var BlendWeight(get, never): ucpp.num.Float32;
	public inline extern function get_BlendWeight(): ucpp.num.Float32 return this.BlendWeight;
	public extern var bEnabled(get, never): Bool;
	public inline extern function get_bEnabled(): Bool return this.bEnabled;
	public extern var bUnbound(get, never): Bool;
	public inline extern function get_bUnbound(): Bool return this.bUnbound;
}

@:forward
@:nativeGen
@:native("PostProcessVolume*")
abstract PostProcessVolumePtr(ucpp.Ptr<PostProcessVolume>) from ucpp.Ptr<PostProcessVolume> to ucpp.Ptr<PostProcessVolume>{
	@:from
	public static extern inline function fromValue(v: PostProcessVolume): PostProcessVolumePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PostProcessVolume {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}