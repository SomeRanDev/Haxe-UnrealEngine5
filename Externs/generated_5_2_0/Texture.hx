// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTexture")
@:include("Engine/Texture.h")
@:structAccess
extern class Texture extends StreamableRenderAsset {
	private var LightingGuid: Guid;
	public var LevelIndex: cpp.Int32;
	public var LODBias: cpp.Int32;
	public var CompressionSettings: TEnumAsByte<TextureCompressionSettings>;
	public var Filter: TEnumAsByte<TextureFilter>;
	public var MipLoadOptions: ETextureMipLoadOptions;
	public var CookPlatformTilingSettings: TEnumAsByte<TextureCookPlatformTilingSettings>;
	public var LODGroup: TEnumAsByte<TextureGroup>;
	public var Downscale: PerPlatformFloat;
	public var DownscaleOptions: ETextureDownscaleOptions;
	public var SRGB: Bool;
	public var bNoTiling: Bool;
	public var VirtualTextureStreaming: Bool;
	public var CompressionYCoCg: Bool;
	public var bNotOfflineProcessed: Bool;
	private var bAsyncResourceReleaseHasBeenStarted: Bool;
	@:protected public var AssetUserData: TArray<cpp.Star<AssetUserData>>;

	public function ComputeTextureSourceChannelMinMax(OutColorMin: cpp.Reference<LinearColor>, OutColorMax: cpp.Reference<LinearColor>): Bool;
	public function Blueprint_GetTextureSourceDiskAndMemorySize(OutDiskSize: cpp.Reference<cpp.Int64>, OutMemorySize: cpp.Reference<cpp.Int64>): Void;
	public function Blueprint_GetMemorySize(): cpp.Int64;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(ComputeTextureSourceChannelMinMax, Blueprint_GetTextureSourceDiskAndMemorySize, Blueprint_GetMemorySize)
@:nativeGen
abstract ConstTexture(Texture) from Texture {
	public extern var LevelIndex(get, never): cpp.Int32;
	public inline extern function get_LevelIndex(): cpp.Int32 return this.LevelIndex;
	public extern var LODBias(get, never): cpp.Int32;
	public inline extern function get_LODBias(): cpp.Int32 return this.LODBias;
	public extern var CompressionSettings(get, never): TEnumAsByte<TextureCompressionSettings>;
	public inline extern function get_CompressionSettings(): TEnumAsByte<TextureCompressionSettings> return this.CompressionSettings;
	public extern var Filter(get, never): TEnumAsByte<TextureFilter>;
	public inline extern function get_Filter(): TEnumAsByte<TextureFilter> return this.Filter;
	public extern var MipLoadOptions(get, never): ETextureMipLoadOptions;
	public inline extern function get_MipLoadOptions(): ETextureMipLoadOptions return this.MipLoadOptions;
	public extern var CookPlatformTilingSettings(get, never): TEnumAsByte<TextureCookPlatformTilingSettings>;
	public inline extern function get_CookPlatformTilingSettings(): TEnumAsByte<TextureCookPlatformTilingSettings> return this.CookPlatformTilingSettings;
	public extern var LODGroup(get, never): TEnumAsByte<TextureGroup>;
	public inline extern function get_LODGroup(): TEnumAsByte<TextureGroup> return this.LODGroup;
	public extern var Downscale(get, never): PerPlatformFloat;
	public inline extern function get_Downscale(): PerPlatformFloat return this.Downscale;
	public extern var DownscaleOptions(get, never): ETextureDownscaleOptions;
	public inline extern function get_DownscaleOptions(): ETextureDownscaleOptions return this.DownscaleOptions;
	public extern var SRGB(get, never): Bool;
	public inline extern function get_SRGB(): Bool return this.SRGB;
	public extern var bNoTiling(get, never): Bool;
	public inline extern function get_bNoTiling(): Bool return this.bNoTiling;
	public extern var VirtualTextureStreaming(get, never): Bool;
	public inline extern function get_VirtualTextureStreaming(): Bool return this.VirtualTextureStreaming;
	public extern var CompressionYCoCg(get, never): Bool;
	public inline extern function get_CompressionYCoCg(): Bool return this.CompressionYCoCg;
	public extern var bNotOfflineProcessed(get, never): Bool;
	public inline extern function get_bNotOfflineProcessed(): Bool return this.bNotOfflineProcessed;
}

@:forward
@:nativeGen
@:native("Texture*")
abstract TexturePtr(cpp.Star<Texture>) from cpp.Star<Texture> to cpp.Star<Texture>{
	@:from
	public static extern inline function fromValue(v: Texture): TexturePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Texture {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}