// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAudioSliderBase")
@:include("AudioSlider.h")
@:valueType
extern class AudioSliderBase extends Widget {
	public var Value: ucpp.num.Float32;
	public var UnitsText: FText;
	public var TextLabelBackgroundColor: LinearColor;
	public var TextLabelBackgroundColorDelegate: HaxeDelegateProperty<() -> Void>;
	public var ShowLabelOnlyOnHover: Bool;
	public var ShowUnitsText: Bool;
	public var IsUnitsTextReadOnly: Bool;
	public var IsValueTextReadOnly: Bool;
	public var ValueDelegate: HaxeDelegateProperty<() -> Void>;
	public var SliderBackgroundColor: LinearColor;
	public var SliderBackgroundColorDelegate: HaxeDelegateProperty<() -> Void>;
	public var SliderBarColor: LinearColor;
	public var SliderBarColorDelegate: HaxeDelegateProperty<() -> Void>;
	public var SliderThumbColor: LinearColor;
	public var SliderThumbColorDelegate: HaxeDelegateProperty<() -> Void>;
	public var WidgetBackgroundColor: LinearColor;
	public var WidgetBackgroundColorDelegate: HaxeDelegateProperty<() -> Void>;
	public var Orientation: TEnumAsByte<EOrientation>;
	public var OnValueChanged: HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void>;

	public function SetWidgetBackgroundColor(InValue: LinearColor): Void;
	public function SetValueTextReadOnly(bIsReadOnly: Bool): Void;
	public function SetUnitsTextReadOnly(bIsReadOnly: Bool): Void;
	public function SetUnitsText(Units: FText): Void;
	public function SetTextLabelBackgroundColor(InColor: SlateColor): Void;
	public function SetSliderThumbColor(InValue: LinearColor): Void;
	public function SetSliderBarColor(InValue: LinearColor): Void;
	public function SetSliderBackgroundColor(InValue: LinearColor): Void;
	public function SetShowUnitsText(bShowUnitsText: Bool): Void;
	public function SetShowLabelOnlyOnHover(bShowLabelOnlyOnHover: Bool): Void;
	public function GetSliderValue(OutputValue: ucpp.num.Float32): ucpp.num.Float32;
	public function GetOutputValue(InSliderValue: ucpp.num.Float32): ucpp.num.Float32;
	public function GetLinValue(OutputValue: ucpp.num.Float32): ucpp.num.Float32;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstAudioSliderBase(AudioSliderBase) from AudioSliderBase {
	public extern var Value(get, never): ucpp.num.Float32;
	public inline extern function get_Value(): ucpp.num.Float32 return this.Value;
	public extern var UnitsText(get, never): FText;
	public inline extern function get_UnitsText(): FText return this.UnitsText;
	public extern var TextLabelBackgroundColor(get, never): LinearColor;
	public inline extern function get_TextLabelBackgroundColor(): LinearColor return this.TextLabelBackgroundColor;
	public extern var TextLabelBackgroundColorDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_TextLabelBackgroundColorDelegate(): HaxeDelegateProperty<() -> Void> return this.TextLabelBackgroundColorDelegate;
	public extern var ShowLabelOnlyOnHover(get, never): Bool;
	public inline extern function get_ShowLabelOnlyOnHover(): Bool return this.ShowLabelOnlyOnHover;
	public extern var ShowUnitsText(get, never): Bool;
	public inline extern function get_ShowUnitsText(): Bool return this.ShowUnitsText;
	public extern var IsUnitsTextReadOnly(get, never): Bool;
	public inline extern function get_IsUnitsTextReadOnly(): Bool return this.IsUnitsTextReadOnly;
	public extern var IsValueTextReadOnly(get, never): Bool;
	public inline extern function get_IsValueTextReadOnly(): Bool return this.IsValueTextReadOnly;
	public extern var ValueDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ValueDelegate(): HaxeDelegateProperty<() -> Void> return this.ValueDelegate;
	public extern var SliderBackgroundColor(get, never): LinearColor;
	public inline extern function get_SliderBackgroundColor(): LinearColor return this.SliderBackgroundColor;
	public extern var SliderBackgroundColorDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_SliderBackgroundColorDelegate(): HaxeDelegateProperty<() -> Void> return this.SliderBackgroundColorDelegate;
	public extern var SliderBarColor(get, never): LinearColor;
	public inline extern function get_SliderBarColor(): LinearColor return this.SliderBarColor;
	public extern var SliderBarColorDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_SliderBarColorDelegate(): HaxeDelegateProperty<() -> Void> return this.SliderBarColorDelegate;
	public extern var SliderThumbColor(get, never): LinearColor;
	public inline extern function get_SliderThumbColor(): LinearColor return this.SliderThumbColor;
	public extern var SliderThumbColorDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_SliderThumbColorDelegate(): HaxeDelegateProperty<() -> Void> return this.SliderThumbColorDelegate;
	public extern var WidgetBackgroundColor(get, never): LinearColor;
	public inline extern function get_WidgetBackgroundColor(): LinearColor return this.WidgetBackgroundColor;
	public extern var WidgetBackgroundColorDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_WidgetBackgroundColorDelegate(): HaxeDelegateProperty<() -> Void> return this.WidgetBackgroundColorDelegate;
	public extern var Orientation(get, never): TEnumAsByte<EOrientation>;
	public inline extern function get_Orientation(): TEnumAsByte<EOrientation> return this.Orientation;
	public extern var OnValueChanged(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void>;
	public inline extern function get_OnValueChanged(): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32) -> Void> return this.OnValueChanged;
}

@:forward
@:nativeGen
@:native("AudioSliderBase*")
abstract AudioSliderBasePtr(ucpp.Ptr<AudioSliderBase>) from ucpp.Ptr<AudioSliderBase> to ucpp.Ptr<AudioSliderBase>{
	@:from
	public static extern inline function fromValue(v: AudioSliderBase): AudioSliderBasePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AudioSliderBase {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}