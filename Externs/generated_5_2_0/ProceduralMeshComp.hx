// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UProceduralMeshComponent")
@:include("ProceduralMeshComponent.h")
@:valueType
extern class ProceduralMeshComp extends MeshComp {
	public var bUseComplexAsSimpleCollision: Bool;
	public var bUseAsyncCooking: Bool;
	public var ProcMeshBodySetup: ucpp.Ptr<BodySetup>;
	private var ProcMeshSections: TArray<ProcMeshSection>;
	private var CollisionConvexElems: TArray<KConvexElem>;
	private var LocalBounds: BoxSphereBounds;
	private var AsyncBodySetupQueue: TArray<ucpp.Ptr<BodySetup>>;

	public function UpdateMeshSection_LinearColor(SectionIndex: ucpp.num.Int32, Vertices: ucpp.Ref<TArray<Vector>>, Normals: ucpp.Ref<TArray<Vector>>, UV0: ucpp.Ref<TArray<Vector2D>>, UV1: ucpp.Ref<TArray<Vector2D>>, UV2: ucpp.Ref<TArray<Vector2D>>, UV3: ucpp.Ref<TArray<Vector2D>>, VertexColors: ucpp.Ref<TArray<LinearColor>>, Tangents: ucpp.Ref<TArray<ProcMeshTangent>>, bSRGBConversion: Bool): Void;
	public function UpdateMeshSection(SectionIndex: ucpp.num.Int32, Vertices: ucpp.Ref<TArray<Vector>>, Normals: ucpp.Ref<TArray<Vector>>, UV0: ucpp.Ref<TArray<Vector2D>>, VertexColors: ucpp.Ref<TArray<Color>>, Tangents: ucpp.Ref<TArray<ProcMeshTangent>>): Void;
	public function SetMeshSectionVisible(SectionIndex: ucpp.num.Int32, bNewVisibility: Bool): Void;
	public function IsMeshSectionVisible(SectionIndex: ucpp.num.Int32): Bool;
	public function GetNumSections(): ucpp.num.Int32;
	public function CreateMeshSection_LinearColor(SectionIndex: ucpp.num.Int32, Vertices: ucpp.Ref<TArray<Vector>>, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Normals: ucpp.Ref<TArray<Vector>>, UV0: ucpp.Ref<TArray<Vector2D>>, UV1: ucpp.Ref<TArray<Vector2D>>, UV2: ucpp.Ref<TArray<Vector2D>>, UV3: ucpp.Ref<TArray<Vector2D>>, VertexColors: ucpp.Ref<TArray<LinearColor>>, Tangents: ucpp.Ref<TArray<ProcMeshTangent>>, bCreateCollision: Bool, bSRGBConversion: Bool): Void;
	public function CreateMeshSection(SectionIndex: ucpp.num.Int32, Vertices: ucpp.Ref<TArray<Vector>>, Triangles: ucpp.Ref<TArray<ucpp.num.Int32>>, Normals: ucpp.Ref<TArray<Vector>>, UV0: ucpp.Ref<TArray<Vector2D>>, VertexColors: ucpp.Ref<TArray<Color>>, Tangents: ucpp.Ref<TArray<ProcMeshTangent>>, bCreateCollision: Bool): Void;
	public function ClearMeshSection(SectionIndex: ucpp.num.Int32): Void;
	public function ClearCollisionConvexMeshes(): Void;
	public function ClearAllMeshSections(): Void;
	public function AddCollisionConvexMesh(ConvexVerts: TArray<Vector>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(IsMeshSectionVisible, GetNumSections)
@:nativeGen
abstract ConstProceduralMeshComp(ProceduralMeshComp) from ProceduralMeshComp {
	public extern var bUseComplexAsSimpleCollision(get, never): Bool;
	public inline extern function get_bUseComplexAsSimpleCollision(): Bool return this.bUseComplexAsSimpleCollision;
	public extern var bUseAsyncCooking(get, never): Bool;
	public inline extern function get_bUseAsyncCooking(): Bool return this.bUseAsyncCooking;
	public extern var ProcMeshBodySetup(get, never): ucpp.Ptr<BodySetup.ConstBodySetup>;
	public inline extern function get_ProcMeshBodySetup(): ucpp.Ptr<BodySetup.ConstBodySetup> return this.ProcMeshBodySetup;
}

@:forward
@:nativeGen
@:native("ProceduralMeshComp*")
abstract ProceduralMeshCompPtr(ucpp.Ptr<ProceduralMeshComp>) from ucpp.Ptr<ProceduralMeshComp> to ucpp.Ptr<ProceduralMeshComp>{
	@:from
	public static extern inline function fromValue(v: ProceduralMeshComp): ProceduralMeshCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ProceduralMeshComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}