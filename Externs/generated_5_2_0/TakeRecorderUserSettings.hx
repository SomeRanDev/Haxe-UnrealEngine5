// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTakeRecorderUserSettings")
@:include("TakeRecorderSettings.h")
@:valueType
extern class TakeRecorderUserSettings extends Object {
	public var Settings: TakeRecorderUserParameters;
	public var PresetSaveDir: DirectoryPath;
	public var LastOpenedPreset: TSoftObjectPtr<TakePreset>;
	public var bIsSequenceOpen: Bool;
	public var bShowUserSettingsOnUI: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstTakeRecorderUserSettings(TakeRecorderUserSettings) from TakeRecorderUserSettings {
	public extern var Settings(get, never): TakeRecorderUserParameters;
	public inline extern function get_Settings(): TakeRecorderUserParameters return this.Settings;
	public extern var PresetSaveDir(get, never): DirectoryPath;
	public inline extern function get_PresetSaveDir(): DirectoryPath return this.PresetSaveDir;
	public extern var LastOpenedPreset(get, never): TSoftObjectPtr<TakePreset.ConstTakePreset>;
	public inline extern function get_LastOpenedPreset(): TSoftObjectPtr<TakePreset.ConstTakePreset> return this.LastOpenedPreset;
	public extern var bIsSequenceOpen(get, never): Bool;
	public inline extern function get_bIsSequenceOpen(): Bool return this.bIsSequenceOpen;
	public extern var bShowUserSettingsOnUI(get, never): Bool;
	public inline extern function get_bShowUserSettingsOnUI(): Bool return this.bShowUserSettingsOnUI;
}

@:forward
@:nativeGen
@:native("TakeRecorderUserSettings*")
abstract TakeRecorderUserSettingsPtr(ucpp.Ptr<TakeRecorderUserSettings>) from ucpp.Ptr<TakeRecorderUserSettings> to ucpp.Ptr<TakeRecorderUserSettings>{
	@:from
	public static extern inline function fromValue(v: TakeRecorderUserSettings): TakeRecorderUserSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TakeRecorderUserSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}