// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ULandscapeSplineControlPoint")
@:include("LandscapeSplineControlPoint.h")
@:valueType
extern class LandscapeSplineControlPoint extends Object {
	public var Location: Vector;
	public var Rotation: Rotator;
	public var Width: ucpp.num.Float32;
	public var LayerWidthRatio: ucpp.num.Float32;
	public var SideFalloff: ucpp.num.Float32;
	public var LeftSideFalloffFactor: ucpp.num.Float32;
	public var RightSideFalloffFactor: ucpp.num.Float32;
	public var LeftSideLayerFalloffFactor: ucpp.num.Float32;
	public var RightSideLayerFalloffFactor: ucpp.num.Float32;
	public var EndFalloff: ucpp.num.Float32;
	public var ConnectedSegments: TArray<LandscapeSplineConnection>;
	@:protected public var Points: TArray<LandscapeSplineInterpPoint>;
	@:protected public var Bounds: Box;
	@:protected public var LocalMeshComponent: ucpp.Ptr<ControlPointMeshComp>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstLandscapeSplineControlPoint(LandscapeSplineControlPoint) from LandscapeSplineControlPoint {
	public extern var Location(get, never): Vector;
	public inline extern function get_Location(): Vector return this.Location;
	public extern var Rotation(get, never): Rotator;
	public inline extern function get_Rotation(): Rotator return this.Rotation;
	public extern var Width(get, never): ucpp.num.Float32;
	public inline extern function get_Width(): ucpp.num.Float32 return this.Width;
	public extern var LayerWidthRatio(get, never): ucpp.num.Float32;
	public inline extern function get_LayerWidthRatio(): ucpp.num.Float32 return this.LayerWidthRatio;
	public extern var SideFalloff(get, never): ucpp.num.Float32;
	public inline extern function get_SideFalloff(): ucpp.num.Float32 return this.SideFalloff;
	public extern var LeftSideFalloffFactor(get, never): ucpp.num.Float32;
	public inline extern function get_LeftSideFalloffFactor(): ucpp.num.Float32 return this.LeftSideFalloffFactor;
	public extern var RightSideFalloffFactor(get, never): ucpp.num.Float32;
	public inline extern function get_RightSideFalloffFactor(): ucpp.num.Float32 return this.RightSideFalloffFactor;
	public extern var LeftSideLayerFalloffFactor(get, never): ucpp.num.Float32;
	public inline extern function get_LeftSideLayerFalloffFactor(): ucpp.num.Float32 return this.LeftSideLayerFalloffFactor;
	public extern var RightSideLayerFalloffFactor(get, never): ucpp.num.Float32;
	public inline extern function get_RightSideLayerFalloffFactor(): ucpp.num.Float32 return this.RightSideLayerFalloffFactor;
	public extern var EndFalloff(get, never): ucpp.num.Float32;
	public inline extern function get_EndFalloff(): ucpp.num.Float32 return this.EndFalloff;
	public extern var ConnectedSegments(get, never): TArray<LandscapeSplineConnection>;
	public inline extern function get_ConnectedSegments(): TArray<LandscapeSplineConnection> return this.ConnectedSegments;
}

@:forward
@:nativeGen
@:native("LandscapeSplineControlPoint*")
abstract LandscapeSplineControlPointPtr(ucpp.Ptr<LandscapeSplineControlPoint>) from ucpp.Ptr<LandscapeSplineControlPoint> to ucpp.Ptr<LandscapeSplineControlPoint>{
	@:from
	public static extern inline function fromValue(v: LandscapeSplineControlPoint): LandscapeSplineControlPointPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): LandscapeSplineControlPoint {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}