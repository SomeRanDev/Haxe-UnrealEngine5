// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimationStateMachineLibrary")
@:include("AnimationStateMachineLibrary.h")
@:structAccess
extern class AnimationStateMachineLibrary extends BlueprintFunctionLibrary {
	public function SetState(UpdateContext: cpp.Reference<AnimUpdateContext>, Node: cpp.Reference<AnimationStateMachineReference>, TargetState: FName, Duration: cpp.Float32, BlendType: TEnumAsByte<ETransitionLogicType>, BlendProfile: cpp.Star<BlendProfile>, AlphaBlendOption: EAlphaBlendOption, CustomBlendCurve: cpp.Star<CurveFloat>): Void;
	public function IsStateBlendingOut(UpdateContext: cpp.Reference<AnimUpdateContext>, Node: cpp.Reference<AnimationStateResultReference>): Bool;
	public function IsStateBlendingIn(UpdateContext: cpp.Reference<AnimUpdateContext>, Node: cpp.Reference<AnimationStateResultReference>): Bool;
	public function GetState(UpdateContext: cpp.Reference<AnimUpdateContext>, Node: cpp.Reference<AnimationStateMachineReference>): FName;
	public function GetRelevantAnimTimeRemainingFraction(UpdateContext: cpp.Reference<AnimUpdateContext>, Node: cpp.Reference<AnimationStateResultReference>): cpp.Float32;
	public function GetRelevantAnimTimeRemaining(UpdateContext: cpp.Reference<AnimUpdateContext>, Node: cpp.Reference<AnimationStateResultReference>): cpp.Float32;
	public function ConvertToAnimationStateResultPure(Node: cpp.Reference<AnimNodeReference>, AnimationState: cpp.Reference<AnimationStateResultReference>, Result: cpp.Reference<Bool>): Void;
	public function ConvertToAnimationStateResult(Node: cpp.Reference<AnimNodeReference>, AnimationState: cpp.Reference<AnimationStateResultReference>, Result: cpp.Reference<EAnimNodeReferenceConversionResult>): Void;
	public function ConvertToAnimationStateMachinePure(Node: cpp.Reference<AnimNodeReference>, AnimationState: cpp.Reference<AnimationStateMachineReference>, Result: cpp.Reference<Bool>): Void;
	public function ConvertToAnimationStateMachine(Node: cpp.Reference<AnimNodeReference>, AnimationState: cpp.Reference<AnimationStateMachineReference>, Result: cpp.Reference<EAnimNodeReferenceConversionResult>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAnimationStateMachineLibrary(AnimationStateMachineLibrary) from AnimationStateMachineLibrary {
}

@:forward
@:nativeGen
@:native("AnimationStateMachineLibrary*")
abstract AnimationStateMachineLibraryPtr(cpp.Star<AnimationStateMachineLibrary>) from cpp.Star<AnimationStateMachineLibrary> to cpp.Star<AnimationStateMachineLibrary>{
	@:from
	public static extern inline function fromValue(v: AnimationStateMachineLibrary): AnimationStateMachineLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimationStateMachineLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}