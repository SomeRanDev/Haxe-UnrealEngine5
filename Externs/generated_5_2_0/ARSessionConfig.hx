// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UARSessionConfig")
@:include("ARSessionConfig.h")
@:structAccess
extern class ARSessionConfig extends DataAsset {
	public var bGenerateMeshDataFromTrackedGeometry: Bool;
	public var bGenerateCollisionForMeshData: Bool;
	public var bGenerateNavMeshForMeshData: Bool;
	public var bUseMeshDataForOcclusion: Bool;
	public var bRenderMeshDataInWireframe: Bool;
	public var bTrackSceneObjects: Bool;
	public var bUsePersonSegmentationForOcclusion: Bool;
	public var bUseSceneDepthForOcclusion: Bool;
	public var bUseAutomaticImageScaleEstimation: Bool;
	public var bUseStandardOnboardingUX: Bool;
	@:protected public var WorldAlignment: EARWorldAlignment;
	@:protected public var SessionType: EARSessionType;
	@:protected public var bHorizontalPlaneDetection: Bool;
	@:protected public var bVerticalPlaneDetection: Bool;
	@:protected public var bEnableAutoFocus: Bool;
	@:protected public var LightEstimationMode: EARLightEstimationMode;
	@:protected public var FrameSyncMode: EARFrameSyncMode;
	@:protected public var bEnableAutomaticCameraOverlay: Bool;
	@:protected public var bEnableAutomaticCameraTracking: Bool;
	@:protected public var bResetCameraTracking: Bool;
	@:protected public var bResetTrackedObjects: Bool;
	@:protected public var CandidateImages: TArray<cpp.Star<ARCandidateImage>>;
	@:protected public var MaxNumSimultaneousImagesTracked: cpp.Int32;
	@:protected public var EnvironmentCaptureProbeType: EAREnvironmentCaptureProbeType;
	@:protected public var WorldMapData: TArray<cpp.UInt8>;
	@:protected public var CandidateObjects: TArray<cpp.Star<ARCandidateObject>>;
	@:protected public var DesiredVideoFormat: ARVideoFormat;
	@:protected public var bUseOptimalVideoFormat: Bool;
	@:protected public var FaceTrackingDirection: EARFaceTrackingDirection;
	@:protected public var FaceTrackingUpdate: EARFaceTrackingUpdate;
	@:protected public var MaxNumberOfTrackedFaces: cpp.Int32;
	@:protected public var SerializedARCandidateImageDatabase: TArray<cpp.UInt8>;
	@:protected public var EnabledSessionTrackingFeature: EARSessionTrackingFeature;
	@:protected public var SceneReconstructionMethod: EARSceneReconstruction;
	@:protected public var PlaneComponentClass: TSubclassOf<ARPlaneComp>;
	@:protected public var PointComponentClass: TSubclassOf<ARPointComp>;
	@:protected public var FaceComponentClass: TSubclassOf<ARFaceComp>;
	@:protected public var ImageComponentClass: TSubclassOf<ARImageComp>;
	@:protected public var QRCodeComponentClass: TSubclassOf<ARQRCodeComp>;
	@:protected public var PoseComponentClass: TSubclassOf<ARPoseComp>;
	@:protected public var EnvironmentProbeComponentClass: TSubclassOf<AREnvironmentProbeComp>;
	@:protected public var ObjectComponentClass: TSubclassOf<ARObjectComp>;
	@:protected public var MeshComponentClass: TSubclassOf<ARMeshComp>;
	@:protected public var GeoAnchorComponentClass: TSubclassOf<ARGeoAnchorComp>;
	@:protected public var DefaultMeshMaterial: cpp.Star<MaterialInterface>;
	@:protected public var DefaultWireframeMeshMaterial: cpp.Star<MaterialInterface>;

	public function ShouldResetTrackedObjects(): Bool;
	public function ShouldResetCameraTracking(): Bool;
	public function ShouldRenderCameraOverlay(): Bool;
	public function ShouldEnableCameraTracking(): Bool;
	public function ShouldEnableAutoFocus(): Bool;
	public function SetWorldMapData(WorldMapData: TArray<cpp.UInt8>): Void;
	public function SetSessionTrackingFeatureToEnable(InSessionTrackingFeature: EARSessionTrackingFeature): Void;
	public function SetSceneReconstructionMethod(InSceneReconstructionMethod: EARSceneReconstruction): Void;
	public function SetResetTrackedObjects(bNewValue: Bool): Void;
	public function SetResetCameraTracking(bNewValue: Bool): Void;
	public function SetFaceTrackingUpdate(InUpdate: EARFaceTrackingUpdate): Void;
	public function SetFaceTrackingDirection(InDirection: EARFaceTrackingDirection): Void;
	public function SetEnableAutoFocus(bNewValue: Bool): Void;
	public function SetDesiredVideoFormat(NewFormat: ARVideoFormat): Void;
	public function SetCandidateObjectList(InCandidateObjects: cpp.Reference<TArray<cpp.Star<ARCandidateObject>>>): Void;
	public function GetWorldMapData(): TArray<cpp.UInt8>;
	public function GetWorldAlignment(): EARWorldAlignment;
	public function GetSessionType(): EARSessionType;
	public function GetSceneReconstructionMethod(): EARSceneReconstruction;
	public function GetPlaneDetectionMode(): EARPlaneDetectionMode;
	public function GetMaxNumSimultaneousImagesTracked(): cpp.Int32;
	public function GetLightEstimationMode(): EARLightEstimationMode;
	public function GetFrameSyncMode(): EARFrameSyncMode;
	public function GetFaceTrackingUpdate(): EARFaceTrackingUpdate;
	public function GetFaceTrackingDirection(): EARFaceTrackingDirection;
	public function GetEnvironmentCaptureProbeType(): EAREnvironmentCaptureProbeType;
	public function GetEnabledSessionTrackingFeature(): EARSessionTrackingFeature;
	public function GetDesiredVideoFormat(): ARVideoFormat;
	public function GetCandidateObjectList(): TArray<cpp.Star<ARCandidateObject>>;
	public function GetCandidateImageList(): TArray<cpp.Star<ARCandidateImage>>;
	public function AddCandidateObject(CandidateObject: cpp.Star<ARCandidateObject>): Void;
	public function AddCandidateImage(NewCandidateImage: cpp.Star<ARCandidateImage>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	ShouldResetTrackedObjects, ShouldResetCameraTracking, ShouldRenderCameraOverlay, ShouldEnableCameraTracking, ShouldEnableAutoFocus,
	GetWorldMapData, GetWorldAlignment, GetSessionType, GetSceneReconstructionMethod, GetPlaneDetectionMode,
	GetMaxNumSimultaneousImagesTracked, GetLightEstimationMode, GetFrameSyncMode, GetFaceTrackingUpdate, GetFaceTrackingDirection,
	GetEnvironmentCaptureProbeType, GetEnabledSessionTrackingFeature, GetDesiredVideoFormat, GetCandidateObjectList, GetCandidateImageList
)
@:nativeGen
abstract ConstARSessionConfig(ARSessionConfig) from ARSessionConfig {
	public extern var bGenerateMeshDataFromTrackedGeometry(get, never): Bool;
	public inline extern function get_bGenerateMeshDataFromTrackedGeometry(): Bool return this.bGenerateMeshDataFromTrackedGeometry;
	public extern var bGenerateCollisionForMeshData(get, never): Bool;
	public inline extern function get_bGenerateCollisionForMeshData(): Bool return this.bGenerateCollisionForMeshData;
	public extern var bGenerateNavMeshForMeshData(get, never): Bool;
	public inline extern function get_bGenerateNavMeshForMeshData(): Bool return this.bGenerateNavMeshForMeshData;
	public extern var bUseMeshDataForOcclusion(get, never): Bool;
	public inline extern function get_bUseMeshDataForOcclusion(): Bool return this.bUseMeshDataForOcclusion;
	public extern var bRenderMeshDataInWireframe(get, never): Bool;
	public inline extern function get_bRenderMeshDataInWireframe(): Bool return this.bRenderMeshDataInWireframe;
	public extern var bTrackSceneObjects(get, never): Bool;
	public inline extern function get_bTrackSceneObjects(): Bool return this.bTrackSceneObjects;
	public extern var bUsePersonSegmentationForOcclusion(get, never): Bool;
	public inline extern function get_bUsePersonSegmentationForOcclusion(): Bool return this.bUsePersonSegmentationForOcclusion;
	public extern var bUseSceneDepthForOcclusion(get, never): Bool;
	public inline extern function get_bUseSceneDepthForOcclusion(): Bool return this.bUseSceneDepthForOcclusion;
	public extern var bUseAutomaticImageScaleEstimation(get, never): Bool;
	public inline extern function get_bUseAutomaticImageScaleEstimation(): Bool return this.bUseAutomaticImageScaleEstimation;
	public extern var bUseStandardOnboardingUX(get, never): Bool;
	public inline extern function get_bUseStandardOnboardingUX(): Bool return this.bUseStandardOnboardingUX;
}

@:forward
@:nativeGen
@:native("ARSessionConfig*")
abstract ARSessionConfigPtr(cpp.Star<ARSessionConfig>) from cpp.Star<ARSessionConfig> to cpp.Star<ARSessionConfig>{
	@:from
	public static extern inline function fromValue(v: ARSessionConfig): ARSessionConfigPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ARSessionConfig {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}