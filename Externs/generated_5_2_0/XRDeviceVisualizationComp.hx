// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UXRDeviceVisualizationComponent")
@:include("XRDeviceVisualizationComponent.h")
@:valueType
extern class XRDeviceVisualizationComp extends StaticMeshComp {
	public var bIsVisualizationActive: Bool;
	public var DisplayModelSource: FName;
	public var CustomDisplayMesh: ucpp.Ptr<StaticMesh>;
	public var DisplayMeshMaterialOverrides: TArray<ucpp.Ptr<MaterialInterface>>;

	public function SetIsVisualizationActive(bNewVisualizationState: Bool): Void;
	public function SetIsRenderingActive(bRenderingIsActive: Bool): Void;
	public function SetDisplayModelSource(NewDisplayModelSource: FName): Void;
	public function SetCustomDisplayMesh(NewDisplayMesh: ucpp.Ptr<StaticMesh>): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstXRDeviceVisualizationComp(XRDeviceVisualizationComp) from XRDeviceVisualizationComp {
	public extern var bIsVisualizationActive(get, never): Bool;
	public inline extern function get_bIsVisualizationActive(): Bool return this.bIsVisualizationActive;
	public extern var DisplayModelSource(get, never): FName;
	public inline extern function get_DisplayModelSource(): FName return this.DisplayModelSource;
	public extern var CustomDisplayMesh(get, never): ucpp.Ptr<StaticMesh.ConstStaticMesh>;
	public inline extern function get_CustomDisplayMesh(): ucpp.Ptr<StaticMesh.ConstStaticMesh> return this.CustomDisplayMesh;
	public extern var DisplayMeshMaterialOverrides(get, never): TArray<ucpp.Ptr<MaterialInterface.ConstMaterialInterface>>;
	public inline extern function get_DisplayMeshMaterialOverrides(): TArray<ucpp.Ptr<MaterialInterface.ConstMaterialInterface>> return this.DisplayMeshMaterialOverrides;
}

@:forward
@:nativeGen
@:native("XRDeviceVisualizationComp*")
abstract XRDeviceVisualizationCompPtr(ucpp.Ptr<XRDeviceVisualizationComp>) from ucpp.Ptr<XRDeviceVisualizationComp> to ucpp.Ptr<XRDeviceVisualizationComp>{
	@:from
	public static extern inline function fromValue(v: XRDeviceVisualizationComp): XRDeviceVisualizationCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): XRDeviceVisualizationComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}