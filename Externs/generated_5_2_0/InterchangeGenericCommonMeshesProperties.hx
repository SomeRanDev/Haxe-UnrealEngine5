// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeGenericCommonMeshesProperties")
@:include("InterchangeGenericAssetsPipelineSharedSettings.h")
@:valueType
extern class InterchangeGenericCommonMeshesProperties extends InterchangePipelineBase {
	public var ForceAllMeshAsType: EInterchangeForceMeshType;
	public var bImportLods: Bool;
	public var bBakeMeshes: Bool;
	public var VertexColorImportOption: EInterchangeVertexColorImportOption;
	public var VertexOverrideColor: Color;
	public var bRecomputeNormals: Bool;
	public var bRecomputeTangents: Bool;
	public var bUseMikkTSpace: Bool;
	public var bComputeWeightedNormals: Bool;
	public var bUseHighPrecisionTangentBasis: Bool;
	public var bUseFullPrecisionUVs: Bool;
	public var bUseBackwardsCompatibleF16TruncUVs: Bool;
	public var bRemoveDegenerates: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstInterchangeGenericCommonMeshesProperties(InterchangeGenericCommonMeshesProperties) from InterchangeGenericCommonMeshesProperties {
	public extern var ForceAllMeshAsType(get, never): EInterchangeForceMeshType;
	public inline extern function get_ForceAllMeshAsType(): EInterchangeForceMeshType return this.ForceAllMeshAsType;
	public extern var bImportLods(get, never): Bool;
	public inline extern function get_bImportLods(): Bool return this.bImportLods;
	public extern var bBakeMeshes(get, never): Bool;
	public inline extern function get_bBakeMeshes(): Bool return this.bBakeMeshes;
	public extern var VertexColorImportOption(get, never): EInterchangeVertexColorImportOption;
	public inline extern function get_VertexColorImportOption(): EInterchangeVertexColorImportOption return this.VertexColorImportOption;
	public extern var VertexOverrideColor(get, never): Color;
	public inline extern function get_VertexOverrideColor(): Color return this.VertexOverrideColor;
	public extern var bRecomputeNormals(get, never): Bool;
	public inline extern function get_bRecomputeNormals(): Bool return this.bRecomputeNormals;
	public extern var bRecomputeTangents(get, never): Bool;
	public inline extern function get_bRecomputeTangents(): Bool return this.bRecomputeTangents;
	public extern var bUseMikkTSpace(get, never): Bool;
	public inline extern function get_bUseMikkTSpace(): Bool return this.bUseMikkTSpace;
	public extern var bComputeWeightedNormals(get, never): Bool;
	public inline extern function get_bComputeWeightedNormals(): Bool return this.bComputeWeightedNormals;
	public extern var bUseHighPrecisionTangentBasis(get, never): Bool;
	public inline extern function get_bUseHighPrecisionTangentBasis(): Bool return this.bUseHighPrecisionTangentBasis;
	public extern var bUseFullPrecisionUVs(get, never): Bool;
	public inline extern function get_bUseFullPrecisionUVs(): Bool return this.bUseFullPrecisionUVs;
	public extern var bUseBackwardsCompatibleF16TruncUVs(get, never): Bool;
	public inline extern function get_bUseBackwardsCompatibleF16TruncUVs(): Bool return this.bUseBackwardsCompatibleF16TruncUVs;
	public extern var bRemoveDegenerates(get, never): Bool;
	public inline extern function get_bRemoveDegenerates(): Bool return this.bRemoveDegenerates;
}

@:forward
@:nativeGen
@:native("InterchangeGenericCommonMeshesProperties*")
abstract InterchangeGenericCommonMeshesPropertiesPtr(ucpp.Ptr<InterchangeGenericCommonMeshesProperties>) from ucpp.Ptr<InterchangeGenericCommonMeshesProperties> to ucpp.Ptr<InterchangeGenericCommonMeshesProperties>{
	@:from
	public static extern inline function fromValue(v: InterchangeGenericCommonMeshesProperties): InterchangeGenericCommonMeshesPropertiesPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeGenericCommonMeshesProperties {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}