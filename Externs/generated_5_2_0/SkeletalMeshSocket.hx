// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USkeletalMeshSocket")
@:include("Engine/SkeletalMeshSocket.h")
@:valueType
extern class SkeletalMeshSocket extends Object {
	public var SocketName: FName;
	public var BoneName: FName;
	public var RelativeLocation: Vector;
	public var RelativeRotation: Rotator;
	public var RelativeScale: Vector;
	public var bForceAlwaysAnimated: Bool;

	public function InitializeSocketFromLocation(SkelComp: ucpp.Ptr<SkeletalMeshComp.ConstSkeletalMeshComp>, WorldLocation: Vector, WorldNormal: Vector): Void;
	public function GetSocketLocation(SkelComp: ucpp.Ptr<SkeletalMeshComp.ConstSkeletalMeshComp>): Vector;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(GetSocketLocation)
@:nativeGen
abstract ConstSkeletalMeshSocket(SkeletalMeshSocket) from SkeletalMeshSocket {
	public extern var SocketName(get, never): FName;
	public inline extern function get_SocketName(): FName return this.SocketName;
	public extern var BoneName(get, never): FName;
	public inline extern function get_BoneName(): FName return this.BoneName;
	public extern var RelativeLocation(get, never): Vector;
	public inline extern function get_RelativeLocation(): Vector return this.RelativeLocation;
	public extern var RelativeRotation(get, never): Rotator;
	public inline extern function get_RelativeRotation(): Rotator return this.RelativeRotation;
	public extern var RelativeScale(get, never): Vector;
	public inline extern function get_RelativeScale(): Vector return this.RelativeScale;
	public extern var bForceAlwaysAnimated(get, never): Bool;
	public inline extern function get_bForceAlwaysAnimated(): Bool return this.bForceAlwaysAnimated;
}

@:forward
@:nativeGen
@:native("SkeletalMeshSocket*")
abstract SkeletalMeshSocketPtr(ucpp.Ptr<SkeletalMeshSocket>) from ucpp.Ptr<SkeletalMeshSocket> to ucpp.Ptr<SkeletalMeshSocket>{
	@:from
	public static extern inline function fromValue(v: SkeletalMeshSocket): SkeletalMeshSocketPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SkeletalMeshSocket {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}