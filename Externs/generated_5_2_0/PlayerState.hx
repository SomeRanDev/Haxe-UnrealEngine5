// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("APlayerState")
@:include("GameFramework/PlayerState.h")
@:structAccess
extern class PlayerState extends Info {
	public function GetScore(): cpp.Float32;
	public function GetPlayerId(): cpp.Int32;
	public function GetCompressedPing(): cpp.UInt8;
	private var bShouldUpdateReplicatedPing: Bool;
	public function IsSpectator(): Bool;
	public var bOnlySpectator: Bool;
	public function IsABot(): Bool;
	public var bIsInactive: Bool;
	public var bFromPreviousLevel: Bool;
	public var StartTime: cpp.Int32;
	public var EngineMessageClass: TSubclassOf<LocalMessage>;
	public var SavedNetworkAddress: FString;
	public var UniqueId: UniqueNetIdRepl;
	public var OnPawnSet: HaxeMulticastSparseDelegateProperty<(cpp.Star<PlayerState>, cpp.Star<Pawn>, cpp.Star<Pawn>) -> Void>;
	private var PawnPrivate: cpp.Star<Pawn>;
	private var PlayerNamePrivate: FString;

	@:protected public function ReceiveOverrideWith(OldPlayerState: cpp.Star<PlayerState>): Void;
	@:protected public function ReceiveCopyProperties(NewPlayerState: cpp.Star<PlayerState>): Void;
	public function OnRep_UniqueId(): Void;
	public function OnRep_Score(): Void;
	public function OnRep_PlayerName(): Void;
	public function OnRep_PlayerId(): Void;
	public function OnRep_bIsInactive(): Void;
	private function OnPawnPrivateDestroyed(InActor: cpp.Star<Actor>): Void;
	public function IsOnlyASpectator(): Bool;
	public function GetPlayerName(): FString;
	public function GetPlayerController(): cpp.Star<PlayerController>;
	public function GetPingInMilliseconds(): cpp.Float32;
	public function GetPawn(): cpp.Star<Pawn>;
	public function BP_GetUniqueId(): UniqueNetIdRepl;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsOnlyASpectator, GetPlayerName, GetPlayerController, GetPingInMilliseconds, GetPawn, BP_GetUniqueId)
@:nativeGen
abstract ConstPlayerState(PlayerState) from PlayerState {
	public extern var bOnlySpectator(get, never): Bool;
	public inline extern function get_bOnlySpectator(): Bool return this.bOnlySpectator;
	public extern var bIsInactive(get, never): Bool;
	public inline extern function get_bIsInactive(): Bool return this.bIsInactive;
	public extern var bFromPreviousLevel(get, never): Bool;
	public inline extern function get_bFromPreviousLevel(): Bool return this.bFromPreviousLevel;
	public extern var StartTime(get, never): cpp.Int32;
	public inline extern function get_StartTime(): cpp.Int32 return this.StartTime;
	public extern var EngineMessageClass(get, never): TSubclassOf<LocalMessage.ConstLocalMessage>;
	public inline extern function get_EngineMessageClass(): TSubclassOf<LocalMessage.ConstLocalMessage> return this.EngineMessageClass;
	public extern var SavedNetworkAddress(get, never): FString;
	public inline extern function get_SavedNetworkAddress(): FString return this.SavedNetworkAddress;
	public extern var UniqueId(get, never): UniqueNetIdRepl;
	public inline extern function get_UniqueId(): UniqueNetIdRepl return this.UniqueId;
	public extern var OnPawnSet(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PlayerState.ConstPlayerState>, cpp.Star<Pawn.ConstPawn>, cpp.Star<Pawn.ConstPawn>) -> Void>;
	public inline extern function get_OnPawnSet(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PlayerState.ConstPlayerState>, cpp.Star<Pawn.ConstPawn>, cpp.Star<Pawn.ConstPawn>) -> Void> return this.OnPawnSet;
}

@:forward
@:nativeGen
@:native("PlayerState*")
abstract PlayerStatePtr(cpp.Star<PlayerState>) from cpp.Star<PlayerState> to cpp.Star<PlayerState>{
	@:from
	public static extern inline function fromValue(v: PlayerState): PlayerStatePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PlayerState {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}