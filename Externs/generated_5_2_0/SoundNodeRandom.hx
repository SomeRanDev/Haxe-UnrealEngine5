// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USoundNodeRandom")
@:include("Sound/SoundNodeRandom.h")
@:valueType
extern class SoundNodeRandom extends SoundNode {
	public var Weights: TArray<ucpp.num.Float32>;
	public var HasBeenUsed: TArray<Bool>;
	public var NumRandomUsed: ucpp.num.Int32;
	public var PreselectAtLevelLoad: ucpp.num.Int32;
	public var bShouldExcludeFromBranchCulling: Bool;
	public var bSoundCueExcludedFromBranchCulling: Bool;
	public var bRandomizeWithoutReplacement: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstSoundNodeRandom(SoundNodeRandom) from SoundNodeRandom {
	public extern var Weights(get, never): TArray<ucpp.num.Float32>;
	public inline extern function get_Weights(): TArray<ucpp.num.Float32> return this.Weights;
	public extern var HasBeenUsed(get, never): TArray<Bool>;
	public inline extern function get_HasBeenUsed(): TArray<Bool> return this.HasBeenUsed;
	public extern var NumRandomUsed(get, never): ucpp.num.Int32;
	public inline extern function get_NumRandomUsed(): ucpp.num.Int32 return this.NumRandomUsed;
	public extern var PreselectAtLevelLoad(get, never): ucpp.num.Int32;
	public inline extern function get_PreselectAtLevelLoad(): ucpp.num.Int32 return this.PreselectAtLevelLoad;
	public extern var bShouldExcludeFromBranchCulling(get, never): Bool;
	public inline extern function get_bShouldExcludeFromBranchCulling(): Bool return this.bShouldExcludeFromBranchCulling;
	public extern var bSoundCueExcludedFromBranchCulling(get, never): Bool;
	public inline extern function get_bSoundCueExcludedFromBranchCulling(): Bool return this.bSoundCueExcludedFromBranchCulling;
	public extern var bRandomizeWithoutReplacement(get, never): Bool;
	public inline extern function get_bRandomizeWithoutReplacement(): Bool return this.bRandomizeWithoutReplacement;
}

@:forward
@:nativeGen
@:native("SoundNodeRandom*")
abstract SoundNodeRandomPtr(ucpp.Ptr<SoundNodeRandom>) from ucpp.Ptr<SoundNodeRandom> to ucpp.Ptr<SoundNodeRandom>{
	@:from
	public static extern inline function fromValue(v: SoundNodeRandom): SoundNodeRandomPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SoundNodeRandom {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}