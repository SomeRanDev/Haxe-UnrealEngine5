// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ANavLinkProxy")
@:include("Navigation/NavLinkProxy.h")
@:structAccess
extern class NavLinkProxy extends Actor {
	public var PointLinks: TArray<NavigationLink>;
	public var SegmentLinks: TArray<NavigationSegmentLink>;
	private var SmartLinkComp: cpp.Star<NavLinkCustomComp>;
	public var bSmartLinkIsRelevant: Bool;
	@:protected public var OnSmartLinkReached: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Reference<Vector>) -> Void>;

	public function SetSmartLinkEnabled(bEnabled: Bool): Void;
	public function ResumePathFollowing(Agent: cpp.Star<Actor>): Void;
	public function ReceiveSmartLinkReached(Agent: cpp.Star<Actor>, Destination: cpp.Reference<Vector>): Void;
	public function IsSmartLinkEnabled(): Bool;
	public function HasMovingAgents(): Bool;
	public function CopyEndPointsFromSimpleLinkToSmartLink(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsSmartLinkEnabled, HasMovingAgents)
@:nativeGen
abstract ConstNavLinkProxy(NavLinkProxy) from NavLinkProxy {
	public extern var PointLinks(get, never): TArray<NavigationLink>;
	public inline extern function get_PointLinks(): TArray<NavigationLink> return this.PointLinks;
	public extern var SegmentLinks(get, never): TArray<NavigationSegmentLink>;
	public inline extern function get_SegmentLinks(): TArray<NavigationSegmentLink> return this.SegmentLinks;
	public extern var bSmartLinkIsRelevant(get, never): Bool;
	public inline extern function get_bSmartLinkIsRelevant(): Bool return this.bSmartLinkIsRelevant;
}

@:forward
@:nativeGen
@:native("NavLinkProxy*")
abstract NavLinkProxyPtr(cpp.Star<NavLinkProxy>) from cpp.Star<NavLinkProxy> to cpp.Star<NavLinkProxy>{
	@:from
	public static extern inline function fromValue(v: NavLinkProxy): NavLinkProxyPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): NavLinkProxy {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}