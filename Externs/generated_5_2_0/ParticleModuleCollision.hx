// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UParticleModuleCollision")
@:include("Particles/Collision/ParticleModuleCollision.h")
@:structAccess
extern class ParticleModuleCollision extends ParticleModuleCollisionBase {
	public var DampingFactor: RawDistributionVector;
	public var DampingFactorRotation: RawDistributionVector;
	public var MaxCollisions: RawDistributionFloat;
	public var CollisionCompletionOption: TEnumAsByte<EParticleCollisionComplete>;
	public var CollisionTypes: TArray<TEnumAsByte<EObjectTypeQuery>>;
	public var bApplyPhysics: Bool;
	public var bIgnoreTriggerVolumes: Bool;
	public var ParticleMass: RawDistributionFloat;
	public var DirScalar: cpp.Float32;
	public var bPawnsDoNotDecrementCount: Bool;
	public var bOnlyVerticalNormalsDecrementCount: Bool;
	public var VerticalFudgeFactor: cpp.Float32;
	public var DelayAmount: RawDistributionFloat;
	public var bDropDetail: Bool;
	public var bCollideOnlyIfVisible: Bool;
	public var bIgnoreSourceActor: Bool;
	public var MaxCollisionDistance: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstParticleModuleCollision(ParticleModuleCollision) from ParticleModuleCollision {
	public extern var DampingFactor(get, never): RawDistributionVector;
	public inline extern function get_DampingFactor(): RawDistributionVector return this.DampingFactor;
	public extern var DampingFactorRotation(get, never): RawDistributionVector;
	public inline extern function get_DampingFactorRotation(): RawDistributionVector return this.DampingFactorRotation;
	public extern var MaxCollisions(get, never): RawDistributionFloat;
	public inline extern function get_MaxCollisions(): RawDistributionFloat return this.MaxCollisions;
	public extern var CollisionCompletionOption(get, never): TEnumAsByte<EParticleCollisionComplete>;
	public inline extern function get_CollisionCompletionOption(): TEnumAsByte<EParticleCollisionComplete> return this.CollisionCompletionOption;
	public extern var CollisionTypes(get, never): TArray<TEnumAsByte<EObjectTypeQuery>>;
	public inline extern function get_CollisionTypes(): TArray<TEnumAsByte<EObjectTypeQuery>> return this.CollisionTypes;
	public extern var bApplyPhysics(get, never): Bool;
	public inline extern function get_bApplyPhysics(): Bool return this.bApplyPhysics;
	public extern var bIgnoreTriggerVolumes(get, never): Bool;
	public inline extern function get_bIgnoreTriggerVolumes(): Bool return this.bIgnoreTriggerVolumes;
	public extern var ParticleMass(get, never): RawDistributionFloat;
	public inline extern function get_ParticleMass(): RawDistributionFloat return this.ParticleMass;
	public extern var DirScalar(get, never): cpp.Float32;
	public inline extern function get_DirScalar(): cpp.Float32 return this.DirScalar;
	public extern var bPawnsDoNotDecrementCount(get, never): Bool;
	public inline extern function get_bPawnsDoNotDecrementCount(): Bool return this.bPawnsDoNotDecrementCount;
	public extern var bOnlyVerticalNormalsDecrementCount(get, never): Bool;
	public inline extern function get_bOnlyVerticalNormalsDecrementCount(): Bool return this.bOnlyVerticalNormalsDecrementCount;
	public extern var VerticalFudgeFactor(get, never): cpp.Float32;
	public inline extern function get_VerticalFudgeFactor(): cpp.Float32 return this.VerticalFudgeFactor;
	public extern var DelayAmount(get, never): RawDistributionFloat;
	public inline extern function get_DelayAmount(): RawDistributionFloat return this.DelayAmount;
	public extern var bDropDetail(get, never): Bool;
	public inline extern function get_bDropDetail(): Bool return this.bDropDetail;
	public extern var bCollideOnlyIfVisible(get, never): Bool;
	public inline extern function get_bCollideOnlyIfVisible(): Bool return this.bCollideOnlyIfVisible;
	public extern var bIgnoreSourceActor(get, never): Bool;
	public inline extern function get_bIgnoreSourceActor(): Bool return this.bIgnoreSourceActor;
	public extern var MaxCollisionDistance(get, never): cpp.Float32;
	public inline extern function get_MaxCollisionDistance(): cpp.Float32 return this.MaxCollisionDistance;
}

@:forward
@:nativeGen
@:native("ParticleModuleCollision*")
abstract ParticleModuleCollisionPtr(cpp.Star<ParticleModuleCollision>) from cpp.Star<ParticleModuleCollision> to cpp.Star<ParticleModuleCollision>{
	@:from
	public static extern inline function fromValue(v: ParticleModuleCollision): ParticleModuleCollisionPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ParticleModuleCollision {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}