// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ACharacter")
@:include("GameFramework/Character.h")
@:valueType
extern class Character extends Pawn {
	private var Mesh: ucpp.Ptr<SkeletalMeshComp>;
	private var CharacterMovement: ucpp.Ptr<CharacterMovementComp>;
	private var CapsuleComponent: ucpp.Ptr<CapsuleComp>;
	@:protected public var BasedMovement: BasedMovementInfo;
	@:protected public var ReplicatedBasedMovement: BasedMovementInfo;
	@:protected public var AnimRootMotionTranslationScale: ucpp.num.Float32;
	@:protected public var BaseTranslationOffset: Vector;
	@:protected public var BaseRotationOffset: Quat;
	@:protected public var ReplicatedServerLastTransformUpdateTimeStamp: ucpp.num.Float32;
	@:protected public var ReplayLastTransformUpdateTimeStamp: ucpp.num.Float32;
	@:protected public var ReplicatedMovementMode: ucpp.num.UInt8;
	@:protected public var bInBaseReplication: Bool;
	public var CrouchedEyeHeight: ucpp.num.Float32;
	public var bIsCrouched: Bool;
	public var bProxyIsJumpForceApplied: Bool;
	public var bPressedJump: Bool;
	public var bClientUpdating: Bool;
	public var bClientWasFalling: Bool;
	public var bClientResimulateRootMotion: Bool;
	public var bClientResimulateRootMotionSources: Bool;
	public var bSimGravityDisabled: Bool;
	public var bClientCheckEncroachmentOnNetUpdate: Bool;
	public var bServerMoveIgnoreRootMotion: Bool;
	public var bWasJumping: Bool;
	public var JumpKeyHoldTime: ucpp.num.Float32;
	public var JumpForceTimeRemaining: ucpp.num.Float32;
	public var ProxyJumpForceStartedTime: ucpp.num.Float32;
	public var JumpMaxHoldTime: ucpp.num.Float32;
	public var JumpMaxCount: ucpp.num.Int32;
	public var JumpCurrentCount: ucpp.num.Int32;
	public var JumpCurrentCountPreJump: ucpp.num.Int32;
	public var OnReachedJumpApex: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var LandedDelegate: HaxeMulticastSparseDelegateProperty<(ucpp.Ref<HitResult>) -> Void>;
	public var MovementModeChangedDelegate: HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Character>, TEnumAsByte<EMovementMode>, ucpp.num.UInt8) -> Void>;
	public var OnCharacterMovementUpdated: HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32, Vector, Vector) -> Void>;
	public var SavedRootMotion: RootMotionSourceGroup;
	public var ClientRootMotionParams: RootMotionMovementParams;
	public var RootMotionRepMoves: TArray<SimulatedRootMotionReplicatedMove>;
	public var RepRootMotion: RepRootMotionMontage;

	public function UnCrouch(bClientSimulation: Bool): Void;
	public function StopJumping(): Void;
	public function StopAnimMontage(AnimMontage: ucpp.Ptr<AnimMontage>): Void;
	public function ServerMovePacked(PackedBits: CharacterServerMovePackedBits): Void;
	public function ServerMoveOld(OldTimeStamp: ucpp.num.Float32, OldAccel: Vector_NetQuantize10, OldMoveFlags: ucpp.num.UInt8): Void;
	public function ServerMoveNoBase(TimeStamp: ucpp.num.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, CompressedMoveFlags: ucpp.num.UInt8, ClientRoll: ucpp.num.UInt8, View: ucpp.num.UInt32, ClientMovementMode: ucpp.num.UInt8): Void;
	public function ServerMoveDualNoBase(TimeStamp0: ucpp.num.Float32, InAccel0: Vector_NetQuantize10, PendingFlags: ucpp.num.UInt8, View0: ucpp.num.UInt32, TimeStamp: ucpp.num.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: ucpp.num.UInt8, ClientRoll: ucpp.num.UInt8, View: ucpp.num.UInt32, ClientMovementMode: ucpp.num.UInt8): Void;
	public function ServerMoveDualHybridRootMotion(TimeStamp0: ucpp.num.Float32, InAccel0: Vector_NetQuantize10, PendingFlags: ucpp.num.UInt8, View0: ucpp.num.UInt32, TimeStamp: ucpp.num.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: ucpp.num.UInt8, ClientRoll: ucpp.num.UInt8, View: ucpp.num.UInt32, ClientMovementBase: ucpp.Ptr<PrimitiveComp>, ClientBaseBoneName: FName, ClientMovementMode: ucpp.num.UInt8): Void;
	public function ServerMoveDual(TimeStamp0: ucpp.num.Float32, InAccel0: Vector_NetQuantize10, PendingFlags: ucpp.num.UInt8, View0: ucpp.num.UInt32, TimeStamp: ucpp.num.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, NewFlags: ucpp.num.UInt8, ClientRoll: ucpp.num.UInt8, View: ucpp.num.UInt32, ClientMovementBase: ucpp.Ptr<PrimitiveComp>, ClientBaseBoneName: FName, ClientMovementMode: ucpp.num.UInt8): Void;
	public function ServerMove(TimeStamp: ucpp.num.Float32, InAccel: Vector_NetQuantize10, ClientLoc: Vector_NetQuantize100, CompressedMoveFlags: ucpp.num.UInt8, ClientRoll: ucpp.num.UInt8, View: ucpp.num.UInt32, ClientMovementBase: ucpp.Ptr<PrimitiveComp>, ClientBaseBoneName: FName, ClientMovementMode: ucpp.num.UInt8): Void;
	public function RootMotionDebugClientPrintOnScreen(InString: FString): Void;
	public function PlayAnimMontage(AnimMontage: ucpp.Ptr<AnimMontage>, InPlayRate: ucpp.num.Float32, StartSectionName: FName): ucpp.num.Float32;
	public function OnWalkingOffLedge(PreviousFloorImpactNormal: ucpp.Ref<Vector>, PreviousFloorContactNormal: ucpp.Ref<Vector>, PreviousLocation: ucpp.Ref<Vector>, TimeDelta: ucpp.num.Float32): Void;
	public function OnRep_RootMotion(): Void;
	public function OnRep_ReplicatedBasedMovement(): Void;
	public function OnRep_ReplayLastTransformUpdateTimeStamp(): Void;
	public function OnRep_IsCrouched(): Void;
	public function OnLaunched(LaunchVelocity: Vector, bXYOverride: Bool, bZOverride: Bool): Void;
	public function OnLanded(Hit: ucpp.Ref<HitResult>): Void;
	public function OnJumped(): Void;
	public function LaunchCharacter(LaunchVelocity: Vector, bXYOverride: Bool, bZOverride: Bool): Void;
	public function K2_UpdateCustomMovement(DeltaTime: ucpp.num.Float32): Void;
	public function K2_OnStartCrouch(HalfHeightAdjust: ucpp.num.Float32, ScaledHalfHeightAdjust: ucpp.num.Float32): Void;
	public function K2_OnMovementModeChanged(PrevMovementMode: TEnumAsByte<EMovementMode>, NewMovementMode: TEnumAsByte<EMovementMode>, PrevCustomMode: ucpp.num.UInt8, NewCustomMode: ucpp.num.UInt8): Void;
	public function K2_OnEndCrouch(HalfHeightAdjust: ucpp.num.Float32, ScaledHalfHeightAdjust: ucpp.num.Float32): Void;
	public function Jump(): Void;
	public function IsPlayingRootMotion(): Bool;
	public function IsPlayingNetworkedRootMotionMontage(): Bool;
	public function IsJumpProvidingForce(): Bool;
	public function HasAnyRootMotion(): Bool;
	public function GetCurrentMontage(): ucpp.Ptr<AnimMontage>;
	public function GetBaseTranslationOffset(): Vector;
	public function GetBaseRotationOffsetRotator(): Rotator;
	public function GetAnimRootMotionTranslationScale(): ucpp.num.Float32;
	public function Crouch(bClientSimulation: Bool): Void;
	public function ClientVeryShortAdjustPosition(TimeStamp: ucpp.num.Float32, NewLoc: Vector, NewBase: ucpp.Ptr<PrimitiveComp>, NewBaseBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: ucpp.num.UInt8): Void;
	public function ClientMoveResponsePacked(PackedBits: CharacterMoveResponsePackedBits): Void;
	public function ClientCheatWalk(): Void;
	public function ClientCheatGhost(): Void;
	public function ClientCheatFly(): Void;
	public function ClientAdjustRootMotionSourcePosition(TimeStamp: ucpp.num.Float32, ServerRootMotion: RootMotionSourceGroup, bHasAnimRootMotion: Bool, ServerMontageTrackPosition: ucpp.num.Float32, ServerLoc: Vector, ServerRotation: Vector_NetQuantizeNormal, ServerVelZ: ucpp.num.Float32, ServerBase: ucpp.Ptr<PrimitiveComp>, ServerBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: ucpp.num.UInt8): Void;
	public function ClientAdjustRootMotionPosition(TimeStamp: ucpp.num.Float32, ServerMontageTrackPosition: ucpp.num.Float32, ServerLoc: Vector, ServerRotation: Vector_NetQuantizeNormal, ServerVelZ: ucpp.num.Float32, ServerBase: ucpp.Ptr<PrimitiveComp>, ServerBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: ucpp.num.UInt8): Void;
	public function ClientAdjustPosition(TimeStamp: ucpp.num.Float32, NewLoc: Vector, NewVel: Vector, NewBase: ucpp.Ptr<PrimitiveComp>, NewBaseBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: ucpp.num.UInt8): Void;
	public function ClientAckGoodMove(TimeStamp: ucpp.num.Float32): Void;
	@:protected public function CanJumpInternal(): Bool;
	public function CanJump(): Bool;
	public function CanCrouch(): Bool;
	public function CacheInitialMeshOffset(MeshRelativeLocation: Vector, MeshRelativeRotation: Rotator): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	IsPlayingRootMotion, IsPlayingNetworkedRootMotionMontage, IsJumpProvidingForce, HasAnyRootMotion, GetCurrentMontage,
	GetBaseTranslationOffset, GetBaseRotationOffsetRotator, GetAnimRootMotionTranslationScale, CanJumpInternal, CanJump,
	CanCrouch
)
@:nativeGen
abstract ConstCharacter(Character) from Character {
	public extern var CrouchedEyeHeight(get, never): ucpp.num.Float32;
	public inline extern function get_CrouchedEyeHeight(): ucpp.num.Float32 return this.CrouchedEyeHeight;
	public extern var bIsCrouched(get, never): Bool;
	public inline extern function get_bIsCrouched(): Bool return this.bIsCrouched;
	public extern var bProxyIsJumpForceApplied(get, never): Bool;
	public inline extern function get_bProxyIsJumpForceApplied(): Bool return this.bProxyIsJumpForceApplied;
	public extern var bPressedJump(get, never): Bool;
	public inline extern function get_bPressedJump(): Bool return this.bPressedJump;
	public extern var bClientUpdating(get, never): Bool;
	public inline extern function get_bClientUpdating(): Bool return this.bClientUpdating;
	public extern var bClientWasFalling(get, never): Bool;
	public inline extern function get_bClientWasFalling(): Bool return this.bClientWasFalling;
	public extern var bClientResimulateRootMotion(get, never): Bool;
	public inline extern function get_bClientResimulateRootMotion(): Bool return this.bClientResimulateRootMotion;
	public extern var bClientResimulateRootMotionSources(get, never): Bool;
	public inline extern function get_bClientResimulateRootMotionSources(): Bool return this.bClientResimulateRootMotionSources;
	public extern var bSimGravityDisabled(get, never): Bool;
	public inline extern function get_bSimGravityDisabled(): Bool return this.bSimGravityDisabled;
	public extern var bClientCheckEncroachmentOnNetUpdate(get, never): Bool;
	public inline extern function get_bClientCheckEncroachmentOnNetUpdate(): Bool return this.bClientCheckEncroachmentOnNetUpdate;
	public extern var bServerMoveIgnoreRootMotion(get, never): Bool;
	public inline extern function get_bServerMoveIgnoreRootMotion(): Bool return this.bServerMoveIgnoreRootMotion;
	public extern var bWasJumping(get, never): Bool;
	public inline extern function get_bWasJumping(): Bool return this.bWasJumping;
	public extern var JumpKeyHoldTime(get, never): ucpp.num.Float32;
	public inline extern function get_JumpKeyHoldTime(): ucpp.num.Float32 return this.JumpKeyHoldTime;
	public extern var JumpForceTimeRemaining(get, never): ucpp.num.Float32;
	public inline extern function get_JumpForceTimeRemaining(): ucpp.num.Float32 return this.JumpForceTimeRemaining;
	public extern var ProxyJumpForceStartedTime(get, never): ucpp.num.Float32;
	public inline extern function get_ProxyJumpForceStartedTime(): ucpp.num.Float32 return this.ProxyJumpForceStartedTime;
	public extern var JumpMaxHoldTime(get, never): ucpp.num.Float32;
	public inline extern function get_JumpMaxHoldTime(): ucpp.num.Float32 return this.JumpMaxHoldTime;
	public extern var JumpMaxCount(get, never): ucpp.num.Int32;
	public inline extern function get_JumpMaxCount(): ucpp.num.Int32 return this.JumpMaxCount;
	public extern var JumpCurrentCount(get, never): ucpp.num.Int32;
	public inline extern function get_JumpCurrentCount(): ucpp.num.Int32 return this.JumpCurrentCount;
	public extern var JumpCurrentCountPreJump(get, never): ucpp.num.Int32;
	public inline extern function get_JumpCurrentCountPreJump(): ucpp.num.Int32 return this.JumpCurrentCountPreJump;
	public extern var OnReachedJumpApex(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnReachedJumpApex(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnReachedJumpApex;
	public extern var LandedDelegate(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<HitResult>) -> Void>;
	public inline extern function get_LandedDelegate(): HaxeMulticastSparseDelegateProperty<(ucpp.Ref<HitResult>) -> Void> return this.LandedDelegate;
	public extern var MovementModeChangedDelegate(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Character.ConstCharacter>, TEnumAsByte<EMovementMode>, ucpp.num.UInt8) -> Void>;
	public inline extern function get_MovementModeChangedDelegate(): HaxeMulticastSparseDelegateProperty<(ucpp.Ptr<Character.ConstCharacter>, TEnumAsByte<EMovementMode>, ucpp.num.UInt8) -> Void> return this.MovementModeChangedDelegate;
	public extern var OnCharacterMovementUpdated(get, never): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32, Vector, Vector) -> Void>;
	public inline extern function get_OnCharacterMovementUpdated(): HaxeMulticastSparseDelegateProperty<(ucpp.num.Float32, Vector, Vector) -> Void> return this.OnCharacterMovementUpdated;
	public extern var SavedRootMotion(get, never): RootMotionSourceGroup;
	public inline extern function get_SavedRootMotion(): RootMotionSourceGroup return this.SavedRootMotion;
	public extern var ClientRootMotionParams(get, never): RootMotionMovementParams;
	public inline extern function get_ClientRootMotionParams(): RootMotionMovementParams return this.ClientRootMotionParams;
	public extern var RootMotionRepMoves(get, never): TArray<SimulatedRootMotionReplicatedMove>;
	public inline extern function get_RootMotionRepMoves(): TArray<SimulatedRootMotionReplicatedMove> return this.RootMotionRepMoves;
	public extern var RepRootMotion(get, never): RepRootMotionMontage;
	public inline extern function get_RepRootMotion(): RepRootMotionMontage return this.RepRootMotion;
}

@:forward
@:nativeGen
@:native("Character*")
abstract CharacterPtr(ucpp.Ptr<Character>) from ucpp.Ptr<Character> to ucpp.Ptr<Character>{
	@:from
	public static extern inline function fromValue(v: Character): CharacterPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Character {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}