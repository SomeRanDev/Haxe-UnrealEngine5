// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AGameNetworkManager")
@:include("GameFramework/GameNetworkManager.h")
@:valueType
extern class GameNetworkManager extends Info {
	public var BadPacketLossThreshold: ucpp.num.Float32;
	public var SeverePacketLossThreshold: ucpp.num.Float32;
	public var BadPingThreshold: ucpp.num.Int32;
	public var SeverePingThreshold: ucpp.num.Int32;
	public var AdjustedNetSpeed: ucpp.num.Int32;
	public var LastNetSpeedUpdateTime: ucpp.num.Float32;
	public var TotalNetBandwidth: ucpp.num.Int32;
	public var MinDynamicBandwidth: ucpp.num.Int32;
	public var MaxDynamicBandwidth: ucpp.num.Int32;
	public var bIsStandbyCheckingEnabled: Bool;
	public var bHasStandbyCheatTriggered: Bool;
	public var StandbyRxCheatTime: ucpp.num.Float32;
	public var StandbyTxCheatTime: ucpp.num.Float32;
	public var PercentMissingForRxStandby: ucpp.num.Float32;
	public var PercentMissingForTxStandby: ucpp.num.Float32;
	public var PercentForBadPing: ucpp.num.Float32;
	public var JoinInProgressStandbyWaitTime: ucpp.num.Float32;
	public var MoveRepSize: ucpp.num.Float32;
	public var MAXPOSITIONERRORSQUARED: ucpp.num.Float32;
	public var MAXNEARZEROVELOCITYSQUARED: ucpp.num.Float32;
	public var CLIENTADJUSTUPDATECOST: ucpp.num.Float32;
	public var MAXCLIENTUPDATEINTERVAL: ucpp.num.Float32;
	public var MaxClientForcedUpdateDuration: ucpp.num.Float32;
	public var ServerForcedUpdateHitchThreshold: ucpp.num.Float32;
	public var ServerForcedUpdateHitchCooldown: ucpp.num.Float32;
	public var MaxMoveDeltaTime: ucpp.num.Float32;
	public var MaxClientSmoothingDeltaTime: ucpp.num.Float32;
	public var ClientNetSendMoveDeltaTime: ucpp.num.Float32;
	public var ClientNetSendMoveDeltaTimeThrottled: ucpp.num.Float32;
	public var ClientNetSendMoveDeltaTimeStationary: ucpp.num.Float32;
	public var ClientNetSendMoveThrottleAtNetSpeed: ucpp.num.Int32;
	public var ClientNetSendMoveThrottleOverPlayerCount: ucpp.num.Int32;
	public var ClientErrorUpdateRateLimit: ucpp.num.Float32;
	public var ClientNetCamUpdateDeltaTime: ucpp.num.Float32;
	public var ClientNetCamUpdatePositionLimit: ucpp.num.Float32;
	public var ClientAuthorativePosition: Bool;
	public var bMovementTimeDiscrepancyDetection: Bool;
	public var bMovementTimeDiscrepancyResolution: Bool;
	public var MovementTimeDiscrepancyMaxTimeMargin: ucpp.num.Float32;
	public var MovementTimeDiscrepancyMinTimeMargin: ucpp.num.Float32;
	public var MovementTimeDiscrepancyResolutionRate: ucpp.num.Float32;
	public var MovementTimeDiscrepancyDriftAllowance: ucpp.num.Float32;
	public var bMovementTimeDiscrepancyForceCorrectionsDuringResolution: Bool;
	public var bUseDistanceBasedRelevancy: Bool;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstGameNetworkManager(GameNetworkManager) from GameNetworkManager {
	public extern var BadPacketLossThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_BadPacketLossThreshold(): ucpp.num.Float32 return this.BadPacketLossThreshold;
	public extern var SeverePacketLossThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_SeverePacketLossThreshold(): ucpp.num.Float32 return this.SeverePacketLossThreshold;
	public extern var BadPingThreshold(get, never): ucpp.num.Int32;
	public inline extern function get_BadPingThreshold(): ucpp.num.Int32 return this.BadPingThreshold;
	public extern var SeverePingThreshold(get, never): ucpp.num.Int32;
	public inline extern function get_SeverePingThreshold(): ucpp.num.Int32 return this.SeverePingThreshold;
	public extern var AdjustedNetSpeed(get, never): ucpp.num.Int32;
	public inline extern function get_AdjustedNetSpeed(): ucpp.num.Int32 return this.AdjustedNetSpeed;
	public extern var LastNetSpeedUpdateTime(get, never): ucpp.num.Float32;
	public inline extern function get_LastNetSpeedUpdateTime(): ucpp.num.Float32 return this.LastNetSpeedUpdateTime;
	public extern var TotalNetBandwidth(get, never): ucpp.num.Int32;
	public inline extern function get_TotalNetBandwidth(): ucpp.num.Int32 return this.TotalNetBandwidth;
	public extern var MinDynamicBandwidth(get, never): ucpp.num.Int32;
	public inline extern function get_MinDynamicBandwidth(): ucpp.num.Int32 return this.MinDynamicBandwidth;
	public extern var MaxDynamicBandwidth(get, never): ucpp.num.Int32;
	public inline extern function get_MaxDynamicBandwidth(): ucpp.num.Int32 return this.MaxDynamicBandwidth;
	public extern var bIsStandbyCheckingEnabled(get, never): Bool;
	public inline extern function get_bIsStandbyCheckingEnabled(): Bool return this.bIsStandbyCheckingEnabled;
	public extern var bHasStandbyCheatTriggered(get, never): Bool;
	public inline extern function get_bHasStandbyCheatTriggered(): Bool return this.bHasStandbyCheatTriggered;
	public extern var StandbyRxCheatTime(get, never): ucpp.num.Float32;
	public inline extern function get_StandbyRxCheatTime(): ucpp.num.Float32 return this.StandbyRxCheatTime;
	public extern var StandbyTxCheatTime(get, never): ucpp.num.Float32;
	public inline extern function get_StandbyTxCheatTime(): ucpp.num.Float32 return this.StandbyTxCheatTime;
	public extern var PercentMissingForRxStandby(get, never): ucpp.num.Float32;
	public inline extern function get_PercentMissingForRxStandby(): ucpp.num.Float32 return this.PercentMissingForRxStandby;
	public extern var PercentMissingForTxStandby(get, never): ucpp.num.Float32;
	public inline extern function get_PercentMissingForTxStandby(): ucpp.num.Float32 return this.PercentMissingForTxStandby;
	public extern var PercentForBadPing(get, never): ucpp.num.Float32;
	public inline extern function get_PercentForBadPing(): ucpp.num.Float32 return this.PercentForBadPing;
	public extern var JoinInProgressStandbyWaitTime(get, never): ucpp.num.Float32;
	public inline extern function get_JoinInProgressStandbyWaitTime(): ucpp.num.Float32 return this.JoinInProgressStandbyWaitTime;
	public extern var MoveRepSize(get, never): ucpp.num.Float32;
	public inline extern function get_MoveRepSize(): ucpp.num.Float32 return this.MoveRepSize;
	public extern var MAXPOSITIONERRORSQUARED(get, never): ucpp.num.Float32;
	public inline extern function get_MAXPOSITIONERRORSQUARED(): ucpp.num.Float32 return this.MAXPOSITIONERRORSQUARED;
	public extern var MAXNEARZEROVELOCITYSQUARED(get, never): ucpp.num.Float32;
	public inline extern function get_MAXNEARZEROVELOCITYSQUARED(): ucpp.num.Float32 return this.MAXNEARZEROVELOCITYSQUARED;
	public extern var CLIENTADJUSTUPDATECOST(get, never): ucpp.num.Float32;
	public inline extern function get_CLIENTADJUSTUPDATECOST(): ucpp.num.Float32 return this.CLIENTADJUSTUPDATECOST;
	public extern var MAXCLIENTUPDATEINTERVAL(get, never): ucpp.num.Float32;
	public inline extern function get_MAXCLIENTUPDATEINTERVAL(): ucpp.num.Float32 return this.MAXCLIENTUPDATEINTERVAL;
	public extern var MaxClientForcedUpdateDuration(get, never): ucpp.num.Float32;
	public inline extern function get_MaxClientForcedUpdateDuration(): ucpp.num.Float32 return this.MaxClientForcedUpdateDuration;
	public extern var ServerForcedUpdateHitchThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_ServerForcedUpdateHitchThreshold(): ucpp.num.Float32 return this.ServerForcedUpdateHitchThreshold;
	public extern var ServerForcedUpdateHitchCooldown(get, never): ucpp.num.Float32;
	public inline extern function get_ServerForcedUpdateHitchCooldown(): ucpp.num.Float32 return this.ServerForcedUpdateHitchCooldown;
	public extern var MaxMoveDeltaTime(get, never): ucpp.num.Float32;
	public inline extern function get_MaxMoveDeltaTime(): ucpp.num.Float32 return this.MaxMoveDeltaTime;
	public extern var MaxClientSmoothingDeltaTime(get, never): ucpp.num.Float32;
	public inline extern function get_MaxClientSmoothingDeltaTime(): ucpp.num.Float32 return this.MaxClientSmoothingDeltaTime;
	public extern var ClientNetSendMoveDeltaTime(get, never): ucpp.num.Float32;
	public inline extern function get_ClientNetSendMoveDeltaTime(): ucpp.num.Float32 return this.ClientNetSendMoveDeltaTime;
	public extern var ClientNetSendMoveDeltaTimeThrottled(get, never): ucpp.num.Float32;
	public inline extern function get_ClientNetSendMoveDeltaTimeThrottled(): ucpp.num.Float32 return this.ClientNetSendMoveDeltaTimeThrottled;
	public extern var ClientNetSendMoveDeltaTimeStationary(get, never): ucpp.num.Float32;
	public inline extern function get_ClientNetSendMoveDeltaTimeStationary(): ucpp.num.Float32 return this.ClientNetSendMoveDeltaTimeStationary;
	public extern var ClientNetSendMoveThrottleAtNetSpeed(get, never): ucpp.num.Int32;
	public inline extern function get_ClientNetSendMoveThrottleAtNetSpeed(): ucpp.num.Int32 return this.ClientNetSendMoveThrottleAtNetSpeed;
	public extern var ClientNetSendMoveThrottleOverPlayerCount(get, never): ucpp.num.Int32;
	public inline extern function get_ClientNetSendMoveThrottleOverPlayerCount(): ucpp.num.Int32 return this.ClientNetSendMoveThrottleOverPlayerCount;
	public extern var ClientErrorUpdateRateLimit(get, never): ucpp.num.Float32;
	public inline extern function get_ClientErrorUpdateRateLimit(): ucpp.num.Float32 return this.ClientErrorUpdateRateLimit;
	public extern var ClientNetCamUpdateDeltaTime(get, never): ucpp.num.Float32;
	public inline extern function get_ClientNetCamUpdateDeltaTime(): ucpp.num.Float32 return this.ClientNetCamUpdateDeltaTime;
	public extern var ClientNetCamUpdatePositionLimit(get, never): ucpp.num.Float32;
	public inline extern function get_ClientNetCamUpdatePositionLimit(): ucpp.num.Float32 return this.ClientNetCamUpdatePositionLimit;
	public extern var ClientAuthorativePosition(get, never): Bool;
	public inline extern function get_ClientAuthorativePosition(): Bool return this.ClientAuthorativePosition;
	public extern var bMovementTimeDiscrepancyDetection(get, never): Bool;
	public inline extern function get_bMovementTimeDiscrepancyDetection(): Bool return this.bMovementTimeDiscrepancyDetection;
	public extern var bMovementTimeDiscrepancyResolution(get, never): Bool;
	public inline extern function get_bMovementTimeDiscrepancyResolution(): Bool return this.bMovementTimeDiscrepancyResolution;
	public extern var MovementTimeDiscrepancyMaxTimeMargin(get, never): ucpp.num.Float32;
	public inline extern function get_MovementTimeDiscrepancyMaxTimeMargin(): ucpp.num.Float32 return this.MovementTimeDiscrepancyMaxTimeMargin;
	public extern var MovementTimeDiscrepancyMinTimeMargin(get, never): ucpp.num.Float32;
	public inline extern function get_MovementTimeDiscrepancyMinTimeMargin(): ucpp.num.Float32 return this.MovementTimeDiscrepancyMinTimeMargin;
	public extern var MovementTimeDiscrepancyResolutionRate(get, never): ucpp.num.Float32;
	public inline extern function get_MovementTimeDiscrepancyResolutionRate(): ucpp.num.Float32 return this.MovementTimeDiscrepancyResolutionRate;
	public extern var MovementTimeDiscrepancyDriftAllowance(get, never): ucpp.num.Float32;
	public inline extern function get_MovementTimeDiscrepancyDriftAllowance(): ucpp.num.Float32 return this.MovementTimeDiscrepancyDriftAllowance;
	public extern var bMovementTimeDiscrepancyForceCorrectionsDuringResolution(get, never): Bool;
	public inline extern function get_bMovementTimeDiscrepancyForceCorrectionsDuringResolution(): Bool return this.bMovementTimeDiscrepancyForceCorrectionsDuringResolution;
	public extern var bUseDistanceBasedRelevancy(get, never): Bool;
	public inline extern function get_bUseDistanceBasedRelevancy(): Bool return this.bUseDistanceBasedRelevancy;
}

@:forward
@:nativeGen
@:native("GameNetworkManager*")
abstract GameNetworkManagerPtr(ucpp.Ptr<GameNetworkManager>) from ucpp.Ptr<GameNetworkManager> to ucpp.Ptr<GameNetworkManager>{
	@:from
	public static extern inline function fromValue(v: GameNetworkManager): GameNetworkManagerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GameNetworkManager {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}