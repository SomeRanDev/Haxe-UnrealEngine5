// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditorValidatorSubsystem")
@:include("EditorValidatorSubsystem.h")
@:structAccess
extern class EditorValidatorSubsystem extends EditorSubsystem {
	@:protected public var ExcludedDirectories: TArray<DirectoryPath>;
	@:protected public var bValidateOnSave: Bool;
	@:protected public var Validators: TMap<FString, cpp.Star<EditorValidatorBase>>;
	@:protected public var bValidateAssetsWhileSavingForCook: Bool;
	@:protected public var bAllowBlueprintValidators: Bool;

	public function ValidateAssetsWithSettings(AssetDataList: cpp.Reference<TArray<AssetData>>, InSettings: cpp.Reference<ValidateAssetsSettings>, OutResults: cpp.Reference<ValidateAssetsResults>): cpp.Int32;
	public function ValidateAssets(AssetDataList: TArray<AssetData>, bSkipExcludedDirectories: Bool, bShowIfNoFailures: Bool): cpp.Int32;
	public function IsObjectValid(InObject: cpp.Star<Object>, ValidationErrors: cpp.Reference<TArray<FText>>, ValidationWarnings: cpp.Reference<TArray<FText>>, InValidationUsecase: EDataValidationUsecase): EDataValidationResult;
	public function IsAssetValid(AssetData: cpp.Reference<AssetData>, ValidationErrors: cpp.Reference<TArray<FText>>, ValidationWarnings: cpp.Reference<TArray<FText>>, InValidationUsecase: EDataValidationUsecase): EDataValidationResult;
	public function AddValidator(InValidator: cpp.Star<EditorValidatorBase>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(ValidateAssetsWithSettings, ValidateAssets, IsObjectValid, IsAssetValid)
@:nativeGen
abstract ConstEditorValidatorSubsystem(EditorValidatorSubsystem) from EditorValidatorSubsystem {
}

@:forward
@:nativeGen
@:native("EditorValidatorSubsystem*")
abstract EditorValidatorSubsystemPtr(cpp.Star<EditorValidatorSubsystem>) from cpp.Star<EditorValidatorSubsystem> to cpp.Star<EditorValidatorSubsystem>{
	@:from
	public static extern inline function fromValue(v: EditorValidatorSubsystem): EditorValidatorSubsystemPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EditorValidatorSubsystem {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}