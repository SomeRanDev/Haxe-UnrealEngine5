// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlueprintGameplayTagLibrary")
@:include("BlueprintGameplayTagLibrary.h")
@:valueType
extern class BlueprintGameplayTagLibrary extends BlueprintFunctionLibrary {
	public function RemoveGameplayTag(TagContainer: ucpp.Ref<GameplayTagContainer>, Tag: GameplayTag): Bool;
	public function NotEqual_TagTag(A: GameplayTag, B: FString): Bool;
	public function NotEqual_TagContainerTagContainer(A: GameplayTagContainer, B: FString): Bool;
	public function NotEqual_GameplayTagContainer(A: ucpp.Ref<GameplayTagContainer>, B: ucpp.Ref<GameplayTagContainer>): Bool;
	public function NotEqual_GameplayTag(A: GameplayTag, B: GameplayTag): Bool;
	public function MatchesTag(TagOne: GameplayTag, TagTwo: GameplayTag, bExactMatch: Bool): Bool;
	public function MatchesAnyTags(TagOne: GameplayTag, OtherContainer: ucpp.Ref<GameplayTagContainer>, bExactMatch: Bool): Bool;
	public function MakeLiteralGameplayTagContainer(Value: GameplayTagContainer): GameplayTagContainer;
	public function MakeLiteralGameplayTag(Value: GameplayTag): GameplayTag;
	public function MakeGameplayTagQuery(TagQuery: GameplayTagQuery): GameplayTagQuery;
	public function MakeGameplayTagContainerFromTag(SingleTag: GameplayTag): GameplayTagContainer;
	public function MakeGameplayTagContainerFromArray(GameplayTags: ucpp.Ref<TArray<GameplayTag>>): GameplayTagContainer;
	public function IsTagQueryEmpty(TagQuery: ucpp.Ref<GameplayTagQuery>): Bool;
	public function IsGameplayTagValid(GameplayTag: GameplayTag): Bool;
	public function HasTag(TagContainer: ucpp.Ref<GameplayTagContainer>, Tag: GameplayTag, bExactMatch: Bool): Bool;
	public function HasAnyTags(TagContainer: ucpp.Ref<GameplayTagContainer>, OtherContainer: ucpp.Ref<GameplayTagContainer>, bExactMatch: Bool): Bool;
	public function HasAllTags(TagContainer: ucpp.Ref<GameplayTagContainer>, OtherContainer: ucpp.Ref<GameplayTagContainer>, bExactMatch: Bool): Bool;
	public function HasAllMatchingGameplayTags(TagContainerInterface: GameplayTagAssetInterface, OtherContainer: ucpp.Ref<GameplayTagContainer>): Bool;
	public function GetTagName(GameplayTag: ucpp.Ref<GameplayTag>): FName;
	public function GetNumGameplayTagsInContainer(TagContainer: ucpp.Ref<GameplayTagContainer>): ucpp.num.Int32;
	public function GetDebugStringFromGameplayTagContainer(TagContainer: ucpp.Ref<GameplayTagContainer>): FString;
	public function GetDebugStringFromGameplayTag(GameplayTag: GameplayTag): FString;
	public function GetAllActorsOfClassMatchingTagQuery(WorldContextObject: ucpp.Ptr<Object>, ActorClass: TSubclassOf<Actor>, GameplayTagQuery: ucpp.Ref<GameplayTagQuery>, OutActors: ucpp.Ref<TArray<ucpp.Ptr<Actor>>>): Void;
	public function EqualEqual_GameplayTagContainer(A: ucpp.Ref<GameplayTagContainer>, B: ucpp.Ref<GameplayTagContainer>): Bool;
	public function EqualEqual_GameplayTag(A: GameplayTag, B: GameplayTag): Bool;
	public function DoesTagAssetInterfaceHaveTag(TagContainerInterface: GameplayTagAssetInterface, Tag: GameplayTag): Bool;
	public function DoesContainerMatchTagQuery(TagContainer: ucpp.Ref<GameplayTagContainer>, TagQuery: ucpp.Ref<GameplayTagQuery>): Bool;
	public function BreakGameplayTagContainer(GameplayTagContainer: ucpp.Ref<GameplayTagContainer>, GameplayTags: ucpp.Ref<TArray<GameplayTag>>): Void;
	public function AppendGameplayTagContainers(InOutTagContainer: ucpp.Ref<GameplayTagContainer>, InTagContainer: ucpp.Ref<GameplayTagContainer>): Void;
	public function AddGameplayTag(TagContainer: ucpp.Ref<GameplayTagContainer>, Tag: GameplayTag): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstBlueprintGameplayTagLibrary(BlueprintGameplayTagLibrary) from BlueprintGameplayTagLibrary {
}

@:forward
@:nativeGen
@:native("BlueprintGameplayTagLibrary*")
abstract BlueprintGameplayTagLibraryPtr(ucpp.Ptr<BlueprintGameplayTagLibrary>) from ucpp.Ptr<BlueprintGameplayTagLibrary> to ucpp.Ptr<BlueprintGameplayTagLibrary>{
	@:from
	public static extern inline function fromValue(v: BlueprintGameplayTagLibrary): BlueprintGameplayTagLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): BlueprintGameplayTagLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}