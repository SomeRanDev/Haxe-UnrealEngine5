// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAudioRadialSlider")
@:include("AudioRadialSlider.h")
@:structAccess
extern class AudioRadialSlider extends Widget {
	public var Value: cpp.Float32;
	public var ValueDelegate: HaxeDelegateProperty<() -> Void>;
	public var WidgetLayout: TEnumAsByte<EAudioRadialSliderLayout>;
	public var CenterBackgroundColor: LinearColor;
	public var SliderProgressColor: LinearColor;
	public var SliderBarColor: LinearColor;
	public var HandStartEndRatio: Vector2D;
	public var UnitsText: FText;
	public var TextLabelBackgroundColor: LinearColor;
	public var ShowLabelOnlyOnHover: Bool;
	public var ShowUnitsText: Bool;
	public var IsUnitsTextReadOnly: Bool;
	public var IsValueTextReadOnly: Bool;
	public var SliderThickness: cpp.Float32;
	public var OutputRange: Vector2D;
	public var OnValueChanged: HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void>;

	public function SetWidgetLayout(InLayout: TEnumAsByte<EAudioRadialSliderLayout>): Void;
	public function SetValueTextReadOnly(bIsReadOnly: Bool): Void;
	public function SetUnitsTextReadOnly(bIsReadOnly: Bool): Void;
	public function SetUnitsText(Units: FText): Void;
	public function SetTextLabelBackgroundColor(InColor: SlateColor): Void;
	public function SetSliderThickness(InThickness: cpp.Float32): Void;
	public function SetSliderProgressColor(InValue: LinearColor): Void;
	public function SetSliderBarColor(InValue: LinearColor): Void;
	public function SetShowUnitsText(bShowUnitsText: Bool): Void;
	public function SetShowLabelOnlyOnHover(bShowLabelOnlyOnHover: Bool): Void;
	public function SetOutputRange(InOutputRange: Vector2D): Void;
	public function SetHandStartEndRatio(InHandStartEndRatio: Vector2D): Void;
	public function SetCenterBackgroundColor(InValue: LinearColor): Void;
	public function GetSliderValue(OutputValue: cpp.Float32): cpp.Float32;
	public function GetOutputValue(InSliderValue: cpp.Float32): cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAudioRadialSlider(AudioRadialSlider) from AudioRadialSlider {
	public extern var Value(get, never): cpp.Float32;
	public inline extern function get_Value(): cpp.Float32 return this.Value;
	public extern var ValueDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ValueDelegate(): HaxeDelegateProperty<() -> Void> return this.ValueDelegate;
	public extern var WidgetLayout(get, never): TEnumAsByte<EAudioRadialSliderLayout>;
	public inline extern function get_WidgetLayout(): TEnumAsByte<EAudioRadialSliderLayout> return this.WidgetLayout;
	public extern var CenterBackgroundColor(get, never): LinearColor;
	public inline extern function get_CenterBackgroundColor(): LinearColor return this.CenterBackgroundColor;
	public extern var SliderProgressColor(get, never): LinearColor;
	public inline extern function get_SliderProgressColor(): LinearColor return this.SliderProgressColor;
	public extern var SliderBarColor(get, never): LinearColor;
	public inline extern function get_SliderBarColor(): LinearColor return this.SliderBarColor;
	public extern var HandStartEndRatio(get, never): Vector2D;
	public inline extern function get_HandStartEndRatio(): Vector2D return this.HandStartEndRatio;
	public extern var UnitsText(get, never): FText;
	public inline extern function get_UnitsText(): FText return this.UnitsText;
	public extern var TextLabelBackgroundColor(get, never): LinearColor;
	public inline extern function get_TextLabelBackgroundColor(): LinearColor return this.TextLabelBackgroundColor;
	public extern var ShowLabelOnlyOnHover(get, never): Bool;
	public inline extern function get_ShowLabelOnlyOnHover(): Bool return this.ShowLabelOnlyOnHover;
	public extern var ShowUnitsText(get, never): Bool;
	public inline extern function get_ShowUnitsText(): Bool return this.ShowUnitsText;
	public extern var IsUnitsTextReadOnly(get, never): Bool;
	public inline extern function get_IsUnitsTextReadOnly(): Bool return this.IsUnitsTextReadOnly;
	public extern var IsValueTextReadOnly(get, never): Bool;
	public inline extern function get_IsValueTextReadOnly(): Bool return this.IsValueTextReadOnly;
	public extern var SliderThickness(get, never): cpp.Float32;
	public inline extern function get_SliderThickness(): cpp.Float32 return this.SliderThickness;
	public extern var OutputRange(get, never): Vector2D;
	public inline extern function get_OutputRange(): Vector2D return this.OutputRange;
	public extern var OnValueChanged(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void>;
	public inline extern function get_OnValueChanged(): HaxeMulticastSparseDelegateProperty<(cpp.Float32) -> Void> return this.OnValueChanged;
}

@:forward
@:nativeGen
@:native("AudioRadialSlider*")
abstract AudioRadialSliderPtr(cpp.Star<AudioRadialSlider>) from cpp.Star<AudioRadialSlider> to cpp.Star<AudioRadialSlider>{
	@:from
	public static extern inline function fromValue(v: AudioRadialSlider): AudioRadialSliderPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AudioRadialSlider {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}