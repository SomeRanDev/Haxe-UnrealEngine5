// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCharacterMovementComponent")
@:include("GameFramework/CharacterMovementComponent.h")
@:valueType
extern class CharacterMovementComp extends PawnMovementComp {
	@:protected public var CharacterOwner: ucpp.Ptr<Character>;
	public var GravityScale: ucpp.num.Float32;
	public var MaxStepHeight: ucpp.num.Float32;
	public var JumpZVelocity: ucpp.num.Float32;
	public var JumpOffJumpZFactor: ucpp.num.Float32;
	private var WalkableFloorAngle: ucpp.num.Float32;
	private var WalkableFloorZ: ucpp.num.Float32;
	public var MovementMode: TEnumAsByte<EMovementMode>;
	public var CustomMovementMode: ucpp.num.UInt8;
	public var NetworkSmoothingMode: ENetworkSmoothingMode;
	public var GroundFriction: ucpp.num.Float32;
	public var MaxWalkSpeed: ucpp.num.Float32;
	public var MaxWalkSpeedCrouched: ucpp.num.Float32;
	public var MaxSwimSpeed: ucpp.num.Float32;
	public var MaxFlySpeed: ucpp.num.Float32;
	public var MaxCustomMovementSpeed: ucpp.num.Float32;
	public var MaxAcceleration: ucpp.num.Float32;
	public var MinAnalogWalkSpeed: ucpp.num.Float32;
	public var BrakingFrictionFactor: ucpp.num.Float32;
	public var BrakingFriction: ucpp.num.Float32;
	public var BrakingSubStepTime: ucpp.num.Float32;
	public var BrakingDecelerationWalking: ucpp.num.Float32;
	public var BrakingDecelerationFalling: ucpp.num.Float32;
	public var BrakingDecelerationSwimming: ucpp.num.Float32;
	public var BrakingDecelerationFlying: ucpp.num.Float32;
	public var AirControl: ucpp.num.Float32;
	public var AirControlBoostMultiplier: ucpp.num.Float32;
	public var AirControlBoostVelocityThreshold: ucpp.num.Float32;
	public var FallingLateralFriction: ucpp.num.Float32;
	public function GetCrouchedHalfHeight(): ucpp.num.Float32;
	public function SetCrouchedHalfHeight(input: ucpp.num.Float32): Void;
	public var Buoyancy: ucpp.num.Float32;
	public var PerchRadiusThreshold: ucpp.num.Float32;
	public var PerchAdditionalHeight: ucpp.num.Float32;
	public var RotationRate: Rotator;
	public var bUseSeparateBrakingFriction: Bool;
	public var bApplyGravityWhileJumping: Bool;
	public var bUseControllerDesiredRotation: Bool;
	public var bOrientRotationToMovement: Bool;
	public var bSweepWhileNavWalking: Bool;
	@:protected public var bMovementInProgress: Bool;
	public var bEnableScopedMovementUpdates: Bool;
	public var bEnableServerDualMoveScopedMovementUpdates: Bool;
	public var bForceMaxAccel: Bool;
	public var bRunPhysicsWithNoController: Bool;
	public var bForceNextFloorCheck: Bool;
	public var bShrinkProxyCapsule: Bool;
	public var bCanWalkOffLedges: Bool;
	public var bCanWalkOffLedgesWhenCrouching: Bool;
	public var bNetworkSkipProxyPredictionOnNetUpdate: Bool;
	public var bNetworkAlwaysReplicateTransformUpdateTimestamp: Bool;
	public var bDeferUpdateMoveComponent: Bool;
	public var bEnablePhysicsInteraction: Bool;
	public var bTouchForceScaledToMass: Bool;
	public var bPushForceScaledToMass: Bool;
	public var bPushForceUsingZOffset: Bool;
	public var bScalePushForceToVelocity: Bool;
	public var DeferredUpdatedMoveComponent: ucpp.Ptr<SceneComp>;
	public var MaxOutOfWaterStepHeight: ucpp.num.Float32;
	public var OutofWaterZ: ucpp.num.Float32;
	public var Mass: ucpp.num.Float32;
	public var StandingDownwardForceScale: ucpp.num.Float32;
	public var InitialPushForceFactor: ucpp.num.Float32;
	public var PushForceFactor: ucpp.num.Float32;
	public var PushForcePointZOffsetFactor: ucpp.num.Float32;
	public var TouchForceFactor: ucpp.num.Float32;
	public var MinTouchForce: ucpp.num.Float32;
	public var MaxTouchForce: ucpp.num.Float32;
	public var RepulsionForce: ucpp.num.Float32;
	@:protected public var Acceleration: Vector;
	@:protected public var LastUpdateRotation: Quat;
	@:protected public var LastUpdateLocation: Vector;
	@:protected public var LastUpdateVelocity: Vector;
	@:protected public var ServerLastTransformUpdateTimeStamp: ucpp.num.Float32;
	@:protected public var ServerLastClientGoodMoveAckTime: ucpp.num.Float32;
	@:protected public var ServerLastClientAdjustmentTime: ucpp.num.Float32;
	@:protected public var PendingImpulseToApply: Vector;
	@:protected public var PendingForceToApply: Vector;
	@:protected public var AnalogInputModifier: ucpp.num.Float32;
	public var MaxSimulationTimeStep: ucpp.num.Float32;
	public var MaxSimulationIterations: ucpp.num.Int32;
	public var MaxJumpApexAttemptsPerSimulation: ucpp.num.Int32;
	public var MaxDepenetrationWithGeometry: ucpp.num.Float32;
	public var MaxDepenetrationWithGeometryAsProxy: ucpp.num.Float32;
	public var MaxDepenetrationWithPawn: ucpp.num.Float32;
	public var MaxDepenetrationWithPawnAsProxy: ucpp.num.Float32;
	public var NetworkSimulatedSmoothLocationTime: ucpp.num.Float32;
	public var NetworkSimulatedSmoothRotationTime: ucpp.num.Float32;
	public var ListenServerNetworkSimulatedSmoothLocationTime: ucpp.num.Float32;
	public var ListenServerNetworkSimulatedSmoothRotationTime: ucpp.num.Float32;
	public var NetProxyShrinkRadius: ucpp.num.Float32;
	public var NetProxyShrinkHalfHeight: ucpp.num.Float32;
	public var NetworkMaxSmoothUpdateDistance: ucpp.num.Float32;
	public var NetworkNoSmoothUpdateDistance: ucpp.num.Float32;
	public var NetworkMinTimeBetweenClientAckGoodMoves: ucpp.num.Float32;
	public var NetworkMinTimeBetweenClientAdjustments: ucpp.num.Float32;
	public var NetworkMinTimeBetweenClientAdjustmentsLargeCorrection: ucpp.num.Float32;
	public var NetworkLargeClientCorrectionDistance: ucpp.num.Float32;
	public var LedgeCheckThreshold: ucpp.num.Float32;
	public var JumpOutOfWaterPitch: ucpp.num.Float32;
	public var CurrentFloor: FindFloorResult;
	public var DefaultLandMovementMode: TEnumAsByte<EMovementMode>;
	public var DefaultWaterMovementMode: TEnumAsByte<EMovementMode>;
	private var GroundMovementMode: TEnumAsByte<EMovementMode>;
	public var bMaintainHorizontalGroundVelocity: Bool;
	public var bImpartBaseVelocityX: Bool;
	public var bImpartBaseVelocityY: Bool;
	public var bImpartBaseVelocityZ: Bool;
	public var bImpartBaseAngularVelocity: Bool;
	public var bJustTeleported: Bool;
	public var bNetworkUpdateReceived: Bool;
	public var bNetworkMovementModeChanged: Bool;
	public var bIgnoreClientMovementErrorChecksAndCorrection: Bool;
	public var bServerAcceptClientAuthoritativePosition: Bool;
	public var bNotifyApex: Bool;
	public var bCheatFlying: Bool;
	public var bWantsToCrouch: Bool;
	public var bCrouchMaintainsBaseLocation: Bool;
	public var bIgnoreBaseRotation: Bool;
	public var bFastAttachedMove: Bool;
	public var bAlwaysCheckFloor: Bool;
	public var bUseFlatBaseForFloorChecks: Bool;
	public var bPerformingJumpOff: Bool;
	public var bWantsToLeaveNavWalking: Bool;
	public var bUseRVOAvoidance: Bool;
	public var bRequestedMoveUseAcceleration: Bool;
	public var bWasSimulatingRootMotion: Bool;
	public var bAllowPhysicsRotationDuringAnimRootMotion: Bool;
	public var FormerBaseVelocityDecayHalfLife: ucpp.num.Float32;
	@:protected public var bHasRequestedVelocity: Bool;
	@:protected public var bRequestedMoveWithMaxSpeed: Bool;
	@:protected public var bWasAvoidanceUpdated: Bool;
	@:protected public var bProjectNavMeshWalking: Bool;
	@:protected public var bProjectNavMeshOnBothWorldChannels: Bool;
	public var AvoidanceConsiderationRadius: ucpp.num.Float32;
	public var RequestedVelocity: Vector;
	public var LastUpdateRequestedVelocity: Vector;
	public var AvoidanceUID: ucpp.num.Int32;
	public var AvoidanceGroup: NavAvoidanceMask;
	public var GroupsToAvoid: NavAvoidanceMask;
	public var GroupsToIgnore: NavAvoidanceMask;
	public var AvoidanceWeight: ucpp.num.Float32;
	public var PendingLaunchVelocity: Vector;
	public var NavMeshProjectionInterval: ucpp.num.Float32;
	public var NavMeshProjectionTimer: ucpp.num.Float32;
	public var NavMeshProjectionInterpSpeed: ucpp.num.Float32;
	public var NavMeshProjectionHeightScaleUp: ucpp.num.Float32;
	public var NavMeshProjectionHeightScaleDown: ucpp.num.Float32;
	public var NavWalkingFloorDistTolerance: ucpp.num.Float32;
	public var PostPhysicsTickFunction: CharacterMovementComponentPostPhysicsTickFunction;
	public var MinTimeBetweenTimeStampResets: ucpp.num.Float32;
	public var CurrentRootMotion: RootMotionSourceGroup;
	public var ServerCorrectionRootMotion: RootMotionSourceGroup;
	public var RootMotionParams: RootMotionMovementParams;
	public var AnimRootMotionVelocity: Vector;

	public function SetWalkableFloorZ(InWalkableFloorZ: ucpp.num.Float32): Void;
	public function SetWalkableFloorAngle(InWalkableFloorAngle: ucpp.num.Float32): Void;
	public function SetMovementMode(NewMovementMode: TEnumAsByte<EMovementMode>, NewCustomMode: ucpp.num.UInt8): Void;
	public function SetGroupsToIgnoreMask(GroupMask: ucpp.Ref<NavAvoidanceMask>): Void;
	public function SetGroupsToIgnore(GroupFlags: ucpp.num.Int32): Void;
	public function SetGroupsToAvoidMask(GroupMask: ucpp.Ref<NavAvoidanceMask>): Void;
	public function SetGroupsToAvoid(GroupFlags: ucpp.num.Int32): Void;
	public function SetAvoidanceGroupMask(GroupMask: ucpp.Ref<NavAvoidanceMask>): Void;
	public function SetAvoidanceGroup(GroupFlags: ucpp.num.Int32): Void;
	public function SetAvoidanceEnabled(bEnable: Bool): Void;
	public function K2_GetWalkableFloorZ(): ucpp.num.Float32;
	public function K2_GetWalkableFloorAngle(): ucpp.num.Float32;
	public function K2_FindFloor(CapsuleLocation: Vector, FloorResult: ucpp.Ref<FindFloorResult>): Void;
	public function K2_ComputeFloorDist(CapsuleLocation: Vector, LineDistance: ucpp.num.Float32, SweepDistance: ucpp.num.Float32, SweepRadius: ucpp.num.Float32, FloorResult: ucpp.Ref<FindFloorResult>): Void;
	public function IsWalking(): Bool;
	public function IsWalkable(Hit: ucpp.Ref<HitResult>): Bool;
	public function GetValidPerchRadius(): ucpp.num.Float32;
	public function GetPerchRadiusThreshold(): ucpp.num.Float32;
	public function GetMovementBase(): ucpp.Ptr<PrimitiveComp>;
	public function GetMinAnalogSpeed(): ucpp.num.Float32;
	public function GetMaxJumpHeightWithJumpTime(): ucpp.num.Float32;
	public function GetMaxJumpHeight(): ucpp.num.Float32;
	public function GetMaxBrakingDeceleration(): ucpp.num.Float32;
	public function GetMaxAcceleration(): ucpp.num.Float32;
	public function GetLastUpdateVelocity(): Vector;
	public function GetLastUpdateRotation(): Rotator;
	public function GetLastUpdateRequestedVelocity(): Vector;
	public function GetLastUpdateLocation(): Vector;
	public function GetImpartedMovementBaseVelocity(): Vector;
	public function GetCurrentAcceleration(): Vector;
	public function GetCharacterOwner(): ucpp.Ptr<Character>;
	public function GetAnalogInputModifier(): ucpp.num.Float32;
	public function DisableMovement(): Void;
	public function ClearAccumulatedForces(): Void;
	@:protected public function CapsuleTouched(OverlappedComp: ucpp.Ptr<PrimitiveComp>, Other: ucpp.Ptr<Actor>, OtherComp: ucpp.Ptr<PrimitiveComp>, OtherBodyIndex: ucpp.num.Int32, bFromSweep: Bool, SweepResult: ucpp.Ref<HitResult>): Void;
	public function CalcVelocity(DeltaTime: ucpp.num.Float32, Friction: ucpp.num.Float32, bFluid: Bool, BrakingDeceleration: ucpp.num.Float32): Void;
	public function AddImpulse(Impulse: Vector, bVelocityChange: Bool): Void;
	public function AddForce(Force: Vector): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	K2_GetWalkableFloorZ, K2_GetWalkableFloorAngle, K2_FindFloor, K2_ComputeFloorDist, IsWalking,
	IsWalkable, GetValidPerchRadius, GetPerchRadiusThreshold, GetMovementBase, GetMinAnalogSpeed,
	GetMaxJumpHeightWithJumpTime, GetMaxJumpHeight, GetMaxBrakingDeceleration, GetMaxAcceleration, GetLastUpdateVelocity,
	GetLastUpdateRotation, GetLastUpdateRequestedVelocity, GetLastUpdateLocation, GetImpartedMovementBaseVelocity, GetCurrentAcceleration,
	GetCharacterOwner, GetAnalogInputModifier
)
@:nativeGen
abstract ConstCharacterMovementComp(CharacterMovementComp) from CharacterMovementComp {
	public extern var GravityScale(get, never): ucpp.num.Float32;
	public inline extern function get_GravityScale(): ucpp.num.Float32 return this.GravityScale;
	public extern var MaxStepHeight(get, never): ucpp.num.Float32;
	public inline extern function get_MaxStepHeight(): ucpp.num.Float32 return this.MaxStepHeight;
	public extern var JumpZVelocity(get, never): ucpp.num.Float32;
	public inline extern function get_JumpZVelocity(): ucpp.num.Float32 return this.JumpZVelocity;
	public extern var JumpOffJumpZFactor(get, never): ucpp.num.Float32;
	public inline extern function get_JumpOffJumpZFactor(): ucpp.num.Float32 return this.JumpOffJumpZFactor;
	public extern var MovementMode(get, never): TEnumAsByte<EMovementMode>;
	public inline extern function get_MovementMode(): TEnumAsByte<EMovementMode> return this.MovementMode;
	public extern var CustomMovementMode(get, never): ucpp.num.UInt8;
	public inline extern function get_CustomMovementMode(): ucpp.num.UInt8 return this.CustomMovementMode;
	public extern var NetworkSmoothingMode(get, never): ENetworkSmoothingMode;
	public inline extern function get_NetworkSmoothingMode(): ENetworkSmoothingMode return this.NetworkSmoothingMode;
	public extern var GroundFriction(get, never): ucpp.num.Float32;
	public inline extern function get_GroundFriction(): ucpp.num.Float32 return this.GroundFriction;
	public extern var MaxWalkSpeed(get, never): ucpp.num.Float32;
	public inline extern function get_MaxWalkSpeed(): ucpp.num.Float32 return this.MaxWalkSpeed;
	public extern var MaxWalkSpeedCrouched(get, never): ucpp.num.Float32;
	public inline extern function get_MaxWalkSpeedCrouched(): ucpp.num.Float32 return this.MaxWalkSpeedCrouched;
	public extern var MaxSwimSpeed(get, never): ucpp.num.Float32;
	public inline extern function get_MaxSwimSpeed(): ucpp.num.Float32 return this.MaxSwimSpeed;
	public extern var MaxFlySpeed(get, never): ucpp.num.Float32;
	public inline extern function get_MaxFlySpeed(): ucpp.num.Float32 return this.MaxFlySpeed;
	public extern var MaxCustomMovementSpeed(get, never): ucpp.num.Float32;
	public inline extern function get_MaxCustomMovementSpeed(): ucpp.num.Float32 return this.MaxCustomMovementSpeed;
	public extern var MaxAcceleration(get, never): ucpp.num.Float32;
	public inline extern function get_MaxAcceleration(): ucpp.num.Float32 return this.MaxAcceleration;
	public extern var MinAnalogWalkSpeed(get, never): ucpp.num.Float32;
	public inline extern function get_MinAnalogWalkSpeed(): ucpp.num.Float32 return this.MinAnalogWalkSpeed;
	public extern var BrakingFrictionFactor(get, never): ucpp.num.Float32;
	public inline extern function get_BrakingFrictionFactor(): ucpp.num.Float32 return this.BrakingFrictionFactor;
	public extern var BrakingFriction(get, never): ucpp.num.Float32;
	public inline extern function get_BrakingFriction(): ucpp.num.Float32 return this.BrakingFriction;
	public extern var BrakingSubStepTime(get, never): ucpp.num.Float32;
	public inline extern function get_BrakingSubStepTime(): ucpp.num.Float32 return this.BrakingSubStepTime;
	public extern var BrakingDecelerationWalking(get, never): ucpp.num.Float32;
	public inline extern function get_BrakingDecelerationWalking(): ucpp.num.Float32 return this.BrakingDecelerationWalking;
	public extern var BrakingDecelerationFalling(get, never): ucpp.num.Float32;
	public inline extern function get_BrakingDecelerationFalling(): ucpp.num.Float32 return this.BrakingDecelerationFalling;
	public extern var BrakingDecelerationSwimming(get, never): ucpp.num.Float32;
	public inline extern function get_BrakingDecelerationSwimming(): ucpp.num.Float32 return this.BrakingDecelerationSwimming;
	public extern var BrakingDecelerationFlying(get, never): ucpp.num.Float32;
	public inline extern function get_BrakingDecelerationFlying(): ucpp.num.Float32 return this.BrakingDecelerationFlying;
	public extern var AirControl(get, never): ucpp.num.Float32;
	public inline extern function get_AirControl(): ucpp.num.Float32 return this.AirControl;
	public extern var AirControlBoostMultiplier(get, never): ucpp.num.Float32;
	public inline extern function get_AirControlBoostMultiplier(): ucpp.num.Float32 return this.AirControlBoostMultiplier;
	public extern var AirControlBoostVelocityThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_AirControlBoostVelocityThreshold(): ucpp.num.Float32 return this.AirControlBoostVelocityThreshold;
	public extern var FallingLateralFriction(get, never): ucpp.num.Float32;
	public inline extern function get_FallingLateralFriction(): ucpp.num.Float32 return this.FallingLateralFriction;
	public extern var Buoyancy(get, never): ucpp.num.Float32;
	public inline extern function get_Buoyancy(): ucpp.num.Float32 return this.Buoyancy;
	public extern var PerchRadiusThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_PerchRadiusThreshold(): ucpp.num.Float32 return this.PerchRadiusThreshold;
	public extern var PerchAdditionalHeight(get, never): ucpp.num.Float32;
	public inline extern function get_PerchAdditionalHeight(): ucpp.num.Float32 return this.PerchAdditionalHeight;
	public extern var RotationRate(get, never): Rotator;
	public inline extern function get_RotationRate(): Rotator return this.RotationRate;
	public extern var bUseSeparateBrakingFriction(get, never): Bool;
	public inline extern function get_bUseSeparateBrakingFriction(): Bool return this.bUseSeparateBrakingFriction;
	public extern var bApplyGravityWhileJumping(get, never): Bool;
	public inline extern function get_bApplyGravityWhileJumping(): Bool return this.bApplyGravityWhileJumping;
	public extern var bUseControllerDesiredRotation(get, never): Bool;
	public inline extern function get_bUseControllerDesiredRotation(): Bool return this.bUseControllerDesiredRotation;
	public extern var bOrientRotationToMovement(get, never): Bool;
	public inline extern function get_bOrientRotationToMovement(): Bool return this.bOrientRotationToMovement;
	public extern var bSweepWhileNavWalking(get, never): Bool;
	public inline extern function get_bSweepWhileNavWalking(): Bool return this.bSweepWhileNavWalking;
	public extern var bEnableScopedMovementUpdates(get, never): Bool;
	public inline extern function get_bEnableScopedMovementUpdates(): Bool return this.bEnableScopedMovementUpdates;
	public extern var bEnableServerDualMoveScopedMovementUpdates(get, never): Bool;
	public inline extern function get_bEnableServerDualMoveScopedMovementUpdates(): Bool return this.bEnableServerDualMoveScopedMovementUpdates;
	public extern var bForceMaxAccel(get, never): Bool;
	public inline extern function get_bForceMaxAccel(): Bool return this.bForceMaxAccel;
	public extern var bRunPhysicsWithNoController(get, never): Bool;
	public inline extern function get_bRunPhysicsWithNoController(): Bool return this.bRunPhysicsWithNoController;
	public extern var bForceNextFloorCheck(get, never): Bool;
	public inline extern function get_bForceNextFloorCheck(): Bool return this.bForceNextFloorCheck;
	public extern var bShrinkProxyCapsule(get, never): Bool;
	public inline extern function get_bShrinkProxyCapsule(): Bool return this.bShrinkProxyCapsule;
	public extern var bCanWalkOffLedges(get, never): Bool;
	public inline extern function get_bCanWalkOffLedges(): Bool return this.bCanWalkOffLedges;
	public extern var bCanWalkOffLedgesWhenCrouching(get, never): Bool;
	public inline extern function get_bCanWalkOffLedgesWhenCrouching(): Bool return this.bCanWalkOffLedgesWhenCrouching;
	public extern var bNetworkSkipProxyPredictionOnNetUpdate(get, never): Bool;
	public inline extern function get_bNetworkSkipProxyPredictionOnNetUpdate(): Bool return this.bNetworkSkipProxyPredictionOnNetUpdate;
	public extern var bNetworkAlwaysReplicateTransformUpdateTimestamp(get, never): Bool;
	public inline extern function get_bNetworkAlwaysReplicateTransformUpdateTimestamp(): Bool return this.bNetworkAlwaysReplicateTransformUpdateTimestamp;
	public extern var bDeferUpdateMoveComponent(get, never): Bool;
	public inline extern function get_bDeferUpdateMoveComponent(): Bool return this.bDeferUpdateMoveComponent;
	public extern var bEnablePhysicsInteraction(get, never): Bool;
	public inline extern function get_bEnablePhysicsInteraction(): Bool return this.bEnablePhysicsInteraction;
	public extern var bTouchForceScaledToMass(get, never): Bool;
	public inline extern function get_bTouchForceScaledToMass(): Bool return this.bTouchForceScaledToMass;
	public extern var bPushForceScaledToMass(get, never): Bool;
	public inline extern function get_bPushForceScaledToMass(): Bool return this.bPushForceScaledToMass;
	public extern var bPushForceUsingZOffset(get, never): Bool;
	public inline extern function get_bPushForceUsingZOffset(): Bool return this.bPushForceUsingZOffset;
	public extern var bScalePushForceToVelocity(get, never): Bool;
	public inline extern function get_bScalePushForceToVelocity(): Bool return this.bScalePushForceToVelocity;
	public extern var DeferredUpdatedMoveComponent(get, never): ucpp.Ptr<SceneComp.ConstSceneComp>;
	public inline extern function get_DeferredUpdatedMoveComponent(): ucpp.Ptr<SceneComp.ConstSceneComp> return this.DeferredUpdatedMoveComponent;
	public extern var MaxOutOfWaterStepHeight(get, never): ucpp.num.Float32;
	public inline extern function get_MaxOutOfWaterStepHeight(): ucpp.num.Float32 return this.MaxOutOfWaterStepHeight;
	public extern var OutofWaterZ(get, never): ucpp.num.Float32;
	public inline extern function get_OutofWaterZ(): ucpp.num.Float32 return this.OutofWaterZ;
	public extern var Mass(get, never): ucpp.num.Float32;
	public inline extern function get_Mass(): ucpp.num.Float32 return this.Mass;
	public extern var StandingDownwardForceScale(get, never): ucpp.num.Float32;
	public inline extern function get_StandingDownwardForceScale(): ucpp.num.Float32 return this.StandingDownwardForceScale;
	public extern var InitialPushForceFactor(get, never): ucpp.num.Float32;
	public inline extern function get_InitialPushForceFactor(): ucpp.num.Float32 return this.InitialPushForceFactor;
	public extern var PushForceFactor(get, never): ucpp.num.Float32;
	public inline extern function get_PushForceFactor(): ucpp.num.Float32 return this.PushForceFactor;
	public extern var PushForcePointZOffsetFactor(get, never): ucpp.num.Float32;
	public inline extern function get_PushForcePointZOffsetFactor(): ucpp.num.Float32 return this.PushForcePointZOffsetFactor;
	public extern var TouchForceFactor(get, never): ucpp.num.Float32;
	public inline extern function get_TouchForceFactor(): ucpp.num.Float32 return this.TouchForceFactor;
	public extern var MinTouchForce(get, never): ucpp.num.Float32;
	public inline extern function get_MinTouchForce(): ucpp.num.Float32 return this.MinTouchForce;
	public extern var MaxTouchForce(get, never): ucpp.num.Float32;
	public inline extern function get_MaxTouchForce(): ucpp.num.Float32 return this.MaxTouchForce;
	public extern var RepulsionForce(get, never): ucpp.num.Float32;
	public inline extern function get_RepulsionForce(): ucpp.num.Float32 return this.RepulsionForce;
	public extern var MaxSimulationTimeStep(get, never): ucpp.num.Float32;
	public inline extern function get_MaxSimulationTimeStep(): ucpp.num.Float32 return this.MaxSimulationTimeStep;
	public extern var MaxSimulationIterations(get, never): ucpp.num.Int32;
	public inline extern function get_MaxSimulationIterations(): ucpp.num.Int32 return this.MaxSimulationIterations;
	public extern var MaxJumpApexAttemptsPerSimulation(get, never): ucpp.num.Int32;
	public inline extern function get_MaxJumpApexAttemptsPerSimulation(): ucpp.num.Int32 return this.MaxJumpApexAttemptsPerSimulation;
	public extern var MaxDepenetrationWithGeometry(get, never): ucpp.num.Float32;
	public inline extern function get_MaxDepenetrationWithGeometry(): ucpp.num.Float32 return this.MaxDepenetrationWithGeometry;
	public extern var MaxDepenetrationWithGeometryAsProxy(get, never): ucpp.num.Float32;
	public inline extern function get_MaxDepenetrationWithGeometryAsProxy(): ucpp.num.Float32 return this.MaxDepenetrationWithGeometryAsProxy;
	public extern var MaxDepenetrationWithPawn(get, never): ucpp.num.Float32;
	public inline extern function get_MaxDepenetrationWithPawn(): ucpp.num.Float32 return this.MaxDepenetrationWithPawn;
	public extern var MaxDepenetrationWithPawnAsProxy(get, never): ucpp.num.Float32;
	public inline extern function get_MaxDepenetrationWithPawnAsProxy(): ucpp.num.Float32 return this.MaxDepenetrationWithPawnAsProxy;
	public extern var NetworkSimulatedSmoothLocationTime(get, never): ucpp.num.Float32;
	public inline extern function get_NetworkSimulatedSmoothLocationTime(): ucpp.num.Float32 return this.NetworkSimulatedSmoothLocationTime;
	public extern var NetworkSimulatedSmoothRotationTime(get, never): ucpp.num.Float32;
	public inline extern function get_NetworkSimulatedSmoothRotationTime(): ucpp.num.Float32 return this.NetworkSimulatedSmoothRotationTime;
	public extern var ListenServerNetworkSimulatedSmoothLocationTime(get, never): ucpp.num.Float32;
	public inline extern function get_ListenServerNetworkSimulatedSmoothLocationTime(): ucpp.num.Float32 return this.ListenServerNetworkSimulatedSmoothLocationTime;
	public extern var ListenServerNetworkSimulatedSmoothRotationTime(get, never): ucpp.num.Float32;
	public inline extern function get_ListenServerNetworkSimulatedSmoothRotationTime(): ucpp.num.Float32 return this.ListenServerNetworkSimulatedSmoothRotationTime;
	public extern var NetProxyShrinkRadius(get, never): ucpp.num.Float32;
	public inline extern function get_NetProxyShrinkRadius(): ucpp.num.Float32 return this.NetProxyShrinkRadius;
	public extern var NetProxyShrinkHalfHeight(get, never): ucpp.num.Float32;
	public inline extern function get_NetProxyShrinkHalfHeight(): ucpp.num.Float32 return this.NetProxyShrinkHalfHeight;
	public extern var NetworkMaxSmoothUpdateDistance(get, never): ucpp.num.Float32;
	public inline extern function get_NetworkMaxSmoothUpdateDistance(): ucpp.num.Float32 return this.NetworkMaxSmoothUpdateDistance;
	public extern var NetworkNoSmoothUpdateDistance(get, never): ucpp.num.Float32;
	public inline extern function get_NetworkNoSmoothUpdateDistance(): ucpp.num.Float32 return this.NetworkNoSmoothUpdateDistance;
	public extern var NetworkMinTimeBetweenClientAckGoodMoves(get, never): ucpp.num.Float32;
	public inline extern function get_NetworkMinTimeBetweenClientAckGoodMoves(): ucpp.num.Float32 return this.NetworkMinTimeBetweenClientAckGoodMoves;
	public extern var NetworkMinTimeBetweenClientAdjustments(get, never): ucpp.num.Float32;
	public inline extern function get_NetworkMinTimeBetweenClientAdjustments(): ucpp.num.Float32 return this.NetworkMinTimeBetweenClientAdjustments;
	public extern var NetworkMinTimeBetweenClientAdjustmentsLargeCorrection(get, never): ucpp.num.Float32;
	public inline extern function get_NetworkMinTimeBetweenClientAdjustmentsLargeCorrection(): ucpp.num.Float32 return this.NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;
	public extern var NetworkLargeClientCorrectionDistance(get, never): ucpp.num.Float32;
	public inline extern function get_NetworkLargeClientCorrectionDistance(): ucpp.num.Float32 return this.NetworkLargeClientCorrectionDistance;
	public extern var LedgeCheckThreshold(get, never): ucpp.num.Float32;
	public inline extern function get_LedgeCheckThreshold(): ucpp.num.Float32 return this.LedgeCheckThreshold;
	public extern var JumpOutOfWaterPitch(get, never): ucpp.num.Float32;
	public inline extern function get_JumpOutOfWaterPitch(): ucpp.num.Float32 return this.JumpOutOfWaterPitch;
	public extern var CurrentFloor(get, never): FindFloorResult;
	public inline extern function get_CurrentFloor(): FindFloorResult return this.CurrentFloor;
	public extern var DefaultLandMovementMode(get, never): TEnumAsByte<EMovementMode>;
	public inline extern function get_DefaultLandMovementMode(): TEnumAsByte<EMovementMode> return this.DefaultLandMovementMode;
	public extern var DefaultWaterMovementMode(get, never): TEnumAsByte<EMovementMode>;
	public inline extern function get_DefaultWaterMovementMode(): TEnumAsByte<EMovementMode> return this.DefaultWaterMovementMode;
	public extern var bMaintainHorizontalGroundVelocity(get, never): Bool;
	public inline extern function get_bMaintainHorizontalGroundVelocity(): Bool return this.bMaintainHorizontalGroundVelocity;
	public extern var bImpartBaseVelocityX(get, never): Bool;
	public inline extern function get_bImpartBaseVelocityX(): Bool return this.bImpartBaseVelocityX;
	public extern var bImpartBaseVelocityY(get, never): Bool;
	public inline extern function get_bImpartBaseVelocityY(): Bool return this.bImpartBaseVelocityY;
	public extern var bImpartBaseVelocityZ(get, never): Bool;
	public inline extern function get_bImpartBaseVelocityZ(): Bool return this.bImpartBaseVelocityZ;
	public extern var bImpartBaseAngularVelocity(get, never): Bool;
	public inline extern function get_bImpartBaseAngularVelocity(): Bool return this.bImpartBaseAngularVelocity;
	public extern var bJustTeleported(get, never): Bool;
	public inline extern function get_bJustTeleported(): Bool return this.bJustTeleported;
	public extern var bNetworkUpdateReceived(get, never): Bool;
	public inline extern function get_bNetworkUpdateReceived(): Bool return this.bNetworkUpdateReceived;
	public extern var bNetworkMovementModeChanged(get, never): Bool;
	public inline extern function get_bNetworkMovementModeChanged(): Bool return this.bNetworkMovementModeChanged;
	public extern var bIgnoreClientMovementErrorChecksAndCorrection(get, never): Bool;
	public inline extern function get_bIgnoreClientMovementErrorChecksAndCorrection(): Bool return this.bIgnoreClientMovementErrorChecksAndCorrection;
	public extern var bServerAcceptClientAuthoritativePosition(get, never): Bool;
	public inline extern function get_bServerAcceptClientAuthoritativePosition(): Bool return this.bServerAcceptClientAuthoritativePosition;
	public extern var bNotifyApex(get, never): Bool;
	public inline extern function get_bNotifyApex(): Bool return this.bNotifyApex;
	public extern var bCheatFlying(get, never): Bool;
	public inline extern function get_bCheatFlying(): Bool return this.bCheatFlying;
	public extern var bWantsToCrouch(get, never): Bool;
	public inline extern function get_bWantsToCrouch(): Bool return this.bWantsToCrouch;
	public extern var bCrouchMaintainsBaseLocation(get, never): Bool;
	public inline extern function get_bCrouchMaintainsBaseLocation(): Bool return this.bCrouchMaintainsBaseLocation;
	public extern var bIgnoreBaseRotation(get, never): Bool;
	public inline extern function get_bIgnoreBaseRotation(): Bool return this.bIgnoreBaseRotation;
	public extern var bFastAttachedMove(get, never): Bool;
	public inline extern function get_bFastAttachedMove(): Bool return this.bFastAttachedMove;
	public extern var bAlwaysCheckFloor(get, never): Bool;
	public inline extern function get_bAlwaysCheckFloor(): Bool return this.bAlwaysCheckFloor;
	public extern var bUseFlatBaseForFloorChecks(get, never): Bool;
	public inline extern function get_bUseFlatBaseForFloorChecks(): Bool return this.bUseFlatBaseForFloorChecks;
	public extern var bPerformingJumpOff(get, never): Bool;
	public inline extern function get_bPerformingJumpOff(): Bool return this.bPerformingJumpOff;
	public extern var bWantsToLeaveNavWalking(get, never): Bool;
	public inline extern function get_bWantsToLeaveNavWalking(): Bool return this.bWantsToLeaveNavWalking;
	public extern var bUseRVOAvoidance(get, never): Bool;
	public inline extern function get_bUseRVOAvoidance(): Bool return this.bUseRVOAvoidance;
	public extern var bRequestedMoveUseAcceleration(get, never): Bool;
	public inline extern function get_bRequestedMoveUseAcceleration(): Bool return this.bRequestedMoveUseAcceleration;
	public extern var bWasSimulatingRootMotion(get, never): Bool;
	public inline extern function get_bWasSimulatingRootMotion(): Bool return this.bWasSimulatingRootMotion;
	public extern var bAllowPhysicsRotationDuringAnimRootMotion(get, never): Bool;
	public inline extern function get_bAllowPhysicsRotationDuringAnimRootMotion(): Bool return this.bAllowPhysicsRotationDuringAnimRootMotion;
	public extern var FormerBaseVelocityDecayHalfLife(get, never): ucpp.num.Float32;
	public inline extern function get_FormerBaseVelocityDecayHalfLife(): ucpp.num.Float32 return this.FormerBaseVelocityDecayHalfLife;
	public extern var AvoidanceConsiderationRadius(get, never): ucpp.num.Float32;
	public inline extern function get_AvoidanceConsiderationRadius(): ucpp.num.Float32 return this.AvoidanceConsiderationRadius;
	public extern var RequestedVelocity(get, never): Vector;
	public inline extern function get_RequestedVelocity(): Vector return this.RequestedVelocity;
	public extern var LastUpdateRequestedVelocity(get, never): Vector;
	public inline extern function get_LastUpdateRequestedVelocity(): Vector return this.LastUpdateRequestedVelocity;
	public extern var AvoidanceUID(get, never): ucpp.num.Int32;
	public inline extern function get_AvoidanceUID(): ucpp.num.Int32 return this.AvoidanceUID;
	public extern var AvoidanceGroup(get, never): NavAvoidanceMask;
	public inline extern function get_AvoidanceGroup(): NavAvoidanceMask return this.AvoidanceGroup;
	public extern var GroupsToAvoid(get, never): NavAvoidanceMask;
	public inline extern function get_GroupsToAvoid(): NavAvoidanceMask return this.GroupsToAvoid;
	public extern var GroupsToIgnore(get, never): NavAvoidanceMask;
	public inline extern function get_GroupsToIgnore(): NavAvoidanceMask return this.GroupsToIgnore;
	public extern var AvoidanceWeight(get, never): ucpp.num.Float32;
	public inline extern function get_AvoidanceWeight(): ucpp.num.Float32 return this.AvoidanceWeight;
	public extern var PendingLaunchVelocity(get, never): Vector;
	public inline extern function get_PendingLaunchVelocity(): Vector return this.PendingLaunchVelocity;
	public extern var NavMeshProjectionInterval(get, never): ucpp.num.Float32;
	public inline extern function get_NavMeshProjectionInterval(): ucpp.num.Float32 return this.NavMeshProjectionInterval;
	public extern var NavMeshProjectionTimer(get, never): ucpp.num.Float32;
	public inline extern function get_NavMeshProjectionTimer(): ucpp.num.Float32 return this.NavMeshProjectionTimer;
	public extern var NavMeshProjectionInterpSpeed(get, never): ucpp.num.Float32;
	public inline extern function get_NavMeshProjectionInterpSpeed(): ucpp.num.Float32 return this.NavMeshProjectionInterpSpeed;
	public extern var NavMeshProjectionHeightScaleUp(get, never): ucpp.num.Float32;
	public inline extern function get_NavMeshProjectionHeightScaleUp(): ucpp.num.Float32 return this.NavMeshProjectionHeightScaleUp;
	public extern var NavMeshProjectionHeightScaleDown(get, never): ucpp.num.Float32;
	public inline extern function get_NavMeshProjectionHeightScaleDown(): ucpp.num.Float32 return this.NavMeshProjectionHeightScaleDown;
	public extern var NavWalkingFloorDistTolerance(get, never): ucpp.num.Float32;
	public inline extern function get_NavWalkingFloorDistTolerance(): ucpp.num.Float32 return this.NavWalkingFloorDistTolerance;
	public extern var PostPhysicsTickFunction(get, never): CharacterMovementComponentPostPhysicsTickFunction;
	public inline extern function get_PostPhysicsTickFunction(): CharacterMovementComponentPostPhysicsTickFunction return this.PostPhysicsTickFunction;
	public extern var MinTimeBetweenTimeStampResets(get, never): ucpp.num.Float32;
	public inline extern function get_MinTimeBetweenTimeStampResets(): ucpp.num.Float32 return this.MinTimeBetweenTimeStampResets;
	public extern var CurrentRootMotion(get, never): RootMotionSourceGroup;
	public inline extern function get_CurrentRootMotion(): RootMotionSourceGroup return this.CurrentRootMotion;
	public extern var ServerCorrectionRootMotion(get, never): RootMotionSourceGroup;
	public inline extern function get_ServerCorrectionRootMotion(): RootMotionSourceGroup return this.ServerCorrectionRootMotion;
	public extern var RootMotionParams(get, never): RootMotionMovementParams;
	public inline extern function get_RootMotionParams(): RootMotionMovementParams return this.RootMotionParams;
	public extern var AnimRootMotionVelocity(get, never): Vector;
	public inline extern function get_AnimRootMotionVelocity(): Vector return this.AnimRootMotionVelocity;
}

@:forward
@:nativeGen
@:native("CharacterMovementComp*")
abstract CharacterMovementCompPtr(ucpp.Ptr<CharacterMovementComp>) from ucpp.Ptr<CharacterMovementComp> to ucpp.Ptr<CharacterMovementComp>{
	@:from
	public static extern inline function fromValue(v: CharacterMovementComp): CharacterMovementCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): CharacterMovementComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}