// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGameUserSettings")
@:include("GameFramework/GameUserSettings.h")
@:valueType
extern class GameUserSettings extends Object {
	public var bUseVSync: Bool;
	public var bUseDynamicResolution: Bool;
	@:protected public var ResolutionSizeX: ucpp.num.UInt32;
	@:protected public var ResolutionSizeY: ucpp.num.UInt32;
	@:protected public var LastUserConfirmedResolutionSizeX: ucpp.num.UInt32;
	@:protected public var LastUserConfirmedResolutionSizeY: ucpp.num.UInt32;
	@:protected public var WindowPosX: ucpp.num.Int32;
	@:protected public var WindowPosY: ucpp.num.Int32;
	@:protected public var FullscreenMode: ucpp.num.Int32;
	@:protected public var LastConfirmedFullscreenMode: ucpp.num.Int32;
	@:protected public var PreferredFullscreenMode: ucpp.num.Int32;
	@:protected public var Version: ucpp.num.UInt32;
	@:protected public var AudioQualityLevel: ucpp.num.Int32;
	@:protected public var LastConfirmedAudioQualityLevel: ucpp.num.Int32;
	@:protected public var FrameRateLimit: ucpp.num.Float32;
	@:protected public var DesiredScreenWidth: ucpp.num.Int32;
	@:protected public var bUseDesiredScreenHeight: Bool;
	@:protected public var DesiredScreenHeight: ucpp.num.Int32;
	@:protected public var LastUserConfirmedDesiredScreenWidth: ucpp.num.Int32;
	@:protected public var LastUserConfirmedDesiredScreenHeight: ucpp.num.Int32;
	@:protected public var LastRecommendedScreenWidth: ucpp.num.Float32;
	@:protected public var LastRecommendedScreenHeight: ucpp.num.Float32;
	@:protected public var LastCPUBenchmarkResult: ucpp.num.Float32;
	@:protected public var LastGPUBenchmarkResult: ucpp.num.Float32;
	@:protected public var LastCPUBenchmarkSteps: TArray<ucpp.num.Float32>;
	@:protected public var LastGPUBenchmarkSteps: TArray<ucpp.num.Float32>;
	@:protected public var LastGPUBenchmarkMultiplier: ucpp.num.Float32;
	@:protected public var bUseHDRDisplayOutput: Bool;
	@:protected public var HDRDisplayOutputNits: ucpp.num.Int32;
	private var OnGameUserSettingsUINeedsUpdate: HaxeMulticastSparseDelegateProperty<() -> Void>;

	public function ValidateSettings(): Void;
	public function SupportsHDRDisplayOutput(): Bool;
	public function SetVSyncEnabled(bEnable: Bool): Void;
	public function SetVisualEffectQuality(Value: ucpp.num.Int32): Void;
	public function SetViewDistanceQuality(Value: ucpp.num.Int32): Void;
	public function SetToDefaults(): Void;
	public function SetTextureQuality(Value: ucpp.num.Int32): Void;
	public function SetShadowQuality(Value: ucpp.num.Int32): Void;
	public function SetShadingQuality(Value: ucpp.num.Int32): Void;
	public function SetScreenResolution(Resolution: IntPoint): Void;
	public function SetResolutionScaleValueEx(NewScaleValue: ucpp.num.Float32): Void;
	public function SetResolutionScaleValue(NewScaleValue: ucpp.num.Int32): Void;
	public function SetResolutionScaleNormalized(NewScaleNormalized: ucpp.num.Float32): Void;
	public function SetReflectionQuality(Value: ucpp.num.Int32): Void;
	public function SetPostProcessingQuality(Value: ucpp.num.Int32): Void;
	public function SetOverallScalabilityLevel(Value: ucpp.num.Int32): Void;
	public function SetGlobalIlluminationQuality(Value: ucpp.num.Int32): Void;
	public function SetFullscreenMode(InFullscreenMode: TEnumAsByte<EWindowMode>): Void;
	public function SetFrameRateLimit(NewLimit: ucpp.num.Float32): Void;
	public function SetFoliageQuality(Value: ucpp.num.Int32): Void;
	public function SetDynamicResolutionEnabled(bEnable: Bool): Void;
	public function SetBenchmarkFallbackValues(): Void;
	public function SetAudioQualityLevel(QualityLevel: ucpp.num.Int32): Void;
	public function SetAntiAliasingQuality(Value: ucpp.num.Int32): Void;
	public function SaveSettings(): Void;
	public function RunHardwareBenchmark(WorkScale: ucpp.num.Int32, CPUMultiplier: ucpp.num.Float32, GPUMultiplier: ucpp.num.Float32): Void;
	public function RevertVideoMode(): Void;
	public function ResetToCurrentSettings(): Void;
	public function LoadSettings(bForceReload: Bool): Void;
	public function IsVSyncEnabled(): Bool;
	public function IsVSyncDirty(): Bool;
	public function IsScreenResolutionDirty(): Bool;
	public function IsHDREnabled(): Bool;
	public function IsFullscreenModeDirty(): Bool;
	public function IsDynamicResolutionEnabled(): Bool;
	public function IsDynamicResolutionDirty(): Bool;
	public function IsDirty(): Bool;
	public function GetVisualEffectQuality(): ucpp.num.Int32;
	public function GetViewDistanceQuality(): ucpp.num.Int32;
	public function GetTextureQuality(): ucpp.num.Int32;
	public function GetSyncInterval(): ucpp.num.Int32;
	public function GetShadowQuality(): ucpp.num.Int32;
	public function GetShadingQuality(): ucpp.num.Int32;
	public function GetScreenResolution(): IntPoint;
	public function GetResolutionScaleNormalized(): ucpp.num.Float32;
	public function GetResolutionScaleInformationEx(CurrentScaleNormalized: ucpp.Ref<ucpp.num.Float32>, CurrentScaleValue: ucpp.Ref<ucpp.num.Float32>, MinScaleValue: ucpp.Ref<ucpp.num.Float32>, MaxScaleValue: ucpp.Ref<ucpp.num.Float32>): Void;
	public function GetResolutionScaleInformation(CurrentScaleNormalized: ucpp.Ref<ucpp.num.Float32>, CurrentScaleValue: ucpp.Ref<ucpp.num.Int32>, MinScaleValue: ucpp.Ref<ucpp.num.Int32>, MaxScaleValue: ucpp.Ref<ucpp.num.Int32>): Void;
	public function GetReflectionQuality(): ucpp.num.Int32;
	public function GetRecommendedResolutionScale(): ucpp.num.Float32;
	public function GetPreferredFullscreenMode(): TEnumAsByte<EWindowMode>;
	public function GetPostProcessingQuality(): ucpp.num.Int32;
	public function GetOverallScalabilityLevel(): ucpp.num.Int32;
	public function GetLastConfirmedScreenResolution(): IntPoint;
	public function GetLastConfirmedFullscreenMode(): TEnumAsByte<EWindowMode>;
	public function GetGlobalIlluminationQuality(): ucpp.num.Int32;
	public function GetGameUserSettings(): ucpp.Ptr<GameUserSettings>;
	public function GetFullscreenMode(): TEnumAsByte<EWindowMode>;
	public function GetFrameRateLimit(): ucpp.num.Float32;
	public function GetFramePace(): ucpp.num.Int32;
	public function GetFoliageQuality(): ucpp.num.Int32;
	public function GetDesktopResolution(): IntPoint;
	public function GetDefaultWindowPosition(): IntPoint;
	public function GetDefaultWindowMode(): TEnumAsByte<EWindowMode>;
	public function GetDefaultResolutionScale(): ucpp.num.Float32;
	public function GetDefaultResolution(): IntPoint;
	public function GetCurrentHDRDisplayNits(): ucpp.num.Int32;
	public function GetAudioQualityLevel(): ucpp.num.Int32;
	public function GetAntiAliasingQuality(): ucpp.num.Int32;
	public function EnableHDRDisplayOutput(bEnable: Bool, DisplayNits: ucpp.num.Int32): Void;
	public function ConfirmVideoMode(): Void;
	public function ApplySettings(bCheckForCommandLineOverrides: Bool): Void;
	public function ApplyResolutionSettings(bCheckForCommandLineOverrides: Bool): Void;
	public function ApplyNonResolutionSettings(): Void;
	public function ApplyHardwareBenchmarkResults(): Void;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward(
	SupportsHDRDisplayOutput, IsVSyncEnabled, IsVSyncDirty, IsScreenResolutionDirty, IsHDREnabled,
	IsFullscreenModeDirty, IsDynamicResolutionEnabled, IsDynamicResolutionDirty, IsDirty, GetVisualEffectQuality,
	GetViewDistanceQuality, GetTextureQuality, GetShadowQuality, GetShadingQuality, GetScreenResolution,
	GetResolutionScaleNormalized, GetResolutionScaleInformationEx, GetResolutionScaleInformation, GetReflectionQuality, GetPreferredFullscreenMode,
	GetPostProcessingQuality, GetOverallScalabilityLevel, GetLastConfirmedScreenResolution, GetLastConfirmedFullscreenMode, GetGlobalIlluminationQuality,
	GetFullscreenMode, GetFrameRateLimit, GetFoliageQuality, GetDesktopResolution, GetCurrentHDRDisplayNits,
	GetAudioQualityLevel, GetAntiAliasingQuality
)
@:nativeGen
abstract ConstGameUserSettings(GameUserSettings) from GameUserSettings {
	public extern var bUseVSync(get, never): Bool;
	public inline extern function get_bUseVSync(): Bool return this.bUseVSync;
	public extern var bUseDynamicResolution(get, never): Bool;
	public inline extern function get_bUseDynamicResolution(): Bool return this.bUseDynamicResolution;
}

@:forward
@:nativeGen
@:native("GameUserSettings*")
abstract GameUserSettingsPtr(ucpp.Ptr<GameUserSettings>) from ucpp.Ptr<GameUserSettings> to ucpp.Ptr<GameUserSettings>{
	@:from
	public static extern inline function fromValue(v: GameUserSettings): GameUserSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GameUserSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}