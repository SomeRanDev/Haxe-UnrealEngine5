// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPluginBlueprintLibrary")
@:include("PluginBlueprintLibrary.h")
@:structAccess
extern class PluginBlueprintLibrary extends BlueprintFunctionLibrary {
	public function IsPluginMounted(PluginName: FString): Bool;
	public function GetPluginVersionName(PluginName: FString, OutVersionName: cpp.Reference<FString>): Bool;
	public function GetPluginVersion(PluginName: FString, OutVersion: cpp.Reference<cpp.Int32>): Bool;
	public function GetPluginNameForObjectPath(ObjectPath: cpp.Reference<SoftObjectPath>, OutPluginName: cpp.Reference<FString>): Bool;
	public function GetPluginMountedAssetPath(PluginName: FString, OutAssetPath: cpp.Reference<FString>): Bool;
	public function GetPluginEditorCustomVirtualPath(PluginName: FString, OutVirtualPath: cpp.Reference<FString>): Bool;
	public function GetPluginDescriptorFilePath(PluginName: FString, OutFilePath: cpp.Reference<FString>): Bool;
	public function GetPluginDescription(PluginName: FString, OutDescription: cpp.Reference<FString>): Bool;
	public function GetPluginContentDir(PluginName: FString, OutContentDir: cpp.Reference<FString>): Bool;
	public function GetPluginBaseDir(PluginName: FString, OutBaseDir: cpp.Reference<FString>): Bool;
	public function GetEnabledPluginNames(): TArray<FString>;
	public function GetAdditionalProjectPluginSearchPaths(): TArray<FString>;
	public function GetAdditionalPluginSearchPaths(): TArray<FString>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstPluginBlueprintLibrary(PluginBlueprintLibrary) from PluginBlueprintLibrary {
}

@:forward
@:nativeGen
@:native("PluginBlueprintLibrary*")
abstract PluginBlueprintLibraryPtr(cpp.Star<PluginBlueprintLibrary>) from cpp.Star<PluginBlueprintLibrary> to cpp.Star<PluginBlueprintLibrary>{
	@:from
	public static extern inline function fromValue(v: PluginBlueprintLibrary): PluginBlueprintLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PluginBlueprintLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}