// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPluginBlueprintLibrary")
@:include("PluginBlueprintLibrary.h")
@:valueType
extern class PluginBlueprintLibrary extends BlueprintFunctionLibrary {
	public function IsPluginMounted(PluginName: FString): Bool;
	public function GetPluginVersionName(PluginName: FString, OutVersionName: ucpp.Ref<FString>): Bool;
	public function GetPluginVersion(PluginName: FString, OutVersion: ucpp.Ref<ucpp.num.Int32>): Bool;
	public function GetPluginNameForObjectPath(ObjectPath: ucpp.Ref<SoftObjectPath>, OutPluginName: ucpp.Ref<FString>): Bool;
	public function GetPluginMountedAssetPath(PluginName: FString, OutAssetPath: ucpp.Ref<FString>): Bool;
	public function GetPluginEditorCustomVirtualPath(PluginName: FString, OutVirtualPath: ucpp.Ref<FString>): Bool;
	public function GetPluginDescriptorFilePath(PluginName: FString, OutFilePath: ucpp.Ref<FString>): Bool;
	public function GetPluginDescription(PluginName: FString, OutDescription: ucpp.Ref<FString>): Bool;
	public function GetPluginContentDir(PluginName: FString, OutContentDir: ucpp.Ref<FString>): Bool;
	public function GetPluginBaseDir(PluginName: FString, OutBaseDir: ucpp.Ref<FString>): Bool;
	public function GetEnabledPluginNames(): TArray<FString>;
	public function GetAdditionalProjectPluginSearchPaths(): TArray<FString>;
	public function GetAdditionalPluginSearchPaths(): TArray<FString>;

	public static function StaticClass(): ucpp.Ptr<Class>;
}

@:forward()
@:nativeGen
abstract ConstPluginBlueprintLibrary(PluginBlueprintLibrary) from PluginBlueprintLibrary {
}

@:forward
@:nativeGen
@:native("PluginBlueprintLibrary*")
abstract PluginBlueprintLibraryPtr(ucpp.Ptr<PluginBlueprintLibrary>) from ucpp.Ptr<PluginBlueprintLibrary> to ucpp.Ptr<PluginBlueprintLibrary>{
	@:from
	public static extern inline function fromValue(v: PluginBlueprintLibrary): PluginBlueprintLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PluginBlueprintLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}