// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AActor")
@:include("GameFramework/Actor.h")
@:structAccess
extern class Actor extends Object {
	@:protected public function BeginPlay(): Void;
	public function Tick(DeltaTime: cpp.Float32): Void;
	public function PreRegisterAllComponents(): Void;
	public function PostRegisterAllComponents(): Void;
	public function PostActorCreated(): Void;
	public function OnConstruction(Transform: cpp.Reference<Transform>): Void;
	public function PreInitializeComponents(): Void;
	public function PostInitializeComponents(): Void;
	public function Destroyed(): Void;
	public function DestroyNetworkActorHandled(): Bool;
	@:protected public function EndPlay(): Void;
	public overload function SetActorLocation(NewLocation: Vector): Bool;
	public overload function SetActorLocation(NewLocation: Vector, bSweep: Bool): Bool;
	public overload function SetActorLocation(NewLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Bool;
	public overload function SetActorLocation(NewLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Bool;
	public overload function SetActorRotation(NewRotation: Rotator): Bool;
	public overload function SetActorRotation(NewRotation: Rotator, Teleport: ETeleportType): Bool;
	@:native("SetActorRotation") public overload function SetActorRotationQuad(@:const NewRotation: cpp.Reference<Quat>): Bool;
	@:native("SetActorRotation") public overload function SetActorRotationQuad(@:const NewRotation: cpp.Reference<Quat>, Teleport: ETeleportType): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Bool): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Bool;
	@:native("SetActorLocationAndRotation") public overload function SetActorLocationAndRotationQuad(NewLocation: Vector, @:const NewRotation: cpp.Reference<Quat>): Bool;
	@:native("SetActorLocationAndRotation") public overload function SetActorLocationAndRotationQuad(NewLocation: Vector, @:const NewRotation: cpp.Reference<Quat>, bSweep: Bool): Bool;
	@:native("SetActorLocationAndRotation") public overload function SetActorLocationAndRotationQuad(NewLocation: Vector, @:const NewRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, @:const NewRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Bool;
	public overload function SetActorTransform(@:const NewTransform: cpp.Reference<Transform>, bSweep: Bool): Bool;
	public overload function SetActorTransform(@:const NewTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Bool;
	public overload function SetActorTransform(@:const NewTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Bool;
	public overload function AddActorWorldOffset(DeltaLocation: Vector): Void;
	public overload function AddActorWorldOffset(DeltaLocation: Vector, bSweep: Bool): Void;
	public overload function AddActorWorldOffset(DeltaLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorWorldOffset(DeltaLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorWorldRotation(DeltaRotation: Rotator): Void;
	public overload function AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Bool): Void;
	public overload function AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	@:native("AddActorWorldRotation") public overload function AddActorWorldRotationQuad(DeltaRotation: cpp.Reference<Quat>): Void;
	@:native("AddActorWorldRotation") public overload function AddActorWorldRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool): Void;
	@:native("AddActorWorldRotation") public overload function AddActorWorldRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	@:native("AddActorWorldRotation") public overload function AddActorWorldRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>): Void;
	public overload function AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool): Void;
	public overload function AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>): Void;
	public overload function AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool): Void;
	public overload function AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorLocalOffset(DeltaLocation: Vector): Void;
	public overload function AddActorLocalOffset(DeltaLocation: Vector, bSweep: Bool): Void;
	public overload function AddActorLocalOffset(DeltaLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorLocalOffset(DeltaLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorLocalRotation(DeltaRotation: Rotator): Void;
	public overload function AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Bool): Void;
	public overload function AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	@:native("AddActorLocalRotation") public overload function AddActorLocalRotationQuad(DeltaRotation: cpp.Reference<Quat>): Void;
	@:native("AddActorLocalRotation") public overload function AddActorLocalRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool): Void;
	@:native("AddActorLocalRotation") public overload function AddActorLocalRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	@:native("AddActorLocalRotation") public overload function AddActorLocalRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorLocalTransform(DeltaTransform: cpp.Reference<Transform>): Void;
	public overload function AddActorLocalTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool): Void;
	public overload function AddActorLocalTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorLocalTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function SetActorRelativeLocation(NewRelativeLocation: Vector): Void;
	public overload function SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Bool): Void;
	public overload function SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function SetActorRelativeRotation(NewRelativeRotation: Rotator): Void;
	public overload function SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Bool): Void;
	public overload function SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	@:native("SetActorRelativeRotation") public overload function SetActorRelativeRotationQuad(NewRelativeRotation: cpp.Reference<Quat>): Void;
	@:native("SetActorRelativeRotation") public overload function SetActorRelativeRotationQuad(NewRelativeRotation: cpp.Reference<Quat>, bSweep: Bool): Void;
	@:native("SetActorRelativeRotation") public overload function SetActorRelativeRotationQuad(NewRelativeRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	@:native("SetActorRelativeRotation") public overload function SetActorRelativeRotationQuad(NewRelativeRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>): Void;
	public overload function SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>, bSweep: Bool): Void;
	public overload function SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	@:const public function GetActorLocation(): Vector;
	@:const public function GetActorNameOrLabel(): cpp.Reference<FString>;
	@:const public function GetActorQuat(): Quat;
	@:const public function GetActorRotation(): Rotator;
	@:const public function GetActorScale(): Vector;
	@:const public function GetActorTransform(): cpp.Reference<Transform>;
	@:const public function GetAutoDestroyWhenFinished(): Bool;
	@:const public function GetIsReplicated(): Bool;
	@:const public function GetIsSpatiallyLoaded(): Bool;
	@:const public function GetLastRenderTime(): cpp.Float32;
	@:const public function GetPivotOffset(): Vector;
	@:const public function GetPlacementExtent(): Vector;
	@:const public function GetWorld(): cpp.Star<World>;
	@:const public function HasActiveCameraComponent(): Bool;
	@:const public function HasActivePawnControlCameraComponent(): Bool;
	@:const public function HasActorBegunPlay(): Bool;
	@:const public function IsActorBeginningPlay(): Bool;
	@:const public function IsActorBeginningPlayFromLevelStreaming(): Bool;
	@:const public function IsActorInitialized(): Bool;
	@:const public function IsActorLabelEditable(): Bool;
	@:const public function IsActorOrSelectionParentSelected(): Bool;
	@:const public function IsLevelBoundsRelevant(): Bool;
	@:const public function IsListedInSceneOutliner(): Bool;
	@:const public function IsLockLocation(): Bool;
	@:const public function IsNetStartupActor(): Bool;
	@:const public function IsRootComponentCollisionRegistered(): Bool;
	@:const public function IsRootComponentMovable(): Bool;
	@:const public function IsRootComponentStatic(): Bool;
	@:const public function IsRootComponentStationary(): Bool;
	@:const public function IsRunningUserConstructionScript(): Bool;
	@:const public function IsSelectionChild(): Bool;
	@:const public function IsSelectionParentOfAttachedActors(): Bool;
	@:const public function IsUserManaged(): Bool;
	@:const public function IsValidForDataLayer(): Bool;
}
