// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeGenericAssetsPipeline")
@:include("InterchangeGenericAssetsPipeline.h")
@:structAccess
extern class InterchangeGenericAssetsPipeline extends InterchangePipelineBase {
	public var bUseSourceNameForAsset: Bool;
	public var bImportLods: Bool;
	public var bBakeMeshes: Bool;
	public var VertexColorImportOption: TEnumAsByte<EInterchangeVertexColorImportOption>;
	public var VertexOverrideColor: Color;
	public var bImportStaticMeshes: Bool;
	public var bCombineStaticMeshes: Bool;
	public var Skeleton: cpp.Star<Skeleton>;
	public var bImportSkeletalMeshes: Bool;
	public var bCombineSkeletalMeshes: Bool;
	public var bImportMorphTargets: Bool;
	public var bCreatePhysicsAsset: Bool;
	public var PhysicsAsset: cpp.Star<PhysicsAsset>;
	public var bImportMaterials: Bool;
	public var bImportTextures: Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstInterchangeGenericAssetsPipeline(InterchangeGenericAssetsPipeline) from InterchangeGenericAssetsPipeline {
	public extern var bUseSourceNameForAsset(get, never): Bool;
	public inline extern function get_bUseSourceNameForAsset(): Bool return this.bUseSourceNameForAsset;
	public extern var bImportLods(get, never): Bool;
	public inline extern function get_bImportLods(): Bool return this.bImportLods;
	public extern var bBakeMeshes(get, never): Bool;
	public inline extern function get_bBakeMeshes(): Bool return this.bBakeMeshes;
	public extern var VertexColorImportOption(get, never): TEnumAsByte<EInterchangeVertexColorImportOption>;
	public inline extern function get_VertexColorImportOption(): TEnumAsByte<EInterchangeVertexColorImportOption> return this.VertexColorImportOption;
	public extern var VertexOverrideColor(get, never): Color;
	public inline extern function get_VertexOverrideColor(): Color return this.VertexOverrideColor;
	public extern var bImportStaticMeshes(get, never): Bool;
	public inline extern function get_bImportStaticMeshes(): Bool return this.bImportStaticMeshes;
	public extern var bCombineStaticMeshes(get, never): Bool;
	public inline extern function get_bCombineStaticMeshes(): Bool return this.bCombineStaticMeshes;
	public extern var Skeleton(get, never): cpp.Star<Skeleton.ConstSkeleton>;
	public inline extern function get_Skeleton(): cpp.Star<Skeleton.ConstSkeleton> return this.Skeleton;
	public extern var bImportSkeletalMeshes(get, never): Bool;
	public inline extern function get_bImportSkeletalMeshes(): Bool return this.bImportSkeletalMeshes;
	public extern var bCombineSkeletalMeshes(get, never): Bool;
	public inline extern function get_bCombineSkeletalMeshes(): Bool return this.bCombineSkeletalMeshes;
	public extern var bImportMorphTargets(get, never): Bool;
	public inline extern function get_bImportMorphTargets(): Bool return this.bImportMorphTargets;
	public extern var bCreatePhysicsAsset(get, never): Bool;
	public inline extern function get_bCreatePhysicsAsset(): Bool return this.bCreatePhysicsAsset;
	public extern var PhysicsAsset(get, never): cpp.Star<PhysicsAsset.ConstPhysicsAsset>;
	public inline extern function get_PhysicsAsset(): cpp.Star<PhysicsAsset.ConstPhysicsAsset> return this.PhysicsAsset;
	public extern var bImportMaterials(get, never): Bool;
	public inline extern function get_bImportMaterials(): Bool return this.bImportMaterials;
	public extern var bImportTextures(get, never): Bool;
	public inline extern function get_bImportTextures(): Bool return this.bImportTextures;
}

@:forward
@:nativeGen
@:native("InterchangeGenericAssetsPipeline*")
abstract InterchangeGenericAssetsPipelinePtr(cpp.Star<InterchangeGenericAssetsPipeline>) from cpp.Star<InterchangeGenericAssetsPipeline> to cpp.Star<InterchangeGenericAssetsPipeline>{
	@:from
	public static extern inline function fromValue(v: InterchangeGenericAssetsPipeline): InterchangeGenericAssetsPipelinePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeGenericAssetsPipeline {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}