// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlendSpace")
@:include("Animation/BlendSpace.h")
extern class BlendSpace extends AnimationAsset {
	public var bRotationBlendInMeshSpace: Bool;
	public var InterpolationParam: InterpolationParameter;
	public var AnalysisProperties: cpp.Star<AnalysisProperties>;
	public var TargetWeightInterpolationSpeedPerSec: cpp.Float32;
	public var bTargetWeightInterpolationEaseInOut: Bool;
	public var PreviewBasePose: cpp.Star<AnimSequence>;
	public var AnimLength: cpp.Float32;
	public var NotifyTriggerMode: ENotifyTriggerMode;
	public var bInterpolateUsingGrid: Bool;
	public var PreferredTriangulationDirection: EPreferredTriangulationDirection;
	public var PerBoneBlend: TArray<PerBoneInterpolation>;
	public var SampleIndexWithMarkers: cpp.Int32;
	public var SampleData: TArray<BlendSample>;
	public var GridSamples: TArray<EditorElement>;
	public var BlendSpaceData: BlendSpaceData;
	public var BlendParameters: BlendParameter;
	public var AxisToScaleAnimation: EBlendSpaceAxis;
	public var DimensionIndices: TArray<cpp.Int32>;
}

@:forward()
@:nativeGen
abstract ConstBlendSpace(BlendSpace) from BlendSpace {
	public extern var bRotationBlendInMeshSpace(get, never): Bool;
	public inline extern function get_bRotationBlendInMeshSpace(): Bool return this.bRotationBlendInMeshSpace;
	public extern var InterpolationParam(get, never): InterpolationParameter;
	public inline extern function get_InterpolationParam(): InterpolationParameter return this.InterpolationParam;
	public extern var AnalysisProperties(get, never): cpp.Star<AnalysisProperties.ConstAnalysisProperties>;
	public inline extern function get_AnalysisProperties(): cpp.Star<AnalysisProperties.ConstAnalysisProperties> return this.AnalysisProperties;
	public extern var TargetWeightInterpolationSpeedPerSec(get, never): cpp.Float32;
	public inline extern function get_TargetWeightInterpolationSpeedPerSec(): cpp.Float32 return this.TargetWeightInterpolationSpeedPerSec;
	public extern var bTargetWeightInterpolationEaseInOut(get, never): Bool;
	public inline extern function get_bTargetWeightInterpolationEaseInOut(): Bool return this.bTargetWeightInterpolationEaseInOut;
	public extern var PreviewBasePose(get, never): cpp.Star<AnimSequence.ConstAnimSequence>;
	public inline extern function get_PreviewBasePose(): cpp.Star<AnimSequence.ConstAnimSequence> return this.PreviewBasePose;
	public extern var AnimLength(get, never): cpp.Float32;
	public inline extern function get_AnimLength(): cpp.Float32 return this.AnimLength;
	public extern var NotifyTriggerMode(get, never): ENotifyTriggerMode;
	public inline extern function get_NotifyTriggerMode(): ENotifyTriggerMode return this.NotifyTriggerMode;
	public extern var bInterpolateUsingGrid(get, never): Bool;
	public inline extern function get_bInterpolateUsingGrid(): Bool return this.bInterpolateUsingGrid;
	public extern var PreferredTriangulationDirection(get, never): EPreferredTriangulationDirection;
	public inline extern function get_PreferredTriangulationDirection(): EPreferredTriangulationDirection return this.PreferredTriangulationDirection;
	public extern var PerBoneBlend(get, never): TArray<PerBoneInterpolation>;
	public inline extern function get_PerBoneBlend(): TArray<PerBoneInterpolation> return this.PerBoneBlend;
	public extern var SampleIndexWithMarkers(get, never): cpp.Int32;
	public inline extern function get_SampleIndexWithMarkers(): cpp.Int32 return this.SampleIndexWithMarkers;
	public extern var SampleData(get, never): TArray<BlendSample>;
	public inline extern function get_SampleData(): TArray<BlendSample> return this.SampleData;
	public extern var GridSamples(get, never): TArray<EditorElement>;
	public inline extern function get_GridSamples(): TArray<EditorElement> return this.GridSamples;
	public extern var BlendSpaceData(get, never): BlendSpaceData;
	public inline extern function get_BlendSpaceData(): BlendSpaceData return this.BlendSpaceData;
	public extern var BlendParameters(get, never): BlendParameter;
	public inline extern function get_BlendParameters(): BlendParameter return this.BlendParameters;
	public extern var AxisToScaleAnimation(get, never): EBlendSpaceAxis;
	public inline extern function get_AxisToScaleAnimation(): EBlendSpaceAxis return this.AxisToScaleAnimation;
	public extern var DimensionIndices(get, never): TArray<cpp.Int32>;
	public inline extern function get_DimensionIndices(): TArray<cpp.Int32> return this.DimensionIndices;
}