// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UClothPhysicalMeshDataBase_Legacy")
@:include("ClothPhysicalMeshDataBase_Legacy.h")
extern class ClothPhysicalMeshDataBase_Legacy extends Object {
	public var Vertices: TArray<Vector3f>;
	public var Normals: TArray<Vector3f>;
	public var VertexColors: TArray<Color>;
	public var Indices: TArray<cpp.UInt32>;
	public var InverseMasses: TArray<cpp.Float32>;
	public var BoneData: TArray<ClothVertBoneData>;
	public var NumFixedVerts: cpp.Int32;
	public var MaxBoneWeights: cpp.Int32;
	public var SelfCollisionIndices: TArray<cpp.UInt32>;
}

@:forward()
@:nativeGen
abstract ConstClothPhysicalMeshDataBase_Legacy(ClothPhysicalMeshDataBase_Legacy) from ClothPhysicalMeshDataBase_Legacy {
	public extern var Vertices(get, never): TArray<Vector3f>;
	public inline extern function get_Vertices(): TArray<Vector3f> return this.Vertices;
	public extern var Normals(get, never): TArray<Vector3f>;
	public inline extern function get_Normals(): TArray<Vector3f> return this.Normals;
	public extern var VertexColors(get, never): TArray<Color>;
	public inline extern function get_VertexColors(): TArray<Color> return this.VertexColors;
	public extern var Indices(get, never): TArray<cpp.UInt32>;
	public inline extern function get_Indices(): TArray<cpp.UInt32> return this.Indices;
	public extern var InverseMasses(get, never): TArray<cpp.Float32>;
	public inline extern function get_InverseMasses(): TArray<cpp.Float32> return this.InverseMasses;
	public extern var BoneData(get, never): TArray<ClothVertBoneData>;
	public inline extern function get_BoneData(): TArray<ClothVertBoneData> return this.BoneData;
	public extern var NumFixedVerts(get, never): cpp.Int32;
	public inline extern function get_NumFixedVerts(): cpp.Int32 return this.NumFixedVerts;
	public extern var MaxBoneWeights(get, never): cpp.Int32;
	public inline extern function get_MaxBoneWeights(): cpp.Int32 return this.MaxBoneWeights;
	public extern var SelfCollisionIndices(get, never): TArray<cpp.UInt32>;
	public inline extern function get_SelfCollisionIndices(): TArray<cpp.UInt32> return this.SelfCollisionIndices;
}