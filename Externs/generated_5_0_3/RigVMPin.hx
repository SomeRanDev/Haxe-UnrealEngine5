// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URigVMPin")
@:include("RigVMModel/RigVMPin.h")
extern class RigVMPin extends Object {
	public var DisplayName: FName;
	public var Direction: ERigVMPinDirection;
	public var bIsExpanded: Bool;
	public var bIsConstant: Bool;
	public var bRequiresWatch: Bool;
	public var bIsDynamicArray: Bool;
	public var CPPType: FString;
	public var CPPTypeObject: cpp.Star<Object>;
	public var CPPTypeObjectPath: FName;
	public var DefaultValue: FString;
	public var CustomWidgetName: FName;
	public var SubPins: TArray<cpp.Star<RigVMPin>>;
	public var Links: TArray<cpp.Star<RigVMLink>>;
	public var InjectionInfos: TArray<cpp.Star<RigVMInjectionInfo>>;
	public var BoundVariablePath_DEPRECATED: FString;

	public function RequiresWatch(bCheckExposedPinChain: Bool): cpp.Reference<Bool>;
	public function IsUObject(): cpp.Reference<Bool>;
	public function IsUnknownType(): cpp.Reference<Bool>;
	public function IsStructMember(): cpp.Reference<Bool>;
	public function IsStruct(): cpp.Reference<Bool>;
	public function IsStringType(): cpp.Reference<Bool>;
	public function IsRootPin(): cpp.Reference<Bool>;
	public function IsReferenceCountedContainer(): cpp.Reference<Bool>;
	public function IsLinkedTo(InPin: cpp.Star<RigVMPin>): cpp.Reference<Bool>;
	public function IsExpanded(): cpp.Reference<Bool>;
	public function IsExecuteContext(): cpp.Reference<Bool>;
	public function IsDynamicArray(): cpp.Reference<Bool>;
	public function IsDefinedAsConstant(): cpp.Reference<Bool>;
	public function IsArrayElement(): cpp.Reference<Bool>;
	public function IsArray(): cpp.Reference<Bool>;
	public function GetToolTipText(): cpp.Reference<FText>;
	public function GetTargetLinks(bRecursive: Bool): cpp.Reference<TArray<cpp.Star<RigVMLink>>>;
	public function GetSubPins(): cpp.Reference<TArray<cpp.Star<RigVMPin>>>;
	public function GetSourceLinks(bRecursive: Bool): cpp.Reference<TArray<cpp.Star<RigVMLink>>>;
	public function GetSegmentPath(bIncludeRootPin: Bool): cpp.Reference<FString>;
	public function GetScriptStruct(): cpp.Reference<cpp.Star<ScriptStruct>>;
	public function GetRootPin(): cpp.Reference<cpp.Star<RigVMPin>>;
	public function GetPinPath(bUseNodePath: Bool): cpp.Reference<FString>;
	public function GetPinIndex(): cpp.Reference<cpp.Int32>;
	public function GetPinForLink(): cpp.Reference<cpp.Star<RigVMPin>>;
	public function GetParentPin(): cpp.Reference<cpp.Star<RigVMPin>>;
	public function GetOriginalPinFromInjectedNode(): cpp.Reference<cpp.Star<RigVMPin>>;
	public function GetNode(): cpp.Reference<cpp.Star<RigVMNode>>;
	public function GetLinks(): cpp.Reference<TArray<cpp.Star<RigVMLink>>>;
	public function GetLinkedTargetPins(bRecursive: Bool): cpp.Reference<TArray<cpp.Star<RigVMPin>>>;
	public function GetLinkedSourcePins(bRecursive: Bool): cpp.Reference<TArray<cpp.Star<RigVMPin>>>;
	public function GetGraph(): cpp.Reference<cpp.Star<RigVMGraph>>;
	public function GetEnum(): cpp.Reference<cpp.Star<Enum>>;
	public function GetDisplayName(): cpp.Reference<FName>;
	public function GetDirection(): cpp.Reference<ERigVMPinDirection>;
	public function GetDefaultValue(): cpp.Reference<FString>;
	public function GetCustomWidgetName(): cpp.Reference<FName>;
	public function GetCPPTypeObject(): cpp.Reference<cpp.Star<Object>>;
	public function GetCPPType(): cpp.Reference<FString>;
	public function GetArraySize(): cpp.Reference<cpp.Int32>;
	public function GetArrayElementCppType(): cpp.Reference<FString>;
	public function FindSubPin(InPinPath: FString): cpp.Reference<cpp.Star<RigVMPin>>;
}

@:forward(
	RequiresWatch, IsUObject, IsUnknownType, IsStructMember, IsStruct,
	IsStringType, IsRootPin, IsReferenceCountedContainer, IsLinkedTo, IsExpanded,
	IsExecuteContext, IsDynamicArray, IsDefinedAsConstant, IsArrayElement, IsArray,
	GetToolTipText, GetTargetLinks, GetSubPins, GetSourceLinks, GetSegmentPath,
	GetScriptStruct, GetRootPin, GetPinPath, GetPinIndex, GetPinForLink,
	GetParentPin, GetOriginalPinFromInjectedNode, GetNode, GetLinks, GetLinkedTargetPins,
	GetLinkedSourcePins, GetGraph, GetEnum, GetDisplayName, GetDirection,
	GetDefaultValue, GetCustomWidgetName, GetCPPTypeObject, GetCPPType, GetArraySize,
	GetArrayElementCppType, FindSubPin
)
@:nativeGen
abstract ConstRigVMPin(RigVMPin) from RigVMPin {
	public extern var DisplayName(get, never): FName;
	public inline extern function get_DisplayName(): FName return this.DisplayName;
	public extern var Direction(get, never): ERigVMPinDirection;
	public inline extern function get_Direction(): ERigVMPinDirection return this.Direction;
	public extern var bIsExpanded(get, never): Bool;
	public inline extern function get_bIsExpanded(): Bool return this.bIsExpanded;
	public extern var bIsConstant(get, never): Bool;
	public inline extern function get_bIsConstant(): Bool return this.bIsConstant;
	public extern var bRequiresWatch(get, never): Bool;
	public inline extern function get_bRequiresWatch(): Bool return this.bRequiresWatch;
	public extern var bIsDynamicArray(get, never): Bool;
	public inline extern function get_bIsDynamicArray(): Bool return this.bIsDynamicArray;
	public extern var CPPType(get, never): FString;
	public inline extern function get_CPPType(): FString return this.CPPType;
	public extern var CPPTypeObject(get, never): cpp.Star<Object.ConstObject>;
	public inline extern function get_CPPTypeObject(): cpp.Star<Object.ConstObject> return this.CPPTypeObject;
	public extern var CPPTypeObjectPath(get, never): FName;
	public inline extern function get_CPPTypeObjectPath(): FName return this.CPPTypeObjectPath;
	public extern var DefaultValue(get, never): FString;
	public inline extern function get_DefaultValue(): FString return this.DefaultValue;
	public extern var CustomWidgetName(get, never): FName;
	public inline extern function get_CustomWidgetName(): FName return this.CustomWidgetName;
	public extern var SubPins(get, never): TArray<cpp.Star<RigVMPin.ConstRigVMPin>>;
	public inline extern function get_SubPins(): TArray<cpp.Star<RigVMPin.ConstRigVMPin>> return this.SubPins;
	public extern var Links(get, never): TArray<cpp.Star<RigVMLink.ConstRigVMLink>>;
	public inline extern function get_Links(): TArray<cpp.Star<RigVMLink.ConstRigVMLink>> return this.Links;
	public extern var InjectionInfos(get, never): TArray<cpp.Star<RigVMInjectionInfo.ConstRigVMInjectionInfo>>;
	public inline extern function get_InjectionInfos(): TArray<cpp.Star<RigVMInjectionInfo.ConstRigVMInjectionInfo>> return this.InjectionInfos;
	public extern var BoundVariablePath_DEPRECATED(get, never): FString;
	public inline extern function get_BoundVariablePath_DEPRECATED(): FString return this.BoundVariablePath_DEPRECATED;
}