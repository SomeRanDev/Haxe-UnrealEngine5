// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UVREditorInteractor")
@:include("VREditorInteractor.h")
@:structAccess
extern class VREditorInteractor extends ViewportInteractor {
	@:protected public var bIsUndoRedoSwipeEnabled: Bool;
	@:protected public var MotionControllerComponent: cpp.Star<MotionControllerComp>;
	@:protected public var HandMeshComponent: cpp.Star<StaticMeshComp>;
	private var LaserSplineComponent: cpp.Star<SplineComp>;
	private var LaserSplineMeshComponents: TArray<cpp.Star<SplineMeshComp>>;
	private var LaserPointerMID: cpp.Star<MaterialInstanceDynamic>;
	private var TranslucentLaserPointerMID: cpp.Star<MaterialInstanceDynamic>;
	private var HoverMeshComponent: cpp.Star<StaticMeshComp>;
	private var HoverPointLightComponent: cpp.Star<PointLightComp>;
	private var HandMeshMID: cpp.Star<MaterialInstanceDynamic>;
	private var OwningAvatar: cpp.Star<Actor>;
	private var ControllerType: EControllerType;
	private var OverrideControllerType: EControllerType;
	@:protected public var ControllerMotionSource: FName;
	@:protected public var VRMode: cpp.Star<VREditorMode>;

	public function TryOverrideControllerType(InControllerType: EControllerType): Bool;
	public function SetupComponent(OwningActor: cpp.Star<Actor>): Void;
	public function SetForceShowLaser(bInForceShow: Bool): Void;
	public function SetForceLaserColor(InColor: cpp.Reference<LinearColor>): Void;
	public function SetControllerType(InControllerType: EControllerType): Void;
	public function SetControllerHandSide(InControllerHandSide: FName): Void;
	public function ReplaceHandMeshComponent(NewMesh: cpp.Star<StaticMesh>): Void;
	public function IsTouchingTrackpad(): Bool;
	public function IsHoveringOverUI(): Bool;
	public function IsClickingOnUI(): Bool;
	public function Init(InVRMode: cpp.Star<VREditorMode>): Void;
	public function GetTrackpadPosition(): Vector2D;
	public function GetTeleportActor(): cpp.Star<VREditorTeleporter>;
	public function GetSlideDelta(): cpp.Float32;
	public function GetSelectAndMoveTriggerValue(): cpp.Float32;
	public function GetMotionControllerComponent(): cpp.Star<MotionControllerComp>;
	public function GetLastTrackpadPosition(): Vector2D;
	public function GetLaserStart(): Vector;
	public function GetLaserEnd(): Vector;
	public function GetHMDDeviceType(): FName;
	public function GetControllerType(): EControllerType;
	public function GetControllerSide(): EControllerHand;
	public function GetControllerHandSide(): FName;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsTouchingTrackpad, IsHoveringOverUI, IsClickingOnUI, GetTrackpadPosition, GetSlideDelta,
	GetSelectAndMoveTriggerValue, GetMotionControllerComponent, GetLastTrackpadPosition, GetLaserStart, GetLaserEnd,
	GetHMDDeviceType, GetControllerType, GetControllerSide, GetControllerHandSide
)
@:nativeGen
abstract ConstVREditorInteractor(VREditorInteractor) from VREditorInteractor {
}

@:forward
@:nativeGen
@:native("VREditorInteractor*")
abstract VREditorInteractorPtr(cpp.Star<VREditorInteractor>) from cpp.Star<VREditorInteractor> to cpp.Star<VREditorInteractor>{
	@:from
	public static extern inline function fromValue(v: VREditorInteractor): VREditorInteractorPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): VREditorInteractor {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}