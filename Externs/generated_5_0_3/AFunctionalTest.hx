// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AFunctionalTest")
@:include("FunctionalTest.h")
extern class AFunctionalTest extends AActor {
	public var TestLabel: FString;
	public var SpriteComponent: TObjectPtr<UBillboardComponent>;
	public var bIsEnabled: Bool;
	public var LogErrorHandling: EFunctionalTestLogHandling;
	public var LogWarningHandling: EFunctionalTestLogHandling;
	public var Author: FString;
	public var Description: FString;
	public var ObservationPoint: TObjectPtr<AActor>;
	public var RandomNumbersStream: FRandomStream;
	public var Result: EFunctionalTestResult;
	public var PreparationTimeLimit: cpp.Float32;
	public var TimeLimit: cpp.Float32;
	public var TimesUpMessage: FText;
	public var TimesUpResult: EFunctionalTestResult;
	public var OnTestPrepare: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnTestStart: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnTestFinished: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var AutoDestroyActors: TArray<TObjectPtr<AActor>>;
	public var RenderComp: TObjectPtr<UFuncTestRenderingComponent>;
	public var TestName: TObjectPtr<UTextRenderComponent>;
	public var bIsRunning: Bool;
	public var TotalTime: cpp.Float32;

	public function SetTimeLimit(NewTimeLimit: cpp.Float32, ResultWhenTimeRunsOut: EFunctionalTestResult): Void;
	public function RegisterAutoDestroyActor(ActorToAutoDestroy: cpp.Star<AActor>): Void;
	public function ReceiveStartTest(): Void;
	public function ReceivePrepareTest(): Void;
	public function OnWantsReRunCheck(): Bool;
	public function OnAdditionalTestFinishedMessageRequest(TestResult: EFunctionalTestResult): FString;
	public function LogMessage(Message: FString): Void;
	public function IsRunning(): Bool;
	public function IsReady(): Bool;
	public function IsEnabled(): Bool;
	public function GetCurrentRerunReason(): FName;
	public function FinishTest(TestResult: EFunctionalTestResult, Message: FString): Void;
	public function DebugGatherRelevantActors(): TArray<cpp.Star<AActor>>;
	public function AssertValue_Int(Actual: cpp.Int32, ShouldBe: EComparisonMethod, Expected: cpp.Int32, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertValue_Float(Actual: cpp.Float32, ShouldBe: EComparisonMethod, Expected: cpp.Float32, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertValue_Double(Actual: cpp.Float64, ShouldBe: EComparisonMethod, Expected: cpp.Float64, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertValue_DateTime(Actual: FDateTime, ShouldBe: EComparisonMethod, Expected: FDateTime, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertTrue(Condition: Bool, Message: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertNotEqual_Vector(Actual: FVector, NotExpected: FVector, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertNotEqual_Transform(Actual: FTransform, NotExpected: FTransform, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertNotEqual_String(Actual: FString, NotExpected: FString, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertNotEqual_Rotator(Actual: FRotator, NotExpected: FRotator, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertIsValid(Object: cpp.Star<UObject>, Message: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertFalse(Condition: Bool, Message: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Vector(Actual: FVector, Expected: FVector, What: FString, Tolerance: cpp.Float32, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Transform(Actual: FTransform, Expected: FTransform, What: FString, Tolerance: cpp.Float32, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_TraceQueryResults(Actual: cpp.Star<UTraceQueryTestResults>, Expected: cpp.Star<UTraceQueryTestResults>, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_String(Actual: FString, Expected: FString, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Rotator(Actual: FRotator, Expected: FRotator, What: FString, Tolerance: cpp.Float32, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Object(Actual: cpp.Star<UObject>, Expected: cpp.Star<UObject>, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Name(Actual: FName, Expected: FName, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Int(Actual: cpp.Int32, Expected: cpp.Int32, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Float(Actual: cpp.Float32, Expected: cpp.Float32, What: FString, Tolerance: cpp.Float32, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Double(Actual: cpp.Float64, Expected: cpp.Float64, What: FString, Tolerance: cpp.Float64, ContextObject: cpp.Star<UObject>): Bool;
	public function AssertEqual_Bool(Actual: Bool, Expected: Bool, What: FString, ContextObject: cpp.Star<UObject>): Bool;
	public function AddWarning(Message: FString): Void;
	public function AddRerun(Reason: FName): Void;
	public function AddError(Message: FString): Void;
}
