// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInstancedStaticMeshComponent")
@:include("Components/InstancedStaticMeshComponent.h")
extern class InstancedComp extends StaticMesComp {
	public var PerInstanceSMData: TArray<FInstancedStaticMeshInstanceData>;
	public var PerInstancePrevTransform: TArray<FMatrix>;
	public var NumCustomDataFloats: cpp.Int32;
	public var PerInstanceSMCustomData: TArray<cpp.Float32>;
	public var InstancingRandomSeed: cpp.Int32;
	public var AdditionalRandomSeeds: TArray<FInstancedStaticMeshRandomSeed>;
	public var InstanceStartCullDistance: cpp.Int32;
	public var InstanceEndCullDistance: cpp.Int32;
	public var InstanceReorderTable: TArray<cpp.Int32>;
	public var NumPendingLightmaps: cpp.Int32;
	public var CachedMappings: TArray<FInstancedStaticMeshMappingInfo>;

	public function UpdateInstanceTransform(InstanceIndex: cpp.Int32, NewInstanceTransform: cpp.Reference<FTransform>, bWorldSpace: Bool, bMarkRenderStateDirty: Bool, bTeleport: Bool): cpp.Reference<Bool>;
	public function SetCustomDataValue(InstanceIndex: cpp.Int32, CustomDataIndex: cpp.Int32, CustomDataValue: cpp.Float32, bMarkRenderStateDirty: Bool): cpp.Reference<Bool>;
	public function SetCullDistances(StartCullDistance: cpp.Int32, EndCullDistance: cpp.Int32): Void;
	public function RemoveInstances(InstancesToRemove: cpp.Reference<TArray<cpp.Int32>>): cpp.Reference<Bool>;
	public function RemoveInstance(InstanceIndex: cpp.Int32): cpp.Reference<Bool>;
	public function IsValidInstance(InstanceIndex: cpp.Int32): cpp.Reference<Bool>;
	public function GetInstanceTransform(InstanceIndex: cpp.Int32, OutInstanceTransform: cpp.Reference<FTransform>, bWorldSpace: Bool): cpp.Reference<Bool>;
	public function GetInstancesOverlappingSphere(Center: cpp.Reference<FVector>, Radius: cpp.Float32, bSphereInWorldSpace: Bool): cpp.Reference<TArray<cpp.Int32>>;
	public function GetInstancesOverlappingBox(Box: cpp.Reference<FBox>, bBoxInWorldSpace: Bool): cpp.Reference<TArray<cpp.Int32>>;
	public function GetInstanceCount(): cpp.Reference<cpp.Int32>;
	public function ClearInstances(): Void;
	public function BatchUpdateInstancesTransforms(StartInstanceIndex: cpp.Int32, NewInstancesTransforms: cpp.Reference<TArray<FTransform>>, bWorldSpace: Bool, bMarkRenderStateDirty: Bool, bTeleport: Bool): cpp.Reference<Bool>;
	public function BatchUpdateInstancesTransform(StartInstanceIndex: cpp.Int32, NumInstances: cpp.Int32, NewInstancesTransform: cpp.Reference<FTransform>, bWorldSpace: Bool, bMarkRenderStateDirty: Bool, bTeleport: Bool): cpp.Reference<Bool>;
	public function AddInstanceWorldSpace(WorldTransform: cpp.Reference<FTransform>): cpp.Reference<cpp.Int32>;
	public function AddInstances(InstanceTransforms: cpp.Reference<TArray<FTransform>>, bShouldReturnIndices: Bool, bWorldSpace: Bool): cpp.Reference<TArray<cpp.Int32>>;
	public function AddInstance(InstanceTransform: cpp.Reference<FTransform>, bWorldSpace: Bool): cpp.Reference<cpp.Int32>;
}

@:forward(IsValidInstance, GetInstanceTransform, GetInstancesOverlappingSphere, GetInstancesOverlappingBox, GetInstanceCount)
abstract ConstInstancedComp(InstancedComp) from InstancedComp {
}