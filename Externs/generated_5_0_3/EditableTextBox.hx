// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditableTextBox")
@:include("Components/EditableTextBox.h")
extern class EditableTextBox extends Widget {
	public var Text: FText;
	public var TextDelegate: HaxeDelegateProperty<() -> Void>;
	public var WidgetStyle: EditableTextBoxStyle;
	public var Style_DEPRECATED: cpp.Star<SlateWidgetStyleAsset>;
	public var HintText: FText;
	public var HintTextDelegate: HaxeDelegateProperty<() -> Void>;
	public var Font_DEPRECATED: SlateFontInfo;
	public var ForegroundColor_DEPRECATED: LinearColor;
	public var BackgroundColor_DEPRECATED: LinearColor;
	public var ReadOnlyForegroundColor_DEPRECATED: LinearColor;
	public var IsReadOnly: Bool;
	public var IsPassword: Bool;
	public var MinimumDesiredWidth: cpp.Float32;
	public var Padding_DEPRECATED: Margin;
	public var IsCaretMovedWhenGainFocus: Bool;
	public var SelectAllTextWhenFocused: Bool;
	public var RevertTextOnEscape: Bool;
	public var ClearKeyboardFocusOnCommit: Bool;
	public var SelectAllTextOnCommit: Bool;
	public var AllowContextMenu: Bool;
	public var KeyboardType: EVirtualKeyboardType;
	public var VirtualKeyboardOptions: VirtualKeyboardOptions;
	public var VirtualKeyboardTrigger: EVirtualKeyboardTrigger;
	public var VirtualKeyboardDismissAction: EVirtualKeyboardDismissAction;
	public var Justification: ETextJustify;
	public var OverflowPolicy: ETextOverflowPolicy;
	public var ShapedTextOptions: ShapedTextOptions;
	public var OnTextChanged: HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>) -> Void>;
	public var OnTextCommitted: HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>, ETextCommit) -> Void>;

	public function SetTextOverflowPolicy(InOverflowPolicy: ETextOverflowPolicy): Void;
	public function SetText(InText: FText): Void;
	public function SetJustification(InJustification: ETextJustify): Void;
	public function SetIsReadOnly(bReadOnly: Bool): Void;
	public function SetIsPassword(bIsPassword: Bool): Void;
	public function SetHintText(InText: FText): Void;
	public function SetForegroundColor(color: LinearColor): Void;
	public function SetError(InError: FText): Void;
	public function OnEditableTextBoxCommittedEvent__DelegateSignature(Text: cpp.Reference<FText>, CommitMethod: ETextCommit): Void;
	public function OnEditableTextBoxChangedEvent__DelegateSignature(Text: cpp.Reference<FText>): Void;
	public function HasError(): cpp.Reference<Bool>;
	public function GetText(): cpp.Reference<FText>;
	public function ClearError(): Void;
}

@:forward(HasError, GetText)
@:nativeGen
abstract ConstEditableTextBox(EditableTextBox) from EditableTextBox {
	public extern var Text(get, never): FText;
	public inline extern function get_Text(): FText return this.Text;
	public extern var TextDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_TextDelegate(): HaxeDelegateProperty<() -> Void> return this.TextDelegate;
	public extern var WidgetStyle(get, never): EditableTextBoxStyle;
	public inline extern function get_WidgetStyle(): EditableTextBoxStyle return this.WidgetStyle;
	public extern var Style_DEPRECATED(get, never): cpp.Star<SlateWidgetStyleAsset.ConstSlateWidgetStyleAsset>;
	public inline extern function get_Style_DEPRECATED(): cpp.Star<SlateWidgetStyleAsset.ConstSlateWidgetStyleAsset> return this.Style_DEPRECATED;
	public extern var HintText(get, never): FText;
	public inline extern function get_HintText(): FText return this.HintText;
	public extern var HintTextDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_HintTextDelegate(): HaxeDelegateProperty<() -> Void> return this.HintTextDelegate;
	public extern var Font_DEPRECATED(get, never): SlateFontInfo;
	public inline extern function get_Font_DEPRECATED(): SlateFontInfo return this.Font_DEPRECATED;
	public extern var ForegroundColor_DEPRECATED(get, never): LinearColor;
	public inline extern function get_ForegroundColor_DEPRECATED(): LinearColor return this.ForegroundColor_DEPRECATED;
	public extern var BackgroundColor_DEPRECATED(get, never): LinearColor;
	public inline extern function get_BackgroundColor_DEPRECATED(): LinearColor return this.BackgroundColor_DEPRECATED;
	public extern var ReadOnlyForegroundColor_DEPRECATED(get, never): LinearColor;
	public inline extern function get_ReadOnlyForegroundColor_DEPRECATED(): LinearColor return this.ReadOnlyForegroundColor_DEPRECATED;
	public extern var IsReadOnly(get, never): Bool;
	public inline extern function get_IsReadOnly(): Bool return this.IsReadOnly;
	public extern var IsPassword(get, never): Bool;
	public inline extern function get_IsPassword(): Bool return this.IsPassword;
	public extern var MinimumDesiredWidth(get, never): cpp.Float32;
	public inline extern function get_MinimumDesiredWidth(): cpp.Float32 return this.MinimumDesiredWidth;
	public extern var Padding_DEPRECATED(get, never): Margin;
	public inline extern function get_Padding_DEPRECATED(): Margin return this.Padding_DEPRECATED;
	public extern var IsCaretMovedWhenGainFocus(get, never): Bool;
	public inline extern function get_IsCaretMovedWhenGainFocus(): Bool return this.IsCaretMovedWhenGainFocus;
	public extern var SelectAllTextWhenFocused(get, never): Bool;
	public inline extern function get_SelectAllTextWhenFocused(): Bool return this.SelectAllTextWhenFocused;
	public extern var RevertTextOnEscape(get, never): Bool;
	public inline extern function get_RevertTextOnEscape(): Bool return this.RevertTextOnEscape;
	public extern var ClearKeyboardFocusOnCommit(get, never): Bool;
	public inline extern function get_ClearKeyboardFocusOnCommit(): Bool return this.ClearKeyboardFocusOnCommit;
	public extern var SelectAllTextOnCommit(get, never): Bool;
	public inline extern function get_SelectAllTextOnCommit(): Bool return this.SelectAllTextOnCommit;
	public extern var AllowContextMenu(get, never): Bool;
	public inline extern function get_AllowContextMenu(): Bool return this.AllowContextMenu;
	public extern var KeyboardType(get, never): EVirtualKeyboardType;
	public inline extern function get_KeyboardType(): EVirtualKeyboardType return this.KeyboardType;
	public extern var VirtualKeyboardOptions(get, never): VirtualKeyboardOptions;
	public inline extern function get_VirtualKeyboardOptions(): VirtualKeyboardOptions return this.VirtualKeyboardOptions;
	public extern var VirtualKeyboardTrigger(get, never): EVirtualKeyboardTrigger;
	public inline extern function get_VirtualKeyboardTrigger(): EVirtualKeyboardTrigger return this.VirtualKeyboardTrigger;
	public extern var VirtualKeyboardDismissAction(get, never): EVirtualKeyboardDismissAction;
	public inline extern function get_VirtualKeyboardDismissAction(): EVirtualKeyboardDismissAction return this.VirtualKeyboardDismissAction;
	public extern var Justification(get, never): ETextJustify;
	public inline extern function get_Justification(): ETextJustify return this.Justification;
	public extern var OverflowPolicy(get, never): ETextOverflowPolicy;
	public inline extern function get_OverflowPolicy(): ETextOverflowPolicy return this.OverflowPolicy;
	public extern var ShapedTextOptions(get, never): ShapedTextOptions;
	public inline extern function get_ShapedTextOptions(): ShapedTextOptions return this.ShapedTextOptions;
	public extern var OnTextChanged(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>) -> Void>;
	public inline extern function get_OnTextChanged(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>) -> Void> return this.OnTextChanged;
	public extern var OnTextCommitted(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>, ETextCommit) -> Void>;
	public inline extern function get_OnTextCommitted(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>, ETextCommit) -> Void> return this.OnTextCommitted;
}