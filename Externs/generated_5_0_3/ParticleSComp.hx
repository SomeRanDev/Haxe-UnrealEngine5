// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UParticleSystemComponent")
@:include("Particles/ParticleSystemComponent.h")
extern class ParticleSComp extends FXSystemCComp {
	public var Template: cpp.Star<ParticleSystem>;
	public var EmitterMaterials: TArray<cpp.Star<MaterialInterface>>;
	public var SkelMeshComponents: TArray<cpp.Star<SkeletalMComp>>;
	public var bResetOnDetach: Bool;
	public var bUpdateOnDedicatedServer: Bool;
	public var bAllowRecycling: Bool;
	public var bAutoManageAttachment: Bool;
	public var bAutoAttachWeldSimulatedBodies: Bool;
	public var bWarmingUp: Bool;
	public var bOverrideLODMethod: Bool;
	public var bSkipUpdateDynamicDataDuringTick: Bool;
	public var LODMethod: ParticleSystemLODMethod;
	public var RequiredSignificance: EParticleSignificanceLevel;
	public var InstanceParameters: TArray<FParticleSysParam>;
	public var OnParticleSpawn: HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, FVector, FVector) -> Void>;
	public var OnParticleBurst: HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32) -> Void>;
	public var OnParticleDeath: HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32, FVector, FVector, FVector) -> Void>;
	public var OnParticleCollide: HaxeMulticastSparseDelegateProperty<(FName, cpp.Float32, cpp.Int32, FVector, FVector, FVector, FVector, FName, cpp.Star<PhysicalMaterial>) -> Void>;
	public var bOldPositionValid: Bool;
	public var OldPosition: FVector;
	public var PartSysVelocity: FVector;
	public var WarmupTime: cpp.Float32;
	public var WarmupTickRate: cpp.Float32;
	public var SecondsBeforeInactive: cpp.Float32;
	public var MaxTimeBeforeForceUpdateTransform: cpp.Float32;
	public var EditorLODLevel: cpp.Int32;
	public var EditorDetailMode: cpp.Int32;
	public var ReplayClips: TArray<cpp.Star<ParticleSystemReplay>>;
	public var CustomTimeDilation: cpp.Float32;
	public var AutoAttachParent: TWeakObjectPtr<SceneCompComp>;
	public var AutoAttachSocketName: FName;
	public var AutoAttachLocationType_DEPRECATED: EAttachLocation;
	public var AutoAttachLocationRule: EAttachmentRule;
	public var AutoAttachRotationRule: EAttachmentRule;
	public var AutoAttachScaleRule: EAttachmentRule;
	public var OnSystemFinished: HaxeMulticastSparseDelegateProperty<(cpp.Star<ParticleSComp>) -> Void>;

	public function SetTrailSourceData(InFirstSocketName: FName, InSecondSocketName: FName, InWidthMode: ETrailWidthMode, InWidth: cpp.Float32): Void;
	public function SetTemplate(NewTemplate: cpp.Star<ParticleSystem>): Void;
	public function SetMaterialParameter(ParameterName: FName, Param: cpp.Star<MaterialInterface>): Void;
	public function SetBeamTargetTangent(EmitterIndex: cpp.Int32, NewTangentPoint: FVector, TargetIndex: cpp.Int32): Void;
	public function SetBeamTargetStrength(EmitterIndex: cpp.Int32, NewTargetStrength: cpp.Float32, TargetIndex: cpp.Int32): Void;
	public function SetBeamTargetPoint(EmitterIndex: cpp.Int32, NewTargetPoint: FVector, TargetIndex: cpp.Int32): Void;
	public function SetBeamSourceTangent(EmitterIndex: cpp.Int32, NewTangentPoint: FVector, SourceIndex: cpp.Int32): Void;
	public function SetBeamSourceStrength(EmitterIndex: cpp.Int32, NewSourceStrength: cpp.Float32, SourceIndex: cpp.Int32): Void;
	public function SetBeamSourcePoint(EmitterIndex: cpp.Int32, NewSourcePoint: FVector, SourceIndex: cpp.Int32): Void;
	public function SetBeamEndPoint(EmitterIndex: cpp.Int32, NewEndPoint: FVector): Void;
	public function SetAutoAttachParams(Parent: cpp.Star<SceneCompComp>, SocketName: FName, LocationType: EAttachLocation): Void;
	public function GetNumActiveParticles(): cpp.Reference<cpp.Int32>;
	public function GetNamedMaterial(InName: FName): cpp.Reference<cpp.Star<MaterialInterface>>;
	public function GetBeamTargetTangent(EmitterIndex: cpp.Int32, TargetIndex: cpp.Int32, OutTangentPoint: cpp.Reference<FVector>): cpp.Reference<Bool>;
	public function GetBeamTargetStrength(EmitterIndex: cpp.Int32, TargetIndex: cpp.Int32, OutTargetStrength: cpp.Reference<cpp.Float32>): cpp.Reference<Bool>;
	public function GetBeamTargetPoint(EmitterIndex: cpp.Int32, TargetIndex: cpp.Int32, OutTargetPoint: cpp.Reference<FVector>): cpp.Reference<Bool>;
	public function GetBeamSourceTangent(EmitterIndex: cpp.Int32, SourceIndex: cpp.Int32, OutTangentPoint: cpp.Reference<FVector>): cpp.Reference<Bool>;
	public function GetBeamSourceStrength(EmitterIndex: cpp.Int32, SourceIndex: cpp.Int32, OutSourceStrength: cpp.Reference<cpp.Float32>): cpp.Reference<Bool>;
	public function GetBeamSourcePoint(EmitterIndex: cpp.Int32, SourceIndex: cpp.Int32, OutSourcePoint: cpp.Reference<FVector>): cpp.Reference<Bool>;
	public function GetBeamEndPoint(EmitterIndex: cpp.Int32, OutEndPoint: cpp.Reference<FVector>): cpp.Reference<Bool>;
	public function GenerateParticleEvent(InEventName: FName, InEmitterTime: cpp.Float32, InLocation: FVector, InDirection: FVector, InVelocity: FVector): Void;
	public function EndTrails(): Void;
	public function CreateNamedDynamicMaterialInstance(InName: FName, SourceMaterial: cpp.Star<MaterialInterface>): cpp.Reference<cpp.Star<MaterialInstanceDynamic>>;
	public function BeginTrails(InFirstSocketName: FName, InSecondSocketName: FName, InWidthMode: ETrailWidthMode, InWidth: cpp.Float32): Void;
}

@:forward(GetNumActiveParticles, GetNamedMaterial, GetBeamTargetTangent, GetBeamTargetStrength, GetBeamTargetPoint, GetBeamSourceTangent, GetBeamSourceStrength, GetBeamSourcePoint, GetBeamEndPoint)
abstract ConstParticleSComp(ParticleSComp) from ParticleSComp {
}