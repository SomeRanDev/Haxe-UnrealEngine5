// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWidgetBlueprintLibrary")
@:include("Blueprint/WidgetBlueprintLibrary.h")
extern class UWidgetBlueprintLibrary extends UBlueprintFunctionLibrary {

	public function UnlockMouse(Reply: FEventReply): FEventReply;
	public function Unhandled(): FEventReply;
	public function SetWindowTitleBarState(TitleBarContent: cpp.Star<UWidget>, Mode: EWindowTitleBarMode, bTitleBarDragEnabled: Bool, bWindowButtonsVisible: Bool, bTitleBarVisible: Bool): Void;
	public function SetWindowTitleBarOnCloseClickedDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function SetWindowTitleBarCloseButtonActive(bActive: Bool): Void;
	public function SetUserFocus(Reply: FEventReply, FocusWidget: cpp.Star<UWidget>, bInAllUsers: Bool): FEventReply;
	public function SetMousePosition(Reply: FEventReply, NewMousePosition: FVector2D): FEventReply;
	public function SetInputMode_UIOnlyEx(PlayerController: cpp.Star<APlayerController>, InWidgetToFocus: cpp.Star<UWidget>, InMouseLockMode: EMouseLockMode): Void;
	public function SetInputMode_GameOnly(PlayerController: cpp.Star<APlayerController>): Void;
	public function SetInputMode_GameAndUIEx(PlayerController: cpp.Star<APlayerController>, InWidgetToFocus: cpp.Star<UWidget>, InMouseLockMode: EMouseLockMode, bHideCursorDuringCapture: Bool): Void;
	public function SetHardwareCursor(WorldContextObject: cpp.Star<UObject>, CursorShape: EMouseCursor, CursorName: FName, HotSpot: FVector2D): Bool;
	public function SetFocusToGameViewport(): Void;
	public function SetColorVisionDeficiencyType(Type: EColorVisionDeficiency, Severity: cpp.Float32, CorrectDeficiency: Bool, ShowCorrectionWithDeficiency: Bool): Void;
	public function SetBrushResourceToTexture(Brush: FSlateBrush, Texture: cpp.Star<UTexture2D>): Void;
	public function SetBrushResourceToMaterial(Brush: FSlateBrush, Material: cpp.Star<UMaterialInterface>): Void;
	public function RestorePreviousWindowTitleBarState(): Void;
	public function ReleaseMouseCapture(Reply: FEventReply): FEventReply;
	public function ReleaseJoystickCapture(Reply: FEventReply, bInAllJoysticks: Bool): FEventReply;
	public function OnGameWindowCloseButtonClickedDelegate__DelegateSignature(): Void;
	public function NoResourceBrush(): FSlateBrush;
	public function MakeBrushFromTexture(Texture: cpp.Star<UTexture2D>, Width: cpp.Int32, Height: cpp.Int32): FSlateBrush;
	public function MakeBrushFromMaterial(Material: cpp.Star<UMaterialInterface>, Width: cpp.Int32, Height: cpp.Int32): FSlateBrush;
	public function MakeBrushFromAsset(BrushAsset: cpp.Star<USlateBrushAsset>): FSlateBrush;
	public function LockMouse(Reply: FEventReply, CapturingWidget: cpp.Star<UWidget>): FEventReply;
	public function IsDragDropping(): Bool;
	public function Handled(): FEventReply;
	public function GetSafeZonePadding(WorldContextObject: cpp.Star<UObject>, SafePadding: FVector4, SafePaddingScale: FVector2D, SpillOverPadding: FVector4): Void;
	public function GetKeyEventFromAnalogInputEvent(Event: FAnalogInputEvent): FKeyEvent;
	public function GetInputEventFromPointerEvent(Event: FPointerEvent): FInputEvent;
	public function GetInputEventFromNavigationEvent(Event: FNavigationEvent): FInputEvent;
	public function GetInputEventFromKeyEvent(Event: FKeyEvent): FInputEvent;
	public function GetInputEventFromCharacterEvent(Event: FCharacterEvent): FInputEvent;
	public function GetDynamicMaterial(Brush: FSlateBrush): cpp.Star<UMaterialInstanceDynamic>;
	public function GetDragDroppingContent(): cpp.Star<UDragDropOperation>;
	public function GetBrushResourceAsTexture2D(Brush: FSlateBrush): cpp.Star<UTexture2D>;
	public function GetBrushResourceAsMaterial(Brush: FSlateBrush): cpp.Star<UMaterialInterface>;
	public function GetBrushResource(Brush: FSlateBrush): cpp.Star<UObject>;
	public function GetAllWidgetsWithInterface(WorldContextObject: cpp.Star<UObject>, FoundWidgets: TArray<cpp.Star<UUserWidget>>, Interface: TSubclassOf<UInterface>, TopLevelOnly: Bool): Void;
	public function GetAllWidgetsOfClass(WorldContextObject: cpp.Star<UObject>, FoundWidgets: TArray<cpp.Star<UUserWidget>>, WidgetClass: TSubclassOf<UUserWidget>, TopLevelOnly: Bool): Void;
	public function EndDragDrop(Reply: FEventReply): FEventReply;
	public function DrawTextFormatted(Context: FPaintContext, Text: cpp.Reference<FText>, Position: FVector2D, Font: cpp.Star<UFont>, FontSize: cpp.Int32, FontTypeFace: FName, Tint: FLinearColor): Void;
	public function DrawText(Context: FPaintContext, InString: FString, Position: FVector2D, Tint: FLinearColor): Void;
	public function DrawLines(Context: FPaintContext, Points: TArray<FVector2D>, Tint: FLinearColor, bAntiAlias: Bool, Thickness: cpp.Float32): Void;
	public function DrawLine(Context: FPaintContext, PositionA: FVector2D, PositionB: FVector2D, Tint: FLinearColor, bAntiAlias: Bool, Thickness: cpp.Float32): Void;
	public function DrawBox(Context: FPaintContext, Position: FVector2D, Size: FVector2D, Brush: cpp.Star<USlateBrushAsset>, Tint: FLinearColor): Void;
	public function DismissAllMenus(): Void;
	public function DetectDragIfPressed(PointerEvent: FPointerEvent, WidgetDetectingDrag: cpp.Star<UWidget>, DragKey: FKey): FEventReply;
	public function DetectDrag(Reply: FEventReply, WidgetDetectingDrag: cpp.Star<UWidget>, DragKey: FKey): FEventReply;
	public function CreateDragDropOperation(OperationClass: TSubclassOf<UDragDropOperation>): cpp.Star<UDragDropOperation>;
	public function Create(WorldContextObject: cpp.Star<UObject>, WidgetType: TSubclassOf<UUserWidget>, OwningPlayer: cpp.Star<APlayerController>): cpp.Star<UUserWidget>;
	public function ClearUserFocus(Reply: FEventReply, bInAllUsers: Bool): FEventReply;
	public function CaptureMouse(Reply: FEventReply, CapturingWidget: cpp.Star<UWidget>): FEventReply;
	public function CaptureJoystick(Reply: FEventReply, CapturingWidget: cpp.Star<UWidget>, bInAllJoysticks: Bool): FEventReply;
	public function CancelDragDrop(): Void;
}
