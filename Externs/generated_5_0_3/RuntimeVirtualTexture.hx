// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URuntimeVirtualTexture")
@:include("VT/RuntimeVirtualTexture.h")
@:structAccess
extern class RuntimeVirtualTexture extends Object {
	public function GetTileCount(): cpp.Int32;
	public function GetTileSize(): cpp.Int32;
	public function GetTileBorderSize(): cpp.Int32;
	@:protected public var MaterialType: ERuntimeVirtualTextureMaterialType;
	@:protected public var bCompressTextures: Bool;
	@:protected public var bUseLowQualityCompression: Bool;
	@:protected public var bClearTextures: Bool;
	@:protected public var bSinglePhysicalSpace: Bool;
	@:protected public var bPrivateSpace: Bool;
	@:protected public var bAdaptive: Bool;
	@:protected public var bContinuousUpdate: Bool;
	@:protected public var RemoveLowMips: cpp.Int32;
	@:protected public var LODGroup: TEnumAsByte<TextureGroup>;

	public function GetSize(): cpp.Int32;
	public function GetPageTableSize(): cpp.Int32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetSize, GetPageTableSize)
@:nativeGen
abstract ConstRuntimeVirtualTexture(RuntimeVirtualTexture) from RuntimeVirtualTexture {
}

@:forward
@:nativeGen
@:native("RuntimeVirtualTexture*")
abstract RuntimeVirtualTexturePtr(cpp.Star<RuntimeVirtualTexture>) from cpp.Star<RuntimeVirtualTexture> to cpp.Star<RuntimeVirtualTexture>{
	@:from
	public static extern inline function fromValue(v: RuntimeVirtualTexture): RuntimeVirtualTexturePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RuntimeVirtualTexture {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}