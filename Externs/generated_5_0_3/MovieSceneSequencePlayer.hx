// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovieSceneSequencePlayer")
@:include("MovieSceneSequencePlayer.h")
@:structAccess
extern class MovieSceneSequencePlayer extends Object {
	public var OnPlay: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnPlayReverse: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnStop: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnPause: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnFinished: HaxeMulticastSparseDelegateProperty<() -> Void>;
	@:protected public var Status: TEnumAsByte<EMovieScenePlayerStatus>;
	@:protected public var bReversePlayback: Bool;
	@:protected public var Sequence: cpp.Star<MovieSceneSequence>;
	@:protected public var StartTime: FrameNumber;
	@:protected public var DurationFrames: cpp.Int32;
	@:protected public var DurationSubFrames: cpp.Float32;
	@:protected public var CurrentNumLoops: cpp.Int32;
	@:protected public var PlaybackSettings: MovieSceneSequencePlaybackSettings;
	@:protected public var RootTemplateInstance: MovieSceneRootEvaluationTemplateInstance;
	@:protected public var NetSyncProps: MovieSceneSequenceReplProperties;
	@:protected public var PlaybackClient: MovieScenePlaybackClient;
	@:protected public var TickManager: cpp.Star<MovieSceneSequenceTickManager>;

	public function StopAtCurrentTime(): Void;
	public function Stop(): Void;
	public function SetTimeRange(StartTime: cpp.Float32, Duration: cpp.Float32): Void;
	public function SetPlayRate(PlayRate: cpp.Float32): Void;
	public function SetPlaybackPosition(PlaybackParams: MovieSceneSequencePlaybackParams): Void;
	public function SetFrameRate(FrameRate: FrameRate): Void;
	public function SetFrameRange(StartFrame: cpp.Int32, Duration: cpp.Int32, SubFrames: cpp.Float32): Void;
	public function SetDisableCameraCuts(bInDisableCameraCuts: Bool): Void;
	public function ScrubToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function ScrubToMarkedFrame(InLabel: FString): Bool;
	public function ScrubToFrame(NewPosition: FrameTime): Void;
	public function Scrub(): Void;
	private function RPC_OnStopEvent(StoppedTime: FrameTime): Void;
	private function RPC_OnFinishPlaybackEvent(StoppedTime: FrameTime): Void;
	private function RPC_ExplicitServerUpdateEvent(Method: EUpdatePositionMethod, RelevantTime: FrameTime): Void;
	public function RestoreState(): Void;
	public function PlayToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function PlayToMarkedFrame(InLabel: FString): Bool;
	public function PlayToFrame(NewPosition: FrameTime): Void;
	public function PlayTo(PlaybackParams: MovieSceneSequencePlaybackParams, PlayToParams: MovieSceneSequencePlayToParams): Void;
	public function PlayReverse(): Void;
	public function PlayLooping(NumLoops: cpp.Int32): Void;
	public function Play(): Void;
	public function Pause(): Void;
	public function JumpToSeconds(TimeInSeconds: cpp.Float32): Void;
	public function JumpToMarkedFrame(InLabel: FString): Bool;
	public function JumpToFrame(NewPosition: FrameTime): Void;
	public function IsReversed(): Bool;
	public function IsPlaying(): Bool;
	public function IsPaused(): Bool;
	public function GoToEndAndStop(): Void;
	public function GetStartTime(): QualifiedFrameTime;
	public function GetSequenceName(bAddClientInfo: Bool): FString;
	public function GetSequence(): cpp.Star<MovieSceneSequence>;
	public function GetPlayRate(): cpp.Float32;
	public function GetObjectBindings(InObject: cpp.Star<Object>): TArray<MovieSceneObjectBindingID>;
	public function GetFrameRate(): FrameRate;
	public function GetFrameDuration(): cpp.Int32;
	public function GetEndTime(): QualifiedFrameTime;
	public function GetDuration(): QualifiedFrameTime;
	public function GetDisableCameraCuts(): Bool;
	public function GetCurrentTime(): QualifiedFrameTime;
	public function GetBoundObjects(ObjectBinding: MovieSceneObjectBindingID): TArray<cpp.Star<Object>>;
	public function ChangePlaybackDirection(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsReversed, IsPlaying, IsPaused, GetStartTime, GetSequenceName,
	GetSequence, GetPlayRate, GetFrameRate, GetFrameDuration, GetEndTime,
	GetDuration, GetCurrentTime
)
@:nativeGen
abstract ConstMovieSceneSequencePlayer(MovieSceneSequencePlayer) from MovieSceneSequencePlayer {
	public extern var OnPlay(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnPlay(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnPlay;
	public extern var OnPlayReverse(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnPlayReverse(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnPlayReverse;
	public extern var OnStop(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnStop(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnStop;
	public extern var OnPause(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnPause(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnPause;
	public extern var OnFinished(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnFinished(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnFinished;
}

@:forward
@:nativeGen
@:native("MovieSceneSequencePlayer*")
abstract MovieSceneSequencePlayerPtr(cpp.Star<MovieSceneSequencePlayer>) from cpp.Star<MovieSceneSequencePlayer> to cpp.Star<MovieSceneSequencePlayer>{
	@:from
	public static extern inline function fromValue(v: MovieSceneSequencePlayer): MovieSceneSequencePlayerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MovieSceneSequencePlayer {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}