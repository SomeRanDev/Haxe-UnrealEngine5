// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ADynamicMeshActor")
@:include("DynamicMeshActor.h")
@:structAccess
extern class DynamicMeshActor extends Actor {
	public var DynamicMeshComponent: cpp.Star<DynamicMeshComp>;
	public var bEnableComputeMeshPool: Bool;
	public var DynamicMeshPool: cpp.Star<DynamicMeshPool>;

	public function ReleaseComputeMesh(Mesh: cpp.Star<DynamicMesh>): cpp.Reference<Bool>;
	public function ReleaseAllComputeMeshes(): Void;
	public function GetDynamicMeshComponent(): cpp.Reference<cpp.Star<DynamicMeshComp>>;
	public function GetComputeMeshPool(): cpp.Reference<cpp.Star<DynamicMeshPool>>;
	public function FreeAllComputeMeshes(): Void;
	public function AllocateComputeMesh(): cpp.Reference<cpp.Star<DynamicMesh>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetDynamicMeshComponent)
@:nativeGen
abstract ConstDynamicMeshActor(DynamicMeshActor) from DynamicMeshActor {
	public extern var DynamicMeshComponent(get, never): cpp.Star<DynamicMeshComp.ConstDynamicMeshComp>;
	public inline extern function get_DynamicMeshComponent(): cpp.Star<DynamicMeshComp.ConstDynamicMeshComp> return this.DynamicMeshComponent;
	public extern var bEnableComputeMeshPool(get, never): Bool;
	public inline extern function get_bEnableComputeMeshPool(): Bool return this.bEnableComputeMeshPool;
	public extern var DynamicMeshPool(get, never): cpp.Star<DynamicMeshPool.ConstDynamicMeshPool>;
	public inline extern function get_DynamicMeshPool(): cpp.Star<DynamicMeshPool.ConstDynamicMeshPool> return this.DynamicMeshPool;
}

@:forward
@:nativeGen
@:native("DynamicMeshActor*")
abstract DynamicMeshActorPtr(cpp.Star<DynamicMeshActor>) from cpp.Star<DynamicMeshActor> to cpp.Star<DynamicMeshActor>{
	@:from
	public static extern inline function fromValue(v: DynamicMeshActor): DynamicMeshActorPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): DynamicMeshActor {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}