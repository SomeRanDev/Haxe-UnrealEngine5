// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGameMapsSettings")
@:include("GameMapsSettings.h")
@:structAccess
extern class GameMapsSettings extends Object {
	public var LocalMapOptions: FString;
	public var TransitionMap: SoftObjectPath;
	public var bUseSplitscreen: Bool;
	public var TwoPlayerSplitscreenLayout: TEnumAsByte<ETwoPlayerSplitScreenType>;
	public var ThreePlayerSplitscreenLayout: TEnumAsByte<EThreePlayerSplitScreenType>;
	public var FourPlayerSplitscreenLayout: EFourPlayerSplitScreenType;
	public var bOffsetPlayerGamepadIds: Bool;
	public var GameInstanceClass: SoftClassPath;
	private var GameDefaultMap: SoftObjectPath;
	private var ServerDefaultMap: SoftObjectPath;
	private var GlobalDefaultGameMode: SoftClassPath;
	private var GlobalDefaultServerGameMode: SoftClassPath;
	private var GameModeMapPrefixes: TArray<GameModeName>;
	private var GameModeClassAliases: TArray<GameModeName>;

	public function SetSkipAssigningGamepadToPlayer1(bSkipFirstPlayer: Bool): Void;
	public function GetSkipAssigningGamepadToPlayer1(): Bool;
	public function GetGameMapsSettings(): cpp.Star<GameMapsSettings>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetSkipAssigningGamepadToPlayer1)
@:nativeGen
abstract ConstGameMapsSettings(GameMapsSettings) from GameMapsSettings {
	public extern var LocalMapOptions(get, never): FString;
	public inline extern function get_LocalMapOptions(): FString return this.LocalMapOptions;
	public extern var TransitionMap(get, never): SoftObjectPath;
	public inline extern function get_TransitionMap(): SoftObjectPath return this.TransitionMap;
	public extern var bUseSplitscreen(get, never): Bool;
	public inline extern function get_bUseSplitscreen(): Bool return this.bUseSplitscreen;
	public extern var TwoPlayerSplitscreenLayout(get, never): TEnumAsByte<ETwoPlayerSplitScreenType>;
	public inline extern function get_TwoPlayerSplitscreenLayout(): TEnumAsByte<ETwoPlayerSplitScreenType> return this.TwoPlayerSplitscreenLayout;
	public extern var ThreePlayerSplitscreenLayout(get, never): TEnumAsByte<EThreePlayerSplitScreenType>;
	public inline extern function get_ThreePlayerSplitscreenLayout(): TEnumAsByte<EThreePlayerSplitScreenType> return this.ThreePlayerSplitscreenLayout;
	public extern var FourPlayerSplitscreenLayout(get, never): EFourPlayerSplitScreenType;
	public inline extern function get_FourPlayerSplitscreenLayout(): EFourPlayerSplitScreenType return this.FourPlayerSplitscreenLayout;
	public extern var bOffsetPlayerGamepadIds(get, never): Bool;
	public inline extern function get_bOffsetPlayerGamepadIds(): Bool return this.bOffsetPlayerGamepadIds;
	public extern var GameInstanceClass(get, never): SoftClassPath;
	public inline extern function get_GameInstanceClass(): SoftClassPath return this.GameInstanceClass;
}

@:forward
@:nativeGen
@:native("GameMapsSettings*")
abstract GameMapsSettingsPtr(cpp.Star<GameMapsSettings>) from cpp.Star<GameMapsSettings> to cpp.Star<GameMapsSettings>{
	@:from
	public static extern inline function fromValue(v: GameMapsSettings): GameMapsSettingsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GameMapsSettings {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}