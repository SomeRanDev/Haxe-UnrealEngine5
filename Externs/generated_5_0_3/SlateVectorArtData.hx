// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USlateVectorArtData")
@:include("Slate/SlateVectorArtData.h")
@:structAccess
extern class SlateVectorArtData extends Object {
	public var MeshAsset: cpp.Star<StaticMesh>;
	public var SourceMaterial: cpp.Star<MaterialInterface>;
	public var VertexData: TArray<SlateMeshVertex>;
	public var IndexData: TArray<cpp.UInt32>;
	public var Material: cpp.Star<MaterialInterface>;
	public var ExtentMin: Vector2D;
	public var ExtentMax: Vector2D;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstSlateVectorArtData(SlateVectorArtData) from SlateVectorArtData {
	public extern var MeshAsset(get, never): cpp.Star<StaticMesh.ConstStaticMesh>;
	public inline extern function get_MeshAsset(): cpp.Star<StaticMesh.ConstStaticMesh> return this.MeshAsset;
	public extern var SourceMaterial(get, never): cpp.Star<MaterialInterface.ConstMaterialInterface>;
	public inline extern function get_SourceMaterial(): cpp.Star<MaterialInterface.ConstMaterialInterface> return this.SourceMaterial;
	public extern var VertexData(get, never): TArray<SlateMeshVertex>;
	public inline extern function get_VertexData(): TArray<SlateMeshVertex> return this.VertexData;
	public extern var IndexData(get, never): TArray<cpp.UInt32>;
	public inline extern function get_IndexData(): TArray<cpp.UInt32> return this.IndexData;
	public extern var Material(get, never): cpp.Star<MaterialInterface.ConstMaterialInterface>;
	public inline extern function get_Material(): cpp.Star<MaterialInterface.ConstMaterialInterface> return this.Material;
	public extern var ExtentMin(get, never): Vector2D;
	public inline extern function get_ExtentMin(): Vector2D return this.ExtentMin;
	public extern var ExtentMax(get, never): Vector2D;
	public inline extern function get_ExtentMax(): Vector2D return this.ExtentMax;
}

@:forward
@:nativeGen
@:native("SlateVectorArtData*")
abstract SlateVectorArtDataPtr(cpp.Star<SlateVectorArtData>) from cpp.Star<SlateVectorArtData> to cpp.Star<SlateVectorArtData>{
	@:from
	public static extern inline function fromValue(v: SlateVectorArtData): SlateVectorArtDataPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SlateVectorArtData {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}