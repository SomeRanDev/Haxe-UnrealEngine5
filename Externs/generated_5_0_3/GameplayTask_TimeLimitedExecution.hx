// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UGameplayTask_TimeLimitedExecution")
@:include("Tasks/GameplayTask_TimeLimitedExecution.h")
@:structAccess
extern class GameplayTask_TimeLimitedExecution extends GameplayTask {
	public var OnFinished: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var OnTimeExpired: HaxeMulticastSparseDelegateProperty<() -> Void>;

	public function TaskFinishDelegate__DelegateSignature(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstGameplayTask_TimeLimitedExecution(GameplayTask_TimeLimitedExecution) from GameplayTask_TimeLimitedExecution {
	public extern var OnFinished(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnFinished(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnFinished;
	public extern var OnTimeExpired(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnTimeExpired(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnTimeExpired;
}

@:forward
@:nativeGen
@:native("GameplayTask_TimeLimitedExecution*")
abstract GameplayTask_TimeLimitedExecutionPtr(cpp.Star<GameplayTask_TimeLimitedExecution>) from cpp.Star<GameplayTask_TimeLimitedExecution> to cpp.Star<GameplayTask_TimeLimitedExecution>{
	@:from
	public static extern inline function fromValue(v: GameplayTask_TimeLimitedExecution): GameplayTask_TimeLimitedExecutionPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): GameplayTask_TimeLimitedExecution {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}