// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URigVMNode")
@:include("RigVMModel/RigVMNode.h")
@:structAccess
extern class RigVMNode extends Object {
	public var NodeTitle: FString;
	public var Position: Vector2D;
	public var Size: Vector2D;
	public var NodeColor: LinearColor;
	public var PreviousName: FName;
	public var bHasBreakpoint: Bool;
	public var bHaltedAtThisNode: Bool;
	public var Pins: TArray<cpp.Star<RigVMPin>>;
	public var OrphanedPins: TArray<cpp.Star<RigVMPin>>;

	public function SetHasBreakpoint(bValue: Bool): Void;
	public function SetExecutionIsHaltedAtThisNode(bValue: Bool): Void;
	public function IsVisibleInUI(): cpp.Reference<Bool>;
	public function IsSelected(): cpp.Reference<Bool>;
	public function IsPure(): cpp.Reference<Bool>;
	public function IsMutable(): cpp.Reference<Bool>;
	public function IsLinkedTo(InNode: cpp.Star<RigVMNode>): cpp.Reference<Bool>;
	public function IsInjected(): cpp.Reference<Bool>;
	public function IsEvent(): cpp.Reference<Bool>;
	public function IsDefinedAsVarying(): cpp.Reference<Bool>;
	public function IsDefinedAsConstant(): cpp.Reference<Bool>;
	public function HasPinOfDirection(InDirection: ERigVMPinDirection): cpp.Reference<Bool>;
	public function HasOutputPin(bIncludeIO: Bool): cpp.Reference<Bool>;
	public function HasOrphanedPins(): cpp.Reference<Bool>;
	public function HasIOPin(): cpp.Reference<Bool>;
	public function HasInputPin(bIncludeIO: Bool): cpp.Reference<Bool>;
	public function HasBreakpoint(): cpp.Reference<Bool>;
	public function GetToolTipText(): cpp.Reference<FText>;
	public function GetSize(): cpp.Reference<Vector2D>;
	public function GetRootGraph(): cpp.Reference<cpp.Star<RigVMGraph>>;
	public function GetPreviousFName(): cpp.Reference<FName>;
	public function GetPosition(): cpp.Reference<Vector2D>;
	public function GetPins(): cpp.Reference<TArray<cpp.Star<RigVMPin>>>;
	public function GetOrphanedPins(): cpp.Reference<TArray<cpp.Star<RigVMPin>>>;
	public function GetNodeTitle(): cpp.Reference<FString>;
	public function GetNodePath(bRecursive: Bool): cpp.Reference<FString>;
	public function GetNodeIndex(): cpp.Reference<cpp.Int32>;
	public function GetNodeColor(): cpp.Reference<LinearColor>;
	public function GetLinks(): cpp.Reference<TArray<cpp.Star<RigVMLink>>>;
	public function GetLinkedTargetNodes(): cpp.Reference<TArray<cpp.Star<RigVMNode>>>;
	public function GetLinkedSourceNodes(): cpp.Reference<TArray<cpp.Star<RigVMNode>>>;
	public function GetInjectionInfo(): cpp.Reference<cpp.Star<RigVMInjectionInfo>>;
	public function GetGraph(): cpp.Reference<cpp.Star<RigVMGraph>>;
	public function GetEventName(): cpp.Reference<FName>;
	public function GetAllPinsRecursively(): cpp.Reference<TArray<cpp.Star<RigVMPin>>>;
	public function FindPin(InPinPath: FString): cpp.Reference<cpp.Star<RigVMPin>>;
	public function ExecutionIsHaltedAtThisNode(): cpp.Reference<Bool>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsVisibleInUI, IsSelected, IsPure, IsMutable, IsLinkedTo,
	IsInjected, IsEvent, IsDefinedAsVarying, IsDefinedAsConstant, HasPinOfDirection,
	HasOutputPin, HasOrphanedPins, HasIOPin, HasInputPin, HasBreakpoint,
	GetToolTipText, GetSize, GetRootGraph, GetPreviousFName, GetPosition,
	GetPins, GetOrphanedPins, GetNodeTitle, GetNodePath, GetNodeIndex,
	GetNodeColor, GetLinks, GetLinkedTargetNodes, GetLinkedSourceNodes, GetInjectionInfo,
	GetGraph, GetEventName, GetAllPinsRecursively, FindPin, ExecutionIsHaltedAtThisNode
)
@:nativeGen
abstract ConstRigVMNode(RigVMNode) from RigVMNode {
	public extern var NodeTitle(get, never): FString;
	public inline extern function get_NodeTitle(): FString return this.NodeTitle;
	public extern var Position(get, never): Vector2D;
	public inline extern function get_Position(): Vector2D return this.Position;
	public extern var Size(get, never): Vector2D;
	public inline extern function get_Size(): Vector2D return this.Size;
	public extern var NodeColor(get, never): LinearColor;
	public inline extern function get_NodeColor(): LinearColor return this.NodeColor;
	public extern var PreviousName(get, never): FName;
	public inline extern function get_PreviousName(): FName return this.PreviousName;
	public extern var bHasBreakpoint(get, never): Bool;
	public inline extern function get_bHasBreakpoint(): Bool return this.bHasBreakpoint;
	public extern var bHaltedAtThisNode(get, never): Bool;
	public inline extern function get_bHaltedAtThisNode(): Bool return this.bHaltedAtThisNode;
	public extern var Pins(get, never): TArray<cpp.Star<RigVMPin.ConstRigVMPin>>;
	public inline extern function get_Pins(): TArray<cpp.Star<RigVMPin.ConstRigVMPin>> return this.Pins;
	public extern var OrphanedPins(get, never): TArray<cpp.Star<RigVMPin.ConstRigVMPin>>;
	public inline extern function get_OrphanedPins(): TArray<cpp.Star<RigVMPin.ConstRigVMPin>> return this.OrphanedPins;
}

@:forward
@:nativeGen
@:native("RigVMNode*")
abstract RigVMNodePtr(cpp.Star<RigVMNode>) from cpp.Star<RigVMNode> to cpp.Star<RigVMNode>{
	@:from
	public static extern inline function fromValue(v: RigVMNode): RigVMNodePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RigVMNode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}