// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USceneComponent")
@:include("Components/SceneComponent.h")
extern class USceneComponent extends UActorComponent {
	public var PhysicsVolume: TWeakObjectPtr<APhysicsVolume>;
	public var AttachParent: TObjectPtr<USceneComponent>;
	public var AttachSocketName: FName;
	public var AttachChildren: TArray<TObjectPtr<USceneComponent>>;
	public var ClientAttachedChildren: TArray<TObjectPtr<USceneComponent>>;
	public var RelativeLocation: FVector;
	public var RelativeRotation: FRotator;
	public var RelativeScale3D: FVector;
	public var ComponentVelocity: FVector;
	public var bComponentToWorldUpdated: Bool;
	public var bAbsoluteLocation: Bool;
	public var bAbsoluteRotation: Bool;
	public var bAbsoluteScale: Bool;
	public var bVisible: Bool;
	public var bShouldBeAttached: Bool;
	public var bShouldSnapLocationWhenAttached: Bool;
	public var bShouldSnapRotationWhenAttached: Bool;
	public var bShouldUpdatePhysicsVolume: Bool;
	public var bHiddenInGame: Bool;
	public var bBoundsChangeTriggersStreamingDataRebuild: Bool;
	public var bUseAttachParentBound: Bool;
	public var bComputeFastLocalBounds: Bool;
	public var bComputeBoundsOnceForGame: Bool;
	public var bComputedBoundsOnceForGame: Bool;
	public var bVisualizeComponent: Bool;
	public var Mobility: EComponentMobility;
	public var DetailMode: EDetailMode;
	public var PhysicsVolumeChangedDelegate: HaxeMulticastSparseDelegateProperty<(cpp.Star<APhysicsVolume>) -> Void>;
	public var ReplacementSceneComponent: TObjectPtr<USceneComponent>;

	public function ToggleVisibility(bPropagateToChildren: Bool): Void;
	public function SetWorldScale3D(NewScale: FVector): Void;
	public function SetVisibility(bNewVisibility: Bool, bPropagateToChildren: Bool): Void;
	public function SetShouldUpdatePhysicsVolume(bInShouldUpdatePhysicsVolume: Bool): Void;
	public function SetRelativeScale3D(NewScale3D: FVector): Void;
	public function SetMobility(NewMobility: EComponentMobility): Void;
	public function SetHiddenInGame(NewHidden: Bool, bPropagateToChildren: Bool): Void;
	public function SetAbsolute(bNewAbsoluteLocation: Bool, bNewAbsoluteRotation: Bool, bNewAbsoluteScale: Bool): Void;
	public function ResetRelativeTransform(): Void;
	public function OnRep_Visibility(OldValue: Bool): Void;
	public function OnRep_Transform(): Void;
	public function OnRep_AttachSocketName(): Void;
	public function OnRep_AttachParent(): Void;
	public function OnRep_AttachChildren(): Void;
	public function K2_SetWorldTransform(NewTransform: FTransform, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_SetWorldRotation(NewRotation: FRotator, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_SetWorldLocationAndRotation(NewLocation: FVector, NewRotation: FRotator, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_SetWorldLocation(NewLocation: FVector, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_SetRelativeTransform(NewTransform: FTransform, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_SetRelativeRotation(NewRotation: FRotator, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_SetRelativeLocationAndRotation(NewLocation: FVector, NewRotation: FRotator, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_SetRelativeLocation(NewLocation: FVector, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_GetComponentToWorld(): FTransform;
	public function K2_GetComponentScale(): FVector;
	public function K2_GetComponentRotation(): FRotator;
	public function K2_GetComponentLocation(): FVector;
	public function K2_DetachFromComponent(LocationRule: EDetachmentRule, RotationRule: EDetachmentRule, ScaleRule: EDetachmentRule, bCallModify: Bool): Void;
	public function K2_AttachToComponent(Parent: cpp.Star<USceneComponent>, SocketName: FName, LocationRule: EAttachmentRule, RotationRule: EAttachmentRule, ScaleRule: EAttachmentRule, bWeldSimulatedBodies: Bool): Bool;
	public function K2_AttachTo(InParent: cpp.Star<USceneComponent>, InSocketName: FName, AttachType: EAttachLocation, bWeldSimulatedBodies: Bool): Bool;
	public function K2_AddWorldTransformKeepScale(DeltaTransform: FTransform, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_AddWorldTransform(DeltaTransform: FTransform, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_AddWorldRotation(DeltaRotation: FRotator, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_AddWorldOffset(DeltaLocation: FVector, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_AddRelativeRotation(DeltaRotation: FRotator, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_AddRelativeLocation(DeltaLocation: FVector, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_AddLocalTransform(DeltaTransform: FTransform, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_AddLocalRotation(DeltaRotation: FRotator, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function K2_AddLocalOffset(DeltaLocation: FVector, bSweep: Bool, SweepHitResult: FHitResult, bTeleport: Bool): Void;
	public function IsVisible(): Bool;
	public function IsSimulatingPhysics(BoneName: FName): Bool;
	public function IsAnySimulatingPhysics(): Bool;
	public function GetUpVector(): FVector;
	public function GetSocketTransform(InSocketName: FName, TransformSpace: ERelativeTransformSpace): FTransform;
	public function GetSocketRotation(InSocketName: FName): FRotator;
	public function GetSocketQuaternion(InSocketName: FName): FQuat;
	public function GetSocketLocation(InSocketName: FName): FVector;
	public function GetShouldUpdatePhysicsVolume(): Bool;
	public function GetRightVector(): FVector;
	public function GetRelativeTransform(): FTransform;
	public function GetPhysicsVolume(): cpp.Star<APhysicsVolume>;
	public function GetParentComponents(Parents: TArray<cpp.Star<USceneComponent>>): Void;
	public function GetNumChildrenComponents(): cpp.Int32;
	public function GetForwardVector(): FVector;
	public function GetComponentVelocity(): FVector;
	public function GetChildrenComponents(bIncludeAllDescendants: Bool, Children: TArray<cpp.Star<USceneComponent>>): Void;
	public function GetChildComponent(ChildIndex: cpp.Int32): cpp.Star<USceneComponent>;
	public function GetAttachSocketName(): FName;
	public function GetAttachParent(): cpp.Star<USceneComponent>;
	public function GetAllSocketNames(): TArray<FName>;
	public function DoesSocketExist(InSocketName: FName): Bool;
	public function DetachFromParent(bMaintainWorldPosition: Bool, bCallModify: Bool): Void;
}
