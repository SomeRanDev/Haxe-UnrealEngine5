// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlueprintPathsLibrary")
@:include("Kismet/BlueprintPathsLibrary.h")
extern class UBlueprintPathsLibrary extends UBlueprintFunctionLibrary {

	public function VideoCaptureDir(): FString;
	public function ValidatePath(InPath: FString, bDidSucceed: Bool, OutReason: cpp.Reference<FText>): Void;
	public function Split(InPath: FString, PathPart: cpp.Reference<FString>, FilenamePart: cpp.Reference<FString>, ExtensionPart: cpp.Reference<FString>): Void;
	public function SourceConfigDir(): FString;
	public function ShouldSaveToUserDir(): Bool;
	public function ShaderWorkingDir(): FString;
	public function SetProjectFilePath(NewGameProjectFilePath: FString): Void;
	public function SetExtension(InPath: FString, InNewExtension: FString): FString;
	public function ScreenShotDir(): FString;
	public function SandboxesDir(): FString;
	public function RootDir(): FString;
	public function RemoveDuplicateSlashes(InPath: FString, OutPath: cpp.Reference<FString>): Void;
	public function ProjectUserDir(): FString;
	public function ProjectSavedDir(): FString;
	public function ProjectPluginsDir(): FString;
	public function ProjectPersistentDownloadDir(): FString;
	public function ProjectModsDir(): FString;
	public function ProjectLogDir(): FString;
	public function ProjectIntermediateDir(): FString;
	public function ProjectDir(): FString;
	public function ProjectContentDir(): FString;
	public function ProjectConfigDir(): FString;
	public function ProfilingDir(): FString;
	public function NormalizeFilename(InPath: FString, OutPath: cpp.Reference<FString>): Void;
	public function NormalizeDirectoryName(InPath: FString, OutPath: cpp.Reference<FString>): Void;
	public function MakeValidFileName(InString: FString, InReplacementChar: FString): FString;
	public function MakeStandardFilename(InPath: FString, OutPath: cpp.Reference<FString>): Void;
	public function MakePlatformFilename(InPath: FString, OutPath: cpp.Reference<FString>): Void;
	public function MakePathRelativeTo(InPath: FString, InRelativeTo: FString, OutPath: cpp.Reference<FString>): Bool;
	public function LaunchDir(): FString;
	public function IsSamePath(PathA: FString, PathB: FString): Bool;
	public function IsRestrictedPath(InPath: FString): Bool;
	public function IsRelative(InPath: FString): Bool;
	public function IsProjectFilePathSet(): Bool;
	public function IsDrive(InPath: FString): Bool;
	public function HasProjectPersistentDownloadDir(): Bool;
	public function GetToolTipLocalizationPaths(): TArray<FString>;
	public function GetRestrictedFolderNames(): TArray<FString>;
	public function GetRelativePathToRoot(): FString;
	public function GetPropertyNameLocalizationPaths(): TArray<FString>;
	public function GetProjectFilePath(): FString;
	public function GetPath(InPath: FString): FString;
	public function GetInvalidFileSystemChars(): FString;
	public function GetGameLocalizationPaths(): TArray<FString>;
	public function GetExtension(InPath: FString, bIncludeDot: Bool): FString;
	public function GetEngineLocalizationPaths(): TArray<FString>;
	public function GetEditorLocalizationPaths(): TArray<FString>;
	public function GetCleanFilename(InPath: FString): FString;
	public function GetBaseFilename(InPath: FString, bRemovePath: Bool): FString;
	public function GeneratedConfigDir(): FString;
	public function GameUserDeveloperDir(): FString;
	public function GameSourceDir(): FString;
	public function GameDevelopersDir(): FString;
	public function GameAgnosticSavedDir(): FString;
	public function FileExists(InPath: FString): Bool;
	public function FeaturePackDir(): FString;
	public function EnterprisePluginsDir(): FString;
	public function EnterpriseFeaturePackDir(): FString;
	public function EnterpriseDir(): FString;
	public function EngineVersionAgnosticUserDir(): FString;
	public function EngineUserDir(): FString;
	public function EngineSourceDir(): FString;
	public function EngineSavedDir(): FString;
	public function EnginePluginsDir(): FString;
	public function EngineIntermediateDir(): FString;
	public function EngineDir(): FString;
	public function EngineContentDir(): FString;
	public function EngineConfigDir(): FString;
	public function DirectoryExists(InPath: FString): Bool;
	public function DiffDir(): FString;
	public function CreateTempFilename(Path: FString, Prefix: FString, Extension: FString): FString;
	public function ConvertToSandboxPath(InPath: FString, InSandboxName: FString): FString;
	public function ConvertRelativePathToFull(InPath: FString, InBasePath: FString): FString;
	public function ConvertFromSandboxPath(InPath: FString, InSandboxName: FString): FString;
	public function Combine(InPaths: TArray<FString>): FString;
	public function CollapseRelativeDirectories(InPath: FString, OutPath: cpp.Reference<FString>): Bool;
	public function CloudDir(): FString;
	public function ChangeExtension(InPath: FString, InNewExtension: FString): FString;
	public function BugItDir(): FString;
	public function AutomationTransientDir(): FString;
	public function AutomationLogDir(): FString;
	public function AutomationDir(): FString;
}
