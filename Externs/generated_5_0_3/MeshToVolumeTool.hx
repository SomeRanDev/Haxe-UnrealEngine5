// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMeshToVolumeTool")
@:include("MeshToVolumeTool.h")
@:structAccess
extern class MeshToVolumeTool extends SingleSelectionMeshEditingTool {
	public var Settings: cpp.Star<MeshToVolumeToolProperties>;
	public var HandleSourcesProperties: cpp.Star<OnAcceptHandleSourcesProperties>;
	public var PreviewMesh: cpp.Star<PreviewMesh>;
	public var VolumeEdgesSet: cpp.Star<LineSetComp>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstMeshToVolumeTool(MeshToVolumeTool) from MeshToVolumeTool {
	public extern var Settings(get, never): cpp.Star<MeshToVolumeToolProperties.ConstMeshToVolumeToolProperties>;
	public inline extern function get_Settings(): cpp.Star<MeshToVolumeToolProperties.ConstMeshToVolumeToolProperties> return this.Settings;
	public extern var HandleSourcesProperties(get, never): cpp.Star<OnAcceptHandleSourcesProperties.ConstOnAcceptHandleSourcesProperties>;
	public inline extern function get_HandleSourcesProperties(): cpp.Star<OnAcceptHandleSourcesProperties.ConstOnAcceptHandleSourcesProperties> return this.HandleSourcesProperties;
	public extern var PreviewMesh(get, never): cpp.Star<PreviewMesh.ConstPreviewMesh>;
	public inline extern function get_PreviewMesh(): cpp.Star<PreviewMesh.ConstPreviewMesh> return this.PreviewMesh;
	public extern var VolumeEdgesSet(get, never): cpp.Star<LineSetComp.ConstLineSetComp>;
	public inline extern function get_VolumeEdgesSet(): cpp.Star<LineSetComp.ConstLineSetComp> return this.VolumeEdgesSet;
}

@:forward
@:nativeGen
@:native("MeshToVolumeTool*")
abstract MeshToVolumeToolPtr(cpp.Star<MeshToVolumeTool>) from cpp.Star<MeshToVolumeTool> to cpp.Star<MeshToVolumeTool>{
	@:from
	public static extern inline function fromValue(v: MeshToVolumeTool): MeshToVolumeToolPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MeshToVolumeTool {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}