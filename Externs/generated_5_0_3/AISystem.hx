// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAISystem")
@:include("AISystem.h")
@:structAccess
extern class AISystem extends AISystemBase {
	public var PerceptionSystemClassName: SoftClassPath;
	public var HotSpotManagerClassName: SoftClassPath;
	public var EnvQueryManagerClassName: SoftClassPath;
	public var AcceptanceRadius: cpp.Float32;
	public var PathfollowingRegularPathPointAcceptanceRadius: cpp.Float32;
	public var PathfollowingNavLinkAcceptanceRadius: cpp.Float32;
	public var bFinishMoveOnGoalOverlap: Bool;
	public var bAcceptPartialPaths: Bool;
	public var bAllowStrafing: Bool;
	public var bEnableBTAITasks: Bool;
	public var bAllowControllersAsEQSQuerier: Bool;
	public var bEnableDebuggerPlugin: Bool;
	public var bForgetStaleActors: Bool;
	public var bAddBlackboardSelfKey: Bool;
	public var bClearBBEntryOnBTEQSFail: Bool;
	public var DefaultSightCollisionChannel: ECollisionChannel;
	public var BehaviorTreeManager: cpp.Star<BehaviorTreeManager>;
	public var EnvironmentQueryManager: cpp.Star<EnvQueryManager>;
	public var PerceptionSystem: cpp.Star<AIPerceptionSystem>;
	public var AllProxyObjects: TArray<cpp.Star<AIAsyncTaskBlueprintProxy>>;
	public var HotSpotManager: cpp.Star<AIHotSpotManager>;
	public var NavLocalGrids: cpp.Star<NavLocalGridManager>;

	public function AILoggingVerbose(): Void;
	public function AIIgnorePlayers(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAISystem(AISystem) from AISystem {
	public extern var PerceptionSystemClassName(get, never): SoftClassPath;
	public inline extern function get_PerceptionSystemClassName(): SoftClassPath return this.PerceptionSystemClassName;
	public extern var HotSpotManagerClassName(get, never): SoftClassPath;
	public inline extern function get_HotSpotManagerClassName(): SoftClassPath return this.HotSpotManagerClassName;
	public extern var EnvQueryManagerClassName(get, never): SoftClassPath;
	public inline extern function get_EnvQueryManagerClassName(): SoftClassPath return this.EnvQueryManagerClassName;
	public extern var AcceptanceRadius(get, never): cpp.Float32;
	public inline extern function get_AcceptanceRadius(): cpp.Float32 return this.AcceptanceRadius;
	public extern var PathfollowingRegularPathPointAcceptanceRadius(get, never): cpp.Float32;
	public inline extern function get_PathfollowingRegularPathPointAcceptanceRadius(): cpp.Float32 return this.PathfollowingRegularPathPointAcceptanceRadius;
	public extern var PathfollowingNavLinkAcceptanceRadius(get, never): cpp.Float32;
	public inline extern function get_PathfollowingNavLinkAcceptanceRadius(): cpp.Float32 return this.PathfollowingNavLinkAcceptanceRadius;
	public extern var bFinishMoveOnGoalOverlap(get, never): Bool;
	public inline extern function get_bFinishMoveOnGoalOverlap(): Bool return this.bFinishMoveOnGoalOverlap;
	public extern var bAcceptPartialPaths(get, never): Bool;
	public inline extern function get_bAcceptPartialPaths(): Bool return this.bAcceptPartialPaths;
	public extern var bAllowStrafing(get, never): Bool;
	public inline extern function get_bAllowStrafing(): Bool return this.bAllowStrafing;
	public extern var bEnableBTAITasks(get, never): Bool;
	public inline extern function get_bEnableBTAITasks(): Bool return this.bEnableBTAITasks;
	public extern var bAllowControllersAsEQSQuerier(get, never): Bool;
	public inline extern function get_bAllowControllersAsEQSQuerier(): Bool return this.bAllowControllersAsEQSQuerier;
	public extern var bEnableDebuggerPlugin(get, never): Bool;
	public inline extern function get_bEnableDebuggerPlugin(): Bool return this.bEnableDebuggerPlugin;
	public extern var bForgetStaleActors(get, never): Bool;
	public inline extern function get_bForgetStaleActors(): Bool return this.bForgetStaleActors;
	public extern var bAddBlackboardSelfKey(get, never): Bool;
	public inline extern function get_bAddBlackboardSelfKey(): Bool return this.bAddBlackboardSelfKey;
	public extern var bClearBBEntryOnBTEQSFail(get, never): Bool;
	public inline extern function get_bClearBBEntryOnBTEQSFail(): Bool return this.bClearBBEntryOnBTEQSFail;
	public extern var DefaultSightCollisionChannel(get, never): ECollisionChannel;
	public inline extern function get_DefaultSightCollisionChannel(): ECollisionChannel return this.DefaultSightCollisionChannel;
	public extern var BehaviorTreeManager(get, never): cpp.Star<BehaviorTreeManager.ConstBehaviorTreeManager>;
	public inline extern function get_BehaviorTreeManager(): cpp.Star<BehaviorTreeManager.ConstBehaviorTreeManager> return this.BehaviorTreeManager;
	public extern var EnvironmentQueryManager(get, never): cpp.Star<EnvQueryManager.ConstEnvQueryManager>;
	public inline extern function get_EnvironmentQueryManager(): cpp.Star<EnvQueryManager.ConstEnvQueryManager> return this.EnvironmentQueryManager;
	public extern var PerceptionSystem(get, never): cpp.Star<AIPerceptionSystem.ConstAIPerceptionSystem>;
	public inline extern function get_PerceptionSystem(): cpp.Star<AIPerceptionSystem.ConstAIPerceptionSystem> return this.PerceptionSystem;
	public extern var AllProxyObjects(get, never): TArray<cpp.Star<AIAsyncTaskBlueprintProxy.ConstAIAsyncTaskBlueprintProxy>>;
	public inline extern function get_AllProxyObjects(): TArray<cpp.Star<AIAsyncTaskBlueprintProxy.ConstAIAsyncTaskBlueprintProxy>> return this.AllProxyObjects;
	public extern var HotSpotManager(get, never): cpp.Star<AIHotSpotManager.ConstAIHotSpotManager>;
	public inline extern function get_HotSpotManager(): cpp.Star<AIHotSpotManager.ConstAIHotSpotManager> return this.HotSpotManager;
	public extern var NavLocalGrids(get, never): cpp.Star<NavLocalGridManager.ConstNavLocalGridManager>;
	public inline extern function get_NavLocalGrids(): cpp.Star<NavLocalGridManager.ConstNavLocalGridManager> return this.NavLocalGrids;
}

@:forward
@:nativeGen
@:native("AISystem*")
abstract AISystemPtr(cpp.Star<AISystem>) from cpp.Star<AISystem> to cpp.Star<AISystem>{
	@:from
	public static extern inline function fromValue(v: AISystem): AISystemPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AISystem {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}