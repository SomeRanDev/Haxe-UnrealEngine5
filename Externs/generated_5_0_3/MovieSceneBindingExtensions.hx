// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovieSceneBindingExtensions")
@:include("ExtensionLibraries/MovieSceneBindingExtensions.h")
@:structAccess
extern class MovieSceneBindingExtensions extends BlueprintFunctionLibrary {
	public function SetParent(InBinding: cpp.Reference<SequencerBindingProxy>, InParentBinding: cpp.Reference<SequencerBindingProxy>): Void;
	public function SetName(InBinding: cpp.Reference<SequencerBindingProxy>, InName: FString): Void;
	public function SetDisplayName(InBinding: cpp.Reference<SequencerBindingProxy>, InDisplayName: cpp.Reference<FText>): Void;
	public function RemoveTrack(InBinding: cpp.Reference<SequencerBindingProxy>, TrackToRemove: cpp.Star<MovieSceneTrack>): Void;
	public function Remove(InBinding: cpp.Reference<SequencerBindingProxy>): Void;
	public function MoveBindingContents(SourceBindingId: cpp.Reference<SequencerBindingProxy>, DestinationBindingId: cpp.Reference<SequencerBindingProxy>): Void;
	public function IsValid(InBinding: cpp.Reference<SequencerBindingProxy>): Bool;
	public function GetTracks(InBinding: cpp.Reference<SequencerBindingProxy>): TArray<cpp.Star<MovieSceneTrack>>;
	public function GetPossessedObjectClass(InBinding: cpp.Reference<SequencerBindingProxy>): cpp.Star<Class>;
	public function GetParent(InBinding: cpp.Reference<SequencerBindingProxy>): SequencerBindingProxy;
	public function GetObjectTemplate(InBinding: cpp.Reference<SequencerBindingProxy>): cpp.Star<Object>;
	public function GetName(InBinding: cpp.Reference<SequencerBindingProxy>): FString;
	public function GetId(InBinding: cpp.Reference<SequencerBindingProxy>): Guid;
	public function GetDisplayName(InBinding: cpp.Reference<SequencerBindingProxy>): FText;
	public function GetChildPossessables(InBinding: cpp.Reference<SequencerBindingProxy>): TArray<SequencerBindingProxy>;
	public function FindTracksByType(InBinding: cpp.Reference<SequencerBindingProxy>, TrackType: TSubclassOf<MovieSceneTrack>): TArray<cpp.Star<MovieSceneTrack>>;
	public function FindTracksByExactType(InBinding: cpp.Reference<SequencerBindingProxy>, TrackType: TSubclassOf<MovieSceneTrack>): TArray<cpp.Star<MovieSceneTrack>>;
	public function AddTrack(InBinding: cpp.Reference<SequencerBindingProxy>, TrackType: TSubclassOf<MovieSceneTrack>): cpp.Star<MovieSceneTrack>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstMovieSceneBindingExtensions(MovieSceneBindingExtensions) from MovieSceneBindingExtensions {
}

@:forward
@:nativeGen
@:native("MovieSceneBindingExtensions*")
abstract MovieSceneBindingExtensionsPtr(cpp.Star<MovieSceneBindingExtensions>) from cpp.Star<MovieSceneBindingExtensions> to cpp.Star<MovieSceneBindingExtensions>{
	@:from
	public static extern inline function fromValue(v: MovieSceneBindingExtensions): MovieSceneBindingExtensionsPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MovieSceneBindingExtensions {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}