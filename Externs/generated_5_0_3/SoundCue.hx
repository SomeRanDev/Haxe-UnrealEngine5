// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USoundCue")
@:include("Sound/SoundCue.h")
@:structAccess
extern class SoundCue extends SoundBase {
	public var bPrimeOnLoad: Bool;
	public var FirstNode: cpp.Star<SoundNode>;
	public var VolumeMultiplier: cpp.Float32;
	public var PitchMultiplier: cpp.Float32;
	public var AttenuationOverrides: SoundAttenuationSettings;
	@:protected public var SubtitlePriority: cpp.Float32;
	public var bOverrideAttenuation: Bool;
	public var bExcludeFromRandomNodeBranchCulling: Bool;
	private var CookedQualityIndex: cpp.Int32;
	private var bHasPlayWhenSilent: Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstSoundCue(SoundCue) from SoundCue {
	public extern var bPrimeOnLoad(get, never): Bool;
	public inline extern function get_bPrimeOnLoad(): Bool return this.bPrimeOnLoad;
	public extern var FirstNode(get, never): cpp.Star<SoundNode.ConstSoundNode>;
	public inline extern function get_FirstNode(): cpp.Star<SoundNode.ConstSoundNode> return this.FirstNode;
	public extern var VolumeMultiplier(get, never): cpp.Float32;
	public inline extern function get_VolumeMultiplier(): cpp.Float32 return this.VolumeMultiplier;
	public extern var PitchMultiplier(get, never): cpp.Float32;
	public inline extern function get_PitchMultiplier(): cpp.Float32 return this.PitchMultiplier;
	public extern var AttenuationOverrides(get, never): SoundAttenuationSettings;
	public inline extern function get_AttenuationOverrides(): SoundAttenuationSettings return this.AttenuationOverrides;
	public extern var bOverrideAttenuation(get, never): Bool;
	public inline extern function get_bOverrideAttenuation(): Bool return this.bOverrideAttenuation;
	public extern var bExcludeFromRandomNodeBranchCulling(get, never): Bool;
	public inline extern function get_bExcludeFromRandomNodeBranchCulling(): Bool return this.bExcludeFromRandomNodeBranchCulling;
}

@:forward
@:nativeGen
@:native("SoundCue*")
abstract SoundCuePtr(cpp.Star<SoundCue>) from cpp.Star<SoundCue> to cpp.Star<SoundCue>{
	@:from
	public static extern inline function fromValue(v: SoundCue): SoundCuePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SoundCue {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}