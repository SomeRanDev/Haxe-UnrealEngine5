// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URigVMGraph")
@:include("RigVMModel/RigVMGraph.h")
@:structAccess
extern class RigVMGraph extends Object {
	public var Nodes: TArray<cpp.Star<RigVMNode>>;
	public var Links: TArray<cpp.Star<RigVMLink>>;
	public var SelectedNodes: TArray<FName>;
	public var DefaultFunctionLibraryPtr: TWeakObjectPtr<RigVMGraph>;
	public var LocalVariables: TArray<RigVMGraphVariableDescription>;

	public function SetDefaultFunctionLibrary(InFunctionLibrary: cpp.Star<RigVMFunctionLibrary>): Void;
	public function IsTopLevelGraph(): cpp.Reference<Bool>;
	public function IsRootGraph(): cpp.Reference<Bool>;
	public function IsNodeSelected(InNodeName: cpp.Reference<FName>): cpp.Reference<Bool>;
	public function GetVariableDescriptions(): cpp.Reference<TArray<RigVMGraphVariableDescription>>;
	public function GetSelectNodes(): cpp.Reference<TArray<FName>>;
	public function GetRootGraph(): cpp.Reference<cpp.Star<RigVMGraph>>;
	public function GetReturnNode(): cpp.Reference<cpp.Star<RigVMFunctionReturnNode>>;
	public function GetParentGraph(): cpp.Reference<cpp.Star<RigVMGraph>>;
	public function GetParameterDescriptions(): cpp.Reference<TArray<RigVMGraphParameterDescription>>;
	public function GetOutputArguments(): cpp.Reference<TArray<RigVMGraphVariableDescription>>;
	public function GetNodes(): cpp.Reference<TArray<cpp.Star<RigVMNode>>>;
	public function GetNodePath(): cpp.Reference<FString>;
	public function GetLocalVariables(bIncludeInputArguments: Bool): cpp.Reference<TArray<RigVMGraphVariableDescription>>;
	public function GetLinks(): cpp.Reference<TArray<cpp.Star<RigVMLink>>>;
	public function GetInputArguments(): cpp.Reference<TArray<RigVMGraphVariableDescription>>;
	public function GetGraphName(): cpp.Reference<FString>;
	public function GetEntryNode(): cpp.Reference<cpp.Star<RigVMFunctionEntryNode>>;
	public function GetDefaultFunctionLibrary(): cpp.Reference<cpp.Star<RigVMFunctionLibrary>>;
	public function GetContainedGraphs(bRecursive: Bool): cpp.Reference<TArray<cpp.Star<RigVMGraph>>>;
	public function FindPin(InPinPath: FString): cpp.Reference<cpp.Star<RigVMPin>>;
	public function FindNodeByName(InNodeName: cpp.Reference<FName>): cpp.Reference<cpp.Star<RigVMNode>>;
	public function FindNode(InNodePath: FString): cpp.Reference<cpp.Star<RigVMNode>>;
	public function FindLink(InLinkPinPathRepresentation: FString): cpp.Reference<cpp.Star<RigVMLink>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	IsTopLevelGraph, IsRootGraph, IsNodeSelected, GetVariableDescriptions, GetSelectNodes,
	GetRootGraph, GetReturnNode, GetParentGraph, GetParameterDescriptions, GetOutputArguments,
	GetNodes, GetNodePath, GetLocalVariables, GetLinks, GetInputArguments,
	GetGraphName, GetEntryNode, GetDefaultFunctionLibrary, GetContainedGraphs, FindPin,
	FindNodeByName, FindNode, FindLink
)
@:nativeGen
abstract ConstRigVMGraph(RigVMGraph) from RigVMGraph {
	public extern var Nodes(get, never): TArray<cpp.Star<RigVMNode.ConstRigVMNode>>;
	public inline extern function get_Nodes(): TArray<cpp.Star<RigVMNode.ConstRigVMNode>> return this.Nodes;
	public extern var Links(get, never): TArray<cpp.Star<RigVMLink.ConstRigVMLink>>;
	public inline extern function get_Links(): TArray<cpp.Star<RigVMLink.ConstRigVMLink>> return this.Links;
	public extern var SelectedNodes(get, never): TArray<FName>;
	public inline extern function get_SelectedNodes(): TArray<FName> return this.SelectedNodes;
	public extern var DefaultFunctionLibraryPtr(get, never): TWeakObjectPtr<RigVMGraph.ConstRigVMGraph>;
	public inline extern function get_DefaultFunctionLibraryPtr(): TWeakObjectPtr<RigVMGraph.ConstRigVMGraph> return this.DefaultFunctionLibraryPtr;
	public extern var LocalVariables(get, never): TArray<RigVMGraphVariableDescription>;
	public inline extern function get_LocalVariables(): TArray<RigVMGraphVariableDescription> return this.LocalVariables;
}