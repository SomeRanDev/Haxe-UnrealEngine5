// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UProjectileMovementComponent")
@:include("GameFramework/ProjectileMovementComponent.h")
@:structAccess
extern class ProjectileMovementComp extends MovementComp {
	public var InitialSpeed: cpp.Float32;
	public var MaxSpeed: cpp.Float32;
	public var bRotationFollowsVelocity: Bool;
	public var bRotationRemainsVertical: Bool;
	public var bShouldBounce: Bool;
	public var bInitialVelocityInLocalSpace: Bool;
	public var bForceSubStepping: Bool;
	public var bSimulationEnabled: Bool;
	public var bSweepCollision: Bool;
	public var bIsHomingProjectile: Bool;
	public var bBounceAngleAffectsFriction: Bool;
	public var bIsSliding: Bool;
	public var bInterpMovement: Bool;
	public var bInterpRotation: Bool;
	public var PreviousHitTime: cpp.Float32;
	public var PreviousHitNormal: Vector;
	public var ProjectileGravityScale: cpp.Float32;
	public var Buoyancy: cpp.Float32;
	public var Bounciness: cpp.Float32;
	public var Friction: cpp.Float32;
	public var BounceVelocityStopSimulatingThreshold: cpp.Float32;
	public var MinFrictionFraction: cpp.Float32;
	public var OnProjectileBounce: HaxeMulticastSparseDelegateProperty<(cpp.Reference<HitResult>, cpp.Reference<Vector>) -> Void>;
	public var OnProjectileStop: HaxeMulticastSparseDelegateProperty<(cpp.Reference<HitResult>) -> Void>;
	public var HomingAccelerationMagnitude: cpp.Float32;
	public var HomingTargetComponent: TWeakObjectPtr<SceneComp>;
	public var MaxSimulationTimeStep: cpp.Float32;
	public var MaxSimulationIterations: cpp.Int32;
	public var BounceAdditionalIterations: cpp.Int32;
	public var InterpLocationTime: cpp.Float32;
	public var InterpRotationTime: cpp.Float32;
	public var InterpLocationMaxLagDistance: cpp.Float32;
	public var InterpLocationSnapToTargetDistance: cpp.Float32;

	public function StopSimulating(HitResult: cpp.Reference<HitResult>): Void;
	public function SetVelocityInLocalSpace(NewVelocity: Vector): Void;
	public function SetInterpolatedComponent(Component: cpp.Star<SceneComp>): Void;
	public function ResetInterpolation(): Void;
	public function OnProjectileStopDelegate__DelegateSignature(ImpactResult: cpp.Reference<HitResult>): Void;
	public function OnProjectileBounceDelegate__DelegateSignature(ImpactResult: cpp.Reference<HitResult>, ImpactVelocity: cpp.Reference<Vector>): Void;
	public function MoveInterpolationTarget(NewLocation: cpp.Reference<Vector>, NewRotation: cpp.Reference<Rotator>): Void;
	public function LimitVelocity(NewVelocity: Vector): Vector;
	public function IsVelocityUnderSimulationThreshold(): Bool;
	public function IsInterpolationComplete(): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(LimitVelocity, IsVelocityUnderSimulationThreshold, IsInterpolationComplete)
@:nativeGen
abstract ConstProjectileMovementComp(ProjectileMovementComp) from ProjectileMovementComp {
	public extern var InitialSpeed(get, never): cpp.Float32;
	public inline extern function get_InitialSpeed(): cpp.Float32 return this.InitialSpeed;
	public extern var MaxSpeed(get, never): cpp.Float32;
	public inline extern function get_MaxSpeed(): cpp.Float32 return this.MaxSpeed;
	public extern var bRotationFollowsVelocity(get, never): Bool;
	public inline extern function get_bRotationFollowsVelocity(): Bool return this.bRotationFollowsVelocity;
	public extern var bRotationRemainsVertical(get, never): Bool;
	public inline extern function get_bRotationRemainsVertical(): Bool return this.bRotationRemainsVertical;
	public extern var bShouldBounce(get, never): Bool;
	public inline extern function get_bShouldBounce(): Bool return this.bShouldBounce;
	public extern var bInitialVelocityInLocalSpace(get, never): Bool;
	public inline extern function get_bInitialVelocityInLocalSpace(): Bool return this.bInitialVelocityInLocalSpace;
	public extern var bForceSubStepping(get, never): Bool;
	public inline extern function get_bForceSubStepping(): Bool return this.bForceSubStepping;
	public extern var bSimulationEnabled(get, never): Bool;
	public inline extern function get_bSimulationEnabled(): Bool return this.bSimulationEnabled;
	public extern var bSweepCollision(get, never): Bool;
	public inline extern function get_bSweepCollision(): Bool return this.bSweepCollision;
	public extern var bIsHomingProjectile(get, never): Bool;
	public inline extern function get_bIsHomingProjectile(): Bool return this.bIsHomingProjectile;
	public extern var bBounceAngleAffectsFriction(get, never): Bool;
	public inline extern function get_bBounceAngleAffectsFriction(): Bool return this.bBounceAngleAffectsFriction;
	public extern var bIsSliding(get, never): Bool;
	public inline extern function get_bIsSliding(): Bool return this.bIsSliding;
	public extern var bInterpMovement(get, never): Bool;
	public inline extern function get_bInterpMovement(): Bool return this.bInterpMovement;
	public extern var bInterpRotation(get, never): Bool;
	public inline extern function get_bInterpRotation(): Bool return this.bInterpRotation;
	public extern var PreviousHitTime(get, never): cpp.Float32;
	public inline extern function get_PreviousHitTime(): cpp.Float32 return this.PreviousHitTime;
	public extern var PreviousHitNormal(get, never): Vector;
	public inline extern function get_PreviousHitNormal(): Vector return this.PreviousHitNormal;
	public extern var ProjectileGravityScale(get, never): cpp.Float32;
	public inline extern function get_ProjectileGravityScale(): cpp.Float32 return this.ProjectileGravityScale;
	public extern var Buoyancy(get, never): cpp.Float32;
	public inline extern function get_Buoyancy(): cpp.Float32 return this.Buoyancy;
	public extern var Bounciness(get, never): cpp.Float32;
	public inline extern function get_Bounciness(): cpp.Float32 return this.Bounciness;
	public extern var Friction(get, never): cpp.Float32;
	public inline extern function get_Friction(): cpp.Float32 return this.Friction;
	public extern var BounceVelocityStopSimulatingThreshold(get, never): cpp.Float32;
	public inline extern function get_BounceVelocityStopSimulatingThreshold(): cpp.Float32 return this.BounceVelocityStopSimulatingThreshold;
	public extern var MinFrictionFraction(get, never): cpp.Float32;
	public inline extern function get_MinFrictionFraction(): cpp.Float32 return this.MinFrictionFraction;
	public extern var OnProjectileBounce(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<HitResult>, cpp.Reference<Vector>) -> Void>;
	public inline extern function get_OnProjectileBounce(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<HitResult>, cpp.Reference<Vector>) -> Void> return this.OnProjectileBounce;
	public extern var OnProjectileStop(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Reference<HitResult>) -> Void>;
	public inline extern function get_OnProjectileStop(): HaxeMulticastSparseDelegateProperty<(cpp.Reference<HitResult>) -> Void> return this.OnProjectileStop;
	public extern var HomingAccelerationMagnitude(get, never): cpp.Float32;
	public inline extern function get_HomingAccelerationMagnitude(): cpp.Float32 return this.HomingAccelerationMagnitude;
	public extern var HomingTargetComponent(get, never): TWeakObjectPtr<SceneComp.ConstSceneComp>;
	public inline extern function get_HomingTargetComponent(): TWeakObjectPtr<SceneComp.ConstSceneComp> return this.HomingTargetComponent;
	public extern var MaxSimulationTimeStep(get, never): cpp.Float32;
	public inline extern function get_MaxSimulationTimeStep(): cpp.Float32 return this.MaxSimulationTimeStep;
	public extern var MaxSimulationIterations(get, never): cpp.Int32;
	public inline extern function get_MaxSimulationIterations(): cpp.Int32 return this.MaxSimulationIterations;
	public extern var BounceAdditionalIterations(get, never): cpp.Int32;
	public inline extern function get_BounceAdditionalIterations(): cpp.Int32 return this.BounceAdditionalIterations;
	public extern var InterpLocationTime(get, never): cpp.Float32;
	public inline extern function get_InterpLocationTime(): cpp.Float32 return this.InterpLocationTime;
	public extern var InterpRotationTime(get, never): cpp.Float32;
	public inline extern function get_InterpRotationTime(): cpp.Float32 return this.InterpRotationTime;
	public extern var InterpLocationMaxLagDistance(get, never): cpp.Float32;
	public inline extern function get_InterpLocationMaxLagDistance(): cpp.Float32 return this.InterpLocationMaxLagDistance;
	public extern var InterpLocationSnapToTargetDistance(get, never): cpp.Float32;
	public inline extern function get_InterpLocationSnapToTargetDistance(): cpp.Float32 return this.InterpLocationSnapToTargetDistance;
}

@:forward
@:nativeGen
@:native("ProjectileMovementComp*")
abstract ProjectileMovementCompPtr(cpp.Star<ProjectileMovementComp>) from cpp.Star<ProjectileMovementComp> to cpp.Star<ProjectileMovementComp>{
	@:from
	public static extern inline function fromValue(v: ProjectileMovementComp): ProjectileMovementCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ProjectileMovementComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}