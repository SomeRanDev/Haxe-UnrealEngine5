// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UWidgetBlueprintLibrary")
@:include("Blueprint/WidgetBlueprintLibrary.h")
@:structAccess
extern class WidgetBlueprintLibrary extends BlueprintFunctionLibrary {
	public function UnlockMouse(Reply: cpp.Reference<EventReply>): EventReply;
	public function Unhandled(): EventReply;
	public function SetWindowTitleBarState(TitleBarContent: cpp.Star<Widget>, Mode: EWindowTitleBarMode, bTitleBarDragEnabled: Bool, bWindowButtonsVisible: Bool, bTitleBarVisible: Bool): Void;
	public function SetWindowTitleBarOnCloseClickedDelegate(Delegate: HaxeDelegateProperty<() -> Void>): Void;
	public function SetWindowTitleBarCloseButtonActive(bActive: Bool): Void;
	public function SetUserFocus(Reply: cpp.Reference<EventReply>, FocusWidget: cpp.Star<Widget>, bInAllUsers: Bool): EventReply;
	public function SetMousePosition(Reply: cpp.Reference<EventReply>, NewMousePosition: Vector2D): EventReply;
	public function SetInputMode_UIOnlyEx(PlayerController: cpp.Star<PlayerController>, InWidgetToFocus: cpp.Star<Widget>, InMouseLockMode: EMouseLockMode): Void;
	public function SetInputMode_GameOnly(PlayerController: cpp.Star<PlayerController>): Void;
	public function SetInputMode_GameAndUIEx(PlayerController: cpp.Star<PlayerController>, InWidgetToFocus: cpp.Star<Widget>, InMouseLockMode: EMouseLockMode, bHideCursorDuringCapture: Bool): Void;
	public function SetHardwareCursor(WorldContextObject: cpp.Star<Object>, CursorShape: TEnumAsByte<EMouseCursor>, CursorName: FName, HotSpot: Vector2D): Bool;
	public function SetFocusToGameViewport(): Void;
	public function SetColorVisionDeficiencyType(Type: EColorVisionDeficiency, Severity: cpp.Float32, CorrectDeficiency: Bool, ShowCorrectionWithDeficiency: Bool): Void;
	public function SetBrushResourceToTexture(Brush: cpp.Reference<SlateBrush>, Texture: cpp.Star<Texture2D>): Void;
	public function SetBrushResourceToMaterial(Brush: cpp.Reference<SlateBrush>, Material: cpp.Star<MaterialInterface>): Void;
	public function RestorePreviousWindowTitleBarState(): Void;
	public function ReleaseMouseCapture(Reply: cpp.Reference<EventReply>): EventReply;
	public function ReleaseJoystickCapture(Reply: cpp.Reference<EventReply>, bInAllJoysticks: Bool): EventReply;
	public function OnGameWindowCloseButtonClickedDelegate__DelegateSignature(): Void;
	public function NoResourceBrush(): SlateBrush;
	public function MakeBrushFromTexture(Texture: cpp.Star<Texture2D>, Width: cpp.Int32, Height: cpp.Int32): SlateBrush;
	public function MakeBrushFromMaterial(Material: cpp.Star<MaterialInterface>, Width: cpp.Int32, Height: cpp.Int32): SlateBrush;
	public function MakeBrushFromAsset(BrushAsset: cpp.Star<SlateBrushAsset>): SlateBrush;
	public function LockMouse(Reply: cpp.Reference<EventReply>, CapturingWidget: cpp.Star<Widget>): EventReply;
	public function IsDragDropping(): Bool;
	public function Handled(): EventReply;
	public function GetSafeZonePadding(WorldContextObject: cpp.Star<Object>, SafePadding: cpp.Reference<Vector4>, SafePaddingScale: cpp.Reference<Vector2D>, SpillOverPadding: cpp.Reference<Vector4>): Void;
	public function GetKeyEventFromAnalogInputEvent(Event: cpp.Reference<AnalogInputEvent>): KeyEvent;
	public function GetInputEventFromPointerEvent(Event: cpp.Reference<PointerEvent>): InputEvent;
	public function GetInputEventFromNavigationEvent(Event: cpp.Reference<NavigationEvent>): InputEvent;
	public function GetInputEventFromKeyEvent(Event: cpp.Reference<KeyEvent>): InputEvent;
	public function GetInputEventFromCharacterEvent(Event: cpp.Reference<CharacterEvent>): InputEvent;
	public function GetDynamicMaterial(Brush: cpp.Reference<SlateBrush>): cpp.Star<MaterialInstanceDynamic>;
	public function GetDragDroppingContent(): cpp.Star<DragDropOperation>;
	public function GetBrushResourceAsTexture2D(Brush: cpp.Reference<SlateBrush>): cpp.Star<Texture2D>;
	public function GetBrushResourceAsMaterial(Brush: cpp.Reference<SlateBrush>): cpp.Star<MaterialInterface>;
	public function GetBrushResource(Brush: cpp.Reference<SlateBrush>): cpp.Star<Object>;
	public function GetAllWidgetsWithInterface(WorldContextObject: cpp.Star<Object>, FoundWidgets: cpp.Reference<TArray<cpp.Star<UserWidget>>>, Interface: TSubclassOf<Interface>, TopLevelOnly: Bool): Void;
	public function GetAllWidgetsOfClass(WorldContextObject: cpp.Star<Object>, FoundWidgets: cpp.Reference<TArray<cpp.Star<UserWidget>>>, WidgetClass: TSubclassOf<UserWidget>, TopLevelOnly: Bool): Void;
	public function EndDragDrop(Reply: cpp.Reference<EventReply>): EventReply;
	public function DrawTextFormatted(Context: cpp.Reference<PaintContext>, Text: cpp.Reference<FText>, Position: Vector2D, Font: cpp.Star<Font>, FontSize: cpp.Int32, FontTypeFace: FName, Tint: LinearColor): Void;
	public function DrawText(Context: cpp.Reference<PaintContext>, InString: FString, Position: Vector2D, Tint: LinearColor): Void;
	public function DrawLines(Context: cpp.Reference<PaintContext>, Points: cpp.Reference<TArray<Vector2D>>, Tint: LinearColor, bAntiAlias: Bool, Thickness: cpp.Float32): Void;
	public function DrawLine(Context: cpp.Reference<PaintContext>, PositionA: Vector2D, PositionB: Vector2D, Tint: LinearColor, bAntiAlias: Bool, Thickness: cpp.Float32): Void;
	public function DrawBox(Context: cpp.Reference<PaintContext>, Position: Vector2D, Size: Vector2D, Brush: cpp.Star<SlateBrushAsset>, Tint: LinearColor): Void;
	public function DismissAllMenus(): Void;
	public function DetectDragIfPressed(PointerEvent: cpp.Reference<PointerEvent>, WidgetDetectingDrag: cpp.Star<Widget>, DragKey: Key): EventReply;
	public function DetectDrag(Reply: cpp.Reference<EventReply>, WidgetDetectingDrag: cpp.Star<Widget>, DragKey: Key): EventReply;
	public function CreateDragDropOperation(OperationClass: TSubclassOf<DragDropOperation>): cpp.Star<DragDropOperation>;
	public function Create(WorldContextObject: cpp.Star<Object>, WidgetType: TSubclassOf<UserWidget>, OwningPlayer: cpp.Star<PlayerController>): cpp.Star<UserWidget>;
	public function ClearUserFocus(Reply: cpp.Reference<EventReply>, bInAllUsers: Bool): EventReply;
	public function CaptureMouse(Reply: cpp.Reference<EventReply>, CapturingWidget: cpp.Star<Widget>): EventReply;
	public function CaptureJoystick(Reply: cpp.Reference<EventReply>, CapturingWidget: cpp.Star<Widget>, bInAllJoysticks: Bool): EventReply;
	public function CancelDragDrop(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstWidgetBlueprintLibrary(WidgetBlueprintLibrary) from WidgetBlueprintLibrary {
}

@:forward
@:nativeGen
@:native("WidgetBlueprintLibrary*")
abstract WidgetBlueprintLibraryPtr(cpp.Star<WidgetBlueprintLibrary>) from cpp.Star<WidgetBlueprintLibrary> to cpp.Star<WidgetBlueprintLibrary>{
	@:from
	public static extern inline function fromValue(v: WidgetBlueprintLibrary): WidgetBlueprintLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): WidgetBlueprintLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}