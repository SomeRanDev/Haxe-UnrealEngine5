// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AActor")
@:include("GameFramework/Actor.h")
extern class Actor extends Object {
	public var PrimaryActorTick: ActorTickFunction;
	public var bNetTemporary: Bool;
	public var bNetStartup: Bool;
	public var bOnlyRelevantToOwner: Bool;
	public var bAlwaysRelevant: Bool;
	public var bReplicateMovement: Bool;
	public var bCallPreReplication: Bool;
	public var bCallPreReplicationForReplay: Bool;
	public var bHidden: Bool;
	public var bTearOff: Bool;
	public var bForceNetAddressable: Bool;
	public var bIsInEditingLevelInstance: Bool;
	public var bExchangedRoles: Bool;
	public var bNetLoadOnClient: Bool;
	public var bNetUseOwnerRelevancy: Bool;
	public var bRelevantForNetworkReplays: Bool;
	public var bRelevantForLevelBounds: Bool;
	public var bReplayRewindable: Bool;
	public var bAllowTickBeforeBeginPlay: Bool;
	public var bAutoDestroyWhenFinished: Bool;
	public var bCanBeDamaged: Bool;
	public var bBlockInput: Bool;
	public var bCollideWhenPlacing: Bool;
	public var bFindCameraComponentWhenViewTarget: Bool;
	public var bGenerateOverlapEventsDuringLevelStreaming: Bool;
	public var bIgnoresOriginShifting: Bool;
	public var bEnableAutoLODGeneration: Bool;
	public var bIsEditorOnlyActor: Bool;
	public var bActorSeamlessTraveled: Bool;
	public var bReplicates: Bool;
	public var bCanBeInCluster: Bool;
	public var bAllowReceiveTickEventOnDedicatedServer: Bool;
	public var bActorEnableCollision: Bool;
	public var bActorIsBeingDestroyed: Bool;
	public var UpdateOverlapsMethodDuringLevelStreaming: EActorUpdateOverlapsMethod;
	public var DefaultUpdateOverlapsMethodDuringLevelStreaming: EActorUpdateOverlapsMethod;
	public var RemoteRole: ENetRole;
	public var ReplicatedMovement: RepMovement;
	public var InitialLifeSpan: cpp.Float32;
	public var CustomTimeDilation: cpp.Float32;
	public var GridPlacement_DEPRECATED: EActorGridPlacement;
	public var RuntimeGrid: FName;
	public var AttachmentReplication: RepAttachment;
	public var Owner: cpp.Star<Actor>;
	public var NetDriverName: FName;
	public var Role: ENetRole;
	public var NetDormancy: ENetDormancy;
	public var SpawnCollisionHandlingMethod: ESpawnActorCollisionHandlingMethod;
	public var AutoReceiveInput: EAutoReceiveInput;
	public var InputPriority: cpp.Int32;
	public var InputComponent: cpp.Star<InputComp>;
	public var NetCullDistanceSquared: cpp.Float32;
	public var NetTag: cpp.Int32;
	public var NetUpdateFrequency: cpp.Float32;
	public var MinNetUpdateFrequency: cpp.Float32;
	public var NetPriority: cpp.Float32;
	public var Instigator: cpp.Star<Pawn>;
	public var Children: TArray<cpp.Star<Actor>>;
	public var RootComponent: cpp.Star<SceneComp>;
	public var PivotOffset: Vector;
	public var HLODLayer: cpp.Star<HLODLayer>;
	public var RayTracingGroupId: cpp.Int32;
	public var Layers: TArray<FName>;
	public var ParentComponentActor_DEPRECATED: TWeakObjectPtr<Actor>;
	public var ParentComponent: TWeakObjectPtr<ChildActorComp>;
	public var ActorGuid: Guid;
	public var DataLayers: TArray<ActorDataLayer>;
	public var GroupActor: cpp.Star<Actor>;
	public var SpriteScale: cpp.Float32;
	public var HiddenEditorViews: cpp.UInt64;
	public var ActorLabel: FString;
	public var FolderPath: FName;
	public var FolderGuid: Guid;
	public var bHiddenEd: Bool;
	public var bIsEditorPreviewActor: Bool;
	public var bHiddenEdLayer: Bool;
	public var bHiddenEdLevel: Bool;
	public var bLockLocation: Bool;
	public var bActorLabelEditable: Bool;
	public var bEditable: Bool;
	public var bListedInSceneOutliner: Bool;
	public var bOptimizeBPComponentData: Bool;
	public var bCanPlayFromHere: Bool;
	public var bIsSpatiallyLoaded: Bool;
	public var bHiddenEdTemporary: Bool;
	public var bForceExternalActorLevelReferenceForPIE: Bool;
	public var Tags: TArray<FName>;
	public var OnTakeAnyDamage: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Controller>, cpp.Star<Actor>) -> Void>;
	public var OnTakePointDamage: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Float32, cpp.Star<Controller>, Vector, cpp.Star<PrimitiveComp>, FName, Vector, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Actor>) -> Void>;
	public var OnTakeRadialDamage: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, Vector, HitResult, cpp.Star<Controller>, cpp.Star<Actor>) -> Void>;
	public var OnActorBeginOverlap: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Star<Actor>) -> Void>;
	public var OnActorEndOverlap: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Star<Actor>) -> Void>;
	public var OnBeginCursorOver: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>) -> Void>;
	public var OnEndCursorOver: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>) -> Void>;
	public var OnClicked: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, Key) -> Void>;
	public var OnReleased: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, Key) -> Void>;
	public var OnInputTouchBegin: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor>) -> Void>;
	public var OnInputTouchEnd: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor>) -> Void>;
	public var OnInputTouchEnter: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor>) -> Void>;
	public var OnInputTouchLeave: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor>) -> Void>;
	public var OnActorHit: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Star<Actor>, Vector, cpp.Reference<HitResult>) -> Void>;
	public var OnDestroyed: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>) -> Void>;
	public var OnEndPlay: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, EEndPlayReason) -> Void>;
	public var InstanceComponents: TArray<cpp.Star<ActorComp>>;
	public var BlueprintCreatedComponents: TArray<cpp.Star<ActorComp>>;

	public function WasRecentlyRendered(Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function UserConstructionScript(): Void;
	public function TearOff(): Void;
	public function SetTickGroup(NewTickGroup: ETickingGroup): Void;
	public function SetTickableWhenPaused(bTickableWhenPaused: Bool): Void;
	public function SetReplicates(bInReplicates: Bool): Void;
	public function SetReplicateMovement(bInReplicateMovement: Bool): Void;
	public function SetRayTracingGroupId(InRaytracingGroupId: cpp.Int32): Void;
	public function SetOwner(NewOwner: cpp.Star<Actor>): Void;
	public function SetNetDormancy(NewDormancy: ENetDormancy): Void;
	public function SetLifeSpan(InLifespan: cpp.Float32): Void;
	public function SetIsTemporarilyHiddenInEditor(bIsHidden: Bool): Void;
	public function SetFolderPath(NewFolderPath: cpp.Reference<FName>): Void;
	public function SetAutoDestroyWhenFinished(bVal: Bool): Void;
	public function SetActorTickInterval(TickInterval: cpp.Float32): Void;
	public function SetActorTickEnabled(bEnabled: Bool): Void;
	public function SetActorScale3D(NewScale3D: Vector): Void;
	public function SetActorRelativeScale3D(NewRelativeScale: Vector): Void;
	public function SetActorLabel(NewActorLabel: FString, bMarkDirty: Bool): Void;
	public function SetActorHiddenInGame(bNewHidden: Bool): Void;
	public function SetActorEnableCollision(bNewActorEnableCollision: Bool): Void;
	public function RemoveTickPrerequisiteComponent(PrerequisiteComponent: cpp.Star<ActorComp>): Void;
	public function RemoveTickPrerequisiteActor(PrerequisiteActor: cpp.Star<Actor>): Void;
	public function ReceiveTick(DeltaSeconds: cpp.Float32): Void;
	public function ReceiveRadialDamage(DamageReceived: cpp.Float32, DamageType: cpp.Star<DamageType.ConstDamageType>, Origin: Vector, HitInfo: cpp.Reference<HitResult>, InstigatedBy: cpp.Star<Controller>, DamageCauser: cpp.Star<Actor>): Void;
	public function ReceivePointDamage(Damage: cpp.Float32, DamageType: cpp.Star<DamageType.ConstDamageType>, HitLocation: Vector, HitNormal: Vector, HitComponent: cpp.Star<PrimitiveComp>, BoneName: FName, ShotFromDirection: Vector, InstigatedBy: cpp.Star<Controller>, DamageCauser: cpp.Star<Actor>, HitInfo: cpp.Reference<HitResult>): Void;
	public function ReceiveHit(MyComp: cpp.Star<PrimitiveComp>, Other: cpp.Star<Actor>, OtherComp: cpp.Star<PrimitiveComp>, bSelfMoved: Bool, HitLocation: Vector, HitNormal: Vector, NormalImpulse: Vector, Hit: cpp.Reference<HitResult>): Void;
	public function ReceiveEndPlay(EndPlayReason: EEndPlayReason): Void;
	public function ReceiveDestroyed(): Void;
	public function ReceiveBeginPlay(): Void;
	public function ReceiveAnyDamage(Damage: cpp.Float32, DamageType: cpp.Star<DamageType.ConstDamageType>, InstigatedBy: cpp.Star<Controller>, DamageCauser: cpp.Star<Actor>): Void;
	public function ReceiveActorOnReleased(ButtonReleased: Key): Void;
	public function ReceiveActorOnInputTouchLeave(FingerIndex: ETouchIndex): Void;
	public function ReceiveActorOnInputTouchEnter(FingerIndex: ETouchIndex): Void;
	public function ReceiveActorOnInputTouchEnd(FingerIndex: ETouchIndex): Void;
	public function ReceiveActorOnInputTouchBegin(FingerIndex: ETouchIndex): Void;
	public function ReceiveActorOnClicked(ButtonPressed: Key): Void;
	public function ReceiveActorEndOverlap(OtherActor: cpp.Star<Actor>): Void;
	public function ReceiveActorEndCursorOver(): Void;
	public function ReceiveActorBeginOverlap(OtherActor: cpp.Star<Actor>): Void;
	public function ReceiveActorBeginCursorOver(): Void;
	public function PrestreamTextures(Seconds: cpp.Float32, bEnableStreaming: Bool, CinematicTextureGroups: cpp.Int32): Void;
	public function OnRep_ReplicateMovement(): Void;
	public function OnRep_ReplicatedMovement(): Void;
	public function OnRep_Owner(): Void;
	public function OnRep_Instigator(): Void;
	public function OnRep_AttachmentReplication(): Void;
	public function MakeNoise(Loudness: cpp.Float32, NoiseInstigator: cpp.Star<Pawn>, NoiseLocation: Vector, MaxRange: cpp.Float32, Tag: FName): Void;
	public function K2_TeleportTo(DestLocation: Vector, DestRotation: Rotator): cpp.Reference<Bool>;
	public function K2_SetActorTransform(NewTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): cpp.Reference<Bool>;
	public function K2_SetActorRotation(NewRotation: Rotator, bTeleportPhysics: Bool): cpp.Reference<Bool>;
	public function K2_SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): cpp.Reference<Bool>;
	public function K2_SetActorLocation(NewLocation: Vector, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): cpp.Reference<Bool>;
	public function K2_OnReset(): Void;
	public function K2_OnEndViewTarget(PC: cpp.Star<PlayerController>): Void;
	public function K2_OnBecomeViewTarget(PC: cpp.Star<PlayerController>): Void;
	public function K2_GetRootComponent(): cpp.Reference<cpp.Star<SceneComp>>;
	public function K2_GetComponentsByClass(ComponentClass: TSubclassOf<ActorComp>): cpp.Reference<TArray<cpp.Star<ActorComp>>>;
	public function K2_GetActorRotation(): cpp.Reference<Rotator>;
	public function K2_GetActorLocation(): cpp.Reference<Vector>;
	public function K2_DetachFromActor(LocationRule: EDetachmentRule, RotationRule: EDetachmentRule, ScaleRule: EDetachmentRule): Void;
	public function K2_DestroyActor(): Void;
	public function K2_AttachToComponent(Parent: cpp.Star<SceneComp>, SocketName: FName, LocationRule: EAttachmentRule, RotationRule: EAttachmentRule, ScaleRule: EAttachmentRule, bWeldSimulatedBodies: Bool): Void;
	public function K2_AttachToActor(ParentActor: cpp.Star<Actor>, SocketName: FName, LocationRule: EAttachmentRule, RotationRule: EAttachmentRule, ScaleRule: EAttachmentRule, bWeldSimulatedBodies: Bool): Void;
	public function K2_AttachRootComponentToActor(InParentActor: cpp.Star<Actor>, InSocketName: FName, AttachLocationType: EAttachLocation, bWeldSimulatedBodies: Bool): Void;
	public function K2_AttachRootComponentTo(InParent: cpp.Star<SceneComp>, InSocketName: FName, AttachLocationType: EAttachLocation, bWeldSimulatedBodies: Bool): Void;
	public function K2_AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorWorldOffset(DeltaLocation: Vector, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorLocalTransform(NewTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorLocalOffset(DeltaLocation: Vector, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function IsTemporarilyHiddenInEditor(bIncludeParent: Bool): cpp.Reference<Bool>;
	public function IsSelectable(): cpp.Reference<Bool>;
	public function IsOverlappingActor(Other: cpp.Star<Actor.ConstActor>): cpp.Reference<Bool>;
	public function IsHiddenEdAtStartup(): cpp.Reference<Bool>;
	public function IsHiddenEd(): cpp.Reference<Bool>;
	public function IsEditable(): cpp.Reference<Bool>;
	public function IsChildActor(): cpp.Reference<Bool>;
	public function IsActorTickEnabled(): cpp.Reference<Bool>;
	public function IsActorBeingDestroyed(): cpp.Reference<Bool>;
	public function HasAuthority(): cpp.Reference<Bool>;
	public function GetVerticalDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Reference<cpp.Float32>;
	public function GetVelocity(): cpp.Reference<Vector>;
	public function GetTransform(): cpp.Reference<Transform>;
	public function GetTickableWhenPaused(): cpp.Reference<Bool>;
	public function GetSquaredHorizontalDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Reference<cpp.Float32>;
	public function GetSquaredDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Reference<cpp.Float32>;
	public function GetRemoteRole(): cpp.Reference<ENetRole>;
	public function GetRayTracingGroupId(): cpp.Reference<cpp.Int32>;
	public function GetParentComponent(): cpp.Reference<cpp.Star<ChildActorComp>>;
	public function GetParentActor(): cpp.Reference<cpp.Star<Actor>>;
	public function GetOwner(): cpp.Reference<cpp.Star<Actor>>;
	public function GetOverlappingComponents(OverlappingComponents: cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>): Void;
	public function GetOverlappingActors(OverlappingActors: cpp.Reference<TArray<cpp.Star<Actor>>>, ClassFilter: TSubclassOf<Actor>): Void;
	public function GetLocalRole(): cpp.Reference<ENetRole>;
	public function GetLifeSpan(): cpp.Reference<cpp.Float32>;
	public function GetLevelTransform(): cpp.Reference<Transform>;
	public function GetLevel(): cpp.Reference<cpp.Star<Level>>;
	public function GetInstigatorController(): cpp.Reference<cpp.Star<Controller>>;
	public function GetInstigator(): cpp.Reference<cpp.Star<Pawn>>;
	public function GetInputVectorAxisValue(InputAxisKey: Key): cpp.Reference<Vector>;
	public function GetInputAxisValue(InputAxisName: FName): cpp.Reference<cpp.Float32>;
	public function GetInputAxisKeyValue(InputAxisKey: Key): cpp.Reference<cpp.Float32>;
	public function GetHorizontalDotProductTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Reference<cpp.Float32>;
	public function GetHorizontalDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Reference<cpp.Float32>;
	public function GetGameTimeSinceCreation(): cpp.Reference<cpp.Float32>;
	public function GetFolderPath(): cpp.Reference<FName>;
	public function GetDotProductTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Reference<cpp.Float32>;
	public function GetDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Reference<cpp.Float32>;
	public function GetDefaultActorLabel(): cpp.Reference<FString>;
	public function GetComponentsByTag(ComponentClass: TSubclassOf<ActorComp>, Tag: FName): cpp.Reference<TArray<cpp.Star<ActorComp>>>;
	public function GetComponentsByInterface(Interface: TSubclassOf<Interface>): cpp.Reference<TArray<cpp.Star<ActorComp>>>;
	public function GetComponentByClass(ComponentClass: TSubclassOf<ActorComp>): cpp.Reference<cpp.Star<ActorComp>>;
	public function GetAttachParentSocketName(): cpp.Reference<FName>;
	public function GetAttachParentActor(): cpp.Reference<cpp.Star<Actor>>;
	public function GetAttachedActors(OutActors: cpp.Reference<TArray<cpp.Star<Actor>>>, bResetArray: Bool, bRecursivelyIncludeAttachedActors: Bool): Void;
	public function GetAllChildActors(ChildActors: cpp.Reference<TArray<cpp.Star<Actor>>>, bIncludeDescendants: Bool): Void;
	public function GetActorUpVector(): cpp.Reference<Vector>;
	public function GetActorTimeDilation(): cpp.Reference<cpp.Float32>;
	public function GetActorTickInterval(): cpp.Reference<cpp.Float32>;
	public function GetActorScale3D(): cpp.Reference<Vector>;
	public function GetActorRightVector(): cpp.Reference<Vector>;
	public function GetActorRelativeScale3D(): cpp.Reference<Vector>;
	public function GetActorLabel(bCreateIfNone: Bool): cpp.Reference<FString>;
	public function GetActorForwardVector(): cpp.Reference<Vector>;
	public function GetActorEyesViewPoint(OutLocation: cpp.Reference<Vector>, OutRotation: cpp.Reference<Rotator>): Void;
	public function GetActorEnableCollision(): cpp.Reference<Bool>;
	public function GetActorBounds(bOnlyCollidingComponents: Bool, Origin: cpp.Reference<Vector>, BoxExtent: cpp.Reference<Vector>, bIncludeFromChildActors: Bool): Void;
	public function ForceNetUpdate(): Void;
	public function FlushNetDormancy(): Void;
	public function FinishAddComponent(Component: cpp.Star<ActorComp>, bManualAttachment: Bool, RelativeTransform: cpp.Reference<Transform>): Void;
	public function EnableInput(PlayerController: cpp.Star<PlayerController>): Void;
	public function DisableInput(PlayerController: cpp.Star<PlayerController>): Void;
	public function DetachRootComponentFromParent(bMaintainWorldPosition: Bool): Void;
	public function AddTickPrerequisiteComponent(PrerequisiteComponent: cpp.Star<ActorComp>): Void;
	public function AddTickPrerequisiteActor(PrerequisiteActor: cpp.Star<Actor>): Void;
	public function AddComponentByClass(Class: TSubclassOf<ActorComp>, bManualAttachment: Bool, RelativeTransform: cpp.Reference<Transform>, bDeferredFinish: Bool): cpp.Reference<cpp.Star<ActorComp>>;
	public function AddComponent(TemplateName: FName, bManualAttachment: Bool, RelativeTransform: cpp.Reference<Transform>, ComponentTemplateContext: cpp.Star<Object.ConstObject>, bDeferredFinish: Bool): cpp.Reference<cpp.Star<ActorComp>>;
	public function ActorHasTag(Tag: FName): cpp.Reference<Bool>;
}

@:forward(
	WasRecentlyRendered, K2_GetRootComponent, K2_GetComponentsByClass, K2_GetActorRotation, K2_GetActorLocation,
	IsTemporarilyHiddenInEditor, IsSelectable, IsOverlappingActor, IsHiddenEdAtStartup, IsHiddenEd,
	IsEditable, IsChildActor, IsActorTickEnabled, IsActorBeingDestroyed, HasAuthority,
	GetVerticalDistanceTo, GetVelocity, GetTransform, GetSquaredHorizontalDistanceTo, GetSquaredDistanceTo,
	GetRemoteRole, GetRayTracingGroupId, GetParentComponent, GetParentActor, GetOwner,
	GetOverlappingComponents, GetOverlappingActors, GetLocalRole, GetLifeSpan, GetLevelTransform,
	GetLevel, GetInstigatorController, GetInstigator, GetInputVectorAxisValue, GetInputAxisValue,
	GetInputAxisKeyValue, GetHorizontalDotProductTo, GetHorizontalDistanceTo, GetGameTimeSinceCreation, GetFolderPath,
	GetDotProductTo, GetDistanceTo, GetDefaultActorLabel, GetComponentsByTag, GetComponentsByInterface,
	GetComponentByClass, GetAttachParentSocketName, GetAttachParentActor, GetAttachedActors, GetAllChildActors,
	GetActorUpVector, GetActorTimeDilation, GetActorTickInterval, GetActorScale3D, GetActorRightVector,
	GetActorRelativeScale3D, GetActorLabel, GetActorForwardVector, GetActorEyesViewPoint, GetActorEnableCollision,
	GetActorBounds, ActorHasTag
)
@:nativeGen
abstract ConstActor(Actor) from Actor {
	public extern var PrimaryActorTick(get, never): ActorTickFunction;
	public inline extern function get_PrimaryActorTick(): ActorTickFunction return this.PrimaryActorTick;
	public extern var bNetTemporary(get, never): Bool;
	public inline extern function get_bNetTemporary(): Bool return this.bNetTemporary;
	public extern var bNetStartup(get, never): Bool;
	public inline extern function get_bNetStartup(): Bool return this.bNetStartup;
	public extern var bOnlyRelevantToOwner(get, never): Bool;
	public inline extern function get_bOnlyRelevantToOwner(): Bool return this.bOnlyRelevantToOwner;
	public extern var bAlwaysRelevant(get, never): Bool;
	public inline extern function get_bAlwaysRelevant(): Bool return this.bAlwaysRelevant;
	public extern var bReplicateMovement(get, never): Bool;
	public inline extern function get_bReplicateMovement(): Bool return this.bReplicateMovement;
	public extern var bCallPreReplication(get, never): Bool;
	public inline extern function get_bCallPreReplication(): Bool return this.bCallPreReplication;
	public extern var bCallPreReplicationForReplay(get, never): Bool;
	public inline extern function get_bCallPreReplicationForReplay(): Bool return this.bCallPreReplicationForReplay;
	public extern var bHidden(get, never): Bool;
	public inline extern function get_bHidden(): Bool return this.bHidden;
	public extern var bTearOff(get, never): Bool;
	public inline extern function get_bTearOff(): Bool return this.bTearOff;
	public extern var bForceNetAddressable(get, never): Bool;
	public inline extern function get_bForceNetAddressable(): Bool return this.bForceNetAddressable;
	public extern var bIsInEditingLevelInstance(get, never): Bool;
	public inline extern function get_bIsInEditingLevelInstance(): Bool return this.bIsInEditingLevelInstance;
	public extern var bExchangedRoles(get, never): Bool;
	public inline extern function get_bExchangedRoles(): Bool return this.bExchangedRoles;
	public extern var bNetLoadOnClient(get, never): Bool;
	public inline extern function get_bNetLoadOnClient(): Bool return this.bNetLoadOnClient;
	public extern var bNetUseOwnerRelevancy(get, never): Bool;
	public inline extern function get_bNetUseOwnerRelevancy(): Bool return this.bNetUseOwnerRelevancy;
	public extern var bRelevantForNetworkReplays(get, never): Bool;
	public inline extern function get_bRelevantForNetworkReplays(): Bool return this.bRelevantForNetworkReplays;
	public extern var bRelevantForLevelBounds(get, never): Bool;
	public inline extern function get_bRelevantForLevelBounds(): Bool return this.bRelevantForLevelBounds;
	public extern var bReplayRewindable(get, never): Bool;
	public inline extern function get_bReplayRewindable(): Bool return this.bReplayRewindable;
	public extern var bAllowTickBeforeBeginPlay(get, never): Bool;
	public inline extern function get_bAllowTickBeforeBeginPlay(): Bool return this.bAllowTickBeforeBeginPlay;
	public extern var bAutoDestroyWhenFinished(get, never): Bool;
	public inline extern function get_bAutoDestroyWhenFinished(): Bool return this.bAutoDestroyWhenFinished;
	public extern var bCanBeDamaged(get, never): Bool;
	public inline extern function get_bCanBeDamaged(): Bool return this.bCanBeDamaged;
	public extern var bBlockInput(get, never): Bool;
	public inline extern function get_bBlockInput(): Bool return this.bBlockInput;
	public extern var bCollideWhenPlacing(get, never): Bool;
	public inline extern function get_bCollideWhenPlacing(): Bool return this.bCollideWhenPlacing;
	public extern var bFindCameraComponentWhenViewTarget(get, never): Bool;
	public inline extern function get_bFindCameraComponentWhenViewTarget(): Bool return this.bFindCameraComponentWhenViewTarget;
	public extern var bGenerateOverlapEventsDuringLevelStreaming(get, never): Bool;
	public inline extern function get_bGenerateOverlapEventsDuringLevelStreaming(): Bool return this.bGenerateOverlapEventsDuringLevelStreaming;
	public extern var bIgnoresOriginShifting(get, never): Bool;
	public inline extern function get_bIgnoresOriginShifting(): Bool return this.bIgnoresOriginShifting;
	public extern var bEnableAutoLODGeneration(get, never): Bool;
	public inline extern function get_bEnableAutoLODGeneration(): Bool return this.bEnableAutoLODGeneration;
	public extern var bIsEditorOnlyActor(get, never): Bool;
	public inline extern function get_bIsEditorOnlyActor(): Bool return this.bIsEditorOnlyActor;
	public extern var bActorSeamlessTraveled(get, never): Bool;
	public inline extern function get_bActorSeamlessTraveled(): Bool return this.bActorSeamlessTraveled;
	public extern var bReplicates(get, never): Bool;
	public inline extern function get_bReplicates(): Bool return this.bReplicates;
	public extern var bCanBeInCluster(get, never): Bool;
	public inline extern function get_bCanBeInCluster(): Bool return this.bCanBeInCluster;
	public extern var bAllowReceiveTickEventOnDedicatedServer(get, never): Bool;
	public inline extern function get_bAllowReceiveTickEventOnDedicatedServer(): Bool return this.bAllowReceiveTickEventOnDedicatedServer;
	public extern var bActorEnableCollision(get, never): Bool;
	public inline extern function get_bActorEnableCollision(): Bool return this.bActorEnableCollision;
	public extern var bActorIsBeingDestroyed(get, never): Bool;
	public inline extern function get_bActorIsBeingDestroyed(): Bool return this.bActorIsBeingDestroyed;
	public extern var UpdateOverlapsMethodDuringLevelStreaming(get, never): EActorUpdateOverlapsMethod;
	public inline extern function get_UpdateOverlapsMethodDuringLevelStreaming(): EActorUpdateOverlapsMethod return this.UpdateOverlapsMethodDuringLevelStreaming;
	public extern var DefaultUpdateOverlapsMethodDuringLevelStreaming(get, never): EActorUpdateOverlapsMethod;
	public inline extern function get_DefaultUpdateOverlapsMethodDuringLevelStreaming(): EActorUpdateOverlapsMethod return this.DefaultUpdateOverlapsMethodDuringLevelStreaming;
	public extern var RemoteRole(get, never): ENetRole;
	public inline extern function get_RemoteRole(): ENetRole return this.RemoteRole;
	public extern var ReplicatedMovement(get, never): RepMovement;
	public inline extern function get_ReplicatedMovement(): RepMovement return this.ReplicatedMovement;
	public extern var InitialLifeSpan(get, never): cpp.Float32;
	public inline extern function get_InitialLifeSpan(): cpp.Float32 return this.InitialLifeSpan;
	public extern var CustomTimeDilation(get, never): cpp.Float32;
	public inline extern function get_CustomTimeDilation(): cpp.Float32 return this.CustomTimeDilation;
	public extern var GridPlacement_DEPRECATED(get, never): EActorGridPlacement;
	public inline extern function get_GridPlacement_DEPRECATED(): EActorGridPlacement return this.GridPlacement_DEPRECATED;
	public extern var RuntimeGrid(get, never): FName;
	public inline extern function get_RuntimeGrid(): FName return this.RuntimeGrid;
	public extern var AttachmentReplication(get, never): RepAttachment;
	public inline extern function get_AttachmentReplication(): RepAttachment return this.AttachmentReplication;
	public extern var Owner(get, never): cpp.Star<Actor.ConstActor>;
	public inline extern function get_Owner(): cpp.Star<Actor.ConstActor> return this.Owner;
	public extern var NetDriverName(get, never): FName;
	public inline extern function get_NetDriverName(): FName return this.NetDriverName;
	public extern var Role(get, never): ENetRole;
	public inline extern function get_Role(): ENetRole return this.Role;
	public extern var NetDormancy(get, never): ENetDormancy;
	public inline extern function get_NetDormancy(): ENetDormancy return this.NetDormancy;
	public extern var SpawnCollisionHandlingMethod(get, never): ESpawnActorCollisionHandlingMethod;
	public inline extern function get_SpawnCollisionHandlingMethod(): ESpawnActorCollisionHandlingMethod return this.SpawnCollisionHandlingMethod;
	public extern var AutoReceiveInput(get, never): EAutoReceiveInput;
	public inline extern function get_AutoReceiveInput(): EAutoReceiveInput return this.AutoReceiveInput;
	public extern var InputPriority(get, never): cpp.Int32;
	public inline extern function get_InputPriority(): cpp.Int32 return this.InputPriority;
	public extern var InputComponent(get, never): cpp.Star<InputComp.ConstInputComp>;
	public inline extern function get_InputComponent(): cpp.Star<InputComp.ConstInputComp> return this.InputComponent;
	public extern var NetCullDistanceSquared(get, never): cpp.Float32;
	public inline extern function get_NetCullDistanceSquared(): cpp.Float32 return this.NetCullDistanceSquared;
	public extern var NetTag(get, never): cpp.Int32;
	public inline extern function get_NetTag(): cpp.Int32 return this.NetTag;
	public extern var NetUpdateFrequency(get, never): cpp.Float32;
	public inline extern function get_NetUpdateFrequency(): cpp.Float32 return this.NetUpdateFrequency;
	public extern var MinNetUpdateFrequency(get, never): cpp.Float32;
	public inline extern function get_MinNetUpdateFrequency(): cpp.Float32 return this.MinNetUpdateFrequency;
	public extern var NetPriority(get, never): cpp.Float32;
	public inline extern function get_NetPriority(): cpp.Float32 return this.NetPriority;
	public extern var Instigator(get, never): cpp.Star<Pawn.ConstPawn>;
	public inline extern function get_Instigator(): cpp.Star<Pawn.ConstPawn> return this.Instigator;
	public extern var Children(get, never): TArray<cpp.Star<Actor.ConstActor>>;
	public inline extern function get_Children(): TArray<cpp.Star<Actor.ConstActor>> return this.Children;
	public extern var RootComponent(get, never): cpp.Star<SceneComp.ConstSceneComp>;
	public inline extern function get_RootComponent(): cpp.Star<SceneComp.ConstSceneComp> return this.RootComponent;
	public extern var PivotOffset(get, never): Vector;
	public inline extern function get_PivotOffset(): Vector return this.PivotOffset;
	public extern var HLODLayer(get, never): cpp.Star<HLODLayer.ConstHLODLayer>;
	public inline extern function get_HLODLayer(): cpp.Star<HLODLayer.ConstHLODLayer> return this.HLODLayer;
	public extern var RayTracingGroupId(get, never): cpp.Int32;
	public inline extern function get_RayTracingGroupId(): cpp.Int32 return this.RayTracingGroupId;
	public extern var Layers(get, never): TArray<FName>;
	public inline extern function get_Layers(): TArray<FName> return this.Layers;
	public extern var ParentComponentActor_DEPRECATED(get, never): TWeakObjectPtr<Actor.ConstActor>;
	public inline extern function get_ParentComponentActor_DEPRECATED(): TWeakObjectPtr<Actor.ConstActor> return this.ParentComponentActor_DEPRECATED;
	public extern var ParentComponent(get, never): TWeakObjectPtr<ChildActorComp.ConstChildActorComp>;
	public inline extern function get_ParentComponent(): TWeakObjectPtr<ChildActorComp.ConstChildActorComp> return this.ParentComponent;
	public extern var ActorGuid(get, never): Guid;
	public inline extern function get_ActorGuid(): Guid return this.ActorGuid;
	public extern var DataLayers(get, never): TArray<ActorDataLayer>;
	public inline extern function get_DataLayers(): TArray<ActorDataLayer> return this.DataLayers;
	public extern var GroupActor(get, never): cpp.Star<Actor.ConstActor>;
	public inline extern function get_GroupActor(): cpp.Star<Actor.ConstActor> return this.GroupActor;
	public extern var SpriteScale(get, never): cpp.Float32;
	public inline extern function get_SpriteScale(): cpp.Float32 return this.SpriteScale;
	public extern var HiddenEditorViews(get, never): cpp.UInt64;
	public inline extern function get_HiddenEditorViews(): cpp.UInt64 return this.HiddenEditorViews;
	public extern var ActorLabel(get, never): FString;
	public inline extern function get_ActorLabel(): FString return this.ActorLabel;
	public extern var FolderPath(get, never): FName;
	public inline extern function get_FolderPath(): FName return this.FolderPath;
	public extern var FolderGuid(get, never): Guid;
	public inline extern function get_FolderGuid(): Guid return this.FolderGuid;
	public extern var bHiddenEd(get, never): Bool;
	public inline extern function get_bHiddenEd(): Bool return this.bHiddenEd;
	public extern var bIsEditorPreviewActor(get, never): Bool;
	public inline extern function get_bIsEditorPreviewActor(): Bool return this.bIsEditorPreviewActor;
	public extern var bHiddenEdLayer(get, never): Bool;
	public inline extern function get_bHiddenEdLayer(): Bool return this.bHiddenEdLayer;
	public extern var bHiddenEdLevel(get, never): Bool;
	public inline extern function get_bHiddenEdLevel(): Bool return this.bHiddenEdLevel;
	public extern var bLockLocation(get, never): Bool;
	public inline extern function get_bLockLocation(): Bool return this.bLockLocation;
	public extern var bActorLabelEditable(get, never): Bool;
	public inline extern function get_bActorLabelEditable(): Bool return this.bActorLabelEditable;
	public extern var bEditable(get, never): Bool;
	public inline extern function get_bEditable(): Bool return this.bEditable;
	public extern var bListedInSceneOutliner(get, never): Bool;
	public inline extern function get_bListedInSceneOutliner(): Bool return this.bListedInSceneOutliner;
	public extern var bOptimizeBPComponentData(get, never): Bool;
	public inline extern function get_bOptimizeBPComponentData(): Bool return this.bOptimizeBPComponentData;
	public extern var bCanPlayFromHere(get, never): Bool;
	public inline extern function get_bCanPlayFromHere(): Bool return this.bCanPlayFromHere;
	public extern var bIsSpatiallyLoaded(get, never): Bool;
	public inline extern function get_bIsSpatiallyLoaded(): Bool return this.bIsSpatiallyLoaded;
	public extern var bHiddenEdTemporary(get, never): Bool;
	public inline extern function get_bHiddenEdTemporary(): Bool return this.bHiddenEdTemporary;
	public extern var bForceExternalActorLevelReferenceForPIE(get, never): Bool;
	public inline extern function get_bForceExternalActorLevelReferenceForPIE(): Bool return this.bForceExternalActorLevelReferenceForPIE;
	public extern var Tags(get, never): TArray<FName>;
	public inline extern function get_Tags(): TArray<FName> return this.Tags;
	public extern var OnTakeAnyDamage(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Controller.ConstController>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnTakeAnyDamage(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Controller.ConstController>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnTakeAnyDamage;
	public extern var OnTakePointDamage(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<Controller.ConstController>, Vector, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, FName, Vector, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnTakePointDamage(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<Controller.ConstController>, Vector, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, FName, Vector, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnTakePointDamage;
	public extern var OnTakeRadialDamage(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, Vector, HitResult, cpp.Star<Controller.ConstController>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnTakeRadialDamage(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, Vector, HitResult, cpp.Star<Controller.ConstController>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnTakeRadialDamage;
	public extern var OnActorBeginOverlap(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnActorBeginOverlap(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnActorBeginOverlap;
	public extern var OnActorEndOverlap(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnActorEndOverlap(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnActorEndOverlap;
	public extern var OnBeginCursorOver(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnBeginCursorOver(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void> return this.OnBeginCursorOver;
	public extern var OnEndCursorOver(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnEndCursorOver(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void> return this.OnEndCursorOver;
	public extern var OnClicked(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, Key) -> Void>;
	public inline extern function get_OnClicked(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, Key) -> Void> return this.OnClicked;
	public extern var OnReleased(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, Key) -> Void>;
	public inline extern function get_OnReleased(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, Key) -> Void> return this.OnReleased;
	public extern var OnInputTouchBegin(get, never): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInputTouchBegin(): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor.ConstActor>) -> Void> return this.OnInputTouchBegin;
	public extern var OnInputTouchEnd(get, never): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInputTouchEnd(): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor.ConstActor>) -> Void> return this.OnInputTouchEnd;
	public extern var OnInputTouchEnter(get, never): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInputTouchEnter(): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor.ConstActor>) -> Void> return this.OnInputTouchEnter;
	public extern var OnInputTouchLeave(get, never): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInputTouchLeave(): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<Actor.ConstActor>) -> Void> return this.OnInputTouchLeave;
	public extern var OnActorHit(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>, Vector, cpp.Reference<HitResult>) -> Void>;
	public inline extern function get_OnActorHit(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>, Vector, cpp.Reference<HitResult>) -> Void> return this.OnActorHit;
	public extern var OnDestroyed(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnDestroyed(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void> return this.OnDestroyed;
	public extern var OnEndPlay(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, EEndPlayReason) -> Void>;
	public inline extern function get_OnEndPlay(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, EEndPlayReason) -> Void> return this.OnEndPlay;
	public extern var InstanceComponents(get, never): TArray<cpp.Star<ActorComp.ConstActorComp>>;
	public inline extern function get_InstanceComponents(): TArray<cpp.Star<ActorComp.ConstActorComp>> return this.InstanceComponents;
	public extern var BlueprintCreatedComponents(get, never): TArray<cpp.Star<ActorComp.ConstActorComp>>;
	public inline extern function get_BlueprintCreatedComponents(): TArray<cpp.Star<ActorComp.ConstActorComp>> return this.BlueprintCreatedComponents;
}