// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("AActor")
@:include("GameFramework/Actor.h")
@:structAccess
extern class Actor extends Object {
	public var PrimaryActorTick: ActorTickFunction;
	public var bNetTemporary: Bool;
	public var bNetStartup: Bool;
	public var bOnlyRelevantToOwner: Bool;
	public var bAlwaysRelevant: Bool;
	private var bReplicateMovement: Bool;
	private var bCallPreReplication: Bool;
	private var bCallPreReplicationForReplay: Bool;
	private var bHidden: Bool;
	private var bTearOff: Bool;
	private var bForceNetAddressable: Bool;
	public var bExchangedRoles: Bool;
	public var bNetLoadOnClient: Bool;
	public var bNetUseOwnerRelevancy: Bool;
	public var bRelevantForNetworkReplays: Bool;
	public var bRelevantForLevelBounds: Bool;
	public var bReplayRewindable: Bool;
	public var bAllowTickBeforeBeginPlay: Bool;
	private var bAutoDestroyWhenFinished: Bool;
	private var bCanBeDamaged: Bool;
	public var bBlockInput: Bool;
	public var bCollideWhenPlacing: Bool;
	public var bFindCameraComponentWhenViewTarget: Bool;
	public var bGenerateOverlapEventsDuringLevelStreaming: Bool;
	public var bIgnoresOriginShifting: Bool;
	public var bEnableAutoLODGeneration: Bool;
	public var bIsEditorOnlyActor: Bool;
	public var bActorSeamlessTraveled: Bool;
	@:protected public var bReplicates: Bool;
	@:protected public var bCanBeInCluster: Bool;
	@:protected public var bAllowReceiveTickEventOnDedicatedServer: Bool;
	private var bActorEnableCollision: Bool;
	private var bActorIsBeingDestroyed: Bool;
	@:protected public var UpdateOverlapsMethodDuringLevelStreaming: EActorUpdateOverlapsMethod;
	private var DefaultUpdateOverlapsMethodDuringLevelStreaming: EActorUpdateOverlapsMethod;
	private var RemoteRole: TEnumAsByte<ENetRole>;
	private var ReplicatedMovement: RepMovement;
	public var InitialLifeSpan: cpp.Float32;
	public var CustomTimeDilation: cpp.Float32;
	@:protected public var AttachmentReplication: RepAttachment;
	@:protected public var Owner: cpp.Star<Actor>;
	@:protected public var NetDriverName: FName;
	private var Role: TEnumAsByte<ENetRole>;
	public var NetDormancy: TEnumAsByte<ENetDormancy>;
	public var SpawnCollisionHandlingMethod: ESpawnActorCollisionHandlingMethod;
	public var AutoReceiveInput: TEnumAsByte<EAutoReceiveInput>;
	public var InputPriority: cpp.Int32;
	public var InputComponent: cpp.Star<InputComp>;
	public var NetCullDistanceSquared: cpp.Float32;
	public var NetTag: cpp.Int32;
	public var NetUpdateFrequency: cpp.Float32;
	public var MinNetUpdateFrequency: cpp.Float32;
	public var NetPriority: cpp.Float32;
	private var Instigator: cpp.Star<Pawn>;
	public var Children: TArray<cpp.Star<Actor>>;
	public function K2_GetRootComponent(): cpp.Star<SceneComp>;
	private var RayTracingGroupId: cpp.Int32;
	public var Layers: TArray<FName>;
	private var ParentComponent: TWeakObjectPtr<ChildActorComp>;
	public var Tags: TArray<FName>;
	public var OnTakeAnyDamage: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Controller>, cpp.Star<Actor>) -> Void>;
	public var OnTakePointDamage: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Float32, cpp.Star<Controller>, Vector, cpp.Star<PrimitiveComp>, FName, Vector, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Actor>) -> Void>;
	public var OnTakeRadialDamage: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, Vector, HitResult, cpp.Star<Controller>, cpp.Star<Actor>) -> Void>;
	public var OnActorBeginOverlap: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Star<Actor>) -> Void>;
	public var OnActorEndOverlap: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Star<Actor>) -> Void>;
	public var OnBeginCursorOver: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>) -> Void>;
	public var OnEndCursorOver: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>) -> Void>;
	public var OnClicked: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, Key) -> Void>;
	public var OnReleased: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, Key) -> Void>;
	public var OnInputTouchBegin: HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor>) -> Void>;
	public var OnInputTouchEnd: HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor>) -> Void>;
	public var OnInputTouchEnter: HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor>) -> Void>;
	public var OnInputTouchLeave: HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor>) -> Void>;
	public var OnActorHit: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, cpp.Star<Actor>, Vector, cpp.Reference<HitResult>) -> Void>;
	public var OnDestroyed: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>) -> Void>;
	public var OnEndPlay: HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor>, TEnumAsByte<EEndPlayReason>) -> Void>;
	private var InstanceComponents: TArray<cpp.Star<ActorComp>>;
	public var BlueprintCreatedComponents: TArray<cpp.Star<ActorComp>>;

	public function WasRecentlyRendered(Tolerance: cpp.Float32): Bool;
	public function UserConstructionScript(): Void;
	public function TearOff(): Void;
	public function SetTickGroup(NewTickGroup: TEnumAsByte<ETickingGroup>): Void;
	public function SetTickableWhenPaused(bTickableWhenPaused: Bool): Void;
	public function SetReplicates(bInReplicates: Bool): Void;
	public function SetReplicateMovement(bInReplicateMovement: Bool): Void;
	public function SetRayTracingGroupId(InRaytracingGroupId: cpp.Int32): Void;
	public function SetOwner(NewOwner: cpp.Star<Actor>): Void;
	public function SetNetDormancy(NewDormancy: TEnumAsByte<ENetDormancy>): Void;
	public function SetLifeSpan(InLifespan: cpp.Float32): Void;
	public function SetIsTemporarilyHiddenInEditor(bIsHidden: Bool): Void;
	public function SetFolderPath(NewFolderPath: cpp.Reference<FName>): Void;
	public function SetAutoDestroyWhenFinished(bVal: Bool): Void;
	public function SetActorTickInterval(TickInterval: cpp.Float32): Void;
	public function SetActorTickEnabled(bEnabled: Bool): Void;
	public function SetActorScale3D(NewScale3D: Vector): Void;
	public function SetActorRelativeScale3D(NewRelativeScale: Vector): Void;
	public function SetActorLabel(NewActorLabel: FString, bMarkDirty: Bool): Void;
	public function SetActorHiddenInGame(bNewHidden: Bool): Void;
	public function SetActorEnableCollision(bNewActorEnableCollision: Bool): Void;
	public function RemoveTickPrerequisiteComponent(PrerequisiteComponent: cpp.Star<ActorComp>): Void;
	public function RemoveTickPrerequisiteActor(PrerequisiteActor: cpp.Star<Actor>): Void;
	public function ReceiveTick(DeltaSeconds: cpp.Float32): Void;
	public function ReceiveRadialDamage(DamageReceived: cpp.Float32, DamageType: cpp.Star<DamageType.ConstDamageType>, Origin: Vector, HitInfo: cpp.Reference<HitResult>, InstigatedBy: cpp.Star<Controller>, DamageCauser: cpp.Star<Actor>): Void;
	public function ReceivePointDamage(Damage: cpp.Float32, DamageType: cpp.Star<DamageType.ConstDamageType>, HitLocation: Vector, HitNormal: Vector, HitComponent: cpp.Star<PrimitiveComp>, BoneName: FName, ShotFromDirection: Vector, InstigatedBy: cpp.Star<Controller>, DamageCauser: cpp.Star<Actor>, HitInfo: cpp.Reference<HitResult>): Void;
	public function ReceiveHit(MyComp: cpp.Star<PrimitiveComp>, Other: cpp.Star<Actor>, OtherComp: cpp.Star<PrimitiveComp>, bSelfMoved: Bool, HitLocation: Vector, HitNormal: Vector, NormalImpulse: Vector, Hit: cpp.Reference<HitResult>): Void;
	@:protected public function ReceiveEndPlay(EndPlayReason: TEnumAsByte<EEndPlayReason>): Void;
	public function ReceiveDestroyed(): Void;
	@:protected public function ReceiveBeginPlay(): Void;
	public function ReceiveAnyDamage(Damage: cpp.Float32, DamageType: cpp.Star<DamageType.ConstDamageType>, InstigatedBy: cpp.Star<Controller>, DamageCauser: cpp.Star<Actor>): Void;
	public function ReceiveActorOnReleased(ButtonReleased: Key): Void;
	public function ReceiveActorOnInputTouchLeave(FingerIndex: TEnumAsByte<ETouchIndex>): Void;
	public function ReceiveActorOnInputTouchEnter(FingerIndex: TEnumAsByte<ETouchIndex>): Void;
	public function ReceiveActorOnInputTouchEnd(FingerIndex: TEnumAsByte<ETouchIndex>): Void;
	public function ReceiveActorOnInputTouchBegin(FingerIndex: TEnumAsByte<ETouchIndex>): Void;
	public function ReceiveActorOnClicked(ButtonPressed: Key): Void;
	public function ReceiveActorEndOverlap(OtherActor: cpp.Star<Actor>): Void;
	public function ReceiveActorEndCursorOver(): Void;
	public function ReceiveActorBeginOverlap(OtherActor: cpp.Star<Actor>): Void;
	public function ReceiveActorBeginCursorOver(): Void;
	public function PrestreamTextures(Seconds: cpp.Float32, bEnableStreaming: Bool, CinematicTextureGroups: cpp.Int32): Void;
	public function OnRep_ReplicateMovement(): Void;
	public function OnRep_ReplicatedMovement(): Void;
	@:protected public function OnRep_Owner(): Void;
	public function OnRep_Instigator(): Void;
	public function OnRep_AttachmentReplication(): Void;
	public function MakeNoise(Loudness: cpp.Float32, NoiseInstigator: cpp.Star<Pawn>, NoiseLocation: Vector, MaxRange: cpp.Float32, Tag: FName): Void;
	public function K2_TeleportTo(DestLocation: Vector, DestRotation: Rotator): Bool;
	public function K2_SetActorTransform(NewTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Bool;
	public function K2_SetActorRotation(NewRotation: Rotator, bTeleportPhysics: Bool): Bool;
	public function K2_SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Bool;
	public function K2_SetActorLocation(NewLocation: Vector, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Bool;
	public function K2_OnReset(): Void;
	public function K2_OnEndViewTarget(PC: cpp.Star<PlayerController>): Void;
	public function K2_OnBecomeViewTarget(PC: cpp.Star<PlayerController>): Void;
	public function K2_GetComponentsByClass(ComponentClass: TSubclassOf<ActorComp>): TArray<cpp.Star<ActorComp>>;
	public function K2_GetActorRotation(): Rotator;
	public function K2_GetActorLocation(): Vector;
	public function K2_DetachFromActor(LocationRule: EDetachmentRule, RotationRule: EDetachmentRule, ScaleRule: EDetachmentRule): Void;
	public function K2_DestroyActor(): Void;
	public function K2_AttachToComponent(Parent: cpp.Star<SceneComp>, SocketName: FName, LocationRule: EAttachmentRule, RotationRule: EAttachmentRule, ScaleRule: EAttachmentRule, bWeldSimulatedBodies: Bool): Void;
	public function K2_AttachToActor(ParentActor: cpp.Star<Actor>, SocketName: FName, LocationRule: EAttachmentRule, RotationRule: EAttachmentRule, ScaleRule: EAttachmentRule, bWeldSimulatedBodies: Bool): Void;
	public function K2_AttachRootComponentToActor(InParentActor: cpp.Star<Actor>, InSocketName: FName, AttachLocationType: TEnumAsByte<EAttachLocation>, bWeldSimulatedBodies: Bool): Void;
	public function K2_AttachRootComponentTo(InParent: cpp.Star<SceneComp>, InSocketName: FName, AttachLocationType: TEnumAsByte<EAttachLocation>, bWeldSimulatedBodies: Bool): Void;
	public function K2_AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorWorldOffset(DeltaLocation: Vector, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorLocalTransform(NewTransform: cpp.Reference<Transform>, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function K2_AddActorLocalOffset(DeltaLocation: Vector, bSweep: Bool, SweepHitResult: cpp.Reference<HitResult>, bTeleport: Bool): Void;
	public function IsTemporarilyHiddenInEditor(bIncludeParent: Bool): Bool;
	public function IsSelectable(): Bool;
	public function IsOverlappingActor(Other: cpp.Star<Actor.ConstActor>): Bool;
	public function IsHiddenEdAtStartup(): Bool;
	public function IsHiddenEd(): Bool;
	public function IsEditable(): Bool;
	public function IsChildActor(): Bool;
	public function IsActorTickEnabled(): Bool;
	public function IsActorBeingDestroyed(): Bool;
	public function HasAuthority(): Bool;
	public function GetVerticalDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Float32;
	public function GetVelocity(): Vector;
	public function GetTransform(): Transform;
	public function GetTickableWhenPaused(): Bool;
	public function GetSquaredHorizontalDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Float32;
	public function GetSquaredDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Float32;
	public function GetRemoteRole(): TEnumAsByte<ENetRole>;
	public function GetRayTracingGroupId(): cpp.Int32;
	public function GetParentComponent(): cpp.Star<ChildActorComp>;
	public function GetParentActor(): cpp.Star<Actor>;
	public function GetOwner(): cpp.Star<Actor>;
	public function GetOverlappingComponents(OverlappingComponents: cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>): Void;
	public function GetOverlappingActors(OverlappingActors: cpp.Reference<TArray<cpp.Star<Actor>>>, ClassFilter: TSubclassOf<Actor>): Void;
	public function GetLocalRole(): TEnumAsByte<ENetRole>;
	public function GetLifeSpan(): cpp.Float32;
	public function GetLevelTransform(): Transform;
	public function GetLevel(): cpp.Star<Level>;
	public function GetInstigatorController(): cpp.Star<Controller>;
	public function GetInstigator(): cpp.Star<Pawn>;
	public function GetInputVectorAxisValue(InputAxisKey: Key): Vector;
	public function GetInputAxisValue(InputAxisName: FName): cpp.Float32;
	public function GetInputAxisKeyValue(InputAxisKey: Key): cpp.Float32;
	public function GetHorizontalDotProductTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Float32;
	public function GetHorizontalDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Float32;
	public function GetGameTimeSinceCreation(): cpp.Float32;
	public function GetFolderPath(): FName;
	public function GetDotProductTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Float32;
	public function GetDistanceTo(OtherActor: cpp.Star<Actor.ConstActor>): cpp.Float32;
	public function GetDefaultActorLabel(): FString;
	public function GetComponentsByTag(ComponentClass: TSubclassOf<ActorComp>, Tag: FName): TArray<cpp.Star<ActorComp>>;
	public function GetComponentsByInterface(Interface: TSubclassOf<Interface>): TArray<cpp.Star<ActorComp>>;
	public function GetComponentByClass(ComponentClass: TSubclassOf<ActorComp>): cpp.Star<ActorComp>;
	public function GetAttachParentSocketName(): FName;
	public function GetAttachParentActor(): cpp.Star<Actor>;
	public function GetAttachedActors(OutActors: cpp.Reference<TArray<cpp.Star<Actor>>>, bResetArray: Bool, bRecursivelyIncludeAttachedActors: Bool): Void;
	public function GetAllChildActors(ChildActors: cpp.Reference<TArray<cpp.Star<Actor>>>, bIncludeDescendants: Bool): Void;
	public function GetActorUpVector(): Vector;
	public function GetActorTimeDilation(): cpp.Float32;
	public function GetActorTickInterval(): cpp.Float32;
	public function GetActorScale3D(): Vector;
	public function GetActorRightVector(): Vector;
	public function GetActorRelativeScale3D(): Vector;
	public function GetActorLabel(bCreateIfNone: Bool): FString;
	public function GetActorForwardVector(): Vector;
	public function GetActorEyesViewPoint(OutLocation: cpp.Reference<Vector>, OutRotation: cpp.Reference<Rotator>): Void;
	public function GetActorEnableCollision(): Bool;
	public function GetActorBounds(bOnlyCollidingComponents: Bool, Origin: cpp.Reference<Vector>, BoxExtent: cpp.Reference<Vector>, bIncludeFromChildActors: Bool): Void;
	public function ForceNetUpdate(): Void;
	public function FlushNetDormancy(): Void;
	public function FinishAddComponent(Component: cpp.Star<ActorComp>, bManualAttachment: Bool, RelativeTransform: cpp.Reference<Transform>): Void;
	public function EnableInput(PlayerController: cpp.Star<PlayerController>): Void;
	public function DisableInput(PlayerController: cpp.Star<PlayerController>): Void;
	public function DetachRootComponentFromParent(bMaintainWorldPosition: Bool): Void;
	public function AddTickPrerequisiteComponent(PrerequisiteComponent: cpp.Star<ActorComp>): Void;
	public function AddTickPrerequisiteActor(PrerequisiteActor: cpp.Star<Actor>): Void;
	public function AddComponentByClass(Class: TSubclassOf<ActorComp>, bManualAttachment: Bool, RelativeTransform: cpp.Reference<Transform>, bDeferredFinish: Bool): cpp.Star<ActorComp>;
	public function AddComponent(TemplateName: FName, bManualAttachment: Bool, RelativeTransform: cpp.Reference<Transform>, ComponentTemplateContext: cpp.Star<Object.ConstObject>, bDeferredFinish: Bool): cpp.Star<ActorComp>;
	public function ActorHasTag(Tag: FName): Bool;
	@:protected public function BeginPlay(): Void;
	public function Tick(DeltaTime: cpp.Float32): Void;
	public function PreRegisterAllComponents(): Void;
	public function PostRegisterAllComponents(): Void;
	public function PostActorCreated(): Void;
	public function OnConstruction(Transform: cpp.Reference<Transform>): Void;
	public function PreInitializeComponents(): Void;
	public function PostInitializeComponents(): Void;
	public function Destroyed(): Void;
	public function DestroyNetworkActorHandled(): Bool;
	@:protected public function EndPlay(): Void;
	public overload function SetActorLocation(NewLocation: Vector): Bool;
	public overload function SetActorLocation(NewLocation: Vector, bSweep: Bool): Bool;
	public overload function SetActorLocation(NewLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Bool;
	public overload function SetActorLocation(NewLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Bool;
	public overload function SetActorRotation(NewRotation: Rotator): Bool;
	public overload function SetActorRotation(NewRotation: Rotator, Teleport: ETeleportType): Bool;
	@:native("SetActorRotation") public overload function SetActorRotationQuad(@:const NewRotation: cpp.Reference<Quat>): Bool;
	@:native("SetActorRotation") public overload function SetActorRotationQuad(@:const NewRotation: cpp.Reference<Quat>, Teleport: ETeleportType): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Bool): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, NewRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Bool;
	@:native("SetActorLocationAndRotation") public overload function SetActorLocationAndRotationQuad(NewLocation: Vector, @:const NewRotation: cpp.Reference<Quat>): Bool;
	@:native("SetActorLocationAndRotation") public overload function SetActorLocationAndRotationQuad(NewLocation: Vector, @:const NewRotation: cpp.Reference<Quat>, bSweep: Bool): Bool;
	@:native("SetActorLocationAndRotation") public overload function SetActorLocationAndRotationQuad(NewLocation: Vector, @:const NewRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Bool;
	public overload function SetActorLocationAndRotation(NewLocation: Vector, @:const NewRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Bool;
	public overload function SetActorTransform(@:const NewTransform: cpp.Reference<Transform>, bSweep: Bool): Bool;
	public overload function SetActorTransform(@:const NewTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Bool;
	public overload function SetActorTransform(@:const NewTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Bool;
	public overload function AddActorWorldOffset(DeltaLocation: Vector): Void;
	public overload function AddActorWorldOffset(DeltaLocation: Vector, bSweep: Bool): Void;
	public overload function AddActorWorldOffset(DeltaLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorWorldOffset(DeltaLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorWorldRotation(DeltaRotation: Rotator): Void;
	public overload function AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Bool): Void;
	public overload function AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorWorldRotation(DeltaRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	@:native("AddActorWorldRotation") public overload function AddActorWorldRotationQuad(DeltaRotation: cpp.Reference<Quat>): Void;
	@:native("AddActorWorldRotation") public overload function AddActorWorldRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool): Void;
	@:native("AddActorWorldRotation") public overload function AddActorWorldRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	@:native("AddActorWorldRotation") public overload function AddActorWorldRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>): Void;
	public overload function AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool): Void;
	public overload function AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorWorldTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>): Void;
	public overload function AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool): Void;
	public overload function AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorWorldTransformKeepScale(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorLocalOffset(DeltaLocation: Vector): Void;
	public overload function AddActorLocalOffset(DeltaLocation: Vector, bSweep: Bool): Void;
	public overload function AddActorLocalOffset(DeltaLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorLocalOffset(DeltaLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorLocalRotation(DeltaRotation: Rotator): Void;
	public overload function AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Bool): Void;
	public overload function AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorLocalRotation(DeltaRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	@:native("AddActorLocalRotation") public overload function AddActorLocalRotationQuad(DeltaRotation: cpp.Reference<Quat>): Void;
	@:native("AddActorLocalRotation") public overload function AddActorLocalRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool): Void;
	@:native("AddActorLocalRotation") public overload function AddActorLocalRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	@:native("AddActorLocalRotation") public overload function AddActorLocalRotationQuad(DeltaRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function AddActorLocalTransform(DeltaTransform: cpp.Reference<Transform>): Void;
	public overload function AddActorLocalTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool): Void;
	public overload function AddActorLocalTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function AddActorLocalTransform(DeltaTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function SetActorRelativeLocation(NewRelativeLocation: Vector): Void;
	public overload function SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Bool): Void;
	public overload function SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function SetActorRelativeLocation(NewRelativeLocation: Vector, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function SetActorRelativeRotation(NewRelativeRotation: Rotator): Void;
	public overload function SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Bool): Void;
	public overload function SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function SetActorRelativeRotation(NewRelativeRotation: Rotator, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	@:native("SetActorRelativeRotation") public overload function SetActorRelativeRotationQuad(NewRelativeRotation: cpp.Reference<Quat>): Void;
	@:native("SetActorRelativeRotation") public overload function SetActorRelativeRotationQuad(NewRelativeRotation: cpp.Reference<Quat>, bSweep: Bool): Void;
	@:native("SetActorRelativeRotation") public overload function SetActorRelativeRotationQuad(NewRelativeRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	@:native("SetActorRelativeRotation") public overload function SetActorRelativeRotationQuad(NewRelativeRotation: cpp.Reference<Quat>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	public overload function SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>): Void;
	public overload function SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>, bSweep: Bool): Void;
	public overload function SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>): Void;
	public overload function SetActorRelativeTransform(NewRelativeTransform: cpp.Reference<Transform>, bSweep: Bool, OutSweepHitResult: cpp.Star<HitResult>, Teleport: ETeleportType): Void;
	@:const public function GetActorLocation(): Vector;
	@:const public function GetActorNameOrLabel(): cpp.Reference<FString>;
	@:const public function GetActorQuat(): Quat;
	@:const public function GetActorRotation(): Rotator;
	@:const public function GetActorScale(): Vector;
	@:const public function GetActorTransform(): cpp.Reference<Transform>;
	@:const public function GetAutoDestroyWhenFinished(): Bool;
	@:const public function GetIsReplicated(): Bool;
	@:const public function GetIsSpatiallyLoaded(): Bool;
	@:const public function GetLastRenderTime(): cpp.Float32;
	@:const public function GetPivotOffset(): Vector;
	@:const public function GetPlacementExtent(): Vector;
	@:const public function GetWorld(): cpp.Star<World>;
	@:const public function HasActiveCameraComponent(): Bool;
	@:const public function HasActivePawnControlCameraComponent(): Bool;
	@:const public function HasActorBegunPlay(): Bool;
	@:const public function IsActorBeginningPlay(): Bool;
	@:const public function IsActorBeginningPlayFromLevelStreaming(): Bool;
	@:const public function IsActorInitialized(): Bool;
	@:const public function IsActorLabelEditable(): Bool;
	@:const public function IsActorOrSelectionParentSelected(): Bool;
	@:const public function IsLevelBoundsRelevant(): Bool;
	@:const public function IsListedInSceneOutliner(): Bool;
	@:const public function IsLockLocation(): Bool;
	@:const public function IsNetStartupActor(): Bool;
	@:const public function IsRootComponentCollisionRegistered(): Bool;
	@:const public function IsRootComponentMovable(): Bool;
	@:const public function IsRootComponentStatic(): Bool;
	@:const public function IsRootComponentStationary(): Bool;
	@:const public function IsRunningUserConstructionScript(): Bool;
	@:const public function IsSelectionChild(): Bool;
	@:const public function IsSelectionParentOfAttachedActors(): Bool;
	@:const public function IsUserManaged(): Bool;
	@:const public function IsValidForDataLayer(): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	WasRecentlyRendered, K2_GetComponentsByClass, K2_GetActorRotation, K2_GetActorLocation, IsTemporarilyHiddenInEditor,
	IsSelectable, IsOverlappingActor, IsHiddenEdAtStartup, IsHiddenEd, IsEditable,
	IsChildActor, IsActorTickEnabled, IsActorBeingDestroyed, HasAuthority, GetVerticalDistanceTo,
	GetVelocity, GetTransform, GetSquaredHorizontalDistanceTo, GetSquaredDistanceTo, GetRemoteRole,
	GetRayTracingGroupId, GetParentComponent, GetParentActor, GetOwner, GetOverlappingComponents,
	GetOverlappingActors, GetLocalRole, GetLifeSpan, GetLevelTransform, GetLevel,
	GetInstigatorController, GetInstigator, GetInputVectorAxisValue, GetInputAxisValue, GetInputAxisKeyValue,
	GetHorizontalDotProductTo, GetHorizontalDistanceTo, GetGameTimeSinceCreation, GetFolderPath, GetDotProductTo,
	GetDistanceTo, GetDefaultActorLabel, GetComponentsByTag, GetComponentsByInterface, GetComponentByClass,
	GetAttachParentSocketName, GetAttachParentActor, GetAttachedActors, GetAllChildActors, GetActorUpVector,
	GetActorTimeDilation, GetActorTickInterval, GetActorScale3D, GetActorRightVector, GetActorRelativeScale3D,
	GetActorLabel, GetActorForwardVector, GetActorEyesViewPoint, GetActorEnableCollision, GetActorBounds,
	ActorHasTag
)
@:nativeGen
abstract ConstActor(Actor) from Actor {
	public extern var PrimaryActorTick(get, never): ActorTickFunction;
	public inline extern function get_PrimaryActorTick(): ActorTickFunction return this.PrimaryActorTick;
	public extern var bNetTemporary(get, never): Bool;
	public inline extern function get_bNetTemporary(): Bool return this.bNetTemporary;
	public extern var bNetStartup(get, never): Bool;
	public inline extern function get_bNetStartup(): Bool return this.bNetStartup;
	public extern var bOnlyRelevantToOwner(get, never): Bool;
	public inline extern function get_bOnlyRelevantToOwner(): Bool return this.bOnlyRelevantToOwner;
	public extern var bAlwaysRelevant(get, never): Bool;
	public inline extern function get_bAlwaysRelevant(): Bool return this.bAlwaysRelevant;
	public extern var bExchangedRoles(get, never): Bool;
	public inline extern function get_bExchangedRoles(): Bool return this.bExchangedRoles;
	public extern var bNetLoadOnClient(get, never): Bool;
	public inline extern function get_bNetLoadOnClient(): Bool return this.bNetLoadOnClient;
	public extern var bNetUseOwnerRelevancy(get, never): Bool;
	public inline extern function get_bNetUseOwnerRelevancy(): Bool return this.bNetUseOwnerRelevancy;
	public extern var bRelevantForNetworkReplays(get, never): Bool;
	public inline extern function get_bRelevantForNetworkReplays(): Bool return this.bRelevantForNetworkReplays;
	public extern var bRelevantForLevelBounds(get, never): Bool;
	public inline extern function get_bRelevantForLevelBounds(): Bool return this.bRelevantForLevelBounds;
	public extern var bReplayRewindable(get, never): Bool;
	public inline extern function get_bReplayRewindable(): Bool return this.bReplayRewindable;
	public extern var bAllowTickBeforeBeginPlay(get, never): Bool;
	public inline extern function get_bAllowTickBeforeBeginPlay(): Bool return this.bAllowTickBeforeBeginPlay;
	public extern var bBlockInput(get, never): Bool;
	public inline extern function get_bBlockInput(): Bool return this.bBlockInput;
	public extern var bCollideWhenPlacing(get, never): Bool;
	public inline extern function get_bCollideWhenPlacing(): Bool return this.bCollideWhenPlacing;
	public extern var bFindCameraComponentWhenViewTarget(get, never): Bool;
	public inline extern function get_bFindCameraComponentWhenViewTarget(): Bool return this.bFindCameraComponentWhenViewTarget;
	public extern var bGenerateOverlapEventsDuringLevelStreaming(get, never): Bool;
	public inline extern function get_bGenerateOverlapEventsDuringLevelStreaming(): Bool return this.bGenerateOverlapEventsDuringLevelStreaming;
	public extern var bIgnoresOriginShifting(get, never): Bool;
	public inline extern function get_bIgnoresOriginShifting(): Bool return this.bIgnoresOriginShifting;
	public extern var bEnableAutoLODGeneration(get, never): Bool;
	public inline extern function get_bEnableAutoLODGeneration(): Bool return this.bEnableAutoLODGeneration;
	public extern var bIsEditorOnlyActor(get, never): Bool;
	public inline extern function get_bIsEditorOnlyActor(): Bool return this.bIsEditorOnlyActor;
	public extern var bActorSeamlessTraveled(get, never): Bool;
	public inline extern function get_bActorSeamlessTraveled(): Bool return this.bActorSeamlessTraveled;
	public extern var InitialLifeSpan(get, never): cpp.Float32;
	public inline extern function get_InitialLifeSpan(): cpp.Float32 return this.InitialLifeSpan;
	public extern var CustomTimeDilation(get, never): cpp.Float32;
	public inline extern function get_CustomTimeDilation(): cpp.Float32 return this.CustomTimeDilation;
	public extern var NetDormancy(get, never): TEnumAsByte<ENetDormancy>;
	public inline extern function get_NetDormancy(): TEnumAsByte<ENetDormancy> return this.NetDormancy;
	public extern var SpawnCollisionHandlingMethod(get, never): ESpawnActorCollisionHandlingMethod;
	public inline extern function get_SpawnCollisionHandlingMethod(): ESpawnActorCollisionHandlingMethod return this.SpawnCollisionHandlingMethod;
	public extern var AutoReceiveInput(get, never): TEnumAsByte<EAutoReceiveInput>;
	public inline extern function get_AutoReceiveInput(): TEnumAsByte<EAutoReceiveInput> return this.AutoReceiveInput;
	public extern var InputPriority(get, never): cpp.Int32;
	public inline extern function get_InputPriority(): cpp.Int32 return this.InputPriority;
	public extern var InputComponent(get, never): cpp.Star<InputComp.ConstInputComp>;
	public inline extern function get_InputComponent(): cpp.Star<InputComp.ConstInputComp> return this.InputComponent;
	public extern var NetCullDistanceSquared(get, never): cpp.Float32;
	public inline extern function get_NetCullDistanceSquared(): cpp.Float32 return this.NetCullDistanceSquared;
	public extern var NetTag(get, never): cpp.Int32;
	public inline extern function get_NetTag(): cpp.Int32 return this.NetTag;
	public extern var NetUpdateFrequency(get, never): cpp.Float32;
	public inline extern function get_NetUpdateFrequency(): cpp.Float32 return this.NetUpdateFrequency;
	public extern var MinNetUpdateFrequency(get, never): cpp.Float32;
	public inline extern function get_MinNetUpdateFrequency(): cpp.Float32 return this.MinNetUpdateFrequency;
	public extern var NetPriority(get, never): cpp.Float32;
	public inline extern function get_NetPriority(): cpp.Float32 return this.NetPriority;
	public extern var Children(get, never): TArray<cpp.Star<Actor.ConstActor>>;
	public inline extern function get_Children(): TArray<cpp.Star<Actor.ConstActor>> return this.Children;
	public extern var Layers(get, never): TArray<FName>;
	public inline extern function get_Layers(): TArray<FName> return this.Layers;
	public extern var Tags(get, never): TArray<FName>;
	public inline extern function get_Tags(): TArray<FName> return this.Tags;
	public extern var OnTakeAnyDamage(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Controller.ConstController>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnTakeAnyDamage(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Controller.ConstController>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnTakeAnyDamage;
	public extern var OnTakePointDamage(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<Controller.ConstController>, Vector, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, FName, Vector, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnTakePointDamage(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<Controller.ConstController>, Vector, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, FName, Vector, cpp.Star<DamageType.ConstDamageType>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnTakePointDamage;
	public extern var OnTakeRadialDamage(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, Vector, HitResult, cpp.Star<Controller.ConstController>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnTakeRadialDamage(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Float32, cpp.Star<DamageType.ConstDamageType>, Vector, HitResult, cpp.Star<Controller.ConstController>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnTakeRadialDamage;
	public extern var OnActorBeginOverlap(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnActorBeginOverlap(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnActorBeginOverlap;
	public extern var OnActorEndOverlap(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnActorEndOverlap(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnActorEndOverlap;
	public extern var OnBeginCursorOver(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnBeginCursorOver(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void> return this.OnBeginCursorOver;
	public extern var OnEndCursorOver(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnEndCursorOver(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void> return this.OnEndCursorOver;
	public extern var OnClicked(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, Key) -> Void>;
	public inline extern function get_OnClicked(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, Key) -> Void> return this.OnClicked;
	public extern var OnReleased(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, Key) -> Void>;
	public inline extern function get_OnReleased(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, Key) -> Void> return this.OnReleased;
	public extern var OnInputTouchBegin(get, never): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInputTouchBegin(): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnInputTouchBegin;
	public extern var OnInputTouchEnd(get, never): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInputTouchEnd(): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnInputTouchEnd;
	public extern var OnInputTouchEnter(get, never): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInputTouchEnter(): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnInputTouchEnter;
	public extern var OnInputTouchLeave(get, never): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnInputTouchLeave(): HaxeMulticastSparseDelegateProperty<(TEnumAsByte<ETouchIndex>, cpp.Star<Actor.ConstActor>) -> Void> return this.OnInputTouchLeave;
	public extern var OnActorHit(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>, Vector, cpp.Reference<HitResult>) -> Void>;
	public inline extern function get_OnActorHit(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, cpp.Star<Actor.ConstActor>, Vector, cpp.Reference<HitResult>) -> Void> return this.OnActorHit;
	public extern var OnDestroyed(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void>;
	public inline extern function get_OnDestroyed(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>) -> Void> return this.OnDestroyed;
	public extern var OnEndPlay(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, TEnumAsByte<EEndPlayReason>) -> Void>;
	public inline extern function get_OnEndPlay(): HaxeMulticastSparseDelegateProperty<(cpp.Star<Actor.ConstActor>, TEnumAsByte<EEndPlayReason>) -> Void> return this.OnEndPlay;
	public extern var BlueprintCreatedComponents(get, never): TArray<cpp.Star<ActorComp.ConstActorComp>>;
	public inline extern function get_BlueprintCreatedComponents(): TArray<cpp.Star<ActorComp.ConstActorComp>> return this.BlueprintCreatedComponents;
}

@:forward
@:nativeGen
@:native("Actor*")
abstract ActorPtr(cpp.Star<Actor>) from cpp.Star<Actor> to cpp.Star<Actor>{
	@:from
	public static extern inline function fromValue(v: Actor): ActorPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): Actor {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}