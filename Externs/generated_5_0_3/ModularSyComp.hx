// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UModularSynthComponent")
@:include("SynthComponents/EpicSynth1Component.h")
extern class ModularSyComp extends SynthCompComp {
	public var VoiceCount: cpp.Int32;

	public function SetSynthPreset(SynthPreset: cpp.Reference<FModularSynthPreset>): Void;
	public function SetSustainGain(SustainGain: cpp.Float32): Void;
	public function SetStereoDelayWetlevel(DelayWetlevel: cpp.Float32): Void;
	public function SetStereoDelayTime(DelayTimeMsec: cpp.Float32): Void;
	public function SetStereoDelayRatio(DelayRatio: cpp.Float32): Void;
	public function SetStereoDelayMode(StereoDelayMode: ESynthStereoDelayMode): Void;
	public function SetStereoDelayIsEnabled(StereoDelayEnabled: Bool): Void;
	public function SetStereoDelayFeedback(DelayFeedback: cpp.Float32): Void;
	public function SetSpread(Spread: cpp.Float32): Void;
	public function SetReleaseTime(ReleaseTimeMsec: cpp.Float32): Void;
	public function SetPortamento(Portamento: cpp.Float32): Void;
	public function SetPitchBend(PitchBend: cpp.Float32): Void;
	public function SetPan(Pan: cpp.Float32): Void;
	public function SetOscType(OscIndex: cpp.Int32, OscType: ESynth1OscType): Void;
	public function SetOscSync(bIsSynced: Bool): Void;
	public function SetOscSemitones(OscIndex: cpp.Int32, Semitones: cpp.Float32): Void;
	public function SetOscPulsewidth(OscIndex: cpp.Int32, Pulsewidth: cpp.Float32): Void;
	public function SetOscOctave(OscIndex: cpp.Int32, Octave: cpp.Float32): Void;
	public function SetOscGainMod(OscIndex: cpp.Int32, OscGainMod: cpp.Float32): Void;
	public function SetOscGain(OscIndex: cpp.Int32, OscGain: cpp.Float32): Void;
	public function SetOscFrequencyMod(OscIndex: cpp.Int32, OscFreqMod: cpp.Float32): Void;
	public function SetOscCents(OscIndex: cpp.Int32, Cents: cpp.Float32): Void;
	public function SetModEnvSustainGain(SustainGain: cpp.Float32): Void;
	public function SetModEnvReleaseTime(Release: cpp.Float32): Void;
	public function SetModEnvPatch(InPatchType: ESynthModEnvPatch): Void;
	public function SetModEnvInvert(bInvert: Bool): Void;
	public function SetModEnvDepth(Depth: cpp.Float32): Void;
	public function SetModEnvDecayTime(DecayTimeMsec: cpp.Float32): Void;
	public function SetModEnvBiasPatch(InPatchType: ESynthModEnvBiasPatch): Void;
	public function SetModEnvBiasInvert(bInvert: Bool): Void;
	public function SetModEnvAttackTime(AttackTimeMsec: cpp.Float32): Void;
	public function SetLFOType(LFOIndex: cpp.Int32, LFOType: ESynthLFOType): Void;
	public function SetLFOPatch(LFOIndex: cpp.Int32, LFOPatchType: ESynthLFOPatchType): Void;
	public function SetLFOMode(LFOIndex: cpp.Int32, LFOMode: ESynthLFOMode): Void;
	public function SetLFOGainMod(LFOIndex: cpp.Int32, GainMod: cpp.Float32): Void;
	public function SetLFOGain(LFOIndex: cpp.Int32, Gain: cpp.Float32): Void;
	public function SetLFOFrequencyMod(LFOIndex: cpp.Int32, FrequencyModHz: cpp.Float32): Void;
	public function SetLFOFrequency(LFOIndex: cpp.Int32, FrequencyHz: cpp.Float32): Void;
	public function SetGainDb(GainDb: cpp.Float32): Void;
	public function SetFilterType(FilterType: ESynthFilterType): Void;
	public function SetFilterQMod(FilterQ: cpp.Float32): Void;
	public function SetFilterQ(FilterQ: cpp.Float32): Void;
	public function SetFilterFrequencyMod(FilterFrequencyHz: cpp.Float32): Void;
	public function SetFilterFrequency(FilterFrequencyHz: cpp.Float32): Void;
	public function SetFilterAlgorithm(FilterAlgorithm: ESynthFilterAlgorithm): Void;
	public function SetEnableUnison(EnableUnison: Bool): Void;
	public function SetEnableRetrigger(RetriggerEnabled: Bool): Void;
	public function SetEnablePolyphony(bEnablePolyphony: Bool): Void;
	public function SetEnablePatch(PatchId: FPatchId, bIsEnabled: Bool): cpp.Reference<Bool>;
	public function SetEnableLegato(LegatoEnabled: Bool): Void;
	public function SetDecayTime(DecayTimeMsec: cpp.Float32): Void;
	public function SetChorusFrequency(Frequency: cpp.Float32): Void;
	public function SetChorusFeedback(Feedback: cpp.Float32): Void;
	public function SetChorusEnabled(EnableChorus: Bool): Void;
	public function SetChorusDepth(Depth: cpp.Float32): Void;
	public function SetAttackTime(AttackTimeMsec: cpp.Float32): Void;
	public function NoteOn(Note: cpp.Float32, Velocity: cpp.Int32, Duration: cpp.Float32): Void;
	public function NoteOff(Note: cpp.Float32, bAllNotesOff: Bool, bKillAllNotes: Bool): Void;
	public function CreatePatch(PatchSource: ESynth1PatchSource, PatchCables: cpp.Reference<TArray<FSynth1PatchCable>>, bEnableByDefault: Bool): cpp.Reference<FPatchId>;
}

@:forward()
abstract ConstModularSyComp(ModularSyComp) from ModularSyComp {
}