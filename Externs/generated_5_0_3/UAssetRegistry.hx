// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAssetRegistry")
extern class UAssetRegistry extends UInterface {

	public function WaitForPackage(PackageName: FString): Void;
	public function WaitForCompletion(): Void;
	public function UseFilterToExcludeAssets(AssetDataList: TArray<FAssetData>, Filter: FARFilter): Void;
	public function SearchAllAssets(bSynchronousSearch: Bool): Void;
	public function ScanPathsSynchronous(InPaths: TArray<FString>, bForceRescan: Bool, bIgnoreDenyListScanFilters: Bool): Void;
	public function ScanModifiedAssetFiles(InFilePaths: TArray<FString>): Void;
	public function ScanFilesSynchronous(InFilePaths: TArray<FString>, bForceRescan: Bool): Void;
	public function RunAssetsThroughFilter(AssetDataList: TArray<FAssetData>, Filter: FARFilter): Void;
	public function PrioritizeSearchPath(PathToPrioritize: FString): Void;
	public function K2_GetReferencers(PackageName: FName, ReferenceOptions: FAssetRegistryDependencyOptions, OutReferencers: TArray<FName>): Bool;
	public function K2_GetDependencies(PackageName: FName, DependencyOptions: FAssetRegistryDependencyOptions, OutDependencies: TArray<FName>): Bool;
	public function IsSearchAsync(): Bool;
	public function IsSearchAllAssets(): Bool;
	public function IsLoadingAssets(): Bool;
	public function HasAssets(PackagePath: FName, bRecursive: Bool): Bool;
	public function GetSubPaths(InBasePath: FString, OutPathList: TArray<FString>, bInRecurse: Bool): Void;
	public function GetAssetsByPaths(PackagePaths: TArray<FName>, OutAssetData: TArray<FAssetData>, bRecursive: Bool, bIncludeOnlyOnDiskAssets: Bool): Bool;
	public function GetAssetsByPath(PackagePath: FName, OutAssetData: TArray<FAssetData>, bRecursive: Bool, bIncludeOnlyOnDiskAssets: Bool): Bool;
	public function GetAssetsByPackageName(PackageName: FName, OutAssetData: TArray<FAssetData>, bIncludeOnlyOnDiskAssets: Bool): Bool;
	public function GetAssetsByClass(ClassName: FName, OutAssetData: TArray<FAssetData>, bSearchSubClasses: Bool): Bool;
	public function GetAssets(Filter: FARFilter, OutAssetData: TArray<FAssetData>): Bool;
	public function GetAssetByObjectPath(ObjectPath: FName, bIncludeOnlyOnDiskAssets: Bool): FAssetData;
	public function GetAllCachedPaths(OutPathList: TArray<FString>): Void;
	public function GetAllAssets(OutAssetData: TArray<FAssetData>, bIncludeOnlyOnDiskAssets: Bool): Bool;
}
