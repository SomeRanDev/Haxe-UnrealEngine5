// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UListView")
@:include("Components/ListView.h")
@:structAccess
extern class ListView extends ListViewBase {
	@:protected public var WidgetStyle: TableViewStyle;
	@:protected public var ScrollBarStyle: ScrollBarStyle;
	@:protected public var Orientation: TEnumAsByte<EOrientation>;
	@:protected public var SelectionMode: TEnumAsByte<ESelectionMode>;
	@:protected public var ConsumeMouseWheel: EConsumeMouseWheel;
	@:protected public var bClearSelectionOnClick: Bool;
	@:protected public var bIsFocusable: Bool;
	@:protected public var EntrySpacing: cpp.Float32;
	@:protected public var bReturnFocusToSelection: Bool;
	@:protected public var ListItems: TArray<cpp.Star<Object>>;
	private var BP_OnEntryInitialized: HaxeMulticastSparseDelegateProperty<(cpp.Star<Object>, cpp.Star<UserWidget>) -> Void>;
	private var BP_OnItemClicked: HaxeMulticastSparseDelegateProperty<(cpp.Star<Object>) -> Void>;
	private var BP_OnItemDoubleClicked: HaxeMulticastSparseDelegateProperty<(cpp.Star<Object>) -> Void>;
	private var BP_OnItemIsHoveredChanged: HaxeMulticastSparseDelegateProperty<(cpp.Star<Object>, Bool) -> Void>;
	private var BP_OnItemSelectionChanged: HaxeMulticastSparseDelegateProperty<(cpp.Star<Object>, Bool) -> Void>;
	private var BP_OnItemScrolledIntoView: HaxeMulticastSparseDelegateProperty<(cpp.Star<Object>, cpp.Star<UserWidget>) -> Void>;

	public function SetSelectionMode(SelectionMode: TEnumAsByte<ESelectionMode>): Void;
	public function SetSelectedIndex(Index: cpp.Int32): Void;
	public function ScrollIndexIntoView(Index: cpp.Int32): Void;
	public function RemoveItem(Item: cpp.Star<Object>): Void;
	@:protected public function OnListItemOuterEndPlayed(ItemOuter: cpp.Star<Actor>, EndPlayReason: TEnumAsByte<EEndPlayReason>): Void;
	@:protected public function OnListItemEndPlayed(Item: cpp.Star<Actor>, EndPlayReason: TEnumAsByte<EEndPlayReason>): Void;
	public function NavigateToIndex(Index: cpp.Int32): Void;
	public function IsRefreshPending(): Bool;
	public function GetNumItems(): cpp.Int32;
	public function GetListItems(): TArray<cpp.Star<Object>>;
	public function GetItemAt(Index: cpp.Int32): cpp.Star<Object>;
	public function GetIndexForItem(Item: cpp.Star<Object.ConstObject>): cpp.Int32;
	public function ClearListItems(): Void;
	private function BP_SetSelectedItem(Item: cpp.Star<Object>): Void;
	private function BP_SetListItems(InListItems: cpp.Reference<TArray<cpp.Star<Object>>>): Void;
	private function BP_SetItemSelection(Item: cpp.Star<Object>, bSelected: Bool): Void;
	private function BP_ScrollItemIntoView(Item: cpp.Star<Object>): Void;
	private function BP_NavigateToItem(Item: cpp.Star<Object>): Void;
	private function BP_IsItemVisible(Item: cpp.Star<Object>): Bool;
	private function BP_GetSelectedItems(Items: cpp.Reference<TArray<cpp.Star<Object>>>): Bool;
	private function BP_GetSelectedItem(): cpp.Star<Object>;
	private function BP_GetNumItemsSelected(): cpp.Int32;
	private function BP_ClearSelection(): Void;
	private function BP_CancelScrollIntoView(): Void;
	public function AddItem(Item: cpp.Star<Object>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsRefreshPending, GetNumItems, GetListItems, GetItemAt, GetIndexForItem, BP_IsItemVisible, BP_GetSelectedItems, BP_GetSelectedItem, BP_GetNumItemsSelected)
@:nativeGen
abstract ConstListView(ListView) from ListView {
}

@:forward
@:nativeGen
@:native("ListView*")
abstract ListViewPtr(cpp.Star<ListView>) from cpp.Star<ListView> to cpp.Star<ListView>{
	@:from
	public static extern inline function fromValue(v: ListView): ListViewPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ListView {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}