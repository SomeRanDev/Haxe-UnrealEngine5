// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCurveControlPointsMechanic")
@:include("Mechanics/CurveControlPointsMechanic.h")
@:structAccess
extern class CurveControlPointsMechanic extends InteractionMechanic {
	public var ClickBehavior: cpp.Star<SingleClickInputBehavior>;
	public var HoverBehavior: cpp.Star<MouseHoverBehavior>;
	public var PreviewGeometryActor: cpp.Star<PreviewGeometryActor>;
	public var DrawnControlPoints: cpp.Star<PointSetComp>;
	public var DrawnControlSegments: cpp.Star<LineSetComp>;
	public var PreviewPoint: cpp.Star<PointSetComp>;
	public var PreviewSegment: cpp.Star<LineSetComp>;
	public var PointTransformProxy: cpp.Star<TransformProxy>;
	public var PointTransformGizmo: cpp.Star<CombinedTransformGizmo>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstCurveControlPointsMechanic(CurveControlPointsMechanic) from CurveControlPointsMechanic {
	public extern var ClickBehavior(get, never): cpp.Star<SingleClickInputBehavior.ConstSingleClickInputBehavior>;
	public inline extern function get_ClickBehavior(): cpp.Star<SingleClickInputBehavior.ConstSingleClickInputBehavior> return this.ClickBehavior;
	public extern var HoverBehavior(get, never): cpp.Star<MouseHoverBehavior.ConstMouseHoverBehavior>;
	public inline extern function get_HoverBehavior(): cpp.Star<MouseHoverBehavior.ConstMouseHoverBehavior> return this.HoverBehavior;
	public extern var PreviewGeometryActor(get, never): cpp.Star<PreviewGeometryActor.ConstPreviewGeometryActor>;
	public inline extern function get_PreviewGeometryActor(): cpp.Star<PreviewGeometryActor.ConstPreviewGeometryActor> return this.PreviewGeometryActor;
	public extern var DrawnControlPoints(get, never): cpp.Star<PointSetComp.ConstPointSetComp>;
	public inline extern function get_DrawnControlPoints(): cpp.Star<PointSetComp.ConstPointSetComp> return this.DrawnControlPoints;
	public extern var DrawnControlSegments(get, never): cpp.Star<LineSetComp.ConstLineSetComp>;
	public inline extern function get_DrawnControlSegments(): cpp.Star<LineSetComp.ConstLineSetComp> return this.DrawnControlSegments;
	public extern var PreviewPoint(get, never): cpp.Star<PointSetComp.ConstPointSetComp>;
	public inline extern function get_PreviewPoint(): cpp.Star<PointSetComp.ConstPointSetComp> return this.PreviewPoint;
	public extern var PreviewSegment(get, never): cpp.Star<LineSetComp.ConstLineSetComp>;
	public inline extern function get_PreviewSegment(): cpp.Star<LineSetComp.ConstLineSetComp> return this.PreviewSegment;
	public extern var PointTransformProxy(get, never): cpp.Star<TransformProxy.ConstTransformProxy>;
	public inline extern function get_PointTransformProxy(): cpp.Star<TransformProxy.ConstTransformProxy> return this.PointTransformProxy;
	public extern var PointTransformGizmo(get, never): cpp.Star<CombinedTransformGizmo.ConstCombinedTransformGizmo>;
	public inline extern function get_PointTransformGizmo(): cpp.Star<CombinedTransformGizmo.ConstCombinedTransformGizmo> return this.PointTransformGizmo;
}

@:forward
@:nativeGen
@:native("CurveControlPointsMechanic*")
abstract CurveControlPointsMechanicPtr(cpp.Star<CurveControlPointsMechanic>) from cpp.Star<CurveControlPointsMechanic> to cpp.Star<CurveControlPointsMechanic>{
	@:from
	public static extern inline function fromValue(v: CurveControlPointsMechanic): CurveControlPointsMechanicPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): CurveControlPointsMechanic {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}