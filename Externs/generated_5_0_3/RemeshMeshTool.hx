// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("URemeshMeshTool")
@:include("RemeshMeshTool.h")
@:structAccess
extern class RemeshMeshTool extends MultiSelectionMeshEditingTool {
	public var BasicProperties: cpp.Star<RemeshMeshToolProperties>;
	public var MeshStatisticsProperties: cpp.Star<MeshStatisticsProperties>;
	public var Preview: cpp.Star<MeshOpPreviewWithBackgroundCompute>;
	public var MeshElementsDisplay: cpp.Star<MeshElementsVisualizer>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstRemeshMeshTool(RemeshMeshTool) from RemeshMeshTool {
	public extern var BasicProperties(get, never): cpp.Star<RemeshMeshToolProperties.ConstRemeshMeshToolProperties>;
	public inline extern function get_BasicProperties(): cpp.Star<RemeshMeshToolProperties.ConstRemeshMeshToolProperties> return this.BasicProperties;
	public extern var MeshStatisticsProperties(get, never): cpp.Star<MeshStatisticsProperties.ConstMeshStatisticsProperties>;
	public inline extern function get_MeshStatisticsProperties(): cpp.Star<MeshStatisticsProperties.ConstMeshStatisticsProperties> return this.MeshStatisticsProperties;
	public extern var Preview(get, never): cpp.Star<MeshOpPreviewWithBackgroundCompute.ConstMeshOpPreviewWithBackgroundCompute>;
	public inline extern function get_Preview(): cpp.Star<MeshOpPreviewWithBackgroundCompute.ConstMeshOpPreviewWithBackgroundCompute> return this.Preview;
	public extern var MeshElementsDisplay(get, never): cpp.Star<MeshElementsVisualizer.ConstMeshElementsVisualizer>;
	public inline extern function get_MeshElementsDisplay(): cpp.Star<MeshElementsVisualizer.ConstMeshElementsVisualizer> return this.MeshElementsDisplay;
}

@:forward
@:nativeGen
@:native("RemeshMeshTool*")
abstract RemeshMeshToolPtr(cpp.Star<RemeshMeshTool>) from cpp.Star<RemeshMeshTool> to cpp.Star<RemeshMeshTool>{
	@:from
	public static extern inline function fromValue(v: RemeshMeshTool): RemeshMeshToolPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): RemeshMeshTool {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}