// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetInternationalizationLibrary")
@:include("Kismet/KismetInternationalizationLibrary.h")
@:structAccess
extern class KismetInternationalizationLibrary extends BlueprintFunctionLibrary {
	public function SetCurrentLocale(Culture: FString, SaveToConfig: Bool): Bool;
	public function SetCurrentLanguageAndLocale(Culture: FString, SaveToConfig: Bool): Bool;
	public function SetCurrentLanguage(Culture: FString, SaveToConfig: Bool): Bool;
	public function SetCurrentCulture(Culture: FString, SaveToConfig: Bool): Bool;
	public function SetCurrentAssetGroupCulture(AssetGroup: FName, Culture: FString, SaveToConfig: Bool): Bool;
	public function GetSuitableCulture(AvailableCultures: cpp.Reference<TArray<FString>>, CultureToMatch: FString, FallbackCulture: FString): FString;
	public function GetNativeCulture(TextCategory: ELocalizedTextSourceCategory): FString;
	public function GetLocalizedCultures(IncludeGame: Bool, IncludeEngine: Bool, IncludeEditor: Bool, IncludeAdditional: Bool): TArray<FString>;
	public function GetCurrentLocale(): FString;
	public function GetCurrentLanguage(): FString;
	public function GetCurrentCulture(): FString;
	public function GetCurrentAssetGroupCulture(AssetGroup: FName): FString;
	public function GetCultureDisplayName(Culture: FString, Localized: Bool): FString;
	public function ClearCurrentAssetGroupCulture(AssetGroup: FName, SaveToConfig: Bool): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstKismetInternationalizationLibrary(KismetInternationalizationLibrary) from KismetInternationalizationLibrary {
}

@:forward
@:nativeGen
@:native("KismetInternationalizationLibrary*")
abstract KismetInternationalizationLibraryPtr(cpp.Star<KismetInternationalizationLibrary>) from cpp.Star<KismetInternationalizationLibrary> to cpp.Star<KismetInternationalizationLibrary>{
	@:from
	public static extern inline function fromValue(v: KismetInternationalizationLibrary): KismetInternationalizationLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): KismetInternationalizationLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}