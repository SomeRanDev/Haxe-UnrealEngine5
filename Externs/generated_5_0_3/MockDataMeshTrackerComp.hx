// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMockDataMeshTrackerComponent")
@:include("MockDataMeshTrackerComponent.h")
extern class MockDataMeshTrackerComp extends SceneComp {
	public var OnMeshTrackerUpdated: HaxeMulticastSparseDelegateProperty<(cpp.Int32, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Int32>>, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Float32>>) -> Void>;
	public var ScanWorld: Bool;
	public var RequestNormals: Bool;
	public var RequestVertexConfidence: Bool;
	public var VertexColorMode: EMeshTrackerVertexColorMode;
	public var BlockVertexColors: TArray<Color>;
	public var VertexColorFromConfidenceZero: LinearColor;
	public var VertexColorFromConfidenceOne: LinearColor;
	public var UpdateInterval: cpp.Float32;
	public var MRMesh: cpp.Star<MRMeshComp>;

	public function OnMockDataMeshTrackerUpdated__DelegateSignature(Index: cpp.Int32, Vertices: cpp.Reference<TArray<Vector>>, Triangles: cpp.Reference<TArray<cpp.Int32>>, Normals: cpp.Reference<TArray<Vector>>, Confidence: cpp.Reference<TArray<cpp.Float32>>): Void;
	public function DisconnectMRMesh(InMRMeshPtr: cpp.Star<MRMeshComp>): Void;
	public function ConnectMRMesh(InMRMeshPtr: cpp.Star<MRMeshComp>): Void;
}

@:forward()
@:nativeGen
abstract ConstMockDataMeshTrackerComp(MockDataMeshTrackerComp) from MockDataMeshTrackerComp {
	public extern var OnMeshTrackerUpdated(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Int32, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Int32>>, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Float32>>) -> Void>;
	public inline extern function get_OnMeshTrackerUpdated(): HaxeMulticastSparseDelegateProperty<(cpp.Int32, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Int32>>, cpp.Reference<TArray<Vector>>, cpp.Reference<TArray<cpp.Float32>>) -> Void> return this.OnMeshTrackerUpdated;
	public extern var ScanWorld(get, never): Bool;
	public inline extern function get_ScanWorld(): Bool return this.ScanWorld;
	public extern var RequestNormals(get, never): Bool;
	public inline extern function get_RequestNormals(): Bool return this.RequestNormals;
	public extern var RequestVertexConfidence(get, never): Bool;
	public inline extern function get_RequestVertexConfidence(): Bool return this.RequestVertexConfidence;
	public extern var VertexColorMode(get, never): EMeshTrackerVertexColorMode;
	public inline extern function get_VertexColorMode(): EMeshTrackerVertexColorMode return this.VertexColorMode;
	public extern var BlockVertexColors(get, never): TArray<Color>;
	public inline extern function get_BlockVertexColors(): TArray<Color> return this.BlockVertexColors;
	public extern var VertexColorFromConfidenceZero(get, never): LinearColor;
	public inline extern function get_VertexColorFromConfidenceZero(): LinearColor return this.VertexColorFromConfidenceZero;
	public extern var VertexColorFromConfidenceOne(get, never): LinearColor;
	public inline extern function get_VertexColorFromConfidenceOne(): LinearColor return this.VertexColorFromConfidenceOne;
	public extern var UpdateInterval(get, never): cpp.Float32;
	public inline extern function get_UpdateInterval(): cpp.Float32 return this.UpdateInterval;
	public extern var MRMesh(get, never): cpp.Star<MRMeshComp.ConstMRMeshComp>;
	public inline extern function get_MRMesh(): cpp.Star<MRMeshComp.ConstMRMeshComp> return this.MRMesh;
}