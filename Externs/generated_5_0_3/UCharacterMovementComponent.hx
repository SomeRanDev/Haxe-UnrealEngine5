// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCharacterMovementComponent")
@:include("GameFramework/CharacterMovementComponent.h")
extern class UCharacterMovementComponent extends UPawnMovementComponent {
	public var CharacterOwner: TObjectPtr<ACharacter>;
	public var GravityScale: cpp.Float32;
	public var MaxStepHeight: cpp.Float32;
	public var JumpZVelocity: cpp.Float32;
	public var JumpOffJumpZFactor: cpp.Float32;
	public var WalkableFloorAngle: cpp.Float32;
	public var WalkableFloorZ: cpp.Float32;
	public var MovementMode: EMovementMode;
	public var CustomMovementMode: cpp.UInt8;
	public var NetworkSmoothingMode: ENetworkSmoothingMode;
	public var GroundFriction: cpp.Float32;
	public var MaxWalkSpeed: cpp.Float32;
	public var MaxWalkSpeedCrouched: cpp.Float32;
	public var MaxSwimSpeed: cpp.Float32;
	public var MaxFlySpeed: cpp.Float32;
	public var MaxCustomMovementSpeed: cpp.Float32;
	public var MaxAcceleration: cpp.Float32;
	public var MinAnalogWalkSpeed: cpp.Float32;
	public var BrakingFrictionFactor: cpp.Float32;
	public var BrakingFriction: cpp.Float32;
	public var BrakingSubStepTime: cpp.Float32;
	public var BrakingDecelerationWalking: cpp.Float32;
	public var BrakingDecelerationFalling: cpp.Float32;
	public var BrakingDecelerationSwimming: cpp.Float32;
	public var BrakingDecelerationFlying: cpp.Float32;
	public var AirControl: cpp.Float32;
	public var AirControlBoostMultiplier: cpp.Float32;
	public var AirControlBoostVelocityThreshold: cpp.Float32;
	public var FallingLateralFriction: cpp.Float32;
	public var CrouchedHalfHeight: cpp.Float32;
	public var Buoyancy: cpp.Float32;
	public var PerchRadiusThreshold: cpp.Float32;
	public var PerchAdditionalHeight: cpp.Float32;
	public var RotationRate: FRotator;
	public var bUseSeparateBrakingFriction: Bool;
	public var bApplyGravityWhileJumping: Bool;
	public var bUseControllerDesiredRotation: Bool;
	public var bOrientRotationToMovement: Bool;
	public var bSweepWhileNavWalking: Bool;
	public var bMovementInProgress: Bool;
	public var bEnableScopedMovementUpdates: Bool;
	public var bEnableServerDualMoveScopedMovementUpdates: Bool;
	public var bForceMaxAccel: Bool;
	public var bRunPhysicsWithNoController: Bool;
	public var bForceNextFloorCheck: Bool;
	public var bShrinkProxyCapsule: Bool;
	public var bCanWalkOffLedges: Bool;
	public var bCanWalkOffLedgesWhenCrouching: Bool;
	public var bNetworkSkipProxyPredictionOnNetUpdate: Bool;
	public var bNetworkAlwaysReplicateTransformUpdateTimestamp: Bool;
	public var bDeferUpdateMoveComponent: Bool;
	public var bEnablePhysicsInteraction: Bool;
	public var bTouchForceScaledToMass: Bool;
	public var bPushForceScaledToMass: Bool;
	public var bPushForceUsingZOffset: Bool;
	public var bScalePushForceToVelocity: Bool;
	public var DeferredUpdatedMoveComponent: TObjectPtr<USceneComponent>;
	public var MaxOutOfWaterStepHeight: cpp.Float32;
	public var OutofWaterZ: cpp.Float32;
	public var Mass: cpp.Float32;
	public var StandingDownwardForceScale: cpp.Float32;
	public var InitialPushForceFactor: cpp.Float32;
	public var PushForceFactor: cpp.Float32;
	public var PushForcePointZOffsetFactor: cpp.Float32;
	public var TouchForceFactor: cpp.Float32;
	public var MinTouchForce: cpp.Float32;
	public var MaxTouchForce: cpp.Float32;
	public var RepulsionForce: cpp.Float32;
	public var bForceBraking_DEPRECATED: Bool;
	public var CrouchedSpeedMultiplier_DEPRECATED: cpp.Float32;
	public var UpperImpactNormalScale_DEPRECATED: cpp.Float32;
	public var Acceleration: FVector;
	public var LastUpdateRotation: FQuat;
	public var LastUpdateLocation: FVector;
	public var LastUpdateVelocity: FVector;
	public var ServerLastTransformUpdateTimeStamp: cpp.Float32;
	public var ServerLastClientGoodMoveAckTime: cpp.Float32;
	public var ServerLastClientAdjustmentTime: cpp.Float32;
	public var PendingImpulseToApply: FVector;
	public var PendingForceToApply: FVector;
	public var AnalogInputModifier: cpp.Float32;
	public var MaxSimulationTimeStep: cpp.Float32;
	public var MaxSimulationIterations: cpp.Int32;
	public var MaxJumpApexAttemptsPerSimulation: cpp.Int32;
	public var MaxDepenetrationWithGeometry: cpp.Float32;
	public var MaxDepenetrationWithGeometryAsProxy: cpp.Float32;
	public var MaxDepenetrationWithPawn: cpp.Float32;
	public var MaxDepenetrationWithPawnAsProxy: cpp.Float32;
	public var NetworkSimulatedSmoothLocationTime: cpp.Float32;
	public var NetworkSimulatedSmoothRotationTime: cpp.Float32;
	public var ListenServerNetworkSimulatedSmoothLocationTime: cpp.Float32;
	public var ListenServerNetworkSimulatedSmoothRotationTime: cpp.Float32;
	public var NetProxyShrinkRadius: cpp.Float32;
	public var NetProxyShrinkHalfHeight: cpp.Float32;
	public var NetworkMaxSmoothUpdateDistance: cpp.Float32;
	public var NetworkNoSmoothUpdateDistance: cpp.Float32;
	public var NetworkMinTimeBetweenClientAckGoodMoves: cpp.Float32;
	public var NetworkMinTimeBetweenClientAdjustments: cpp.Float32;
	public var NetworkMinTimeBetweenClientAdjustmentsLargeCorrection: cpp.Float32;
	public var NetworkLargeClientCorrectionDistance: cpp.Float32;
	public var LedgeCheckThreshold: cpp.Float32;
	public var JumpOutOfWaterPitch: cpp.Float32;
	public var CurrentFloor: FFindFloorResult;
	public var DefaultLandMovementMode: EMovementMode;
	public var DefaultWaterMovementMode: EMovementMode;
	public var GroundMovementMode: EMovementMode;
	public var bMaintainHorizontalGroundVelocity: Bool;
	public var bImpartBaseVelocityX: Bool;
	public var bImpartBaseVelocityY: Bool;
	public var bImpartBaseVelocityZ: Bool;
	public var bImpartBaseAngularVelocity: Bool;
	public var bJustTeleported: Bool;
	public var bNetworkUpdateReceived: Bool;
	public var bNetworkMovementModeChanged: Bool;
	public var bIgnoreClientMovementErrorChecksAndCorrection: Bool;
	public var bServerAcceptClientAuthoritativePosition: Bool;
	public var bNotifyApex: Bool;
	public var bCheatFlying: Bool;
	public var bWantsToCrouch: Bool;
	public var bCrouchMaintainsBaseLocation: Bool;
	public var bIgnoreBaseRotation: Bool;
	public var bFastAttachedMove: Bool;
	public var bAlwaysCheckFloor: Bool;
	public var bUseFlatBaseForFloorChecks: Bool;
	public var bPerformingJumpOff: Bool;
	public var bWantsToLeaveNavWalking: Bool;
	public var bUseRVOAvoidance: Bool;
	public var bRequestedMoveUseAcceleration: Bool;
	public var bWasSimulatingRootMotion: Bool;
	public var bAllowPhysicsRotationDuringAnimRootMotion: Bool;
	public var FormerBaseVelocityDecayHalfLife: cpp.Float32;
	public var bHasRequestedVelocity: Bool;
	public var bRequestedMoveWithMaxSpeed: Bool;
	public var bWasAvoidanceUpdated: Bool;
	public var bProjectNavMeshWalking: Bool;
	public var bProjectNavMeshOnBothWorldChannels: Bool;
	public var AvoidanceConsiderationRadius: cpp.Float32;
	public var RequestedVelocity: FVector;
	public var AvoidanceUID: cpp.Int32;
	public var AvoidanceGroup: FNavAvoidanceMask;
	public var GroupsToAvoid: FNavAvoidanceMask;
	public var GroupsToIgnore: FNavAvoidanceMask;
	public var AvoidanceWeight: cpp.Float32;
	public var PendingLaunchVelocity: FVector;
	public var NavMeshProjectionInterval: cpp.Float32;
	public var NavMeshProjectionTimer: cpp.Float32;
	public var NavMeshProjectionInterpSpeed: cpp.Float32;
	public var NavMeshProjectionHeightScaleUp: cpp.Float32;
	public var NavMeshProjectionHeightScaleDown: cpp.Float32;
	public var NavWalkingFloorDistTolerance: cpp.Float32;
	public var PostPhysicsTickFunction: FCharacterMovementComponentPostPhysicsTickFunction;
	public var MinTimeBetweenTimeStampResets: cpp.Float32;
	public var CurrentRootMotion: FRootMotionSourceGroup;
	public var ServerCorrectionRootMotion: FRootMotionSourceGroup;
	public var RootMotionParams: FRootMotionMovementParams;
	public var AnimRootMotionVelocity: FVector;

	public function SetWalkableFloorZ(InWalkableFloorZ: cpp.Float32): Void;
	public function SetWalkableFloorAngle(InWalkableFloorAngle: cpp.Float32): Void;
	public function SetMovementMode(NewMovementMode: EMovementMode, NewCustomMode: cpp.UInt8): Void;
	public function SetGroupsToIgnoreMask(GroupMask: FNavAvoidanceMask): Void;
	public function SetGroupsToIgnore(GroupFlags: cpp.Int32): Void;
	public function SetGroupsToAvoidMask(GroupMask: FNavAvoidanceMask): Void;
	public function SetGroupsToAvoid(GroupFlags: cpp.Int32): Void;
	public function SetCrouchedHalfHeight(NewValue: cpp.Float32): Void;
	public function SetAvoidanceGroupMask(GroupMask: FNavAvoidanceMask): Void;
	public function SetAvoidanceGroup(GroupFlags: cpp.Int32): Void;
	public function SetAvoidanceEnabled(bEnable: Bool): Void;
	public function K2_GetWalkableFloorZ(): cpp.Float32;
	public function K2_GetWalkableFloorAngle(): cpp.Float32;
	public function K2_FindFloor(CapsuleLocation: FVector, FloorResult: FFindFloorResult): Void;
	public function K2_ComputeFloorDist(CapsuleLocation: FVector, LineDistance: cpp.Float32, SweepDistance: cpp.Float32, SweepRadius: cpp.Float32, FloorResult: FFindFloorResult): Void;
	public function IsWalking(): Bool;
	public function IsWalkable(Hit: FHitResult): Bool;
	public function GetValidPerchRadius(): cpp.Float32;
	public function GetPerchRadiusThreshold(): cpp.Float32;
	public function GetMovementBase(): cpp.Star<UPrimitiveComponent>;
	public function GetMinAnalogSpeed(): cpp.Float32;
	public function GetMaxJumpHeightWithJumpTime(): cpp.Float32;
	public function GetMaxJumpHeight(): cpp.Float32;
	public function GetMaxBrakingDeceleration(): cpp.Float32;
	public function GetMaxAcceleration(): cpp.Float32;
	public function GetLastUpdateVelocity(): FVector;
	public function GetLastUpdateRotation(): FRotator;
	public function GetLastUpdateLocation(): FVector;
	public function GetImpartedMovementBaseVelocity(): FVector;
	public function GetCurrentAcceleration(): FVector;
	public function GetCrouchedHalfHeight(): cpp.Float32;
	public function GetCharacterOwner(): cpp.Star<ACharacter>;
	public function GetAnalogInputModifier(): cpp.Float32;
	public function DisableMovement(): Void;
	public function ClearAccumulatedForces(): Void;
	public function CapsuleTouched(OverlappedComp: cpp.Star<UPrimitiveComponent>, Other: cpp.Star<AActor>, OtherComp: cpp.Star<UPrimitiveComponent>, OtherBodyIndex: cpp.Int32, bFromSweep: Bool, SweepResult: FHitResult): Void;
	public function CalcVelocity(DeltaTime: cpp.Float32, Friction: cpp.Float32, bFluid: Bool, BrakingDeceleration: cpp.Float32): Void;
	public function AddImpulse(Impulse: FVector, bVelocityChange: Bool): Void;
	public function AddForce(Force: FVector): Void;
}
