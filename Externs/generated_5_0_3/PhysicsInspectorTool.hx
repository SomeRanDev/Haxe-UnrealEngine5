// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPhysicsInspectorTool")
@:include("Physics/PhysicsInspectorTool.h")
@:structAccess
extern class PhysicsInspectorTool extends MultiSelectionMeshEditingTool {
	public var VizSettings: cpp.Star<CollisionGeometryVisualizationProperties>;
	public var ObjectData: TArray<cpp.Star<PhysicsObjectToolPropertySet>>;
	public var LineMaterial: cpp.Star<MaterialInterface>;
	public var PreviewElements: TArray<cpp.Star<PreviewGeometry>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstPhysicsInspectorTool(PhysicsInspectorTool) from PhysicsInspectorTool {
	public extern var VizSettings(get, never): cpp.Star<CollisionGeometryVisualizationProperties.ConstCollisionGeometryVisualizationProperties>;
	public inline extern function get_VizSettings(): cpp.Star<CollisionGeometryVisualizationProperties.ConstCollisionGeometryVisualizationProperties> return this.VizSettings;
	public extern var ObjectData(get, never): TArray<cpp.Star<PhysicsObjectToolPropertySet.ConstPhysicsObjectToolPropertySet>>;
	public inline extern function get_ObjectData(): TArray<cpp.Star<PhysicsObjectToolPropertySet.ConstPhysicsObjectToolPropertySet>> return this.ObjectData;
	public extern var LineMaterial(get, never): cpp.Star<MaterialInterface.ConstMaterialInterface>;
	public inline extern function get_LineMaterial(): cpp.Star<MaterialInterface.ConstMaterialInterface> return this.LineMaterial;
	public extern var PreviewElements(get, never): TArray<cpp.Star<PreviewGeometry.ConstPreviewGeometry>>;
	public inline extern function get_PreviewElements(): TArray<cpp.Star<PreviewGeometry.ConstPreviewGeometry>> return this.PreviewElements;
}

@:forward
@:nativeGen
@:native("PhysicsInspectorTool*")
abstract PhysicsInspectorToolPtr(cpp.Star<PhysicsInspectorTool>) from cpp.Star<PhysicsInspectorTool> to cpp.Star<PhysicsInspectorTool>{
	@:from
	public static extern inline function fromValue(v: PhysicsInspectorTool): PhysicsInspectorToolPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PhysicsInspectorTool {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}