// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimInstance")
@:include("Animation/AnimInstance.h")
@:structAccess
extern class AnimInstance extends Object {
	public var CurrentSkeleton: cpp.Star<Skeleton>;
	public var RootMotionMode: ERootMotionMode;
	public var bUseMultiThreadedAnimationUpdate: Bool;
	public var bUsingCopyPoseFromMesh: Bool;
	public var bReceiveNotifiesFromLinkedInstances: Bool;
	public var bPropagateNotifiesToLinkedInstances: Bool;
	public var bUseMainInstanceMontageEvaluationData: Bool;
	public var bQueueMontageEvents: Bool;
	public var OnMontageBlendingOut: HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage>, Bool) -> Void>;
	public var OnMontageStarted: HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage>) -> Void>;
	public var OnMontageEnded: HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage>, Bool) -> Void>;
	public var OnAllMontageInstancesEnded: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var PostCompileValidationClassName: SoftClassPath;
	public var NotifyQueue: AnimNotifyQueue;
	public var ActiveAnimNotifyState: TArray<AnimNotifyEvent>;
	public var ActiveAnimNotifyEventReference: TArray<AnimNotifyEventReference>;

	public function WasAnimNotifyTriggeredInStateMachine(MachineIndex: cpp.Int32, AnimNotifyType: TSubclassOf<AnimNotify>): cpp.Reference<Bool>;
	public function WasAnimNotifyTriggeredInSourceState(MachineIndex: cpp.Int32, StateIndex: cpp.Int32, AnimNotifyType: TSubclassOf<AnimNotify>): cpp.Reference<Bool>;
	public function WasAnimNotifyTriggeredInAnyState(AnimNotifyType: TSubclassOf<AnimNotify>): cpp.Reference<Bool>;
	public function WasAnimNotifyStateActiveInStateMachine(MachineIndex: cpp.Int32, AnimNotifyStateType: TSubclassOf<AnimNotifyState>): cpp.Reference<Bool>;
	public function WasAnimNotifyStateActiveInSourceState(MachineIndex: cpp.Int32, StateIndex: cpp.Int32, AnimNotifyStateType: TSubclassOf<AnimNotifyState>): cpp.Reference<Bool>;
	public function WasAnimNotifyStateActiveInAnyState(AnimNotifyStateType: TSubclassOf<AnimNotifyState>): cpp.Reference<Bool>;
	public function WasAnimNotifyNameTriggeredInStateMachine(MachineIndex: cpp.Int32, NotifyName: FName): cpp.Reference<Bool>;
	public function WasAnimNotifyNameTriggeredInSourceState(MachineIndex: cpp.Int32, StateIndex: cpp.Int32, NotifyName: FName): cpp.Reference<Bool>;
	public function WasAnimNotifyNameTriggeredInAnyState(NotifyName: FName): cpp.Reference<Bool>;
	public function UnlockAIResources(bUnlockMovement: Bool, UnlockAILogic: Bool): Void;
	public function UnlinkAnimClassLayers(InClass: TSubclassOf<AnimInstance>): Void;
	public function TryGetPawnOwner(): cpp.Reference<cpp.Star<Pawn>>;
	public function StopSlotAnimation(InBlendOutTime: cpp.Float32, SlotNodeName: FName): Void;
	public function SnapshotPose(Snapshot: cpp.Reference<PoseSnapshot>): Void;
	public function SetUseMainInstanceMontageEvaluationData(bSet: Bool): Void;
	public function SetRootMotionMode(Value: ERootMotionMode): Void;
	public function SetReceiveNotifiesFromLinkedInstances(bSet: Bool): Void;
	public function SetPropagateNotifiesToLinkedInstances(bSet: Bool): Void;
	public function SetMorphTarget(MorphTargetName: FName, Value: cpp.Float32): Void;
	public function SavePoseSnapshot(SnapshotName: FName): Void;
	public function ResetDynamics(InTeleportType: ETeleportType): Void;
	public function RequestSlotGroupInertialization(InSlotGroupName: FName, Duration: cpp.Float32): Void;
	public function RemovePoseSnapshot(SnapshotName: FName): Void;
	public function PlaySlotAnimationAsDynamicMontage_WithBlendSettings(Asset: cpp.Star<AnimSequenceBase>, SlotNodeName: FName, BlendInSettings: cpp.Reference<MontageBlendSettings>, BlendOutSettings: cpp.Reference<MontageBlendSettings>, InPlayRate: cpp.Float32, LoopCount: cpp.Int32, BlendOutTriggerTime: cpp.Float32, InTimeToStartMontageAt: cpp.Float32): cpp.Reference<cpp.Star<AnimMontage>>;
	public function PlaySlotAnimationAsDynamicMontage_WithBlendArgs(Asset: cpp.Star<AnimSequenceBase>, SlotNodeName: FName, BlendIn: cpp.Reference<AlphaBlendArgs>, BlendOut: cpp.Reference<AlphaBlendArgs>, InPlayRate: cpp.Float32, LoopCount: cpp.Int32, BlendOutTriggerTime: cpp.Float32, InTimeToStartMontageAt: cpp.Float32): cpp.Reference<cpp.Star<AnimMontage>>;
	public function PlaySlotAnimationAsDynamicMontage(Asset: cpp.Star<AnimSequenceBase>, SlotNodeName: FName, BlendInTime: cpp.Float32, BlendOutTime: cpp.Float32, InPlayRate: cpp.Float32, LoopCount: cpp.Int32, BlendOutTriggerTime: cpp.Float32, InTimeToStartMontageAt: cpp.Float32): cpp.Reference<cpp.Star<AnimMontage>>;
	public function MontageSync_StopFollowing(MontageFollower: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function MontageSync_Follow(MontageFollower: cpp.Star<AnimMontage.ConstAnimMontage>, OtherAnimInstance: cpp.Star<AnimInstance.ConstAnimInstance>, MontageLeader: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_StopWithBlendSettings(BlendOutSettings: cpp.Reference<MontageBlendSettings>, Montage: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_StopWithBlendOut(BlendOut: cpp.Reference<AlphaBlendArgs>, Montage: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_StopGroupByName(InBlendOutTime: cpp.Float32, GroupName: FName): Void;
	public function Montage_Stop(InBlendOutTime: cpp.Float32, Montage: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_SetPosition(Montage: cpp.Star<AnimMontage.ConstAnimMontage>, NewPosition: cpp.Float32): Void;
	public function Montage_SetPlayRate(Montage: cpp.Star<AnimMontage.ConstAnimMontage>, NewPlayRate: cpp.Float32): Void;
	public function Montage_SetNextSection(SectionNameToChange: FName, NextSection: FName, Montage: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_Resume(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_PlayWithBlendSettings(MontageToPlay: cpp.Star<AnimMontage>, BlendInSettings: cpp.Reference<MontageBlendSettings>, InPlayRate: cpp.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: cpp.Float32, bStopAllMontages: Bool): cpp.Reference<cpp.Float32>;
	public function Montage_PlayWithBlendIn(MontageToPlay: cpp.Star<AnimMontage>, BlendIn: cpp.Reference<AlphaBlendArgs>, InPlayRate: cpp.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: cpp.Float32, bStopAllMontages: Bool): cpp.Reference<cpp.Float32>;
	public function Montage_Play(MontageToPlay: cpp.Star<AnimMontage>, InPlayRate: cpp.Float32, ReturnValueType: EMontagePlayReturnType, InTimeToStartMontageAt: cpp.Float32, bStopAllMontages: Bool): cpp.Reference<cpp.Float32>;
	public function Montage_Pause(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_JumpToSectionsEnd(SectionName: FName, Montage: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_JumpToSection(SectionName: FName, Montage: cpp.Star<AnimMontage.ConstAnimMontage>): Void;
	public function Montage_IsPlaying(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): cpp.Reference<Bool>;
	public function Montage_IsActive(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): cpp.Reference<Bool>;
	public function Montage_GetPosition(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): cpp.Reference<cpp.Float32>;
	public function Montage_GetPlayRate(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): cpp.Reference<cpp.Float32>;
	public function Montage_GetIsStopped(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): cpp.Reference<Bool>;
	public function Montage_GetCurrentSection(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): cpp.Reference<FName>;
	public function Montage_GetBlendTime(Montage: cpp.Star<AnimMontage.ConstAnimMontage>): cpp.Reference<cpp.Float32>;
	public function LockAIResources(bLockMovement: Bool, LockAILogic: Bool): Void;
	public function LinkAnimGraphByTag(InTag: FName, InClass: TSubclassOf<AnimInstance>): Void;
	public function LinkAnimClassLayers(InClass: TSubclassOf<AnimInstance>): Void;
	public function IsUsingMainInstanceMontageEvaluationData(): cpp.Reference<Bool>;
	public function IsSyncGroupBetweenMarkers(InSyncGroupName: FName, PreviousMarker: FName, NextMarker: FName, bRespectMarkerOrder: Bool): cpp.Reference<Bool>;
	public function IsPlayingSlotAnimation(Asset: cpp.Star<AnimSequenceBase.ConstAnimSequenceBase>, SlotNodeName: FName): cpp.Reference<Bool>;
	public function IsAnyMontagePlaying(): cpp.Reference<Bool>;
	public function HasMarkerBeenHitThisFrame(SyncGroup: FName, MarkerName: FName): cpp.Reference<Bool>;
	public function GetTimeToClosestMarker(SyncGroup: FName, MarkerName: FName, OutMarkerTime: cpp.Reference<cpp.Float32>): cpp.Reference<Bool>;
	public function GetSyncGroupPosition(InSyncGroupName: FName): cpp.Reference<MarkerSyncAnimPosition>;
	public function GetRelevantAnimTimeRemainingFraction(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetRelevantAnimTimeRemaining(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetRelevantAnimTimeFraction(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetRelevantAnimTime(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetRelevantAnimLength(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetReceiveNotifiesFromLinkedInstances(): cpp.Reference<Bool>;
	public function GetPropagateNotifiesToLinkedInstances(): cpp.Reference<Bool>;
	public function GetOwningComponent(): cpp.Reference<cpp.Star<SkeletalMeshComp>>;
	public function GetOwningActor(): cpp.Reference<cpp.Star<Actor>>;
	public function GetLinkedAnimLayerInstancesByGroup(InGroup: FName, OutLinkedInstances: cpp.Reference<TArray<cpp.Star<AnimInstance>>>): Void;
	public function GetLinkedAnimLayerInstanceByGroupAndClass(InGroup: FName, InClass: TSubclassOf<AnimInstance>): cpp.Reference<cpp.Star<AnimInstance>>;
	public function GetLinkedAnimLayerInstanceByGroup(InGroup: FName): cpp.Reference<cpp.Star<AnimInstance>>;
	public function GetLinkedAnimLayerInstanceByClass(InClass: TSubclassOf<AnimInstance>): cpp.Reference<cpp.Star<AnimInstance>>;
	public function GetLinkedAnimGraphInstancesByTag(InTag: FName, OutLinkedInstances: cpp.Reference<TArray<cpp.Star<AnimInstance>>>): Void;
	public function GetLinkedAnimGraphInstanceByTag(InTag: FName): cpp.Reference<cpp.Star<AnimInstance>>;
	public function GetInstanceTransitionTimeElapsedFraction(MachineIndex: cpp.Int32, TransitionIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceTransitionTimeElapsed(MachineIndex: cpp.Int32, TransitionIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceTransitionCrossfadeDuration(MachineIndex: cpp.Int32, TransitionIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceStateWeight(MachineIndex: cpp.Int32, StateIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceMachineWeight(MachineIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceCurrentStateElapsedTime(MachineIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceAssetPlayerTimeFromEndFraction(AssetPlayerIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceAssetPlayerTimeFromEnd(AssetPlayerIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceAssetPlayerTimeFraction(AssetPlayerIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceAssetPlayerTime(AssetPlayerIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetInstanceAssetPlayerLength(AssetPlayerIndex: cpp.Int32): cpp.Reference<cpp.Float32>;
	public function GetDeltaSeconds(): cpp.Reference<cpp.Float32>;
	public function GetCurveValue(CurveName: FName): cpp.Reference<cpp.Float32>;
	public function GetCurrentStateName(MachineIndex: cpp.Int32): cpp.Reference<FName>;
	public function GetCurrentActiveMontage(): cpp.Reference<cpp.Star<AnimMontage>>;
	public function GetAllCurveNames(OutNames: cpp.Reference<TArray<FName>>): Void;
	public function GetActiveCurveNames(CurveType: EAnimCurveType, OutNames: cpp.Reference<TArray<FName>>): Void;
	public function ClearMorphTargets(): Void;
	public function CalculateDirection(Velocity: cpp.Reference<Vector>, BaseRotation: cpp.Reference<Rotator>): cpp.Reference<cpp.Float32>;
	public function BlueprintUpdateAnimation(DeltaTimeX: cpp.Float32): Void;
	public function BlueprintThreadSafeUpdateAnimation(DeltaTime: cpp.Float32): Void;
	public function BlueprintPostEvaluateAnimation(): Void;
	public function BlueprintLinkedAnimationLayersInitialized(): Void;
	public function BlueprintInitializeAnimation(): Void;
	public function BlueprintBeginPlay(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	TryGetPawnOwner, Montage_IsPlaying, Montage_IsActive, Montage_GetPosition, Montage_GetPlayRate,
	Montage_GetIsStopped, Montage_GetCurrentSection, Montage_GetBlendTime, IsUsingMainInstanceMontageEvaluationData, IsSyncGroupBetweenMarkers,
	IsPlayingSlotAnimation, IsAnyMontagePlaying, HasMarkerBeenHitThisFrame, GetTimeToClosestMarker, GetSyncGroupPosition,
	GetReceiveNotifiesFromLinkedInstances, GetPropagateNotifiesToLinkedInstances, GetOwningComponent, GetOwningActor, GetLinkedAnimLayerInstancesByGroup,
	GetLinkedAnimLayerInstanceByGroupAndClass, GetLinkedAnimLayerInstanceByGroup, GetLinkedAnimLayerInstanceByClass, GetLinkedAnimGraphInstancesByTag, GetLinkedAnimGraphInstanceByTag,
	GetDeltaSeconds, GetCurveValue, GetCurrentActiveMontage, GetAllCurveNames, GetActiveCurveNames,
	CalculateDirection
)
@:nativeGen
abstract ConstAnimInstance(AnimInstance) from AnimInstance {
	public extern var CurrentSkeleton(get, never): cpp.Star<Skeleton.ConstSkeleton>;
	public inline extern function get_CurrentSkeleton(): cpp.Star<Skeleton.ConstSkeleton> return this.CurrentSkeleton;
	public extern var RootMotionMode(get, never): ERootMotionMode;
	public inline extern function get_RootMotionMode(): ERootMotionMode return this.RootMotionMode;
	public extern var bUseMultiThreadedAnimationUpdate(get, never): Bool;
	public inline extern function get_bUseMultiThreadedAnimationUpdate(): Bool return this.bUseMultiThreadedAnimationUpdate;
	public extern var bUsingCopyPoseFromMesh(get, never): Bool;
	public inline extern function get_bUsingCopyPoseFromMesh(): Bool return this.bUsingCopyPoseFromMesh;
	public extern var bReceiveNotifiesFromLinkedInstances(get, never): Bool;
	public inline extern function get_bReceiveNotifiesFromLinkedInstances(): Bool return this.bReceiveNotifiesFromLinkedInstances;
	public extern var bPropagateNotifiesToLinkedInstances(get, never): Bool;
	public inline extern function get_bPropagateNotifiesToLinkedInstances(): Bool return this.bPropagateNotifiesToLinkedInstances;
	public extern var bUseMainInstanceMontageEvaluationData(get, never): Bool;
	public inline extern function get_bUseMainInstanceMontageEvaluationData(): Bool return this.bUseMainInstanceMontageEvaluationData;
	public extern var bQueueMontageEvents(get, never): Bool;
	public inline extern function get_bQueueMontageEvents(): Bool return this.bQueueMontageEvents;
	public extern var OnMontageBlendingOut(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage.ConstAnimMontage>, Bool) -> Void>;
	public inline extern function get_OnMontageBlendingOut(): HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage.ConstAnimMontage>, Bool) -> Void> return this.OnMontageBlendingOut;
	public extern var OnMontageStarted(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage.ConstAnimMontage>) -> Void>;
	public inline extern function get_OnMontageStarted(): HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage.ConstAnimMontage>) -> Void> return this.OnMontageStarted;
	public extern var OnMontageEnded(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage.ConstAnimMontage>, Bool) -> Void>;
	public inline extern function get_OnMontageEnded(): HaxeMulticastSparseDelegateProperty<(cpp.Star<AnimMontage.ConstAnimMontage>, Bool) -> Void> return this.OnMontageEnded;
	public extern var OnAllMontageInstancesEnded(get, never): HaxeMulticastSparseDelegateProperty<() -> Void>;
	public inline extern function get_OnAllMontageInstancesEnded(): HaxeMulticastSparseDelegateProperty<() -> Void> return this.OnAllMontageInstancesEnded;
	public extern var PostCompileValidationClassName(get, never): SoftClassPath;
	public inline extern function get_PostCompileValidationClassName(): SoftClassPath return this.PostCompileValidationClassName;
	public extern var NotifyQueue(get, never): AnimNotifyQueue;
	public inline extern function get_NotifyQueue(): AnimNotifyQueue return this.NotifyQueue;
	public extern var ActiveAnimNotifyState(get, never): TArray<AnimNotifyEvent>;
	public inline extern function get_ActiveAnimNotifyState(): TArray<AnimNotifyEvent> return this.ActiveAnimNotifyState;
	public extern var ActiveAnimNotifyEventReference(get, never): TArray<AnimNotifyEventReference>;
	public inline extern function get_ActiveAnimNotifyEventReference(): TArray<AnimNotifyEventReference> return this.ActiveAnimNotifyEventReference;
}

@:forward
@:nativeGen
@:native("AnimInstance*")
abstract AnimInstancePtr(cpp.Star<AnimInstance>) from cpp.Star<AnimInstance> to cpp.Star<AnimInstance>{
	@:from
	public static extern inline function fromValue(v: AnimInstance): AnimInstancePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimInstance {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}