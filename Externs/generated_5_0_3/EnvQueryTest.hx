// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEnvQueryTest")
@:include("EnvironmentQuery/EnvQueryTest.h")
@:structAccess
extern class EnvQueryTest extends EnvQueryNode {
	public var TestOrder: cpp.Int32;
	public var TestPurpose: TEnumAsByte<EEnvTestPurpose>;
	public var TestComment: FString;
	public var MultipleContextFilterOp: TEnumAsByte<EEnvTestFilterOperator>;
	public var MultipleContextScoreOp: TEnumAsByte<EEnvTestScoreOperator>;
	public var FilterType: TEnumAsByte<EEnvTestFilterType>;
	public var BoolValue: AIDataProviderBoolValue;
	public var FloatValueMin: AIDataProviderFloatValue;
	public var FloatValueMax: AIDataProviderFloatValue;
	public var ScoringEquation: TEnumAsByte<EEnvTestScoreEquation>;
	public var ClampMinType: TEnumAsByte<EEnvQueryTestClamping>;
	public var ClampMaxType: TEnumAsByte<EEnvQueryTestClamping>;
	public var NormalizationType: EEQSNormalizationType;
	public var ScoreClampMin: AIDataProviderFloatValue;
	public var ScoreClampMax: AIDataProviderFloatValue;
	public var ScoringFactor: AIDataProviderFloatValue;
	public var ReferenceValue: AIDataProviderFloatValue;
	public var bDefineReferenceValue: Bool;
	private var bWorkOnFloatValues: Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstEnvQueryTest(EnvQueryTest) from EnvQueryTest {
	public extern var TestOrder(get, never): cpp.Int32;
	public inline extern function get_TestOrder(): cpp.Int32 return this.TestOrder;
	public extern var TestPurpose(get, never): TEnumAsByte<EEnvTestPurpose>;
	public inline extern function get_TestPurpose(): TEnumAsByte<EEnvTestPurpose> return this.TestPurpose;
	public extern var TestComment(get, never): FString;
	public inline extern function get_TestComment(): FString return this.TestComment;
	public extern var MultipleContextFilterOp(get, never): TEnumAsByte<EEnvTestFilterOperator>;
	public inline extern function get_MultipleContextFilterOp(): TEnumAsByte<EEnvTestFilterOperator> return this.MultipleContextFilterOp;
	public extern var MultipleContextScoreOp(get, never): TEnumAsByte<EEnvTestScoreOperator>;
	public inline extern function get_MultipleContextScoreOp(): TEnumAsByte<EEnvTestScoreOperator> return this.MultipleContextScoreOp;
	public extern var FilterType(get, never): TEnumAsByte<EEnvTestFilterType>;
	public inline extern function get_FilterType(): TEnumAsByte<EEnvTestFilterType> return this.FilterType;
	public extern var BoolValue(get, never): AIDataProviderBoolValue;
	public inline extern function get_BoolValue(): AIDataProviderBoolValue return this.BoolValue;
	public extern var FloatValueMin(get, never): AIDataProviderFloatValue;
	public inline extern function get_FloatValueMin(): AIDataProviderFloatValue return this.FloatValueMin;
	public extern var FloatValueMax(get, never): AIDataProviderFloatValue;
	public inline extern function get_FloatValueMax(): AIDataProviderFloatValue return this.FloatValueMax;
	public extern var ScoringEquation(get, never): TEnumAsByte<EEnvTestScoreEquation>;
	public inline extern function get_ScoringEquation(): TEnumAsByte<EEnvTestScoreEquation> return this.ScoringEquation;
	public extern var ClampMinType(get, never): TEnumAsByte<EEnvQueryTestClamping>;
	public inline extern function get_ClampMinType(): TEnumAsByte<EEnvQueryTestClamping> return this.ClampMinType;
	public extern var ClampMaxType(get, never): TEnumAsByte<EEnvQueryTestClamping>;
	public inline extern function get_ClampMaxType(): TEnumAsByte<EEnvQueryTestClamping> return this.ClampMaxType;
	public extern var NormalizationType(get, never): EEQSNormalizationType;
	public inline extern function get_NormalizationType(): EEQSNormalizationType return this.NormalizationType;
	public extern var ScoreClampMin(get, never): AIDataProviderFloatValue;
	public inline extern function get_ScoreClampMin(): AIDataProviderFloatValue return this.ScoreClampMin;
	public extern var ScoreClampMax(get, never): AIDataProviderFloatValue;
	public inline extern function get_ScoreClampMax(): AIDataProviderFloatValue return this.ScoreClampMax;
	public extern var ScoringFactor(get, never): AIDataProviderFloatValue;
	public inline extern function get_ScoringFactor(): AIDataProviderFloatValue return this.ScoringFactor;
	public extern var ReferenceValue(get, never): AIDataProviderFloatValue;
	public inline extern function get_ReferenceValue(): AIDataProviderFloatValue return this.ReferenceValue;
	public extern var bDefineReferenceValue(get, never): Bool;
	public inline extern function get_bDefineReferenceValue(): Bool return this.bDefineReferenceValue;
}

@:forward
@:nativeGen
@:native("EnvQueryTest*")
abstract EnvQueryTestPtr(cpp.Star<EnvQueryTest>) from cpp.Star<EnvQueryTest> to cpp.Star<EnvQueryTest>{
	@:from
	public static extern inline function fromValue(v: EnvQueryTest): EnvQueryTestPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EnvQueryTest {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}