// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMultiTransformer")
@:include("Transforms/MultiTransformer.h")
@:structAccess
extern class MultiTransformer extends Object {
	public var GizmoManager: cpp.Star<InteractiveGizmoManager>;
	public var TransformGizmo: cpp.Star<CombinedTransformGizmo>;
	public var TransformProxy: cpp.Star<TransformProxy>;
	public var DragAlignmentMechanic: cpp.Star<DragAlignmentMechanic>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstMultiTransformer(MultiTransformer) from MultiTransformer {
	public extern var GizmoManager(get, never): cpp.Star<InteractiveGizmoManager.ConstInteractiveGizmoManager>;
	public inline extern function get_GizmoManager(): cpp.Star<InteractiveGizmoManager.ConstInteractiveGizmoManager> return this.GizmoManager;
	public extern var TransformGizmo(get, never): cpp.Star<CombinedTransformGizmo.ConstCombinedTransformGizmo>;
	public inline extern function get_TransformGizmo(): cpp.Star<CombinedTransformGizmo.ConstCombinedTransformGizmo> return this.TransformGizmo;
	public extern var TransformProxy(get, never): cpp.Star<TransformProxy.ConstTransformProxy>;
	public inline extern function get_TransformProxy(): cpp.Star<TransformProxy.ConstTransformProxy> return this.TransformProxy;
	public extern var DragAlignmentMechanic(get, never): cpp.Star<DragAlignmentMechanic.ConstDragAlignmentMechanic>;
	public inline extern function get_DragAlignmentMechanic(): cpp.Star<DragAlignmentMechanic.ConstDragAlignmentMechanic> return this.DragAlignmentMechanic;
}

@:forward
@:nativeGen
@:native("MultiTransformer*")
abstract MultiTransformerPtr(cpp.Star<MultiTransformer>) from cpp.Star<MultiTransformer> to cpp.Star<MultiTransformer>{
	@:from
	public static extern inline function fromValue(v: MultiTransformer): MultiTransformerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MultiTransformer {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}