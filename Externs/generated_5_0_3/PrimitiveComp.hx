// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPrimitiveComponent")
@:include("Components/PrimitiveComponent.h")
@:structAccess
extern class PrimitiveComp extends SceneComp {
	public var MinDrawDistance: cpp.Float32;
	public var LDMaxDrawDistance: cpp.Float32;
	public var CachedMaxDrawDistance: cpp.Float32;
	public var DepthPriorityGroup: ESceneDepthPriorityGroup;
	public var ViewOwnerDepthPriorityGroup: ESceneDepthPriorityGroup;
	public var IndirectLightingCacheQuality: EIndirectLightingCacheQuality;
	public var LightmapType: ELightmapType;
	public var bEnableAutoLODGeneration: Bool;
	public var ExcludeForSpecificHLODLevels: TArray<cpp.Int32>;
	public var HLODBatchingPolicy: EHLODBatchingPolicy;
	public var bIsActorTextureStreamingBuiltData: Bool;
	public var bIsValidTextureStreamingBuiltData: Bool;
	public var bNeverDistanceCull: Bool;
	public var bAlwaysCreatePhysicsState: Bool;
	public var bGenerateOverlapEvents: Bool;
	public var bMultiBodyOverlap: Bool;
	public var bTraceComplexOnMove: Bool;
	public var bReturnMaterialOnMove: Bool;
	public var bUseViewOwnerDepthPriorityGroup: Bool;
	public var bAllowCullDistanceVolume: Bool;
	public var bHasMotionBlurVelocityMeshes: Bool;
	public var bVisibleInReflectionCaptures: Bool;
	public var bVisibleInRealTimeSkyCaptures: Bool;
	public var bVisibleInRayTracing: Bool;
	public var bRenderInMainPass: Bool;
	public var bRenderInDepthPass: Bool;
	public var bReceivesDecals: Bool;
	public var bOwnerNoSee: Bool;
	public var bOnlyOwnerSee: Bool;
	public var bTreatAsBackgroundForOcclusion: Bool;
	public var bUseAsOccluder: Bool;
	public var bSelectable: Bool;
	public var bConsiderForActorPlacementWhenHidden: Bool;
	public var bForceMipStreaming: Bool;
	public var bHasPerInstanceHitProxies: Bool;
	public var CastShadow: Bool;
	public var bEmissiveLightSource: Bool;
	public var bAffectDynamicIndirectLighting: Bool;
	public var bAffectDistanceFieldLighting: Bool;
	public var bCastDynamicShadow: Bool;
	public var bCastStaticShadow: Bool;
	public var bCastVolumetricTranslucentShadow: Bool;
	public var bCastContactShadow: Bool;
	public var bSelfShadowOnly: Bool;
	public var bCastFarShadow: Bool;
	public var bCastInsetShadow: Bool;
	public var bCastCinematicShadow: Bool;
	public var bCastHiddenShadow: Bool;
	public var bCastShadowAsTwoSided: Bool;
	public var bLightAsIfStatic_DEPRECATED: Bool;
	public var bLightAttachmentsAsGroup: Bool;
	public var bExcludeFromLightAttachmentGroup: Bool;
	public var bReceiveMobileCSMShadows: Bool;
	public var bSingleSampleShadowFromStationaryLights: Bool;
	public var bIgnoreRadialImpulse: Bool;
	public var bIgnoreRadialForce: Bool;
	public var bApplyImpulseOnDamage: Bool;
	public var bReplicatePhysicsToAutonomousProxy: Bool;
	public var bFillCollisionUnderneathForNavmesh: Bool;
	public var AlwaysLoadOnClient: Bool;
	public var AlwaysLoadOnServer: Bool;
	public var bUseEditorCompositing: Bool;
	public var bIsBeingMovedByEditor: Bool;
	public var bRenderCustomDepth: Bool;
	public var bVisibleInSceneCaptureOnly: Bool;
	public var bHiddenInSceneCapture: Bool;
	public var bRayTracingFarField: Bool;
	public var bHasNoStreamableTextures: Bool;
	public var bHasCustomNavigableGeometry: EHasCustomNavigableGeometry;
	public var HitProxyPriority: EHitProxyPriority;
	public var CanBeCharacterBase_DEPRECATED: ECanBeCharacterBase;
	public var bUseMaxLODAsImposter_DEPRECATED: Bool;
	public var bBatchImpostersAsInstances_DEPRECATED: Bool;
	public var CanCharacterStepUpOn: ECanBeCharacterBase;
	public var LightingChannels: LightingChannels;
	public var RayTracingGroupId: cpp.Int32;
	public var VisibilityId: cpp.Int32;
	public var CustomDepthStencilValue: cpp.Int32;
	public var CustomPrimitiveData: CustomPrimitiveData;
	public var CustomPrimitiveDataInternal: CustomPrimitiveData;
	public var TranslucencySortPriority: cpp.Int32;
	public var TranslucencySortDistanceOffset: cpp.Float32;
	public var RuntimeVirtualTextures: TArray<cpp.Star<RuntimeVirtualTexture>>;
	public var VirtualTextureLodBias: cpp.Int8;
	public var VirtualTextureCullMips: cpp.Int8;
	public var VirtualTextureMinCoverage: cpp.Int8;
	public var VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	public var BoundsScale: cpp.Float32;
	public var MoveIgnoreActors: TArray<cpp.Star<Actor>>;
	public var MoveIgnoreComponents: TArray<cpp.Star<PrimitiveComp>>;
	public var BodyInstance: BodyInstance;
	public var OnComponentHit: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>, cpp.Star<Actor>, cpp.Star<PrimitiveComp>, Vector, cpp.Reference<HitResult>) -> Void>;
	public var OnComponentBeginOverlap: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>, cpp.Star<Actor>, cpp.Star<PrimitiveComp>, cpp.Int32, Bool, cpp.Reference<HitResult>) -> Void>;
	public var OnComponentEndOverlap: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>, cpp.Star<Actor>, cpp.Star<PrimitiveComp>, cpp.Int32) -> Void>;
	public var OnComponentWake: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>, FName) -> Void>;
	public var OnComponentSleep: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>, FName) -> Void>;
	public var OnBeginCursorOver: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>) -> Void>;
	public var OnEndCursorOver: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>) -> Void>;
	public var OnClicked: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>, Key) -> Void>;
	public var OnReleased: HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp>, Key) -> Void>;
	public var OnInputTouchBegin: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp>) -> Void>;
	public var OnInputTouchEnd: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp>) -> Void>;
	public var OnInputTouchEnter: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp>) -> Void>;
	public var OnInputTouchLeave: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp>) -> Void>;
	public var RayTracingGroupCullingPriority: ERayTracingGroupCullingPriority;
	public var CustomDepthStencilWriteMask: ERendererStencilMask;
	public var LODParentPrimitive: cpp.Star<PrimitiveComp>;

	public function WasRecentlyRendered(Tolerance: cpp.Float32): cpp.Reference<Bool>;
	public function WakeRigidBody(BoneName: FName): Void;
	public function WakeAllRigidBodies(): Void;
	public function SetWalkableSlopeOverride(NewOverride: cpp.Reference<WalkableSlopeOverride>): Void;
	public function SetVisibleInSceneCaptureOnly(bValue: Bool): Void;
	public function SetVisibleInRayTracing(bNewVisibleInRayTracing: Bool): Void;
	public function SetVectorParameterForDefaultCustomPrimitiveData(ParameterName: FName, Value: Vector4): Void;
	public function SetVectorParameterForCustomPrimitiveData(ParameterName: FName, Value: Vector4): Void;
	public function SetUseCCD(InUseCCD: Bool, BoneName: FName): Void;
	public function SetTranslucentSortPriority(NewTranslucentSortPriority: cpp.Int32): Void;
	public function SetTranslucencySortDistanceOffset(NewTranslucencySortDistanceOffset: cpp.Float32): Void;
	public function SetSingleSampleShadowFromStationaryLights(bNewSingleSampleShadowFromStationaryLights: Bool): Void;
	public function SetSimulatePhysics(bSimulate: Bool): Void;
	public function SetScalarParameterForDefaultCustomPrimitiveData(ParameterName: FName, Value: cpp.Float32): Void;
	public function SetScalarParameterForCustomPrimitiveData(ParameterName: FName, Value: cpp.Float32): Void;
	public function SetRenderInMainPass(bValue: Bool): Void;
	public function SetRenderInDepthPass(bValue: Bool): Void;
	public function SetRenderCustomDepth(bValue: Bool): Void;
	public function SetReceivesDecals(bNewReceivesDecals: Bool): Void;
	public function SetPhysMaterialOverride(NewPhysMaterial: cpp.Star<PhysicalMaterial>): Void;
	public function SetPhysicsMaxAngularVelocityInRadians(NewMaxAngVel: cpp.Float32, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsMaxAngularVelocityInDegrees(NewMaxAngVel: cpp.Float32, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsLinearVelocity(NewVel: Vector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsAngularVelocityInRadians(NewAngVel: Vector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsAngularVelocityInDegrees(NewAngVel: Vector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetOwnerNoSee(bNewOwnerNoSee: Bool): Void;
	public function SetOnlyOwnerSee(bNewOnlyOwnerSee: Bool): Void;
	public function SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: Bool): Void;
	public function SetMaterialByName(MaterialSlotName: FName, Material: cpp.Star<MaterialInterface>): Void;
	public function SetMaterial(ElementIndex: cpp.Int32, Material: cpp.Star<MaterialInterface>): Void;
	public function SetMassScale(BoneName: FName, InMassScale: cpp.Float32): Void;
	public function SetMassOverrideInKg(BoneName: FName, MassInKg: cpp.Float32, bOverrideMass: Bool): Void;
	public function SetLinearDamping(InDamping: cpp.Float32): Void;
	public function SetLightingChannels(bChannel0: Bool, bChannel1: Bool, bChannel2: Bool): Void;
	public function SetLightAttachmentsAsGroup(bInLightAttachmentsAsGroup: Bool): Void;
	public function SetHiddenInSceneCapture(bValue: Bool): Void;
	public function SetGenerateOverlapEvents(bInGenerateOverlapEvents: Bool): Void;
	public function SetExcludeFromLightAttachmentGroup(bInExcludeFromLightAttachmentGroup: Bool): Void;
	public function SetEnableGravity(bGravityEnabled: Bool): Void;
	public function SetEmissiveLightSource(NewEmissiveLightSource: Bool): Void;
	public function SetDefaultCustomPrimitiveDataVector4(DataIndex: cpp.Int32, Value: Vector4): Void;
	public function SetDefaultCustomPrimitiveDataVector3(DataIndex: cpp.Int32, Value: Vector): Void;
	public function SetDefaultCustomPrimitiveDataVector2(DataIndex: cpp.Int32, Value: Vector2D): Void;
	public function SetDefaultCustomPrimitiveDataFloat(DataIndex: cpp.Int32, Value: cpp.Float32): Void;
	public function SetCustomPrimitiveDataVector4(DataIndex: cpp.Int32, Value: Vector4): Void;
	public function SetCustomPrimitiveDataVector3(DataIndex: cpp.Int32, Value: Vector): Void;
	public function SetCustomPrimitiveDataVector2(DataIndex: cpp.Int32, Value: Vector2D): Void;
	public function SetCustomPrimitiveDataFloat(DataIndex: cpp.Int32, Value: cpp.Float32): Void;
	public function SetCustomDepthStencilWriteMask(WriteMaskBit: ERendererStencilMask): Void;
	public function SetCustomDepthStencilValue(Value: cpp.Int32): Void;
	public function SetCullDistance(NewCullDistance: cpp.Float32): Void;
	public function SetConstraintMode(ConstraintMode: EDOFMode): Void;
	public function SetCollisionResponseToChannel(Channel: ECollisionChannel, NewResponse: ECollisionResponse): Void;
	public function SetCollisionResponseToAllChannels(NewResponse: ECollisionResponse): Void;
	public function SetCollisionProfileName(InCollisionProfileName: FName, bUpdateOverlaps: Bool): Void;
	public function SetCollisionObjectType(Channel: ECollisionChannel): Void;
	public function SetCollisionEnabled(NewType: ECollisionEnabled): Void;
	public function SetCenterOfMass(CenterOfMassOffset: Vector, BoneName: FName): Void;
	public function SetCastShadow(NewCastShadow: Bool): Void;
	public function SetCastInsetShadow(bInCastInsetShadow: Bool): Void;
	public function SetCastHiddenShadow(NewCastHiddenShadow: Bool): Void;
	public function SetCastContactShadow(bInCastContactShadow: Bool): Void;
	public function SetBoundsScale(NewBoundsScale: cpp.Float32): Void;
	public function SetAngularDamping(InDamping: cpp.Float32): Void;
	public function SetAllUseCCD(InUseCCD: Bool): Void;
	public function SetAllPhysicsLinearVelocity(NewVel: Vector, bAddToCurrent: Bool): Void;
	public function SetAllPhysicsAngularVelocityInRadians(NewAngVel: cpp.Reference<Vector>, bAddToCurrent: Bool): Void;
	public function SetAllPhysicsAngularVelocityInDegrees(NewAngVel: cpp.Reference<Vector>, bAddToCurrent: Bool): Void;
	public function SetAllMassScale(InMassScale: cpp.Float32): Void;
	public function ScaleByMomentOfInertia(InputVector: Vector, BoneName: FName): cpp.Reference<Vector>;
	public function PutRigidBodyToSleep(BoneName: FName): Void;
	public function K2_SphereTraceComponent(TraceStart: Vector, TraceEnd: Vector, SphereRadius: cpp.Float32, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: cpp.Reference<Vector>, HitNormal: cpp.Reference<Vector>, BoneName: cpp.Reference<FName>, OutHit: cpp.Reference<HitResult>): cpp.Reference<Bool>;
	public function K2_SphereOverlapComponent(InSphereCentre: Vector, InSphereRadius: cpp.Float32, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: cpp.Reference<Vector>, HitNormal: cpp.Reference<Vector>, BoneName: cpp.Reference<FName>, OutHit: cpp.Reference<HitResult>): cpp.Reference<Bool>;
	public function K2_LineTraceComponent(TraceStart: Vector, TraceEnd: Vector, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: cpp.Reference<Vector>, HitNormal: cpp.Reference<Vector>, BoneName: cpp.Reference<FName>, OutHit: cpp.Reference<HitResult>): cpp.Reference<Bool>;
	public function K2_IsQueryCollisionEnabled(): cpp.Reference<Bool>;
	public function K2_IsPhysicsCollisionEnabled(): cpp.Reference<Bool>;
	public function K2_IsCollisionEnabled(): cpp.Reference<Bool>;
	public function K2_BoxOverlapComponent(InBoxCentre: Vector, InBox: Box, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: cpp.Reference<Vector>, HitNormal: cpp.Reference<Vector>, BoneName: cpp.Reference<FName>, OutHit: cpp.Reference<HitResult>): cpp.Reference<Bool>;
	public function IsOverlappingComponent(OtherComp: cpp.Star<PrimitiveComp.ConstPrimitiveComp>): cpp.Reference<Bool>;
	public function IsOverlappingActor(Other: cpp.Star<Actor.ConstActor>): cpp.Reference<Bool>;
	public function IsGravityEnabled(): cpp.Reference<Bool>;
	public function IsAnyRigidBodyAwake(): cpp.Reference<Bool>;
	public function IgnoreComponentWhenMoving(Component: cpp.Star<PrimitiveComp>, bShouldIgnore: Bool): Void;
	public function IgnoreActorWhenMoving(Actor: cpp.Star<Actor>, bShouldIgnore: Bool): Void;
	public function GetWalkableSlopeOverride(): cpp.Reference<WalkableSlopeOverride>;
	public function GetPhysicsLinearVelocityAtPoint(Point: Vector, BoneName: FName): cpp.Reference<Vector>;
	public function GetPhysicsLinearVelocity(BoneName: FName): cpp.Reference<Vector>;
	public function GetPhysicsAngularVelocityInRadians(BoneName: FName): cpp.Reference<Vector>;
	public function GetPhysicsAngularVelocityInDegrees(BoneName: FName): cpp.Reference<Vector>;
	public function GetOverlappingComponents(OutOverlappingComponents: cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>): Void;
	public function GetOverlappingActors(OverlappingActors: cpp.Reference<TArray<cpp.Star<Actor>>>, ClassFilter: TSubclassOf<Actor>): Void;
	public function GetNumMaterials(): cpp.Reference<cpp.Int32>;
	public function GetMaterialFromCollisionFaceIndex(FaceIndex: cpp.Int32, SectionIndex: cpp.Reference<cpp.Int32>): cpp.Reference<cpp.Star<MaterialInterface>>;
	public function GetMaterial(ElementIndex: cpp.Int32): cpp.Reference<cpp.Star<MaterialInterface>>;
	public function GetMassScale(BoneName: FName): cpp.Reference<cpp.Float32>;
	public function GetMass(): cpp.Reference<cpp.Float32>;
	public function GetLinearDamping(): cpp.Reference<cpp.Float32>;
	public function GetInertiaTensor(BoneName: FName): cpp.Reference<Vector>;
	public function GetGenerateOverlapEvents(): cpp.Reference<Bool>;
	public function GetCustomPrimitiveDataIndexForVectorParameter(ParameterName: FName): cpp.Reference<cpp.Int32>;
	public function GetCustomPrimitiveDataIndexForScalarParameter(ParameterName: FName): cpp.Reference<cpp.Int32>;
	public function GetCollisionResponseToChannel(Channel: ECollisionChannel): cpp.Reference<ECollisionResponse>;
	public function GetCollisionProfileName(): cpp.Reference<FName>;
	public function GetCollisionObjectType(): cpp.Reference<ECollisionChannel>;
	public function GetCollisionEnabled(): cpp.Reference<ECollisionEnabled>;
	public function GetClosestPointOnCollision(Point: cpp.Reference<Vector>, OutPointOnBody: cpp.Reference<Vector>, BoneName: FName): cpp.Reference<cpp.Float32>;
	public function GetCenterOfMass(BoneName: FName): cpp.Reference<Vector>;
	public function GetAngularDamping(): cpp.Reference<cpp.Float32>;
	public function CreateDynamicMaterialInstance(ElementIndex: cpp.Int32, SourceMaterial: cpp.Star<MaterialInterface>, OptionalName: FName): cpp.Reference<cpp.Star<MaterialInstanceDynamic>>;
	public function CreateAndSetMaterialInstanceDynamicFromMaterial(ElementIndex: cpp.Int32, Parent: cpp.Star<MaterialInterface>): cpp.Reference<cpp.Star<MaterialInstanceDynamic>>;
	public function CreateAndSetMaterialInstanceDynamic(ElementIndex: cpp.Int32): cpp.Reference<cpp.Star<MaterialInstanceDynamic>>;
	public function CopyArrayOfMoveIgnoreComponents(): cpp.Reference<TArray<cpp.Star<PrimitiveComp>>>;
	public function CopyArrayOfMoveIgnoreActors(): cpp.Reference<TArray<cpp.Star<Actor>>>;
	public function ClearMoveIgnoreComponents(): Void;
	public function ClearMoveIgnoreActors(): Void;
	public function CanCharacterStepUp(Pawn: cpp.Star<Pawn>): cpp.Reference<Bool>;
	public function AddVelocityChangeImpulseAtLocation(Impulse: Vector, Location: Vector, BoneName: FName): Void;
	public function AddTorqueInRadians(Torque: Vector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddTorqueInDegrees(Torque: Vector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddRadialImpulse(Origin: Vector, Radius: cpp.Float32, Strength: cpp.Float32, Falloff: ERadialImpulseFalloff, bVelChange: Bool): Void;
	public function AddRadialForce(Origin: Vector, Radius: cpp.Float32, Strength: cpp.Float32, Falloff: ERadialImpulseFalloff, bAccelChange: Bool): Void;
	public function AddImpulseAtLocation(Impulse: Vector, Location: Vector, BoneName: FName): Void;
	public function AddImpulse(Impulse: Vector, BoneName: FName, bVelChange: Bool): Void;
	public function AddForceAtLocationLocal(Force: Vector, Location: Vector, BoneName: FName): Void;
	public function AddForceAtLocation(Force: Vector, Location: Vector, BoneName: FName): Void;
	public function AddForce(Force: Vector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddAngularImpulseInRadians(Impulse: Vector, BoneName: FName, bVelChange: Bool): Void;
	public function AddAngularImpulseInDegrees(Impulse: Vector, BoneName: FName, bVelChange: Bool): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	WasRecentlyRendered, ScaleByMomentOfInertia, K2_IsQueryCollisionEnabled, K2_IsPhysicsCollisionEnabled, K2_IsCollisionEnabled,
	IsOverlappingComponent, IsOverlappingActor, IsGravityEnabled, GetWalkableSlopeOverride, GetPhysicsAngularVelocityInRadians,
	GetPhysicsAngularVelocityInDegrees, GetOverlappingComponents, GetOverlappingActors, GetNumMaterials, GetMaterialFromCollisionFaceIndex,
	GetMaterial, GetMassScale, GetMass, GetLinearDamping, GetInertiaTensor,
	GetGenerateOverlapEvents, GetCustomPrimitiveDataIndexForVectorParameter, GetCustomPrimitiveDataIndexForScalarParameter, GetCollisionResponseToChannel, GetCollisionProfileName,
	GetCollisionObjectType, GetCollisionEnabled, GetClosestPointOnCollision, GetCenterOfMass, GetAngularDamping,
	CanCharacterStepUp
)
@:nativeGen
abstract ConstPrimitiveComp(PrimitiveComp) from PrimitiveComp {
	public extern var MinDrawDistance(get, never): cpp.Float32;
	public inline extern function get_MinDrawDistance(): cpp.Float32 return this.MinDrawDistance;
	public extern var LDMaxDrawDistance(get, never): cpp.Float32;
	public inline extern function get_LDMaxDrawDistance(): cpp.Float32 return this.LDMaxDrawDistance;
	public extern var CachedMaxDrawDistance(get, never): cpp.Float32;
	public inline extern function get_CachedMaxDrawDistance(): cpp.Float32 return this.CachedMaxDrawDistance;
	public extern var DepthPriorityGroup(get, never): ESceneDepthPriorityGroup;
	public inline extern function get_DepthPriorityGroup(): ESceneDepthPriorityGroup return this.DepthPriorityGroup;
	public extern var ViewOwnerDepthPriorityGroup(get, never): ESceneDepthPriorityGroup;
	public inline extern function get_ViewOwnerDepthPriorityGroup(): ESceneDepthPriorityGroup return this.ViewOwnerDepthPriorityGroup;
	public extern var IndirectLightingCacheQuality(get, never): EIndirectLightingCacheQuality;
	public inline extern function get_IndirectLightingCacheQuality(): EIndirectLightingCacheQuality return this.IndirectLightingCacheQuality;
	public extern var LightmapType(get, never): ELightmapType;
	public inline extern function get_LightmapType(): ELightmapType return this.LightmapType;
	public extern var bEnableAutoLODGeneration(get, never): Bool;
	public inline extern function get_bEnableAutoLODGeneration(): Bool return this.bEnableAutoLODGeneration;
	public extern var ExcludeForSpecificHLODLevels(get, never): TArray<cpp.Int32>;
	public inline extern function get_ExcludeForSpecificHLODLevels(): TArray<cpp.Int32> return this.ExcludeForSpecificHLODLevels;
	public extern var HLODBatchingPolicy(get, never): EHLODBatchingPolicy;
	public inline extern function get_HLODBatchingPolicy(): EHLODBatchingPolicy return this.HLODBatchingPolicy;
	public extern var bIsActorTextureStreamingBuiltData(get, never): Bool;
	public inline extern function get_bIsActorTextureStreamingBuiltData(): Bool return this.bIsActorTextureStreamingBuiltData;
	public extern var bIsValidTextureStreamingBuiltData(get, never): Bool;
	public inline extern function get_bIsValidTextureStreamingBuiltData(): Bool return this.bIsValidTextureStreamingBuiltData;
	public extern var bNeverDistanceCull(get, never): Bool;
	public inline extern function get_bNeverDistanceCull(): Bool return this.bNeverDistanceCull;
	public extern var bAlwaysCreatePhysicsState(get, never): Bool;
	public inline extern function get_bAlwaysCreatePhysicsState(): Bool return this.bAlwaysCreatePhysicsState;
	public extern var bGenerateOverlapEvents(get, never): Bool;
	public inline extern function get_bGenerateOverlapEvents(): Bool return this.bGenerateOverlapEvents;
	public extern var bMultiBodyOverlap(get, never): Bool;
	public inline extern function get_bMultiBodyOverlap(): Bool return this.bMultiBodyOverlap;
	public extern var bTraceComplexOnMove(get, never): Bool;
	public inline extern function get_bTraceComplexOnMove(): Bool return this.bTraceComplexOnMove;
	public extern var bReturnMaterialOnMove(get, never): Bool;
	public inline extern function get_bReturnMaterialOnMove(): Bool return this.bReturnMaterialOnMove;
	public extern var bUseViewOwnerDepthPriorityGroup(get, never): Bool;
	public inline extern function get_bUseViewOwnerDepthPriorityGroup(): Bool return this.bUseViewOwnerDepthPriorityGroup;
	public extern var bAllowCullDistanceVolume(get, never): Bool;
	public inline extern function get_bAllowCullDistanceVolume(): Bool return this.bAllowCullDistanceVolume;
	public extern var bHasMotionBlurVelocityMeshes(get, never): Bool;
	public inline extern function get_bHasMotionBlurVelocityMeshes(): Bool return this.bHasMotionBlurVelocityMeshes;
	public extern var bVisibleInReflectionCaptures(get, never): Bool;
	public inline extern function get_bVisibleInReflectionCaptures(): Bool return this.bVisibleInReflectionCaptures;
	public extern var bVisibleInRealTimeSkyCaptures(get, never): Bool;
	public inline extern function get_bVisibleInRealTimeSkyCaptures(): Bool return this.bVisibleInRealTimeSkyCaptures;
	public extern var bVisibleInRayTracing(get, never): Bool;
	public inline extern function get_bVisibleInRayTracing(): Bool return this.bVisibleInRayTracing;
	public extern var bRenderInMainPass(get, never): Bool;
	public inline extern function get_bRenderInMainPass(): Bool return this.bRenderInMainPass;
	public extern var bRenderInDepthPass(get, never): Bool;
	public inline extern function get_bRenderInDepthPass(): Bool return this.bRenderInDepthPass;
	public extern var bReceivesDecals(get, never): Bool;
	public inline extern function get_bReceivesDecals(): Bool return this.bReceivesDecals;
	public extern var bOwnerNoSee(get, never): Bool;
	public inline extern function get_bOwnerNoSee(): Bool return this.bOwnerNoSee;
	public extern var bOnlyOwnerSee(get, never): Bool;
	public inline extern function get_bOnlyOwnerSee(): Bool return this.bOnlyOwnerSee;
	public extern var bTreatAsBackgroundForOcclusion(get, never): Bool;
	public inline extern function get_bTreatAsBackgroundForOcclusion(): Bool return this.bTreatAsBackgroundForOcclusion;
	public extern var bUseAsOccluder(get, never): Bool;
	public inline extern function get_bUseAsOccluder(): Bool return this.bUseAsOccluder;
	public extern var bSelectable(get, never): Bool;
	public inline extern function get_bSelectable(): Bool return this.bSelectable;
	public extern var bConsiderForActorPlacementWhenHidden(get, never): Bool;
	public inline extern function get_bConsiderForActorPlacementWhenHidden(): Bool return this.bConsiderForActorPlacementWhenHidden;
	public extern var bForceMipStreaming(get, never): Bool;
	public inline extern function get_bForceMipStreaming(): Bool return this.bForceMipStreaming;
	public extern var bHasPerInstanceHitProxies(get, never): Bool;
	public inline extern function get_bHasPerInstanceHitProxies(): Bool return this.bHasPerInstanceHitProxies;
	public extern var CastShadow(get, never): Bool;
	public inline extern function get_CastShadow(): Bool return this.CastShadow;
	public extern var bEmissiveLightSource(get, never): Bool;
	public inline extern function get_bEmissiveLightSource(): Bool return this.bEmissiveLightSource;
	public extern var bAffectDynamicIndirectLighting(get, never): Bool;
	public inline extern function get_bAffectDynamicIndirectLighting(): Bool return this.bAffectDynamicIndirectLighting;
	public extern var bAffectDistanceFieldLighting(get, never): Bool;
	public inline extern function get_bAffectDistanceFieldLighting(): Bool return this.bAffectDistanceFieldLighting;
	public extern var bCastDynamicShadow(get, never): Bool;
	public inline extern function get_bCastDynamicShadow(): Bool return this.bCastDynamicShadow;
	public extern var bCastStaticShadow(get, never): Bool;
	public inline extern function get_bCastStaticShadow(): Bool return this.bCastStaticShadow;
	public extern var bCastVolumetricTranslucentShadow(get, never): Bool;
	public inline extern function get_bCastVolumetricTranslucentShadow(): Bool return this.bCastVolumetricTranslucentShadow;
	public extern var bCastContactShadow(get, never): Bool;
	public inline extern function get_bCastContactShadow(): Bool return this.bCastContactShadow;
	public extern var bSelfShadowOnly(get, never): Bool;
	public inline extern function get_bSelfShadowOnly(): Bool return this.bSelfShadowOnly;
	public extern var bCastFarShadow(get, never): Bool;
	public inline extern function get_bCastFarShadow(): Bool return this.bCastFarShadow;
	public extern var bCastInsetShadow(get, never): Bool;
	public inline extern function get_bCastInsetShadow(): Bool return this.bCastInsetShadow;
	public extern var bCastCinematicShadow(get, never): Bool;
	public inline extern function get_bCastCinematicShadow(): Bool return this.bCastCinematicShadow;
	public extern var bCastHiddenShadow(get, never): Bool;
	public inline extern function get_bCastHiddenShadow(): Bool return this.bCastHiddenShadow;
	public extern var bCastShadowAsTwoSided(get, never): Bool;
	public inline extern function get_bCastShadowAsTwoSided(): Bool return this.bCastShadowAsTwoSided;
	public extern var bLightAsIfStatic_DEPRECATED(get, never): Bool;
	public inline extern function get_bLightAsIfStatic_DEPRECATED(): Bool return this.bLightAsIfStatic_DEPRECATED;
	public extern var bLightAttachmentsAsGroup(get, never): Bool;
	public inline extern function get_bLightAttachmentsAsGroup(): Bool return this.bLightAttachmentsAsGroup;
	public extern var bExcludeFromLightAttachmentGroup(get, never): Bool;
	public inline extern function get_bExcludeFromLightAttachmentGroup(): Bool return this.bExcludeFromLightAttachmentGroup;
	public extern var bReceiveMobileCSMShadows(get, never): Bool;
	public inline extern function get_bReceiveMobileCSMShadows(): Bool return this.bReceiveMobileCSMShadows;
	public extern var bSingleSampleShadowFromStationaryLights(get, never): Bool;
	public inline extern function get_bSingleSampleShadowFromStationaryLights(): Bool return this.bSingleSampleShadowFromStationaryLights;
	public extern var bIgnoreRadialImpulse(get, never): Bool;
	public inline extern function get_bIgnoreRadialImpulse(): Bool return this.bIgnoreRadialImpulse;
	public extern var bIgnoreRadialForce(get, never): Bool;
	public inline extern function get_bIgnoreRadialForce(): Bool return this.bIgnoreRadialForce;
	public extern var bApplyImpulseOnDamage(get, never): Bool;
	public inline extern function get_bApplyImpulseOnDamage(): Bool return this.bApplyImpulseOnDamage;
	public extern var bReplicatePhysicsToAutonomousProxy(get, never): Bool;
	public inline extern function get_bReplicatePhysicsToAutonomousProxy(): Bool return this.bReplicatePhysicsToAutonomousProxy;
	public extern var bFillCollisionUnderneathForNavmesh(get, never): Bool;
	public inline extern function get_bFillCollisionUnderneathForNavmesh(): Bool return this.bFillCollisionUnderneathForNavmesh;
	public extern var AlwaysLoadOnClient(get, never): Bool;
	public inline extern function get_AlwaysLoadOnClient(): Bool return this.AlwaysLoadOnClient;
	public extern var AlwaysLoadOnServer(get, never): Bool;
	public inline extern function get_AlwaysLoadOnServer(): Bool return this.AlwaysLoadOnServer;
	public extern var bUseEditorCompositing(get, never): Bool;
	public inline extern function get_bUseEditorCompositing(): Bool return this.bUseEditorCompositing;
	public extern var bIsBeingMovedByEditor(get, never): Bool;
	public inline extern function get_bIsBeingMovedByEditor(): Bool return this.bIsBeingMovedByEditor;
	public extern var bRenderCustomDepth(get, never): Bool;
	public inline extern function get_bRenderCustomDepth(): Bool return this.bRenderCustomDepth;
	public extern var bVisibleInSceneCaptureOnly(get, never): Bool;
	public inline extern function get_bVisibleInSceneCaptureOnly(): Bool return this.bVisibleInSceneCaptureOnly;
	public extern var bHiddenInSceneCapture(get, never): Bool;
	public inline extern function get_bHiddenInSceneCapture(): Bool return this.bHiddenInSceneCapture;
	public extern var bRayTracingFarField(get, never): Bool;
	public inline extern function get_bRayTracingFarField(): Bool return this.bRayTracingFarField;
	public extern var bHasNoStreamableTextures(get, never): Bool;
	public inline extern function get_bHasNoStreamableTextures(): Bool return this.bHasNoStreamableTextures;
	public extern var bHasCustomNavigableGeometry(get, never): EHasCustomNavigableGeometry;
	public inline extern function get_bHasCustomNavigableGeometry(): EHasCustomNavigableGeometry return this.bHasCustomNavigableGeometry;
	public extern var HitProxyPriority(get, never): EHitProxyPriority;
	public inline extern function get_HitProxyPriority(): EHitProxyPriority return this.HitProxyPriority;
	public extern var CanBeCharacterBase_DEPRECATED(get, never): ECanBeCharacterBase;
	public inline extern function get_CanBeCharacterBase_DEPRECATED(): ECanBeCharacterBase return this.CanBeCharacterBase_DEPRECATED;
	public extern var bUseMaxLODAsImposter_DEPRECATED(get, never): Bool;
	public inline extern function get_bUseMaxLODAsImposter_DEPRECATED(): Bool return this.bUseMaxLODAsImposter_DEPRECATED;
	public extern var bBatchImpostersAsInstances_DEPRECATED(get, never): Bool;
	public inline extern function get_bBatchImpostersAsInstances_DEPRECATED(): Bool return this.bBatchImpostersAsInstances_DEPRECATED;
	public extern var CanCharacterStepUpOn(get, never): ECanBeCharacterBase;
	public inline extern function get_CanCharacterStepUpOn(): ECanBeCharacterBase return this.CanCharacterStepUpOn;
	public extern var LightingChannels(get, never): LightingChannels;
	public inline extern function get_LightingChannels(): LightingChannels return this.LightingChannels;
	public extern var RayTracingGroupId(get, never): cpp.Int32;
	public inline extern function get_RayTracingGroupId(): cpp.Int32 return this.RayTracingGroupId;
	public extern var VisibilityId(get, never): cpp.Int32;
	public inline extern function get_VisibilityId(): cpp.Int32 return this.VisibilityId;
	public extern var CustomDepthStencilValue(get, never): cpp.Int32;
	public inline extern function get_CustomDepthStencilValue(): cpp.Int32 return this.CustomDepthStencilValue;
	public extern var CustomPrimitiveData(get, never): CustomPrimitiveData;
	public inline extern function get_CustomPrimitiveData(): CustomPrimitiveData return this.CustomPrimitiveData;
	public extern var CustomPrimitiveDataInternal(get, never): CustomPrimitiveData;
	public inline extern function get_CustomPrimitiveDataInternal(): CustomPrimitiveData return this.CustomPrimitiveDataInternal;
	public extern var TranslucencySortPriority(get, never): cpp.Int32;
	public inline extern function get_TranslucencySortPriority(): cpp.Int32 return this.TranslucencySortPriority;
	public extern var TranslucencySortDistanceOffset(get, never): cpp.Float32;
	public inline extern function get_TranslucencySortDistanceOffset(): cpp.Float32 return this.TranslucencySortDistanceOffset;
	public extern var RuntimeVirtualTextures(get, never): TArray<cpp.Star<RuntimeVirtualTexture.ConstRuntimeVirtualTexture>>;
	public inline extern function get_RuntimeVirtualTextures(): TArray<cpp.Star<RuntimeVirtualTexture.ConstRuntimeVirtualTexture>> return this.RuntimeVirtualTextures;
	public extern var VirtualTextureLodBias(get, never): cpp.Int8;
	public inline extern function get_VirtualTextureLodBias(): cpp.Int8 return this.VirtualTextureLodBias;
	public extern var VirtualTextureCullMips(get, never): cpp.Int8;
	public inline extern function get_VirtualTextureCullMips(): cpp.Int8 return this.VirtualTextureCullMips;
	public extern var VirtualTextureMinCoverage(get, never): cpp.Int8;
	public inline extern function get_VirtualTextureMinCoverage(): cpp.Int8 return this.VirtualTextureMinCoverage;
	public extern var VirtualTextureRenderPassType(get, never): ERuntimeVirtualTextureMainPassType;
	public inline extern function get_VirtualTextureRenderPassType(): ERuntimeVirtualTextureMainPassType return this.VirtualTextureRenderPassType;
	public extern var BoundsScale(get, never): cpp.Float32;
	public inline extern function get_BoundsScale(): cpp.Float32 return this.BoundsScale;
	public extern var MoveIgnoreActors(get, never): TArray<cpp.Star<Actor.ConstActor>>;
	public inline extern function get_MoveIgnoreActors(): TArray<cpp.Star<Actor.ConstActor>> return this.MoveIgnoreActors;
	public extern var MoveIgnoreComponents(get, never): TArray<cpp.Star<PrimitiveComp.ConstPrimitiveComp>>;
	public inline extern function get_MoveIgnoreComponents(): TArray<cpp.Star<PrimitiveComp.ConstPrimitiveComp>> return this.MoveIgnoreComponents;
	public extern var BodyInstance(get, never): BodyInstance;
	public inline extern function get_BodyInstance(): BodyInstance return this.BodyInstance;
	public extern var OnComponentHit(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Star<Actor.ConstActor>, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, Vector, cpp.Reference<HitResult>) -> Void>;
	public inline extern function get_OnComponentHit(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Star<Actor.ConstActor>, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, Vector, cpp.Reference<HitResult>) -> Void> return this.OnComponentHit;
	public extern var OnComponentBeginOverlap(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Star<Actor.ConstActor>, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Int32, Bool, cpp.Reference<HitResult>) -> Void>;
	public inline extern function get_OnComponentBeginOverlap(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Star<Actor.ConstActor>, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Int32, Bool, cpp.Reference<HitResult>) -> Void> return this.OnComponentBeginOverlap;
	public extern var OnComponentEndOverlap(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Star<Actor.ConstActor>, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Int32) -> Void>;
	public inline extern function get_OnComponentEndOverlap(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Star<Actor.ConstActor>, cpp.Star<PrimitiveComp.ConstPrimitiveComp>, cpp.Int32) -> Void> return this.OnComponentEndOverlap;
	public extern var OnComponentWake(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, FName) -> Void>;
	public inline extern function get_OnComponentWake(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, FName) -> Void> return this.OnComponentWake;
	public extern var OnComponentSleep(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, FName) -> Void>;
	public inline extern function get_OnComponentSleep(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, FName) -> Void> return this.OnComponentSleep;
	public extern var OnBeginCursorOver(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnBeginCursorOver(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnBeginCursorOver;
	public extern var OnEndCursorOver(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnEndCursorOver(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnEndCursorOver;
	public extern var OnClicked(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, Key) -> Void>;
	public inline extern function get_OnClicked(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, Key) -> Void> return this.OnClicked;
	public extern var OnReleased(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, Key) -> Void>;
	public inline extern function get_OnReleased(): HaxeMulticastSparseDelegateProperty<(cpp.Star<PrimitiveComp.ConstPrimitiveComp>, Key) -> Void> return this.OnReleased;
	public extern var OnInputTouchBegin(get, never): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnInputTouchBegin(): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnInputTouchBegin;
	public extern var OnInputTouchEnd(get, never): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnInputTouchEnd(): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnInputTouchEnd;
	public extern var OnInputTouchEnter(get, never): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnInputTouchEnter(): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnInputTouchEnter;
	public extern var OnInputTouchLeave(get, never): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void>;
	public inline extern function get_OnInputTouchLeave(): HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<PrimitiveComp.ConstPrimitiveComp>) -> Void> return this.OnInputTouchLeave;
	public extern var RayTracingGroupCullingPriority(get, never): ERayTracingGroupCullingPriority;
	public inline extern function get_RayTracingGroupCullingPriority(): ERayTracingGroupCullingPriority return this.RayTracingGroupCullingPriority;
	public extern var CustomDepthStencilWriteMask(get, never): ERendererStencilMask;
	public inline extern function get_CustomDepthStencilWriteMask(): ERendererStencilMask return this.CustomDepthStencilWriteMask;
	public extern var LODParentPrimitive(get, never): cpp.Star<PrimitiveComp.ConstPrimitiveComp>;
	public inline extern function get_LODParentPrimitive(): cpp.Star<PrimitiveComp.ConstPrimitiveComp> return this.LODParentPrimitive;
}