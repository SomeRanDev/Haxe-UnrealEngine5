// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeManager")
@:include("InterchangeManager.h")
@:structAccess
extern class InterchangeManager extends Object {
	private var RegisteredTranslatorsClass: TSet<TSubclassOf<Object>>;
	private var RegisteredFactoryClasses: TMap<TSubclassOf<Object>, TSubclassOf<Object>>;
	private var RegisteredWriters: TMap<TSubclassOf<Object>, cpp.Star<InterchangeWriterBase>>;
	private var TextureOnlyTranslatorClass: TSet<TSubclassOf<Object>>;

	public function ImportScene(ContentPath: FString, SourceData: cpp.Star<InterchangeSourceData.ConstInterchangeSourceData>, ImportAssetParameters: cpp.Reference<ImportAssetParameters>): Bool;
	public function ImportAsset(ContentPath: FString, SourceData: cpp.Star<InterchangeSourceData.ConstInterchangeSourceData>, ImportAssetParameters: cpp.Reference<ImportAssetParameters>): Bool;
	public function GetRegisteredFactoryClass(ClassToMake: cpp.Star<Class>): cpp.Star<Class>;
	public function GetInterchangeManagerScripted(): cpp.Star<InterchangeManager>;
	public function ExportScene(World: cpp.Star<Object.ConstObject>, bIsAutomated: Bool): Bool;
	public function ExportAsset(Asset: cpp.Star<Object.ConstObject>, bIsAutomated: Bool): Bool;
	public function CreateSourceData(InFileName: FString): cpp.Star<InterchangeSourceData>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetRegisteredFactoryClass)
@:nativeGen
abstract ConstInterchangeManager(InterchangeManager) from InterchangeManager {
}

@:forward
@:nativeGen
@:native("InterchangeManager*")
abstract InterchangeManagerPtr(cpp.Star<InterchangeManager>) from cpp.Star<InterchangeManager> to cpp.Star<InterchangeManager>{
	@:from
	public static extern inline function fromValue(v: InterchangeManager): InterchangeManagerPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeManager {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}