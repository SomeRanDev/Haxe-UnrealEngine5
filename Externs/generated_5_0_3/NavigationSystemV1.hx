// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UNavigationSystemV1")
@:include("NavigationSystem.h")
extern class NavigationSystemV1 extends NavigationSystemBase {
	public var MainNavData: cpp.Star<NavigationData>;
	public var AbstractNavData: cpp.Star<NavigationData>;
	public var DefaultAgentName: FName;
	public var CrowdManagerClass: TSoftClassPtr<Class>;
	public var bAutoCreateNavigationData: Bool;
	public var bSpawnNavDataInNavBoundsLevel: Bool;
	public var bAllowClientSideNavigation: Bool;
	public var bShouldDiscardSubLevelNavData: Bool;
	public var bTickWhilePaused: Bool;
	public var bSupportRebuilding: Bool;
	public var bInitialBuildingLocked: Bool;
	public var bSkipAgentHeightCheckWhenPickingNavData: Bool;
	public var bGenerateNavigationOnlyAroundNavigationInvokers: Bool;
	public var ActiveTilesUpdateInterval: cpp.Float32;
	public var DataGatheringMode: ENavDataGatheringModeConfig;
	public var DirtyAreaWarningSizeThreshold: cpp.Float32;
	public var GatheringNavModifiersWarningLimitTime: cpp.Float32;
	public var SupportedAgents: TArray<NavDataConfig>;
	public var SupportedAgentsMask: NavAgentSelector;
	public var BuildBounds: Box;
	public var NavDataSet: TArray<cpp.Star<NavigationData>>;
	public var NavDataRegistrationQueue: TArray<cpp.Star<NavigationData>>;
	public var OnNavDataRegisteredEvent: HaxeMulticastSparseDelegateProperty<(cpp.Star<NavigationData>) -> Void>;
	public var OnNavigationGenerationFinishedDelegate: HaxeMulticastSparseDelegateProperty<(cpp.Star<NavigationData>) -> Void>;
	public var OperationMode: FNavigationSystemRunMode;
	public var DirtyAreasUpdateFreq: cpp.Float32;

	public function UnregisterNavigationInvoker(Invoker: cpp.Star<Actor>): Void;
	public function SimpleMoveToLocation(Controller: cpp.Star<Controller>, Goal: cpp.Reference<Vector>): Void;
	public function SimpleMoveToActor(Controller: cpp.Star<Controller>, Goal: cpp.Star<Actor.ConstActor>): Void;
	public function SetMaxSimultaneousTileGenerationJobsCount(MaxNumberOfJobs: cpp.Int32): Void;
	public function SetGeometryGatheringMode(NewMode: ENavDataGatheringModeConfig): Void;
	public function ResetMaxSimultaneousTileGenerationJobsCount(): Void;
	public function RegisterNavigationInvoker(Invoker: cpp.Star<Actor>, TileGenerationRadius: cpp.Float32, TileRemovalRadius: cpp.Float32): Void;
	public function ProjectPointToNavigation(WorldContextObject: cpp.Star<Object>, Point: cpp.Reference<Vector>, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>, QueryExtent: Vector): cpp.Reference<Vector>;
	public function OnNavigationBoundsUpdated(NavVolume: cpp.Star<NavMeshBoundsVolume>): Void;
	public function NavigationRaycast(WorldContextObject: cpp.Star<Object>, RayStart: cpp.Reference<Vector>, RayEnd: cpp.Reference<Vector>, HitLocation: cpp.Reference<Vector>, FilterClass: TSubclassOf<NavigationQueryFilter>, Querier: cpp.Star<Controller>): cpp.Reference<Bool>;
	public function K2_ReplaceAreaInOctreeData(Object: cpp.Star<Object.ConstObject>, OldArea: TSubclassOf<NavArea>, NewArea: TSubclassOf<NavArea>): cpp.Reference<Bool>;
	public function K2_ProjectPointToNavigation(WorldContextObject: cpp.Star<Object>, Point: cpp.Reference<Vector>, ProjectedLocation: cpp.Reference<Vector>, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>, QueryExtent: Vector): cpp.Reference<Bool>;
	public function K2_GetRandomReachablePointInRadius(WorldContextObject: cpp.Star<Object>, Origin: cpp.Reference<Vector>, RandomLocation: cpp.Reference<Vector>, Radius: cpp.Float32, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<Bool>;
	public function K2_GetRandomPointInNavigableRadius(WorldContextObject: cpp.Star<Object>, Origin: cpp.Reference<Vector>, RandomLocation: cpp.Reference<Vector>, Radius: cpp.Float32, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<Bool>;
	public function K2_GetRandomLocationInNavigableRadius(WorldContextObject: cpp.Star<Object>, Origin: cpp.Reference<Vector>, RandomLocation: cpp.Reference<Vector>, Radius: cpp.Float32, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<Bool>;
	public function IsNavigationBeingBuiltOrLocked(WorldContextObject: cpp.Star<Object>): cpp.Reference<Bool>;
	public function IsNavigationBeingBuilt(WorldContextObject: cpp.Star<Object>): cpp.Reference<Bool>;
	public function GetRandomReachablePointInRadius(WorldContextObject: cpp.Star<Object>, Origin: cpp.Reference<Vector>, Radius: cpp.Float32, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<Vector>;
	public function GetRandomPointInNavigableRadius(WorldContextObject: cpp.Star<Object>, Origin: cpp.Reference<Vector>, Radius: cpp.Float32, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<Vector>;
	public function GetPathLength(WorldContextObject: cpp.Star<Object>, PathStart: cpp.Reference<Vector>, PathEnd: cpp.Reference<Vector>, PathLength: cpp.Reference<cpp.Float32>, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<ENavigationQueryResult>;
	public function GetPathCost(WorldContextObject: cpp.Star<Object>, PathStart: cpp.Reference<Vector>, PathEnd: cpp.Reference<Vector>, PathCost: cpp.Reference<cpp.Float32>, NavData: cpp.Star<NavigationData>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<ENavigationQueryResult>;
	public function GetNavigationSystem(WorldContextObject: cpp.Star<Object>): cpp.Reference<cpp.Star<NavigationSystemV1>>;
	public function FindPathToLocationSynchronously(WorldContextObject: cpp.Star<Object>, PathStart: cpp.Reference<Vector>, PathEnd: cpp.Reference<Vector>, PathfindingContext: cpp.Star<Actor>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<cpp.Star<NavigationPath>>;
	public function FindPathToActorSynchronously(WorldContextObject: cpp.Star<Object>, PathStart: cpp.Reference<Vector>, GoalActor: cpp.Star<Actor>, TetherDistance: cpp.Float32, PathfindingContext: cpp.Star<Actor>, FilterClass: TSubclassOf<NavigationQueryFilter>): cpp.Reference<cpp.Star<NavigationPath>>;
}

@:forward()
@:nativeGen
abstract ConstNavigationSystemV1(NavigationSystemV1) from NavigationSystemV1 {
	public extern var MainNavData(get, never): cpp.Star<NavigationData.ConstNavigationData>;
	public inline extern function get_MainNavData(): cpp.Star<NavigationData.ConstNavigationData> return this.MainNavData;
	public extern var AbstractNavData(get, never): cpp.Star<NavigationData.ConstNavigationData>;
	public inline extern function get_AbstractNavData(): cpp.Star<NavigationData.ConstNavigationData> return this.AbstractNavData;
	public extern var DefaultAgentName(get, never): FName;
	public inline extern function get_DefaultAgentName(): FName return this.DefaultAgentName;
	public extern var CrowdManagerClass(get, never): TSoftClassPtr<Class.ConstClass>;
	public inline extern function get_CrowdManagerClass(): TSoftClassPtr<Class.ConstClass> return this.CrowdManagerClass;
	public extern var bAutoCreateNavigationData(get, never): Bool;
	public inline extern function get_bAutoCreateNavigationData(): Bool return this.bAutoCreateNavigationData;
	public extern var bSpawnNavDataInNavBoundsLevel(get, never): Bool;
	public inline extern function get_bSpawnNavDataInNavBoundsLevel(): Bool return this.bSpawnNavDataInNavBoundsLevel;
	public extern var bAllowClientSideNavigation(get, never): Bool;
	public inline extern function get_bAllowClientSideNavigation(): Bool return this.bAllowClientSideNavigation;
	public extern var bShouldDiscardSubLevelNavData(get, never): Bool;
	public inline extern function get_bShouldDiscardSubLevelNavData(): Bool return this.bShouldDiscardSubLevelNavData;
	public extern var bTickWhilePaused(get, never): Bool;
	public inline extern function get_bTickWhilePaused(): Bool return this.bTickWhilePaused;
	public extern var bSupportRebuilding(get, never): Bool;
	public inline extern function get_bSupportRebuilding(): Bool return this.bSupportRebuilding;
	public extern var bInitialBuildingLocked(get, never): Bool;
	public inline extern function get_bInitialBuildingLocked(): Bool return this.bInitialBuildingLocked;
	public extern var bSkipAgentHeightCheckWhenPickingNavData(get, never): Bool;
	public inline extern function get_bSkipAgentHeightCheckWhenPickingNavData(): Bool return this.bSkipAgentHeightCheckWhenPickingNavData;
	public extern var bGenerateNavigationOnlyAroundNavigationInvokers(get, never): Bool;
	public inline extern function get_bGenerateNavigationOnlyAroundNavigationInvokers(): Bool return this.bGenerateNavigationOnlyAroundNavigationInvokers;
	public extern var ActiveTilesUpdateInterval(get, never): cpp.Float32;
	public inline extern function get_ActiveTilesUpdateInterval(): cpp.Float32 return this.ActiveTilesUpdateInterval;
	public extern var DataGatheringMode(get, never): ENavDataGatheringModeConfig;
	public inline extern function get_DataGatheringMode(): ENavDataGatheringModeConfig return this.DataGatheringMode;
	public extern var DirtyAreaWarningSizeThreshold(get, never): cpp.Float32;
	public inline extern function get_DirtyAreaWarningSizeThreshold(): cpp.Float32 return this.DirtyAreaWarningSizeThreshold;
	public extern var GatheringNavModifiersWarningLimitTime(get, never): cpp.Float32;
	public inline extern function get_GatheringNavModifiersWarningLimitTime(): cpp.Float32 return this.GatheringNavModifiersWarningLimitTime;
	public extern var SupportedAgents(get, never): TArray<NavDataConfig>;
	public inline extern function get_SupportedAgents(): TArray<NavDataConfig> return this.SupportedAgents;
	public extern var SupportedAgentsMask(get, never): NavAgentSelector;
	public inline extern function get_SupportedAgentsMask(): NavAgentSelector return this.SupportedAgentsMask;
	public extern var BuildBounds(get, never): Box;
	public inline extern function get_BuildBounds(): Box return this.BuildBounds;
	public extern var NavDataSet(get, never): TArray<cpp.Star<NavigationData.ConstNavigationData>>;
	public inline extern function get_NavDataSet(): TArray<cpp.Star<NavigationData.ConstNavigationData>> return this.NavDataSet;
	public extern var NavDataRegistrationQueue(get, never): TArray<cpp.Star<NavigationData.ConstNavigationData>>;
	public inline extern function get_NavDataRegistrationQueue(): TArray<cpp.Star<NavigationData.ConstNavigationData>> return this.NavDataRegistrationQueue;
	public extern var OnNavDataRegisteredEvent(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<NavigationData.ConstNavigationData>) -> Void>;
	public inline extern function get_OnNavDataRegisteredEvent(): HaxeMulticastSparseDelegateProperty<(cpp.Star<NavigationData.ConstNavigationData>) -> Void> return this.OnNavDataRegisteredEvent;
	public extern var OnNavigationGenerationFinishedDelegate(get, never): HaxeMulticastSparseDelegateProperty<(cpp.Star<NavigationData.ConstNavigationData>) -> Void>;
	public inline extern function get_OnNavigationGenerationFinishedDelegate(): HaxeMulticastSparseDelegateProperty<(cpp.Star<NavigationData.ConstNavigationData>) -> Void> return this.OnNavigationGenerationFinishedDelegate;
	public extern var OperationMode(get, never): FNavigationSystemRunMode;
	public inline extern function get_OperationMode(): FNavigationSystemRunMode return this.OperationMode;
	public extern var DirtyAreasUpdateFreq(get, never): cpp.Float32;
	public inline extern function get_DirtyAreasUpdateFreq(): cpp.Float32 return this.DirtyAreasUpdateFreq;
}