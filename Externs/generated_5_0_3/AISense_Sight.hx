// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAISense_Sight")
@:include("Perception/AISense_Sight.h")
@:structAccess
extern class AISense_Sight extends AISense {
	public var MaxTracesPerTick: cpp.Int32;
	public var MinQueriesPerTimeSliceCheck: cpp.Int32;
	public var MaxTimeSlicePerTick: cpp.Float64;
	public var HighImportanceQueryDistanceThreshold: cpp.Float32;
	public var MaxQueryImportance: cpp.Float32;
	public var SightLimitQueryImportance: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstAISense_Sight(AISense_Sight) from AISense_Sight {
	public extern var MaxTracesPerTick(get, never): cpp.Int32;
	public inline extern function get_MaxTracesPerTick(): cpp.Int32 return this.MaxTracesPerTick;
	public extern var MinQueriesPerTimeSliceCheck(get, never): cpp.Int32;
	public inline extern function get_MinQueriesPerTimeSliceCheck(): cpp.Int32 return this.MinQueriesPerTimeSliceCheck;
	public extern var MaxTimeSlicePerTick(get, never): cpp.Float64;
	public inline extern function get_MaxTimeSlicePerTick(): cpp.Float64 return this.MaxTimeSlicePerTick;
	public extern var HighImportanceQueryDistanceThreshold(get, never): cpp.Float32;
	public inline extern function get_HighImportanceQueryDistanceThreshold(): cpp.Float32 return this.HighImportanceQueryDistanceThreshold;
	public extern var MaxQueryImportance(get, never): cpp.Float32;
	public inline extern function get_MaxQueryImportance(): cpp.Float32 return this.MaxQueryImportance;
	public extern var SightLimitQueryImportance(get, never): cpp.Float32;
	public inline extern function get_SightLimitQueryImportance(): cpp.Float32 return this.SightLimitQueryImportance;
}