// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPhysicsConstraintComponent")
@:include("PhysicsEngine/PhysicsConstraintComponent.h")
extern class UPhysicsConstraintComponent extends USceneComponent {
	public var ConstraintActor1: TObjectPtr<AActor>;
	public var ComponentName1: FConstrainComponentPropName;
	public var ConstraintActor2: TObjectPtr<AActor>;
	public var ComponentName2: FConstrainComponentPropName;
	public var ConstraintSetup_DEPRECATED: TObjectPtr<UPhysicsConstraintTemplate>;
	public var OnConstraintBroken: HaxeMulticastSparseDelegateProperty<(cpp.Int32) -> Void>;
	public var OnPlasticDeformation: HaxeMulticastSparseDelegateProperty<(cpp.Int32) -> Void>;
	public var ConstraintInstance: FConstraintInstance;

	public function SetOrientationDriveTwistAndSwing(bEnableTwistDrive: Bool, bEnableSwingDrive: Bool): Void;
	public function SetOrientationDriveSLERP(bEnableSLERP: Bool): Void;
	public function SetLinearZLimit(ConstraintType: ELinearConstraintMotion, LimitSize: cpp.Float32): Void;
	public function SetLinearYLimit(ConstraintType: ELinearConstraintMotion, LimitSize: cpp.Float32): Void;
	public function SetLinearXLimit(ConstraintType: ELinearConstraintMotion, LimitSize: cpp.Float32): Void;
	public function SetLinearVelocityTarget(InVelTarget: FVector): Void;
	public function SetLinearVelocityDrive(bEnableDriveX: Bool, bEnableDriveY: Bool, bEnableDriveZ: Bool): Void;
	public function SetLinearPositionTarget(InPosTarget: FVector): Void;
	public function SetLinearPositionDrive(bEnableDriveX: Bool, bEnableDriveY: Bool, bEnableDriveZ: Bool): Void;
	public function SetLinearPlasticity(bLinearPlasticity: Bool, LinearPlasticityThreshold: cpp.Float32, PlasticityType: EConstraintPlasticityType): Void;
	public function SetLinearDriveParams(PositionStrength: cpp.Float32, VelocityStrength: cpp.Float32, InForceLimit: cpp.Float32): Void;
	public function SetLinearBreakable(bLinearBreakable: Bool, LinearBreakThreshold: cpp.Float32): Void;
	public function SetDisableCollision(bDisableCollision: Bool): Void;
	public function SetContactTransferScale(ContactTransferScale: cpp.Float32): Void;
	public function SetConstraintReferencePosition(Frame: EConstraintFrame, RefPosition: FVector): Void;
	public function SetConstraintReferenceOrientation(Frame: EConstraintFrame, PriAxis: FVector, SecAxis: FVector): Void;
	public function SetConstraintReferenceFrame(Frame: EConstraintFrame, RefFrame: FTransform): Void;
	public function SetConstrainedComponents(Component1: cpp.Star<UPrimitiveComponent>, BoneName1: FName, Component2: cpp.Star<UPrimitiveComponent>, BoneName2: FName): Void;
	public function SetAngularVelocityTarget(InVelTarget: FVector): Void;
	public function SetAngularVelocityDriveTwistAndSwing(bEnableTwistDrive: Bool, bEnableSwingDrive: Bool): Void;
	public function SetAngularVelocityDriveSLERP(bEnableSLERP: Bool): Void;
	public function SetAngularVelocityDrive(bEnableSwingDrive: Bool, bEnableTwistDrive: Bool): Void;
	public function SetAngularTwistLimit(ConstraintType: EAngularConstraintMotion, TwistLimitAngle: cpp.Float32): Void;
	public function SetAngularSwing2Limit(MotionType: EAngularConstraintMotion, Swing2LimitAngle: cpp.Float32): Void;
	public function SetAngularSwing1Limit(MotionType: EAngularConstraintMotion, Swing1LimitAngle: cpp.Float32): Void;
	public function SetAngularPlasticity(bAngularPlasticity: Bool, AngularPlasticityThreshold: cpp.Float32): Void;
	public function SetAngularOrientationTarget(InPosTarget: FRotator): Void;
	public function SetAngularOrientationDrive(bEnableSwingDrive: Bool, bEnableTwistDrive: Bool): Void;
	public function SetAngularDriveParams(PositionStrength: cpp.Float32, VelocityStrength: cpp.Float32, InForceLimit: cpp.Float32): Void;
	public function SetAngularDriveMode(DriveMode: EAngularDriveMode): Void;
	public function SetAngularBreakable(bAngularBreakable: Bool, AngularBreakThreshold: cpp.Float32): Void;
	public function IsBroken(): Bool;
	public function GetCurrentTwist(): cpp.Float32;
	public function GetCurrentSwing2(): cpp.Float32;
	public function GetCurrentSwing1(): cpp.Float32;
	public function GetConstraintForce(OutLinearForce: FVector, OutAngularForce: FVector): Void;
	public function GetConstraint(): FConstraintInstanceAccessor;
	public function GetConstrainedComponents(OutComponent1: cpp.Reference<cpp.Star<UPrimitiveComponent>>, OutBoneName1: cpp.Reference<FName>, OutComponent2: cpp.Reference<cpp.Star<UPrimitiveComponent>>, OutBoneName2: cpp.Reference<FName>): Void;
	public function BreakConstraint(): Void;
}
