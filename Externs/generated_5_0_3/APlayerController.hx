// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("APlayerController")
@:include("GameFramework/PlayerController.h")
extern class APlayerController extends AController {
	public var Player: TObjectPtr<UPlayer>;
	public var AcknowledgedPawn: TObjectPtr<APawn>;
	public var ControllingDirTrackInst: TObjectPtr<UInterpTrackInstDirector>;
	public var MyHUD: TObjectPtr<AHUD>;
	public var PlayerCameraManager: TObjectPtr<APlayerCameraManager>;
	public var PlayerCameraManagerClass: TSubclassOf<APlayerCameraManager>;
	public var bAutoManageActiveCameraTarget: Bool;
	public var TargetViewRotation: FRotator;
	public var SmoothTargetViewRotationSpeed: cpp.Float32;
	public var HiddenActors: TArray<TObjectPtr<AActor>>;
	public var HiddenPrimitiveComponents: TArray<TWeakObjectPtr<UPrimitiveComponent>>;
	public var LastSpectatorStateSynchTime: cpp.Float32;
	public var LastSpectatorSyncLocation: FVector;
	public var LastSpectatorSyncRotation: FRotator;
	public var ClientCap: cpp.Int32;
	public var CheatManager: TObjectPtr<UCheatManager>;
	public var CheatClass: TSubclassOf<UCheatManager>;
	public var PlayerInput: TObjectPtr<UPlayerInput>;
	public var ActiveForceFeedbackEffects: TArray<FActiveForceFeedbackEffect>;
	public var bPlayerIsWaiting: Bool;
	public var NetPlayerIndex: cpp.UInt8;
	public var PendingSwapConnection: TObjectPtr<UNetConnection>;
	public var NetConnection: TObjectPtr<UNetConnection>;
	public var InputYawScale_DEPRECATED: cpp.Float32;
	public var InputPitchScale_DEPRECATED: cpp.Float32;
	public var InputRollScale_DEPRECATED: cpp.Float32;
	public var bShowMouseCursor: Bool;
	public var bEnableClickEvents: Bool;
	public var bEnableTouchEvents: Bool;
	public var bEnableMouseOverEvents: Bool;
	public var bEnableTouchOverEvents: Bool;
	public var bForceFeedbackEnabled: Bool;
	public var bEnableStreamingSource: Bool;
	public var bStreamingSourceShouldActivate: Bool;
	public var bStreamingSourceShouldBlockOnSlowStreaming: Bool;
	public var ForceFeedbackScale: cpp.Float32;
	public var ClickEventKeys: TArray<FKey>;
	public var DefaultMouseCursor: EMouseCursor;
	public var CurrentMouseCursor: EMouseCursor;
	public var DefaultClickTraceChannel: ECollisionChannel;
	public var CurrentClickTraceChannel: ECollisionChannel;
	public var HitResultTraceDistance: cpp.Float32;
	public var SeamlessTravelCount: cpp.UInt16;
	public var LastCompletedSeamlessTravelCount: cpp.UInt16;
	public var InactiveStateInputComponent: TObjectPtr<UInputComponent>;
	public var bShouldPerformFullTickWhenPaused: Bool;
	public var CurrentTouchInterface: TObjectPtr<UTouchInterface>;
	public var SpectatorPawn: TObjectPtr<ASpectatorPawn>;
	public var bIsLocalPlayerController: Bool;
	public var SpawnLocation: FVector;

	public function WasInputKeyJustReleased(Key: FKey): Bool;
	public function WasInputKeyJustPressed(Key: FKey): Bool;
	public function ToggleSpeaking(bInSpeaking: Bool): Void;
	public function TestServerLevelVisibilityChange(PackageName: FName, FileName: FName): Void;
	public function SwitchLevel(URL: FString): Void;
	public function StreamingSourceShouldBlockOnSlowStreaming(): Bool;
	public function StreamingSourceShouldActivate(): Bool;
	public function StopHapticEffect(Hand: EControllerHand): Void;
	public function StartFire(FireModeNum: cpp.UInt8): Void;
	public function SetVirtualJoystickVisibility(bVisible: Bool): Void;
	public function SetViewTargetWithBlend(NewViewTarget: cpp.Star<AActor>, BlendTime: cpp.Float32, BlendFunc: EViewTargetBlendFunction, BlendExp: cpp.Float32, bLockOutgoing: Bool): Void;
	public function SetName(S: FString): Void;
	public function SetMouseLocation(X: cpp.Int32, Y: cpp.Int32): Void;
	public function SetMouseCursorWidget(Cursor: EMouseCursor, CursorWidget: cpp.Star<UUserWidget>): Void;
	public function SetHapticsByValue(Frequency: cpp.Float32, Amplitude: cpp.Float32, Hand: EControllerHand): Void;
	public function SetDisableHaptics(bNewDisabled: Bool): Void;
	public function SetDeprecatedInputYawScale(NewValue: cpp.Float32): Void;
	public function SetDeprecatedInputRollScale(NewValue: cpp.Float32): Void;
	public function SetDeprecatedInputPitchScale(NewValue: cpp.Float32): Void;
	public function SetControllerLightColor(Color: FColor): Void;
	public function SetCinematicMode(bInCinematicMode: Bool, bHidePlayer: Bool, bAffectsHUD: Bool, bAffectsMovement: Bool, bAffectsTurning: Bool): Void;
	public function SetAudioListenerOverride(AttachToComponent: cpp.Star<USceneComponent>, Location: FVector, Rotation: FRotator): Void;
	public function SetAudioListenerAttenuationOverride(AttachToComponent: cpp.Star<USceneComponent>, AttenuationLocationOVerride: FVector): Void;
	public function ServerViewSelf(TransitionParams: FViewTargetTransitionParams): Void;
	public function ServerViewPrevPlayer(): Void;
	public function ServerViewNextPlayer(): Void;
	public function ServerVerifyViewTarget(): Void;
	public function ServerUpdateMultipleLevelsVisibility(LevelVisibilities: TArray<FUpdateLevelVisibilityLevelInfo>): Void;
	public function ServerUpdateLevelVisibility(LevelVisibility: FUpdateLevelVisibilityLevelInfo): Void;
	public function ServerUpdateCamera(CamLoc: FVector_NetQuantize, CamPitchAndYaw: cpp.Int32): Void;
	public function ServerUnmutePlayer(PlayerId: FUniqueNetIdRepl): Void;
	public function ServerUnblockPlayer(PlayerId: FUniqueNetIdRepl): Void;
	public function ServerToggleAILogging(): Void;
	public function ServerShortTimeout(): Void;
	public function ServerSetSpectatorWaiting(bWaiting: Bool): Void;
	public function ServerSetSpectatorLocation(NewLoc: FVector, NewRot: FRotator): Void;
	public function ServerRestartPlayer(): Void;
	public function ServerRecvClientInputFrame(RecvClientInputFrame: cpp.Int32, Data: TArray<cpp.UInt8>): Void;
	public function ServerPause(): Void;
	public function ServerNotifyLoadedWorld(WorldPackageName: FName): Void;
	public function ServerMutePlayer(PlayerId: FUniqueNetIdRepl): Void;
	public function ServerExecRPC(Msg: FString): Void;
	public function ServerExec(Msg: FString): Void;
	public function ServerCheckClientPossessionReliable(): Void;
	public function ServerCheckClientPossession(): Void;
	public function ServerChangeName(S: FString): Void;
	public function ServerCamera(NewMode: FName): Void;
	public function ServerBlockPlayer(PlayerId: FUniqueNetIdRepl): Void;
	public function ServerAcknowledgePossession(P: cpp.Star<APawn>): Void;
	public function SendToConsole(Command: FString): Void;
	public function RestartLevel(): Void;
	public function ResetControllerLightColor(): Void;
	public function ProjectWorldLocationToScreen(WorldLocation: FVector, ScreenLocation: FVector2D, bPlayerViewportRelative: Bool): Bool;
	public function PlayHapticEffect(HapticEffect: cpp.Star<UHapticFeedbackEffect_Base>, Hand: EControllerHand, Scale: cpp.Float32, bLoop: Bool): Void;
	public function PlayDynamicForceFeedback(Intensity: cpp.Float32, Duration: cpp.Float32, bAffectsLeftLarge: Bool, bAffectsLeftSmall: Bool, bAffectsRightLarge: Bool, bAffectsRightSmall: Bool, Action: EDynamicForceFeedbackAction, LatentInfo: FLatentActionInfo): Void;
	public function Pause(): Void;
	public function OnServerStartedVisualLogger(bIsLogging: Bool): Void;
	public function LocalTravel(URL: FString): Void;
	public function K2_ClientPlayForceFeedback(ForceFeedbackEffect: cpp.Star<UForceFeedbackEffect>, Tag: FName, bLooping: Bool, bIgnoreTimeDilation: Bool, bPlayWhilePaused: Bool): Void;
	public function IsStreamingSourceEnabled(): Bool;
	public function IsInputKeyDown(Key: FKey): Bool;
	public function GetViewportSize(SizeX: cpp.Reference<cpp.Int32>, SizeY: cpp.Reference<cpp.Int32>): Void;
	public function GetSpectatorPawn(): cpp.Star<ASpectatorPawn>;
	public function GetMousePosition(LocationX: cpp.Reference<cpp.Float32>, LocationY: cpp.Reference<cpp.Float32>): Bool;
	public function GetInputVectorKeyState(Key: FKey): FVector;
	public function GetInputTouchState(FingerIndex: ETouchIndex, LocationX: cpp.Reference<cpp.Float32>, LocationY: cpp.Reference<cpp.Float32>, bIsCurrentlyPressed: Bool): Void;
	public function GetInputMouseDelta(DeltaX: cpp.Reference<cpp.Float32>, DeltaY: cpp.Reference<cpp.Float32>): Void;
	public function GetInputMotionState(Tilt: FVector, RotationRate: FVector, Gravity: FVector, Acceleration: FVector): Void;
	public function GetInputKeyTimeDown(Key: FKey): cpp.Float32;
	public function GetInputAnalogStickState(WhichStick: EControllerAnalogStick, StickX: cpp.Reference<cpp.Float32>, StickY: cpp.Reference<cpp.Float32>): Void;
	public function GetInputAnalogKeyState(Key: FKey): cpp.Float32;
	public function GetHUD(): cpp.Star<AHUD>;
	public function GetHitResultUnderFingerForObjects(FingerIndex: ETouchIndex, ObjectTypes: TArray<EObjectTypeQuery>, bTraceComplex: Bool, HitResult: FHitResult): Bool;
	public function GetHitResultUnderFingerByChannel(FingerIndex: ETouchIndex, TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, HitResult: FHitResult): Bool;
	public function GetHitResultUnderFinger(FingerIndex: ETouchIndex, TraceChannel: ECollisionChannel, bTraceComplex: Bool, HitResult: FHitResult): Bool;
	public function GetHitResultUnderCursorForObjects(ObjectTypes: TArray<EObjectTypeQuery>, bTraceComplex: Bool, HitResult: FHitResult): Bool;
	public function GetHitResultUnderCursorByChannel(TraceChannel: ETraceTypeQuery, bTraceComplex: Bool, HitResult: FHitResult): Bool;
	public function GetHitResultUnderCursor(TraceChannel: ECollisionChannel, bTraceComplex: Bool, HitResult: FHitResult): Bool;
	public function GetFocalLocation(): FVector;
	public function GetDeprecatedInputYawScale(): cpp.Float32;
	public function GetDeprecatedInputRollScale(): cpp.Float32;
	public function GetDeprecatedInputPitchScale(): cpp.Float32;
	public function FOV(NewFOV: cpp.Float32): Void;
	public function EnableCheats(): Void;
	public function DeprojectScreenPositionToWorld(ScreenX: cpp.Float32, ScreenY: cpp.Float32, WorldLocation: FVector, WorldDirection: FVector): Bool;
	public function DeprojectMousePositionToWorld(WorldLocation: FVector, WorldDirection: FVector): Bool;
	public function ConsoleKey(Key: FKey): Void;
	public function ClientWasKicked(KickReason: FText): Void;
	public function ClientVoiceHandshakeComplete(): Void;
	public function ClientUpdateMultipleLevelsStreamingStatus(LevelStatuses: TArray<FUpdateLevelStreamingLevelStatus>): Void;
	public function ClientUpdateLevelStreamingStatus(PackageName: FName, bNewShouldBeLoaded: Bool, bNewShouldBeVisible: Bool, bNewShouldBlockOnLoad: Bool, LODIndex: cpp.Int32): Void;
	public function ClientUnmutePlayers(PlayerIds: TArray<FUniqueNetIdRepl>): Void;
	public function ClientUnmutePlayer(PlayerId: FUniqueNetIdRepl): Void;
	public function ClientTravelInternal(URL: FString, TravelType: ETravelType, bSeamless: Bool, MapPackageGuid: FGuid): Void;
	public function ClientTravel(URL: FString, TravelType: ETravelType, bSeamless: Bool, MapPackageGuid: FGuid): Void;
	public function ClientTeamMessage(SenderPlayerState: cpp.Star<APlayerState>, S: FString, Type: FName, MsgLifeTime: cpp.Float32): Void;
	public function ClientStopForceFeedback(ForceFeedbackEffect: cpp.Star<UForceFeedbackEffect>, Tag: FName): Void;
	public function ClientStopCameraShakesFromSource(SourceComponent: cpp.Star<UCameraShakeSourceComponent>, bImmediately: Bool): Void;
	public function ClientStopCameraShake(Shake: TSubclassOf<UCameraShakeBase>, bImmediately: Bool): Void;
	public function ClientStopCameraAnim(AnimToStop: cpp.Star<UCameraAnim>): Void;
	public function ClientStartOnlineSession(): Void;
	public function ClientStartCameraShakeFromSource(Shake: TSubclassOf<UCameraShakeBase>, SourceComponent: cpp.Star<UCameraShakeSourceComponent>): Void;
	public function ClientStartCameraShake(Shake: TSubclassOf<UCameraShakeBase>, Scale: cpp.Float32, PlaySpace: ECameraShakePlaySpace, UserPlaySpaceRot: FRotator): Void;
	public function ClientSpawnGenericCameraLensEffect(LensEffectEmitterClass: TSubclassOf<AActor>): Void;
	public function ClientSpawnCameraLensEffect(LensEffectEmitterClass: TSubclassOf<AEmitterCameraLensEffectBase>): Void;
	public function ClientSetViewTarget(A: cpp.Star<AActor>, TransitionParams: FViewTargetTransitionParams): Void;
	public function ClientSetSpectatorWaiting(bWaiting: Bool): Void;
	public function ClientSetHUD(NewHUDClass: TSubclassOf<AHUD>): Void;
	public function ClientSetForceMipLevelsToBeResident(Material: cpp.Star<UMaterialInterface>, ForceDuration: cpp.Float32, CinematicTextureGroups: cpp.Int32): Void;
	public function ClientSetCinematicMode(bInCinematicMode: Bool, bAffectsMovement: Bool, bAffectsTurning: Bool, bAffectsHUD: Bool): Void;
	public function ClientSetCameraMode(NewCamMode: FName): Void;
	public function ClientSetCameraFade(bEnableFading: Bool, FadeColor: FColor, FadeAlpha: FVector2D, FadeTime: cpp.Float32, bFadeAudio: Bool, bHoldWhenFinished: Bool): Void;
	public function ClientSetBlockOnAsyncLoading(): Void;
	public function ClientReturnToMainMenuWithTextReason(ReturnReason: FText): Void;
	public function ClientReturnToMainMenu(ReturnReason: FString): Void;
	public function ClientRetryClientRestart(NewPawn: cpp.Star<APawn>): Void;
	public function ClientRestart(NewPawn: cpp.Star<APawn>): Void;
	public function ClientReset(): Void;
	public function ClientRepObjRef(Object: cpp.Star<UObject>): Void;
	public function ClientRecvServerAckFrameDebug(NumBuffered: cpp.UInt8, TargetNumBufferedCmds: cpp.Float32): Void;
	public function ClientRecvServerAckFrame(LastProcessedInputFrame: cpp.Int32, RecvServerFrameNumber: cpp.Int32, TimeDilation: cpp.Int8): Void;
	public function ClientReceiveLocalizedMessage(Message: TSubclassOf<ULocalMessage>, Switch: cpp.Int32, RelatedPlayerState_1: cpp.Star<APlayerState>, RelatedPlayerState_2: cpp.Star<APlayerState>, OptionalObject: cpp.Star<UObject>): Void;
	public function ClientPrestreamTextures(ForcedActor: cpp.Star<AActor>, ForceDuration: cpp.Float32, bEnableStreaming: Bool, CinematicTextureGroups: cpp.Int32): Void;
	public function ClientPrepareMapChange(LevelName: FName, bFirst: Bool, bLast: Bool): Void;
	public function ClientPlaySoundAtLocation(Sound: cpp.Star<USoundBase>, Location: FVector, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32): Void;
	public function ClientPlaySound(Sound: cpp.Star<USoundBase>, VolumeMultiplier: cpp.Float32, PitchMultiplier: cpp.Float32): Void;
	public function ClientPlayForceFeedback_Internal(ForceFeedbackEffect: cpp.Star<UForceFeedbackEffect>, Params: FForceFeedbackParameters): Void;
	public function ClientPlayCameraAnim(AnimToPlay: cpp.Star<UCameraAnim>, Scale: cpp.Float32, Rate: cpp.Float32, BlendInTime: cpp.Float32, BlendOutTime: cpp.Float32, bLoop: Bool, bRandomStartTime: Bool, Space: ECameraShakePlaySpace, CustomPlaySpace: FRotator): Void;
	public function ClientMutePlayer(PlayerId: FUniqueNetIdRepl): Void;
	public function ClientMessage(S: FString, Type: FName, MsgLifeTime: cpp.Float32): Void;
	public function ClientIgnoreMoveInput(bIgnore: Bool): Void;
	public function ClientIgnoreLookInput(bIgnore: Bool): Void;
	public function ClientGotoState(NewState: FName): Void;
	public function ClientGameEnded(EndGameFocus: cpp.Star<AActor>, bIsWinner: Bool): Void;
	public function ClientForceGarbageCollection(): Void;
	public function ClientFlushLevelStreaming(): Void;
	public function ClientEndOnlineSession(): Void;
	public function ClientEnableNetworkVoice(bEnable: Bool): Void;
	public function ClientCommitMapChange(): Void;
	public function ClientClearCameraLensEffects(): Void;
	public function ClientCapBandwidth(Cap: cpp.Int32): Void;
	public function ClientCancelPendingMapChange(): Void;
	public function ClientAddTextureStreamingLoc(InLoc: FVector, Duration: cpp.Float32, bOverrideLocation: Bool): Void;
	public function ClearAudioListenerOverride(): Void;
	public function ClearAudioListenerAttenuationOverride(): Void;
	public function CanRestartPlayer(): Bool;
	public function Camera(NewMode: FName): Void;
	public function AddYawInput(Val: cpp.Float32): Void;
	public function AddRollInput(Val: cpp.Float32): Void;
	public function AddPitchInput(Val: cpp.Float32): Void;
	public function ActivateTouchInterface(NewTouchInterface: cpp.Star<UTouchInterface>): Void;
}
