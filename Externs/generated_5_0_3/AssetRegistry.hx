// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAssetRegistry")
@:structAccess
extern class AssetRegistry extends Interface {
	public function WaitForPackage(PackageName: FString): Void;
	public function WaitForCompletion(): Void;
	public function UseFilterToExcludeAssets(AssetDataList: cpp.Reference<TArray<AssetData>>, Filter: cpp.Reference<ARFilter>): Void;
	public function SearchAllAssets(bSynchronousSearch: Bool): Void;
	public function ScanPathsSynchronous(InPaths: cpp.Reference<TArray<FString>>, bForceRescan: Bool, bIgnoreDenyListScanFilters: Bool): Void;
	public function ScanModifiedAssetFiles(InFilePaths: cpp.Reference<TArray<FString>>): Void;
	public function ScanFilesSynchronous(InFilePaths: cpp.Reference<TArray<FString>>, bForceRescan: Bool): Void;
	public function RunAssetsThroughFilter(AssetDataList: cpp.Reference<TArray<AssetData>>, Filter: cpp.Reference<ARFilter>): Void;
	public function PrioritizeSearchPath(PathToPrioritize: FString): Void;
	public function K2_GetReferencers(PackageName: FName, ReferenceOptions: cpp.Reference<AssetRegistryDependencyOptions>, OutReferencers: cpp.Reference<TArray<FName>>): cpp.Reference<Bool>;
	public function K2_GetDependencies(PackageName: FName, DependencyOptions: cpp.Reference<AssetRegistryDependencyOptions>, OutDependencies: cpp.Reference<TArray<FName>>): cpp.Reference<Bool>;
	public function IsSearchAsync(): cpp.Reference<Bool>;
	public function IsSearchAllAssets(): cpp.Reference<Bool>;
	public function IsLoadingAssets(): cpp.Reference<Bool>;
	public function HasAssets(PackagePath: FName, bRecursive: Bool): cpp.Reference<Bool>;
	public function GetSubPaths(InBasePath: FString, OutPathList: cpp.Reference<TArray<FString>>, bInRecurse: Bool): Void;
	public function GetAssetsByPaths(PackagePaths: TArray<FName>, OutAssetData: cpp.Reference<TArray<AssetData>>, bRecursive: Bool, bIncludeOnlyOnDiskAssets: Bool): cpp.Reference<Bool>;
	public function GetAssetsByPath(PackagePath: FName, OutAssetData: cpp.Reference<TArray<AssetData>>, bRecursive: Bool, bIncludeOnlyOnDiskAssets: Bool): cpp.Reference<Bool>;
	public function GetAssetsByPackageName(PackageName: FName, OutAssetData: cpp.Reference<TArray<AssetData>>, bIncludeOnlyOnDiskAssets: Bool): cpp.Reference<Bool>;
	public function GetAssetsByClass(ClassName: FName, OutAssetData: cpp.Reference<TArray<AssetData>>, bSearchSubClasses: Bool): cpp.Reference<Bool>;
	public function GetAssets(Filter: cpp.Reference<ARFilter>, OutAssetData: cpp.Reference<TArray<AssetData>>): cpp.Reference<Bool>;
	public function GetAssetByObjectPath(ObjectPath: FName, bIncludeOnlyOnDiskAssets: Bool): cpp.Reference<AssetData>;
	public function GetAllCachedPaths(OutPathList: cpp.Reference<TArray<FString>>): Void;
	public function GetAllAssets(OutAssetData: cpp.Reference<TArray<AssetData>>, bIncludeOnlyOnDiskAssets: Bool): cpp.Reference<Bool>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	UseFilterToExcludeAssets, RunAssetsThroughFilter, K2_GetReferencers, K2_GetDependencies, IsSearchAsync,
	IsSearchAllAssets, IsLoadingAssets, HasAssets, GetSubPaths, GetAssetsByPaths,
	GetAssetsByPath, GetAssetsByPackageName, GetAssetsByClass, GetAssets, GetAssetByObjectPath,
	GetAllCachedPaths, GetAllAssets
)
@:nativeGen
abstract ConstAssetRegistry(AssetRegistry) from AssetRegistry {
}