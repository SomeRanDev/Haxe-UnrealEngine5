// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTypedElementListLibrary")
@:include("Elements/Framework/TypedElementListLibrary.h")
@:structAccess
extern class TypedElementListLibrary extends Object {
	public function Shrink(ElementList: ScriptTypedElementListProxy): Void;
	public function Reset(ElementList: ScriptTypedElementListProxy): Void;
	public function Reserve(ElementList: ScriptTypedElementListProxy, Size: cpp.Int32): Void;
	public function Remove(ElementList: ScriptTypedElementListProxy, ElementHandle: cpp.Reference<ScriptTypedElementHandle>): cpp.Reference<Bool>;
	public function Num(ElementList: ScriptTypedElementListProxy): cpp.Reference<cpp.Int32>;
	public function IsValidIndex(ElementList: ScriptTypedElementListProxy, Index: cpp.Int32): cpp.Reference<Bool>;
	public function HasElementsOfType(ElementList: ScriptTypedElementListProxy, ElementTypeName: FName): cpp.Reference<Bool>;
	public function HasElements(ElementList: ScriptTypedElementListProxy, BaseInterfaceType: TSubclassOf<Interface.ConstInterface>): cpp.Reference<Bool>;
	public function GetElementInterface(ElementList: ScriptTypedElementListProxy, ElementHandle: cpp.Reference<ScriptTypedElementHandle>, BaseInterfaceType: TSubclassOf<Interface.ConstInterface>): cpp.Reference<cpp.Star<Object>>;
	public function GetElementHandles(ElementList: ScriptTypedElementListProxy, BaseInterfaceType: TSubclassOf<Interface.ConstInterface>): cpp.Reference<TArray<ScriptTypedElementHandle>>;
	public function GetElementHandleAt(ElementList: ScriptTypedElementListProxy, Index: cpp.Int32): cpp.Reference<ScriptTypedElementHandle>;
	public function Empty(ElementList: ScriptTypedElementListProxy, Slack: cpp.Int32): Void;
	public function CreateScriptElementList(Registry: cpp.Star<TypedElementRegistry>): cpp.Reference<ScriptTypedElementListProxy>;
	public function CountElementsOfType(ElementList: ScriptTypedElementListProxy, ElementTypeName: FName): cpp.Reference<cpp.Int32>;
	public function CountElements(ElementList: ScriptTypedElementListProxy, BaseInterfaceType: TSubclassOf<Interface.ConstInterface>): cpp.Reference<cpp.Int32>;
	public function Contains(ElementList: ScriptTypedElementListProxy, ElementHandle: cpp.Reference<ScriptTypedElementHandle>): cpp.Reference<Bool>;
	public function Clone(ElementList: ScriptTypedElementListProxy): cpp.Reference<ScriptTypedElementListProxy>;
	public function AppendList(ElementList: ScriptTypedElementListProxy, OtherElementList: ScriptTypedElementListProxy): Void;
	public function Append(ElementList: ScriptTypedElementListProxy, ElementHandles: cpp.Reference<TArray<ScriptTypedElementHandle>>): Void;
	public function Add(ElementList: ScriptTypedElementListProxy, ElementHandle: cpp.Reference<ScriptTypedElementHandle>): cpp.Reference<Bool>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstTypedElementListLibrary(TypedElementListLibrary) from TypedElementListLibrary {
}

@:forward
@:nativeGen
@:native("TypedElementListLibrary*")
abstract TypedElementListLibraryPtr(cpp.Star<TypedElementListLibrary>) from cpp.Star<TypedElementListLibrary> to cpp.Star<TypedElementListLibrary>{
	@:from
	public static extern inline function fromValue(v: TypedElementListLibrary): TypedElementListLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TypedElementListLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}