// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UCameraModifier")
@:include("Camera/CameraModifier.h")
extern class CameraModifier extends Object {
	public var bDebug: Bool;
	public var bExclusive: Bool;
	public var Priority: cpp.UInt8;
	public var CameraOwner: cpp.Star<PlayerCameraManager>;
	public var AlphaInTime: cpp.Float32;
	public var AlphaOutTime: cpp.Float32;
	public var Alpha: cpp.Float32;

	public function OnCameraOwnerDestroyed(InOwner: cpp.Star<Actor>): Void;
	public function IsDisabled(): cpp.Reference<Bool>;
	public function GetViewTarget(): cpp.Reference<cpp.Star<Actor>>;
	public function EnableModifier(): Void;
	public function DisableModifier(bImmediate: Bool): Void;
	public function BlueprintModifyPostProcess(DeltaTime: cpp.Float32, PostProcessBlendWeight: cpp.Reference<cpp.Float32>, PostProcessSettings: cpp.Reference<PostProcessSettings>): Void;
	public function BlueprintModifyCamera(DeltaTime: cpp.Float32, ViewLocation: Vector, ViewRotation: Rotator, FOV: cpp.Float32, NewViewLocation: cpp.Reference<Vector>, NewViewRotation: cpp.Reference<Rotator>, NewFOV: cpp.Reference<cpp.Float32>): Void;
}

@:forward(IsDisabled, GetViewTarget)
@:nativeGen
abstract ConstCameraModifier(CameraModifier) from CameraModifier {
	public extern var bDebug(get, never): Bool;
	public inline extern function get_bDebug(): Bool return this.bDebug;
	public extern var bExclusive(get, never): Bool;
	public inline extern function get_bExclusive(): Bool return this.bExclusive;
	public extern var Priority(get, never): cpp.UInt8;
	public inline extern function get_Priority(): cpp.UInt8 return this.Priority;
	public extern var CameraOwner(get, never): cpp.Star<PlayerCameraManager.ConstPlayerCameraManager>;
	public inline extern function get_CameraOwner(): cpp.Star<PlayerCameraManager.ConstPlayerCameraManager> return this.CameraOwner;
	public extern var AlphaInTime(get, never): cpp.Float32;
	public inline extern function get_AlphaInTime(): cpp.Float32 return this.AlphaInTime;
	public extern var AlphaOutTime(get, never): cpp.Float32;
	public inline extern function get_AlphaOutTime(): cpp.Float32 return this.AlphaOutTime;
	public extern var Alpha(get, never): cpp.Float32;
	public inline extern function get_Alpha(): cpp.Float32 return this.Alpha;
}