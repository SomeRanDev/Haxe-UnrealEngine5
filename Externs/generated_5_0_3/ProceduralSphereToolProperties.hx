// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UProceduralSphereToolProperties")
@:include("AddPrimitiveTool.h")
@:structAccess
extern class ProceduralSphereToolProperties extends ProceduralShapeToolProperties {
	public var Radius: cpp.Float32;
	public var SubdivisionType: EProceduralSphereType;
	public var Subdivisions: cpp.Int32;
	public var HorizontalSlices: cpp.Int32;
	public var VerticalSlices: cpp.Int32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstProceduralSphereToolProperties(ProceduralSphereToolProperties) from ProceduralSphereToolProperties {
	public extern var Radius(get, never): cpp.Float32;
	public inline extern function get_Radius(): cpp.Float32 return this.Radius;
	public extern var SubdivisionType(get, never): EProceduralSphereType;
	public inline extern function get_SubdivisionType(): EProceduralSphereType return this.SubdivisionType;
	public extern var Subdivisions(get, never): cpp.Int32;
	public inline extern function get_Subdivisions(): cpp.Int32 return this.Subdivisions;
	public extern var HorizontalSlices(get, never): cpp.Int32;
	public inline extern function get_HorizontalSlices(): cpp.Int32 return this.HorizontalSlices;
	public extern var VerticalSlices(get, never): cpp.Int32;
	public inline extern function get_VerticalSlices(): cpp.Int32 return this.VerticalSlices;
}

@:forward
@:nativeGen
@:native("ProceduralSphereToolProperties*")
abstract ProceduralSphereToolPropertiesPtr(cpp.Star<ProceduralSphereToolProperties>) from cpp.Star<ProceduralSphereToolProperties> to cpp.Star<ProceduralSphereToolProperties>{
	@:from
	public static extern inline function fromValue(v: ProceduralSphereToolProperties): ProceduralSphereToolPropertiesPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ProceduralSphereToolProperties {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}