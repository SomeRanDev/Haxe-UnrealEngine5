// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("APlayerCameraManager")
@:include("Camera/PlayerCameraManager.h")
extern class APlayerCameraManager extends AActor {
	public var PCOwner: TObjectPtr<APlayerController>;
	public var TransformComponent: TObjectPtr<USceneComponent>;
	public var DefaultFOV: cpp.Float32;
	public var DefaultOrthoWidth: cpp.Float32;
	public var DefaultAspectRatio: cpp.Float32;
	public var CameraCache: FCameraCacheEntry;
	public var LastFrameCameraCache: FCameraCacheEntry;
	public var ViewTarget: FTViewTarget;
	public var PendingViewTarget: FTViewTarget;
	public var CameraCachePrivate: FCameraCacheEntry;
	public var LastFrameCameraCachePrivate: FCameraCacheEntry;
	public var ModifierList: TArray<TObjectPtr<UCameraModifier>>;
	public var DefaultModifiers: TArray<TSubclassOf<UCameraModifier>>;
	public var FreeCamDistance: cpp.Float32;
	public var FreeCamOffset: FVector;
	public var ViewTargetOffset: FVector;
	public var OnAudioFadeChangeEvent: HaxeMulticastSparseDelegateProperty<(Bool, cpp.Float32) -> Void>;
	public var CameraLensEffects: TArray<UCameraLensEffectInterface>;
	public var CachedCameraShakeMod: TObjectPtr<UCameraModifier_CameraShake>;
	public var AnimInstPool: TObjectPtr<UCameraAnimInst>;
	public var PostProcessBlendCache: TArray<FPostProcessSettings>;
	public var ActiveAnims: TArray<TObjectPtr<UCameraAnimInst>>;
	public var FreeAnims: TArray<TObjectPtr<UCameraAnimInst>>;
	public var AnimCameraActor: TObjectPtr<ACameraActor>;
	public var bIsOrthographic: Bool;
	public var bDefaultConstrainAspectRatio: Bool;
	public var bClientSimulatingViewTarget: Bool;
	public var bUseClientSideCameraUpdates: Bool;
	public var bGameCameraCutThisFrame: Bool;
	public var ViewPitchMin: cpp.Float32;
	public var ViewPitchMax: cpp.Float32;
	public var ViewYawMin: cpp.Float32;
	public var ViewYawMax: cpp.Float32;
	public var ViewRollMin: cpp.Float32;
	public var ViewRollMax: cpp.Float32;
	public var ServerUpdateCameraTimeout: cpp.Float32;

	public function SwapPendingViewTargetWhenUsingClientSideCameraUpdates(): Void;
	public function StopCameraShake(ShakeInstance: cpp.Star<UCameraShakeBase>, bImmediately: Bool): Void;
	public function StopCameraFade(): Void;
	public function StopCameraAnimInst(AnimInst: cpp.Star<UCameraAnimInst>, bImmediate: Bool): Void;
	public function StopAllInstancesOfCameraShakeFromSource(Shake: TSubclassOf<UCameraShakeBase>, SourceComponent: cpp.Star<UCameraShakeSourceComponent>, bImmediately: Bool): Void;
	public function StopAllInstancesOfCameraShake(Shake: TSubclassOf<UCameraShakeBase>, bImmediately: Bool): Void;
	public function StopAllInstancesOfCameraAnim(Anim: cpp.Star<UCameraAnim>, bImmediate: Bool): Void;
	public function StopAllCameraShakesFromSource(SourceComponent: cpp.Star<UCameraShakeSourceComponent>, bImmediately: Bool): Void;
	public function StopAllCameraShakes(bImmediately: Bool): Void;
	public function StopAllCameraAnims(bImmediate: Bool): Void;
	public function StartCameraShakeFromSource(ShakeClass: TSubclassOf<UCameraShakeBase>, SourceComponent: cpp.Star<UCameraShakeSourceComponent>, Scale: cpp.Float32, PlaySpace: ECameraShakePlaySpace, UserPlaySpaceRot: FRotator): cpp.Star<UCameraShakeBase>;
	public function StartCameraShake(ShakeClass: TSubclassOf<UCameraShakeBase>, Scale: cpp.Float32, PlaySpace: ECameraShakePlaySpace, UserPlaySpaceRot: FRotator): cpp.Star<UCameraShakeBase>;
	public function StartCameraFade(FromAlpha: cpp.Float32, ToAlpha: cpp.Float32, Duration: cpp.Float32, Color: FLinearColor, bShouldFadeAudio: Bool, bHoldWhenFinished: Bool): Void;
	public function SetManualCameraFade(InFadeAmount: cpp.Float32, Color: FLinearColor, bInFadeAudio: Bool): Void;
	public function SetGameCameraCutThisFrame(): Void;
	public function RemoveGenericCameraLensEffect(Emitter: UCameraLensEffectInterface): Void;
	public function RemoveCameraModifier(ModifierToRemove: cpp.Star<UCameraModifier>): Bool;
	public function RemoveCameraLensEffect(Emitter: cpp.Star<AEmitterCameraLensEffectBase>): Void;
	public function PlayCameraAnim(Anim: cpp.Star<UCameraAnim>, Rate: cpp.Float32, Scale: cpp.Float32, BlendInTime: cpp.Float32, BlendOutTime: cpp.Float32, bLoop: Bool, bRandomStartTime: Bool, Duration: cpp.Float32, PlaySpace: ECameraShakePlaySpace, UserPlaySpaceRot: FRotator): cpp.Star<UCameraAnimInst>;
	public function PhotographyCameraModify(NewCameraLocation: FVector, PreviousCameraLocation: FVector, OriginalCameraLocation: FVector, ResultCameraLocation: FVector): Void;
	public function OnPhotographySessionStart(): Void;
	public function OnPhotographySessionEnd(): Void;
	public function OnPhotographyMultiPartCaptureStart(): Void;
	public function OnPhotographyMultiPartCaptureEnd(): Void;
	public function GetOwningPlayerController(): cpp.Star<APlayerController>;
	public function GetFOVAngle(): cpp.Float32;
	public function GetCameraRotation(): FRotator;
	public function GetCameraLocation(): FVector;
	public function FindCameraModifierByClass(ModifierClass: TSubclassOf<UCameraModifier>): cpp.Star<UCameraModifier>;
	public function ClearCameraLensEffects(): Void;
	public function BlueprintUpdateCamera(CameraTarget: cpp.Star<AActor>, NewCameraLocation: FVector, NewCameraRotation: FRotator, NewCameraFOV: cpp.Reference<cpp.Float32>): Bool;
	public function AddNewCameraModifier(ModifierClass: TSubclassOf<UCameraModifier>): cpp.Star<UCameraModifier>;
	public function AddGenericCameraLensEffect(LensEffectEmitterClass: TSubclassOf<AActor>): UCameraLensEffectInterface;
	public function AddCameraLensEffect(LensEffectEmitterClass: TSubclassOf<AEmitterCameraLensEffectBase>): cpp.Star<AEmitterCameraLensEffectBase>;
}
