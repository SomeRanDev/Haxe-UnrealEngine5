// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UHeadMountedDisplayFunctionLibrary")
@:include("HeadMountedDisplayFunctionLibrary.h")
@:structAccess
extern class HeadMountedDisplayFunctionLibrary extends BlueprintFunctionLibrary {
	public function UpdateExternalTrackingHMDPosition(ExternalTrackingTransform: cpp.Reference<Transform>): Void;
	public function SetXRTimedInputActionDelegate(ActionName: cpp.Reference<FName>, InDelegate: cpp.Reference<HaxeDelegateProperty<(cpp.Float32, Timespan) -> Void>>): Void;
	public function SetXRDisconnectDelegate(InDisconnectedDelegate: cpp.Reference<HaxeDelegateProperty<(FString) -> Void>>): Void;
	public function SetWorldToMetersScale(WorldContext: cpp.Star<Object>, NewScale: cpp.Float32): Void;
	public function SetTrackingOrigin(Origin: EHMDTrackingOrigin): Void;
	public function SetSpectatorScreenTexture(InTexture: cpp.Star<Texture>): Void;
	public function SetSpectatorScreenModeTexturePlusEyeLayout(EyeRectMin: Vector2D, EyeRectMax: Vector2D, TextureRectMin: Vector2D, TextureRectMax: Vector2D, bDrawEyeFirst: Bool, bClearBlack: Bool, bUseAlpha: Bool): Void;
	public function SetSpectatorScreenMode(Mode: ESpectatorScreenMode): Void;
	public function SetClippingPlanes(Near: cpp.Float32, Far: cpp.Float32): Void;
	public function ResetOrientationAndPosition(Yaw: cpp.Float32, Options: EOrientPositionSelector): Void;
	public function IsSpectatorScreenModeControllable(): cpp.Reference<Bool>;
	public function IsInLowPersistenceMode(): cpp.Reference<Bool>;
	public function IsHeadMountedDisplayEnabled(): cpp.Reference<Bool>;
	public function IsHeadMountedDisplayConnected(): cpp.Reference<Bool>;
	public function IsDeviceTracking(XRDeviceId: cpp.Reference<XRDeviceId>): cpp.Reference<Bool>;
	public function HasValidTrackingPosition(): cpp.Reference<Bool>;
	public function GetXRSystemFlags(): cpp.Reference<cpp.Int32>;
	public function GetWorldToMetersScale(WorldContext: cpp.Star<Object>): cpp.Reference<cpp.Float32>;
	public function GetVRFocusState(bUseFocus: cpp.Reference<Bool>, bHasFocus: cpp.Reference<Bool>): Void;
	public function GetVersionString(): cpp.Reference<FString>;
	public function GetTrackingToWorldTransform(WorldContext: cpp.Star<Object>): cpp.Reference<Transform>;
	public function GetTrackingSensorParameters(Origin: cpp.Reference<Vector>, Rotation: cpp.Reference<Rotator>, LeftFOV: cpp.Reference<cpp.Float32>, RightFOV: cpp.Reference<cpp.Float32>, TopFOV: cpp.Reference<cpp.Float32>, BottomFOV: cpp.Reference<cpp.Float32>, Distance: cpp.Reference<cpp.Float32>, NearPlane: cpp.Reference<cpp.Float32>, FarPlane: cpp.Reference<cpp.Float32>, IsActive: cpp.Reference<Bool>, Index: cpp.Int32): Void;
	public function GetTrackingOrigin(): cpp.Reference<EHMDTrackingOrigin>;
	public function GetScreenPercentage(): cpp.Reference<cpp.Float32>;
	public function GetPositionalTrackingCameraParameters(CameraOrigin: cpp.Reference<Vector>, CameraRotation: cpp.Reference<Rotator>, HFOV: cpp.Reference<cpp.Float32>, VFOV: cpp.Reference<cpp.Float32>, CameraDistance: cpp.Reference<cpp.Float32>, NearPlane: cpp.Reference<cpp.Float32>, FarPlane: cpp.Reference<cpp.Float32>): Void;
	public function GetPlayAreaBounds(Origin: EHMDTrackingOrigin): cpp.Reference<Vector2D>;
	public function GetPixelDensity(): cpp.Reference<cpp.Float32>;
	public function GetOrientationAndPosition(DeviceRotation: cpp.Reference<Rotator>, DevicePosition: cpp.Reference<Vector>): Void;
	public function GetNumOfTrackingSensors(): cpp.Reference<cpp.Int32>;
	public function GetMotionControllerData(WorldContext: cpp.Star<Object>, Hand: EControllerHand, MotionControllerData: cpp.Reference<XRMotionControllerData>): Void;
	public function GetHMDWornState(): cpp.Reference<EHMDWornState>;
	public function GetHMDDeviceName(): cpp.Reference<FName>;
	public function GetHMDData(WorldContext: cpp.Star<Object>, HMDData: cpp.Reference<XRHMDData>): Void;
	public function GetDeviceWorldPose(WorldContext: cpp.Star<Object>, XRDeviceId: cpp.Reference<XRDeviceId>, bIsTracked: cpp.Reference<Bool>, Orientation: cpp.Reference<Rotator>, bHasPositionalTracking: cpp.Reference<Bool>, Position: cpp.Reference<Vector>): Void;
	public function GetDevicePose(XRDeviceId: cpp.Reference<XRDeviceId>, bIsTracked: cpp.Reference<Bool>, Orientation: cpp.Reference<Rotator>, bHasPositionalTracking: cpp.Reference<Bool>, Position: cpp.Reference<Vector>): Void;
	public function GetControllerTransformForTime(WorldContext: cpp.Star<Object>, ControllerIndex: cpp.Int32, MotionSource: FName, Time: Timespan, bTimeWasUsed: cpp.Reference<Bool>, Orientation: cpp.Reference<Rotator>, Position: cpp.Reference<Vector>, bProvidedLinearVelocity: cpp.Reference<Bool>, LinearVelocity: cpp.Reference<Vector>, bProvidedAngularVelocity: cpp.Reference<Bool>, AngularVelocityRadPerSec: cpp.Reference<Vector>, bProvidedLinearAcceleration: cpp.Reference<Bool>, LinearAcceleration: cpp.Reference<Vector>): cpp.Reference<Bool>;
	public function EnumerateTrackedDevices(SystemId: FName, DeviceType: EXRTrackedDeviceType): cpp.Reference<TArray<XRDeviceId>>;
	public function EnableLowPersistenceMode(bEnable: Bool): Void;
	public function EnableHMD(bEnable: Bool): cpp.Reference<Bool>;
	public function DisconnectRemoteXRDevice(): Void;
	public function ConnectRemoteXRDevice(IpAddress: FString, BitRate: cpp.Int32): cpp.Reference<EXRDeviceConnectionResult>;
	public function ConfigureGestures(GestureConfig: cpp.Reference<XRGestureConfig>): cpp.Reference<Bool>;
	public function ClearXRTimedInputActionDelegate(ActionPath: cpp.Reference<FName>): Void;
	public function CalibrateExternalTrackingToHMD(ExternalTrackingTransform: cpp.Reference<Transform>): Void;
	public function BreakKey(InKey: Key, InteractionProfile: cpp.Reference<FString>, Hand: cpp.Reference<EControllerHand>, MotionSource: cpp.Reference<FName>, Indentifier: cpp.Reference<FString>, Component: cpp.Reference<FString>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstHeadMountedDisplayFunctionLibrary(HeadMountedDisplayFunctionLibrary) from HeadMountedDisplayFunctionLibrary {
}