// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UNetConnection")
@:include("Engine/NetConnection.h")
@:structAccess
extern class NetConnection extends Player {
	public var Children: TArray<cpp.Star<ChildConnection>>;
	public var Driver: cpp.Star<NetDriver>;
	public var PackageMapClass: TSubclassOf<PackageMap>;
	public var PackageMap: cpp.Star<PackageMap>;
	public var OpenChannels: TArray<cpp.Star<Channel>>;
	public var SentTemporaries: TArray<cpp.Star<Actor>>;
	public var ViewTarget: cpp.Star<Actor>;
	public var OwningActor: cpp.Star<Actor>;
	public var MaxPacket: cpp.Int32;
	public var InternalAck: Bool;
	public var PlayerId: UniqueNetIdRepl;
	public var LastReceiveTime: cpp.Float64;
	public var ChannelsToTick: TArray<cpp.Star<Channel>>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstNetConnection(NetConnection) from NetConnection {
	public extern var Children(get, never): TArray<cpp.Star<ChildConnection.ConstChildConnection>>;
	public inline extern function get_Children(): TArray<cpp.Star<ChildConnection.ConstChildConnection>> return this.Children;
	public extern var Driver(get, never): cpp.Star<NetDriver.ConstNetDriver>;
	public inline extern function get_Driver(): cpp.Star<NetDriver.ConstNetDriver> return this.Driver;
	public extern var PackageMapClass(get, never): TSubclassOf<PackageMap.ConstPackageMap>;
	public inline extern function get_PackageMapClass(): TSubclassOf<PackageMap.ConstPackageMap> return this.PackageMapClass;
	public extern var PackageMap(get, never): cpp.Star<PackageMap.ConstPackageMap>;
	public inline extern function get_PackageMap(): cpp.Star<PackageMap.ConstPackageMap> return this.PackageMap;
	public extern var OpenChannels(get, never): TArray<cpp.Star<Channel.ConstChannel>>;
	public inline extern function get_OpenChannels(): TArray<cpp.Star<Channel.ConstChannel>> return this.OpenChannels;
	public extern var SentTemporaries(get, never): TArray<cpp.Star<Actor.ConstActor>>;
	public inline extern function get_SentTemporaries(): TArray<cpp.Star<Actor.ConstActor>> return this.SentTemporaries;
	public extern var ViewTarget(get, never): cpp.Star<Actor.ConstActor>;
	public inline extern function get_ViewTarget(): cpp.Star<Actor.ConstActor> return this.ViewTarget;
	public extern var OwningActor(get, never): cpp.Star<Actor.ConstActor>;
	public inline extern function get_OwningActor(): cpp.Star<Actor.ConstActor> return this.OwningActor;
	public extern var MaxPacket(get, never): cpp.Int32;
	public inline extern function get_MaxPacket(): cpp.Int32 return this.MaxPacket;
	public extern var InternalAck(get, never): Bool;
	public inline extern function get_InternalAck(): Bool return this.InternalAck;
	public extern var PlayerId(get, never): UniqueNetIdRepl;
	public inline extern function get_PlayerId(): UniqueNetIdRepl return this.PlayerId;
	public extern var LastReceiveTime(get, never): cpp.Float64;
	public inline extern function get_LastReceiveTime(): cpp.Float64 return this.LastReceiveTime;
	public extern var ChannelsToTick(get, never): TArray<cpp.Star<Channel.ConstChannel>>;
	public inline extern function get_ChannelsToTick(): TArray<cpp.Star<Channel.ConstChannel>> return this.ChannelsToTick;
}

@:forward
@:nativeGen
@:native("NetConnection*")
abstract NetConnectionPtr(cpp.Star<NetConnection>) from cpp.Star<NetConnection> to cpp.Star<NetConnection>{
	@:from
	public static extern inline function fromValue(v: NetConnection): NetConnectionPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): NetConnection {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}