// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMRMeshComponent")
@:include("MRMeshComponent.h")
@:structAccess
extern class MRMeshComp extends PrimitiveComp {
	private var Material: cpp.Star<MaterialInterface>;
	private var WireframeMaterial: cpp.Star<MaterialInterface>;
	private var bCreateMeshProxySections: Bool;
	private var bUpdateNavMeshOnMeshUpdate: Bool;
	private var bNeverCreateCollisionMesh: Bool;
	private var BodyHolders: TArray<cpp.Star<MRMeshBodyHolder>>;

	public function SetWireframeMaterial(InMaterial: cpp.Star<MaterialInterface>): Void;
	public function SetWireframeColor(InColor: cpp.Reference<LinearColor>): Void;
	public function SetUseWireframe(bUseWireframe: Bool): Void;
	public function SetEnableMeshOcclusion(bEnable: Bool): Void;
	public function RequestNavMeshUpdate(): Void;
	public function IsConnected(): Bool;
	public function GetWireframeColor(): LinearColor;
	public function GetUseWireframe(): Bool;
	public function GetEnableMeshOcclusion(): Bool;
	public function ForceNavMeshUpdate(): Void;
	public function Clear(): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsConnected, GetWireframeColor, GetUseWireframe, GetEnableMeshOcclusion)
@:nativeGen
abstract ConstMRMeshComp(MRMeshComp) from MRMeshComp {
}

@:forward
@:nativeGen
@:native("MRMeshComp*")
abstract MRMeshCompPtr(cpp.Star<MRMeshComp>) from cpp.Star<MRMeshComp> to cpp.Star<MRMeshComp>{
	@:from
	public static extern inline function fromValue(v: MRMeshComp): MRMeshCompPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): MRMeshComp {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}