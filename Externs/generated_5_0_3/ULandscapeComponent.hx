// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ULandscapeComponent")
@:include("LandscapeComponent.h")
extern class ULandscapeComponent extends UPrimitiveComponent {
	public var SectionBaseX: cpp.Int32;
	public var SectionBaseY: cpp.Int32;
	public var ComponentSizeQuads: cpp.Int32;
	public var SubsectionSizeQuads: cpp.Int32;
	public var NumSubsections: cpp.Int32;
	public var OverrideMaterial: TObjectPtr<UMaterialInterface>;
	public var OverrideHoleMaterial: TObjectPtr<UMaterialInterface>;
	public var OverrideMaterials: TArray<FLandscapeComponentMaterialOverride>;
	public var MaterialInstance_DEPRECATED: TObjectPtr<UMaterialInstanceConstant>;
	public var MaterialInstances: TArray<TObjectPtr<UMaterialInstanceConstant>>;
	public var MaterialInstancesDynamic: TArray<TObjectPtr<UMaterialInstanceDynamic>>;
	public var LODIndexToMaterialIndex: TArray<cpp.Int8>;
	public var XYOffsetmapTexture: TObjectPtr<UTexture2D>;
	public var WeightmapScaleBias: FVector4;
	public var WeightmapSubsectionOffset: cpp.Float32;
	public var HeightmapScaleBias: FVector4;
	public var CachedLocalBox: FBox;
	public var CollisionComponent: TLazyObjectPtr<ULandscapeHeightfieldCollisionComponent>;
	public var LightingGuid: FGuid;
	public var LayersData: TMap<FGuid, FLandscapeLayerComponentData>;
	public var WeightmapTexturesUsage: TArray<TObjectPtr<ULandscapeWeightmapUsage>>;
	public var LayerUpdateFlagPerMode: cpp.UInt32;
	public var bPendingCollisionDataUpdate: Bool;
	public var bPendingLayerCollisionDataUpdate: Bool;
	public var HeightmapTexture: TObjectPtr<UTexture2D>;
	public var WeightmapLayerAllocations: TArray<FWeightmapLayerAllocationInfo>;
	public var WeightmapTextures: TArray<TObjectPtr<UTexture2D>>;
	public var LODStreamingProxy: TObjectPtr<ULandscapeLODStreamingProxy>;
	public var MapBuildDataId: FGuid;
	public var IrrelevantLights_DEPRECATED: TArray<FGuid>;
	public var CollisionMipLevel: cpp.Int32;
	public var SimpleCollisionMipLevel: cpp.Int32;
	public var NegativeZBoundsExtension: cpp.Float32;
	public var PositiveZBoundsExtension: cpp.Float32;
	public var StaticLightingResolution: cpp.Float32;
	public var ForcedLOD: cpp.Int32;
	public var LODBias: cpp.Int32;
	public var StateId: FGuid;
	public var BakedTextureMaterialGuid: FGuid;
	public var LastBakedTextureMaterialGuid: FGuid;
	public var GIBakedBaseColorTexture: TObjectPtr<UTexture2D>;
	public var LightingLODBias: cpp.Int32;
	public var LayerAllowList: TArray<TObjectPtr<ULandscapeLayerInfoObject>>;
	public var EditToolRenderData: FLandscapeEditToolRenderData;
	public var MobileDataSourceHash: FGuid;
	public var MaterialPerLOD: TMap<TObjectPtr<UMaterialInterface>, cpp.Int8>;
	public var SplineHash: cpp.UInt32;
	public var PhysicalMaterialHash: cpp.UInt32;
	public var LastSavedPhysicalMaterialHash: cpp.UInt32;
	public var MobileBlendableLayerMask: cpp.UInt8;
	public var MobileMaterialInterface_DEPRECATED: TObjectPtr<UMaterialInterface>;
	public var MobileMaterialInterfaces: TArray<TObjectPtr<UMaterialInterface>>;
	public var MobileWeightmapTextures: TArray<TObjectPtr<UTexture2D>>;
	public var MobileCombinationMaterialInstances: TArray<TObjectPtr<UMaterialInstanceConstant>>;
	public var MobileCombinationMaterialInstance_DEPRECATED: TObjectPtr<UMaterialInstanceConstant>;

	public function GetMaterialInstanceDynamic(InIndex: cpp.Int32): cpp.Star<UMaterialInstanceDynamic>;
	public function EditorGetPaintLayerWeightByNameAtLocation(InLocation: FVector, InPaintLayerName: FName): cpp.Float32;
	public function EditorGetPaintLayerWeightAtLocation(InLocation: FVector, PaintLayer: cpp.Star<ULandscapeLayerInfoObject>): cpp.Float32;
}
