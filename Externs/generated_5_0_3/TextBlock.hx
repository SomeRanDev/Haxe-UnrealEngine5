// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTextBlock")
@:include("Components/TextBlock.h")
extern class TextBlock extends TextLayoutWidget {
	public var Text: FText;
	public var TextDelegate: HaxeDelegateProperty<() -> Void>;
	public var ColorAndOpacity: SlateColor;
	public var ColorAndOpacityDelegate: HaxeDelegateProperty<() -> Void>;
	public var Font: SlateFontInfo;
	public var StrikeBrush: SlateBrush;
	public var ShadowOffset: Vector2D;
	public var ShadowColorAndOpacity: LinearColor;
	public var ShadowColorAndOpacityDelegate: HaxeDelegateProperty<() -> Void>;
	public var MinDesiredWidth: cpp.Float32;
	public var bWrapWithInvalidationPanel: Bool;
	public var bAutoWrapText_DEPRECATED: Bool;
	public var TextTransformPolicy: ETextTransformPolicy;
	public var TextOverflowPolicy: ETextOverflowPolicy;
	public var bSimpleTextMode: Bool;

	public function SetTextTransformPolicy(InTransformPolicy: ETextTransformPolicy): Void;
	public function SetTextOverflowPolicy(InOverflowPolicy: ETextOverflowPolicy): Void;
	public function SetText(InText: FText): Void;
	public function SetStrikeBrush(InStrikeBrush: SlateBrush): Void;
	public function SetShadowOffset(InShadowOffset: Vector2D): Void;
	public function SetShadowColorAndOpacity(InShadowColorAndOpacity: LinearColor): Void;
	public function SetOpacity(InOpacity: cpp.Float32): Void;
	public function SetMinDesiredWidth(InMinDesiredWidth: cpp.Float32): Void;
	public function SetFont(InFontInfo: SlateFontInfo): Void;
	public function SetColorAndOpacity(InColorAndOpacity: SlateColor): Void;
	public function SetAutoWrapText(InAutoTextWrap: Bool): Void;
	public function GetText(): cpp.Reference<FText>;
	public function GetDynamicOutlineMaterial(): cpp.Reference<cpp.Star<MaterialInstanceDynamic>>;
	public function GetDynamicFontMaterial(): cpp.Reference<cpp.Star<MaterialInstanceDynamic>>;
}

@:forward(GetText)
@:nativeGen
abstract ConstTextBlock(TextBlock) from TextBlock {
	public extern var Text(get, never): FText;
	public inline extern function get_Text(): FText return this.Text;
	public extern var TextDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_TextDelegate(): HaxeDelegateProperty<() -> Void> return this.TextDelegate;
	public extern var ColorAndOpacity(get, never): SlateColor;
	public inline extern function get_ColorAndOpacity(): SlateColor return this.ColorAndOpacity;
	public extern var ColorAndOpacityDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ColorAndOpacityDelegate(): HaxeDelegateProperty<() -> Void> return this.ColorAndOpacityDelegate;
	public extern var Font(get, never): SlateFontInfo;
	public inline extern function get_Font(): SlateFontInfo return this.Font;
	public extern var StrikeBrush(get, never): SlateBrush;
	public inline extern function get_StrikeBrush(): SlateBrush return this.StrikeBrush;
	public extern var ShadowOffset(get, never): Vector2D;
	public inline extern function get_ShadowOffset(): Vector2D return this.ShadowOffset;
	public extern var ShadowColorAndOpacity(get, never): LinearColor;
	public inline extern function get_ShadowColorAndOpacity(): LinearColor return this.ShadowColorAndOpacity;
	public extern var ShadowColorAndOpacityDelegate(get, never): HaxeDelegateProperty<() -> Void>;
	public inline extern function get_ShadowColorAndOpacityDelegate(): HaxeDelegateProperty<() -> Void> return this.ShadowColorAndOpacityDelegate;
	public extern var MinDesiredWidth(get, never): cpp.Float32;
	public inline extern function get_MinDesiredWidth(): cpp.Float32 return this.MinDesiredWidth;
	public extern var bWrapWithInvalidationPanel(get, never): Bool;
	public inline extern function get_bWrapWithInvalidationPanel(): Bool return this.bWrapWithInvalidationPanel;
	public extern var bAutoWrapText_DEPRECATED(get, never): Bool;
	public inline extern function get_bAutoWrapText_DEPRECATED(): Bool return this.bAutoWrapText_DEPRECATED;
	public extern var TextTransformPolicy(get, never): ETextTransformPolicy;
	public inline extern function get_TextTransformPolicy(): ETextTransformPolicy return this.TextTransformPolicy;
	public extern var TextOverflowPolicy(get, never): ETextOverflowPolicy;
	public inline extern function get_TextOverflowPolicy(): ETextOverflowPolicy return this.TextOverflowPolicy;
	public extern var bSimpleTextMode(get, never): Bool;
	public inline extern function get_bSimpleTextMode(): Bool return this.bSimpleTextMode;
}