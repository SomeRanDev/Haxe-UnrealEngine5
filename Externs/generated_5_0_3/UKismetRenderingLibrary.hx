// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetRenderingLibrary")
@:include("Kismet/KismetRenderingLibrary.h")
extern class UKismetRenderingLibrary extends UBlueprintFunctionLibrary {

	public function SetCastInsetShadowForAllAttachments(PrimitiveComponent: cpp.Star<UPrimitiveComponent>, bCastInsetShadow: Bool, bLightAttachmentsAsGroup: Bool): Void;
	public function RenderTargetCreateStaticTexture2DEditorOnly(RenderTarget: cpp.Star<UTextureRenderTarget2D>, Name: FString, CompressionSettings: TextureCompressionSettings, MipSettings: TextureMipGenSettings): cpp.Star<UTexture2D>;
	public function ReleaseRenderTarget2D(TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>): Void;
	public function ReadRenderTargetUV(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, U: cpp.Float32, V: cpp.Float32): FColor;
	public function ReadRenderTargetRawUVArea(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, Area: FBox2D, bNormalize: Bool): TArray<FLinearColor>;
	public function ReadRenderTargetRawUV(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, U: cpp.Float32, V: cpp.Float32, bNormalize: Bool): FLinearColor;
	public function ReadRenderTargetRawPixelArea(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, MinX: cpp.Int32, MinY: cpp.Int32, MaxX: cpp.Int32, MaxY: cpp.Int32, bNormalize: Bool): TArray<FLinearColor>;
	public function ReadRenderTargetRawPixel(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, X: cpp.Int32, Y: cpp.Int32, bNormalize: Bool): FLinearColor;
	public function ReadRenderTargetRaw(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, OutLinearSamples: TArray<FLinearColor>, bNormalize: Bool): Bool;
	public function ReadRenderTargetPixel(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, X: cpp.Int32, Y: cpp.Int32): FColor;
	public function ReadRenderTarget(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, OutSamples: TArray<FColor>, bNormalize: Bool): Bool;
	public function MakeSkinWeightInfo(Bone0: cpp.Int32, Weight0: cpp.UInt8, Bone1: cpp.Int32, Weight1: cpp.UInt8, Bone2: cpp.Int32, Weight2: cpp.UInt8, Bone3: cpp.Int32, Weight3: cpp.UInt8): FSkelMeshSkinWeightInfo;
	public function ImportFileAsTexture2D(WorldContextObject: cpp.Star<UObject>, Filename: FString): cpp.Star<UTexture2D>;
	public function ImportBufferAsTexture2D(WorldContextObject: cpp.Star<UObject>, Buffer: TArray<cpp.UInt8>): cpp.Star<UTexture2D>;
	public function ExportTexture2D(WorldContextObject: cpp.Star<UObject>, Texture: cpp.Star<UTexture2D>, FilePath: FString, FileName: FString): Void;
	public function ExportRenderTarget(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, FilePath: FString, FileName: FString): Void;
	public function EndDrawCanvasToRenderTarget(WorldContextObject: cpp.Star<UObject>, Context: FDrawToRenderTargetContext): Void;
	public function DrawMaterialToRenderTarget(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, Material: cpp.Star<UMaterialInterface>): Void;
	public function CreateRenderTargetVolume(WorldContextObject: cpp.Star<UObject>, Width: cpp.Int32, Height: cpp.Int32, Depth: cpp.Int32, Format: ETextureRenderTargetFormat, ClearColor: FLinearColor, bAutoGenerateMipMaps: Bool): cpp.Star<UTextureRenderTargetVolume>;
	public function CreateRenderTarget2DArray(WorldContextObject: cpp.Star<UObject>, Width: cpp.Int32, Height: cpp.Int32, Slices: cpp.Int32, Format: ETextureRenderTargetFormat, ClearColor: FLinearColor, bAutoGenerateMipMaps: Bool): cpp.Star<UTextureRenderTarget2DArray>;
	public function CreateRenderTarget2D(WorldContextObject: cpp.Star<UObject>, Width: cpp.Int32, Height: cpp.Int32, Format: ETextureRenderTargetFormat, ClearColor: FLinearColor, bAutoGenerateMipMaps: Bool): cpp.Star<UTextureRenderTarget2D>;
	public function ConvertRenderTargetToTexture2DEditorOnly(WorldContextObject: cpp.Star<UObject>, RenderTarget: cpp.Star<UTextureRenderTarget2D>, Texture: cpp.Star<UTexture2D>): Void;
	public function ClearRenderTarget2D(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, ClearColor: FLinearColor): Void;
	public function CalculateProjectionMatrix(MinimalViewInfo: FMinimalViewInfo): FMatrix;
	public function BreakSkinWeightInfo(InWeight: FSkelMeshSkinWeightInfo, Bone0: cpp.Reference<cpp.Int32>, Weight0: cpp.UInt8, Bone1: cpp.Reference<cpp.Int32>, Weight1: cpp.UInt8, Bone2: cpp.Reference<cpp.Int32>, Weight2: cpp.UInt8, Bone3: cpp.Reference<cpp.Int32>, Weight3: cpp.UInt8): Void;
	public function BeginDrawCanvasToRenderTarget(WorldContextObject: cpp.Star<UObject>, TextureRenderTarget: cpp.Star<UTextureRenderTarget2D>, Canvas: cpp.Reference<cpp.Star<UCanvas>>, Size: FVector2D, Context: FDrawToRenderTargetContext): Void;
}
