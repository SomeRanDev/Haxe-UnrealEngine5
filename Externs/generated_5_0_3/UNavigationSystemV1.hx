// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UNavigationSystemV1")
@:include("NavigationSystem.h")
extern class UNavigationSystemV1 extends UNavigationSystemBase {
	public var MainNavData: TObjectPtr<ANavigationData>;
	public var AbstractNavData: TObjectPtr<ANavigationData>;
	public var DefaultAgentName: FName;
	public var CrowdManagerClass: TSoftClassPtr<UCrowdManagerBase>;
	public var bAutoCreateNavigationData: Bool;
	public var bSpawnNavDataInNavBoundsLevel: Bool;
	public var bAllowClientSideNavigation: Bool;
	public var bShouldDiscardSubLevelNavData: Bool;
	public var bTickWhilePaused: Bool;
	public var bSupportRebuilding: Bool;
	public var bInitialBuildingLocked: Bool;
	public var bSkipAgentHeightCheckWhenPickingNavData: Bool;
	public var bGenerateNavigationOnlyAroundNavigationInvokers: Bool;
	public var ActiveTilesUpdateInterval: cpp.Float32;
	public var DataGatheringMode: ENavDataGatheringModeConfig;
	public var DirtyAreaWarningSizeThreshold: cpp.Float32;
	public var GatheringNavModifiersWarningLimitTime: cpp.Float32;
	public var SupportedAgents: TArray<FNavDataConfig>;
	public var SupportedAgentsMask: FNavAgentSelector;
	public var BuildBounds: FBox;
	public var NavDataSet: TArray<TObjectPtr<ANavigationData>>;
	public var NavDataRegistrationQueue: TArray<TObjectPtr<ANavigationData>>;
	public var OnNavDataRegisteredEvent: HaxeMulticastSparseDelegateProperty<(cpp.Star<ANavigationData>) -> Void>;
	public var OnNavigationGenerationFinishedDelegate: HaxeMulticastSparseDelegateProperty<(cpp.Star<ANavigationData>) -> Void>;
	public var OperationMode: FNavigationSystemRunMode;
	public var DirtyAreasUpdateFreq: cpp.Float32;

	public function UnregisterNavigationInvoker(Invoker: cpp.Star<AActor>): Void;
	public function SimpleMoveToLocation(Controller: cpp.Star<AController>, Goal: FVector): Void;
	public function SimpleMoveToActor(Controller: cpp.Star<AController>, Goal: cpp.Star<AActor>): Void;
	public function SetMaxSimultaneousTileGenerationJobsCount(MaxNumberOfJobs: cpp.Int32): Void;
	public function SetGeometryGatheringMode(NewMode: ENavDataGatheringModeConfig): Void;
	public function ResetMaxSimultaneousTileGenerationJobsCount(): Void;
	public function RegisterNavigationInvoker(Invoker: cpp.Star<AActor>, TileGenerationRadius: cpp.Float32, TileRemovalRadius: cpp.Float32): Void;
	public function ProjectPointToNavigation(WorldContextObject: cpp.Star<UObject>, Point: FVector, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>, QueryExtent: FVector): FVector;
	public function OnNavigationBoundsUpdated(NavVolume: cpp.Star<ANavMeshBoundsVolume>): Void;
	public function NavigationRaycast(WorldContextObject: cpp.Star<UObject>, RayStart: FVector, RayEnd: FVector, HitLocation: FVector, FilterClass: TSubclassOf<UNavigationQueryFilter>, Querier: cpp.Star<AController>): Bool;
	public function K2_ReplaceAreaInOctreeData(Object: cpp.Star<UObject>, OldArea: TSubclassOf<UNavArea>, NewArea: TSubclassOf<UNavArea>): Bool;
	public function K2_ProjectPointToNavigation(WorldContextObject: cpp.Star<UObject>, Point: FVector, ProjectedLocation: FVector, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>, QueryExtent: FVector): Bool;
	public function K2_GetRandomReachablePointInRadius(WorldContextObject: cpp.Star<UObject>, Origin: FVector, RandomLocation: FVector, Radius: cpp.Float32, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>): Bool;
	public function K2_GetRandomPointInNavigableRadius(WorldContextObject: cpp.Star<UObject>, Origin: FVector, RandomLocation: FVector, Radius: cpp.Float32, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>): Bool;
	public function K2_GetRandomLocationInNavigableRadius(WorldContextObject: cpp.Star<UObject>, Origin: FVector, RandomLocation: FVector, Radius: cpp.Float32, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>): Bool;
	public function IsNavigationBeingBuiltOrLocked(WorldContextObject: cpp.Star<UObject>): Bool;
	public function IsNavigationBeingBuilt(WorldContextObject: cpp.Star<UObject>): Bool;
	public function GetRandomReachablePointInRadius(WorldContextObject: cpp.Star<UObject>, Origin: FVector, Radius: cpp.Float32, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>): FVector;
	public function GetRandomPointInNavigableRadius(WorldContextObject: cpp.Star<UObject>, Origin: FVector, Radius: cpp.Float32, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>): FVector;
	public function GetPathLength(WorldContextObject: cpp.Star<UObject>, PathStart: FVector, PathEnd: FVector, PathLength: cpp.Reference<cpp.Float32>, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>): ENavigationQueryResult;
	public function GetPathCost(WorldContextObject: cpp.Star<UObject>, PathStart: FVector, PathEnd: FVector, PathCost: cpp.Reference<cpp.Float32>, NavData: cpp.Star<ANavigationData>, FilterClass: TSubclassOf<UNavigationQueryFilter>): ENavigationQueryResult;
	public function GetNavigationSystem(WorldContextObject: cpp.Star<UObject>): cpp.Star<UNavigationSystemV1>;
	public function FindPathToLocationSynchronously(WorldContextObject: cpp.Star<UObject>, PathStart: FVector, PathEnd: FVector, PathfindingContext: cpp.Star<AActor>, FilterClass: TSubclassOf<UNavigationQueryFilter>): cpp.Star<UNavigationPath>;
	public function FindPathToActorSynchronously(WorldContextObject: cpp.Star<UObject>, PathStart: FVector, GoalActor: cpp.Star<AActor>, TetherDistance: cpp.Float32, PathfindingContext: cpp.Star<AActor>, FilterClass: TSubclassOf<UNavigationQueryFilter>): cpp.Star<UNavigationPath>;
}
