// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("USequenceEvaluatorLibrary")
@:include("SequenceEvaluatorLibrary.h")
@:structAccess
extern class SequenceEvaluatorLibrary extends BlueprintFunctionLibrary {
	public function SetSequenceWithInertialBlending(UpdateContext: cpp.Reference<AnimUpdateContext>, SequenceEvaluator: cpp.Reference<SequenceEvaluatorReference>, Sequence: cpp.Star<AnimSequenceBase>, BlendTime: cpp.Float32): SequenceEvaluatorReference;
	public function SetSequence(SequenceEvaluator: cpp.Reference<SequenceEvaluatorReference>, Sequence: cpp.Star<AnimSequenceBase>): SequenceEvaluatorReference;
	public function SetExplicitTime(SequenceEvaluator: cpp.Reference<SequenceEvaluatorReference>, Time: cpp.Float32): SequenceEvaluatorReference;
	public function GetSequence(SequenceEvaluator: cpp.Reference<SequenceEvaluatorReference>): cpp.Star<AnimSequenceBase>;
	public function GetAccumulatedTime(SequenceEvaluator: cpp.Reference<SequenceEvaluatorReference>): cpp.Float32;
	public function ConvertToSequenceEvaluatorPure(Node: cpp.Reference<AnimNodeReference>, SequenceEvaluator: cpp.Reference<SequenceEvaluatorReference>, Result: cpp.Reference<Bool>): Void;
	public function ConvertToSequenceEvaluator(Node: cpp.Reference<AnimNodeReference>, Result: cpp.Reference<EAnimNodeReferenceConversionResult>): SequenceEvaluatorReference;
	public function AdvanceTime(UpdateContext: cpp.Reference<AnimUpdateContext>, SequenceEvaluator: cpp.Reference<SequenceEvaluatorReference>, PlayRate: cpp.Float32): SequenceEvaluatorReference;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstSequenceEvaluatorLibrary(SequenceEvaluatorLibrary) from SequenceEvaluatorLibrary {
}

@:forward
@:nativeGen
@:native("SequenceEvaluatorLibrary*")
abstract SequenceEvaluatorLibraryPtr(cpp.Star<SequenceEvaluatorLibrary>) from cpp.Star<SequenceEvaluatorLibrary> to cpp.Star<SequenceEvaluatorLibrary>{
	@:from
	public static extern inline function fromValue(v: SequenceEvaluatorLibrary): SequenceEvaluatorLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): SequenceEvaluatorLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}