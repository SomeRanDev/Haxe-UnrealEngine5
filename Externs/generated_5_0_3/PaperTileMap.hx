// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPaperTileMap")
@:include("PaperTileMap.h")
extern class PaperTileMap extends Object {
	public var MapWidth: cpp.Int32;
	public var MapHeight: cpp.Int32;
	public var TileWidth: cpp.Int32;
	public var TileHeight: cpp.Int32;
	public var PixelsPerUnrealUnit: cpp.Float32;
	public var SeparationPerTileX: cpp.Float32;
	public var SeparationPerTileY: cpp.Float32;
	public var SeparationPerLayer: cpp.Float32;
	public var SelectedTileSet: TSoftObjectPtr<PaperTileSet>;
	public var Material: cpp.Star<MaterialInterface>;
	public var TileLayers: TArray<cpp.Star<PaperTileLayer>>;
	public var CollisionThickness: cpp.Float32;
	public var SpriteCollisionDomain: ESpriteCollisionMode;
	public var ProjectionMode: ETileMapProjectionMode;
	public var HexSideLength: cpp.Int32;
	public var BodySetup: cpp.Star<BodySetup>;
	public var AssetImportData: cpp.Star<AssetImportData>;
	public var SelectedLayerIndex: cpp.Int32;
	public var BackgroundColor: LinearColor;
	public var TileGridColor: LinearColor;
	public var MultiTileGridColor: LinearColor;
	public var MultiTileGridWidth: cpp.Int32;
	public var MultiTileGridHeight: cpp.Int32;
	public var MultiTileGridOffsetX: cpp.Int32;
	public var MultiTileGridOffsetY: cpp.Int32;
	public var LayerGridColor: LinearColor;
	public var LayerNameIndex: cpp.Int32;
}

@:forward()
@:nativeGen
abstract ConstPaperTileMap(PaperTileMap) from PaperTileMap {
	public extern var MapWidth(get, never): cpp.Int32;
	public inline extern function get_MapWidth(): cpp.Int32 return this.MapWidth;
	public extern var MapHeight(get, never): cpp.Int32;
	public inline extern function get_MapHeight(): cpp.Int32 return this.MapHeight;
	public extern var TileWidth(get, never): cpp.Int32;
	public inline extern function get_TileWidth(): cpp.Int32 return this.TileWidth;
	public extern var TileHeight(get, never): cpp.Int32;
	public inline extern function get_TileHeight(): cpp.Int32 return this.TileHeight;
	public extern var PixelsPerUnrealUnit(get, never): cpp.Float32;
	public inline extern function get_PixelsPerUnrealUnit(): cpp.Float32 return this.PixelsPerUnrealUnit;
	public extern var SeparationPerTileX(get, never): cpp.Float32;
	public inline extern function get_SeparationPerTileX(): cpp.Float32 return this.SeparationPerTileX;
	public extern var SeparationPerTileY(get, never): cpp.Float32;
	public inline extern function get_SeparationPerTileY(): cpp.Float32 return this.SeparationPerTileY;
	public extern var SeparationPerLayer(get, never): cpp.Float32;
	public inline extern function get_SeparationPerLayer(): cpp.Float32 return this.SeparationPerLayer;
	public extern var SelectedTileSet(get, never): TSoftObjectPtr<PaperTileSet.ConstPaperTileSet>;
	public inline extern function get_SelectedTileSet(): TSoftObjectPtr<PaperTileSet.ConstPaperTileSet> return this.SelectedTileSet;
	public extern var Material(get, never): cpp.Star<MaterialInterface.ConstMaterialInterface>;
	public inline extern function get_Material(): cpp.Star<MaterialInterface.ConstMaterialInterface> return this.Material;
	public extern var TileLayers(get, never): TArray<cpp.Star<PaperTileLayer.ConstPaperTileLayer>>;
	public inline extern function get_TileLayers(): TArray<cpp.Star<PaperTileLayer.ConstPaperTileLayer>> return this.TileLayers;
	public extern var CollisionThickness(get, never): cpp.Float32;
	public inline extern function get_CollisionThickness(): cpp.Float32 return this.CollisionThickness;
	public extern var SpriteCollisionDomain(get, never): ESpriteCollisionMode;
	public inline extern function get_SpriteCollisionDomain(): ESpriteCollisionMode return this.SpriteCollisionDomain;
	public extern var ProjectionMode(get, never): ETileMapProjectionMode;
	public inline extern function get_ProjectionMode(): ETileMapProjectionMode return this.ProjectionMode;
	public extern var HexSideLength(get, never): cpp.Int32;
	public inline extern function get_HexSideLength(): cpp.Int32 return this.HexSideLength;
	public extern var BodySetup(get, never): cpp.Star<BodySetup.ConstBodySetup>;
	public inline extern function get_BodySetup(): cpp.Star<BodySetup.ConstBodySetup> return this.BodySetup;
	public extern var AssetImportData(get, never): cpp.Star<AssetImportData.ConstAssetImportData>;
	public inline extern function get_AssetImportData(): cpp.Star<AssetImportData.ConstAssetImportData> return this.AssetImportData;
	public extern var SelectedLayerIndex(get, never): cpp.Int32;
	public inline extern function get_SelectedLayerIndex(): cpp.Int32 return this.SelectedLayerIndex;
	public extern var BackgroundColor(get, never): LinearColor;
	public inline extern function get_BackgroundColor(): LinearColor return this.BackgroundColor;
	public extern var TileGridColor(get, never): LinearColor;
	public inline extern function get_TileGridColor(): LinearColor return this.TileGridColor;
	public extern var MultiTileGridColor(get, never): LinearColor;
	public inline extern function get_MultiTileGridColor(): LinearColor return this.MultiTileGridColor;
	public extern var MultiTileGridWidth(get, never): cpp.Int32;
	public inline extern function get_MultiTileGridWidth(): cpp.Int32 return this.MultiTileGridWidth;
	public extern var MultiTileGridHeight(get, never): cpp.Int32;
	public inline extern function get_MultiTileGridHeight(): cpp.Int32 return this.MultiTileGridHeight;
	public extern var MultiTileGridOffsetX(get, never): cpp.Int32;
	public inline extern function get_MultiTileGridOffsetX(): cpp.Int32 return this.MultiTileGridOffsetX;
	public extern var MultiTileGridOffsetY(get, never): cpp.Int32;
	public inline extern function get_MultiTileGridOffsetY(): cpp.Int32 return this.MultiTileGridOffsetY;
	public extern var LayerGridColor(get, never): LinearColor;
	public inline extern function get_LayerGridColor(): LinearColor return this.LayerGridColor;
	public extern var LayerNameIndex(get, never): cpp.Int32;
	public inline extern function get_LayerNameIndex(): cpp.Int32 return this.LayerNameIndex;
}