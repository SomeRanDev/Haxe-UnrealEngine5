// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPrimitiveComponent")
@:include("Components/PrimitiveComponent.h")
extern class UPrimitiveComponent extends USceneComponent {
	public var MinDrawDistance: cpp.Float32;
	public var LDMaxDrawDistance: cpp.Float32;
	public var CachedMaxDrawDistance: cpp.Float32;
	public var DepthPriorityGroup: ESceneDepthPriorityGroup;
	public var ViewOwnerDepthPriorityGroup: ESceneDepthPriorityGroup;
	public var IndirectLightingCacheQuality: EIndirectLightingCacheQuality;
	public var LightmapType: ELightmapType;
	public var bEnableAutoLODGeneration: Bool;
	public var ExcludeForSpecificHLODLevels: TArray<cpp.Int32>;
	public var HLODBatchingPolicy: EHLODBatchingPolicy;
	public var bIsActorTextureStreamingBuiltData: Bool;
	public var bIsValidTextureStreamingBuiltData: Bool;
	public var bNeverDistanceCull: Bool;
	public var bAlwaysCreatePhysicsState: Bool;
	public var bGenerateOverlapEvents: Bool;
	public var bMultiBodyOverlap: Bool;
	public var bTraceComplexOnMove: Bool;
	public var bReturnMaterialOnMove: Bool;
	public var bUseViewOwnerDepthPriorityGroup: Bool;
	public var bAllowCullDistanceVolume: Bool;
	public var bHasMotionBlurVelocityMeshes: Bool;
	public var bVisibleInReflectionCaptures: Bool;
	public var bVisibleInRealTimeSkyCaptures: Bool;
	public var bVisibleInRayTracing: Bool;
	public var bRenderInMainPass: Bool;
	public var bRenderInDepthPass: Bool;
	public var bReceivesDecals: Bool;
	public var bOwnerNoSee: Bool;
	public var bOnlyOwnerSee: Bool;
	public var bTreatAsBackgroundForOcclusion: Bool;
	public var bUseAsOccluder: Bool;
	public var bSelectable: Bool;
	public var bConsiderForActorPlacementWhenHidden: Bool;
	public var bForceMipStreaming: Bool;
	public var bHasPerInstanceHitProxies: Bool;
	public var CastShadow: Bool;
	public var bEmissiveLightSource: Bool;
	public var bAffectDynamicIndirectLighting: Bool;
	public var bAffectDistanceFieldLighting: Bool;
	public var bCastDynamicShadow: Bool;
	public var bCastStaticShadow: Bool;
	public var bCastVolumetricTranslucentShadow: Bool;
	public var bCastContactShadow: Bool;
	public var bSelfShadowOnly: Bool;
	public var bCastFarShadow: Bool;
	public var bCastInsetShadow: Bool;
	public var bCastCinematicShadow: Bool;
	public var bCastHiddenShadow: Bool;
	public var bCastShadowAsTwoSided: Bool;
	public var bLightAsIfStatic_DEPRECATED: Bool;
	public var bLightAttachmentsAsGroup: Bool;
	public var bExcludeFromLightAttachmentGroup: Bool;
	public var bReceiveMobileCSMShadows: Bool;
	public var bSingleSampleShadowFromStationaryLights: Bool;
	public var bIgnoreRadialImpulse: Bool;
	public var bIgnoreRadialForce: Bool;
	public var bApplyImpulseOnDamage: Bool;
	public var bReplicatePhysicsToAutonomousProxy: Bool;
	public var bFillCollisionUnderneathForNavmesh: Bool;
	public var AlwaysLoadOnClient: Bool;
	public var AlwaysLoadOnServer: Bool;
	public var bUseEditorCompositing: Bool;
	public var bIsBeingMovedByEditor: Bool;
	public var bRenderCustomDepth: Bool;
	public var bVisibleInSceneCaptureOnly: Bool;
	public var bHiddenInSceneCapture: Bool;
	public var bRayTracingFarField: Bool;
	public var bHasNoStreamableTextures: Bool;
	public var bHasCustomNavigableGeometry: EHasCustomNavigableGeometry;
	public var HitProxyPriority: EHitProxyPriority;
	public var CanBeCharacterBase_DEPRECATED: ECanBeCharacterBase;
	public var bUseMaxLODAsImposter_DEPRECATED: Bool;
	public var bBatchImpostersAsInstances_DEPRECATED: Bool;
	public var CanCharacterStepUpOn: ECanBeCharacterBase;
	public var LightingChannels: FLightingChannels;
	public var RayTracingGroupId: cpp.Int32;
	public var VisibilityId: cpp.Int32;
	public var CustomDepthStencilValue: cpp.Int32;
	public var CustomPrimitiveData: FCustomPrimitiveData;
	public var CustomPrimitiveDataInternal: FCustomPrimitiveData;
	public var TranslucencySortPriority: cpp.Int32;
	public var TranslucencySortDistanceOffset: cpp.Float32;
	public var RuntimeVirtualTextures: TArray<TObjectPtr<URuntimeVirtualTexture>>;
	public var VirtualTextureLodBias: cpp.Int8;
	public var VirtualTextureCullMips: cpp.Int8;
	public var VirtualTextureMinCoverage: cpp.Int8;
	public var VirtualTextureRenderPassType: ERuntimeVirtualTextureMainPassType;
	public var BoundsScale: cpp.Float32;
	public var MoveIgnoreActors: TArray<TObjectPtr<AActor>>;
	public var MoveIgnoreComponents: TArray<TObjectPtr<UPrimitiveComponent>>;
	public var BodyInstance: FBodyInstance;
	public var OnComponentHit: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>, cpp.Star<AActor>, cpp.Star<UPrimitiveComponent>, FVector, FHitResult) -> Void>;
	public var OnComponentBeginOverlap: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>, cpp.Star<AActor>, cpp.Star<UPrimitiveComponent>, cpp.Int32, Bool, FHitResult) -> Void>;
	public var OnComponentEndOverlap: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>, cpp.Star<AActor>, cpp.Star<UPrimitiveComponent>, cpp.Int32) -> Void>;
	public var OnComponentWake: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>, FName) -> Void>;
	public var OnComponentSleep: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>, FName) -> Void>;
	public var OnBeginCursorOver: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>) -> Void>;
	public var OnEndCursorOver: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>) -> Void>;
	public var OnClicked: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>, FKey) -> Void>;
	public var OnReleased: HaxeMulticastSparseDelegateProperty<(cpp.Star<UPrimitiveComponent>, FKey) -> Void>;
	public var OnInputTouchBegin: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<UPrimitiveComponent>) -> Void>;
	public var OnInputTouchEnd: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<UPrimitiveComponent>) -> Void>;
	public var OnInputTouchEnter: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<UPrimitiveComponent>) -> Void>;
	public var OnInputTouchLeave: HaxeMulticastSparseDelegateProperty<(ETouchIndex, cpp.Star<UPrimitiveComponent>) -> Void>;
	public var RayTracingGroupCullingPriority: ERayTracingGroupCullingPriority;
	public var CustomDepthStencilWriteMask: ERendererStencilMask;
	public var LODParentPrimitive: TObjectPtr<UPrimitiveComponent>;

	public function WasRecentlyRendered(Tolerance: cpp.Float32): Bool;
	public function WakeRigidBody(BoneName: FName): Void;
	public function WakeAllRigidBodies(): Void;
	public function SetWalkableSlopeOverride(NewOverride: FWalkableSlopeOverride): Void;
	public function SetVisibleInSceneCaptureOnly(bValue: Bool): Void;
	public function SetVisibleInRayTracing(bNewVisibleInRayTracing: Bool): Void;
	public function SetVectorParameterForDefaultCustomPrimitiveData(ParameterName: FName, Value: FVector4): Void;
	public function SetVectorParameterForCustomPrimitiveData(ParameterName: FName, Value: FVector4): Void;
	public function SetUseCCD(InUseCCD: Bool, BoneName: FName): Void;
	public function SetTranslucentSortPriority(NewTranslucentSortPriority: cpp.Int32): Void;
	public function SetTranslucencySortDistanceOffset(NewTranslucencySortDistanceOffset: cpp.Float32): Void;
	public function SetSingleSampleShadowFromStationaryLights(bNewSingleSampleShadowFromStationaryLights: Bool): Void;
	public function SetSimulatePhysics(bSimulate: Bool): Void;
	public function SetScalarParameterForDefaultCustomPrimitiveData(ParameterName: FName, Value: cpp.Float32): Void;
	public function SetScalarParameterForCustomPrimitiveData(ParameterName: FName, Value: cpp.Float32): Void;
	public function SetRenderInMainPass(bValue: Bool): Void;
	public function SetRenderInDepthPass(bValue: Bool): Void;
	public function SetRenderCustomDepth(bValue: Bool): Void;
	public function SetReceivesDecals(bNewReceivesDecals: Bool): Void;
	public function SetPhysMaterialOverride(NewPhysMaterial: cpp.Star<UPhysicalMaterial>): Void;
	public function SetPhysicsMaxAngularVelocityInRadians(NewMaxAngVel: cpp.Float32, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsMaxAngularVelocityInDegrees(NewMaxAngVel: cpp.Float32, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsLinearVelocity(NewVel: FVector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsAngularVelocityInRadians(NewAngVel: FVector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetPhysicsAngularVelocityInDegrees(NewAngVel: FVector, bAddToCurrent: Bool, BoneName: FName): Void;
	public function SetOwnerNoSee(bNewOwnerNoSee: Bool): Void;
	public function SetOnlyOwnerSee(bNewOnlyOwnerSee: Bool): Void;
	public function SetNotifyRigidBodyCollision(bNewNotifyRigidBodyCollision: Bool): Void;
	public function SetMaterialByName(MaterialSlotName: FName, Material: cpp.Star<UMaterialInterface>): Void;
	public function SetMaterial(ElementIndex: cpp.Int32, Material: cpp.Star<UMaterialInterface>): Void;
	public function SetMassScale(BoneName: FName, InMassScale: cpp.Float32): Void;
	public function SetMassOverrideInKg(BoneName: FName, MassInKg: cpp.Float32, bOverrideMass: Bool): Void;
	public function SetLinearDamping(InDamping: cpp.Float32): Void;
	public function SetLightingChannels(bChannel0: Bool, bChannel1: Bool, bChannel2: Bool): Void;
	public function SetLightAttachmentsAsGroup(bInLightAttachmentsAsGroup: Bool): Void;
	public function SetHiddenInSceneCapture(bValue: Bool): Void;
	public function SetGenerateOverlapEvents(bInGenerateOverlapEvents: Bool): Void;
	public function SetExcludeFromLightAttachmentGroup(bInExcludeFromLightAttachmentGroup: Bool): Void;
	public function SetEnableGravity(bGravityEnabled: Bool): Void;
	public function SetEmissiveLightSource(NewEmissiveLightSource: Bool): Void;
	public function SetDefaultCustomPrimitiveDataVector4(DataIndex: cpp.Int32, Value: FVector4): Void;
	public function SetDefaultCustomPrimitiveDataVector3(DataIndex: cpp.Int32, Value: FVector): Void;
	public function SetDefaultCustomPrimitiveDataVector2(DataIndex: cpp.Int32, Value: FVector2D): Void;
	public function SetDefaultCustomPrimitiveDataFloat(DataIndex: cpp.Int32, Value: cpp.Float32): Void;
	public function SetCustomPrimitiveDataVector4(DataIndex: cpp.Int32, Value: FVector4): Void;
	public function SetCustomPrimitiveDataVector3(DataIndex: cpp.Int32, Value: FVector): Void;
	public function SetCustomPrimitiveDataVector2(DataIndex: cpp.Int32, Value: FVector2D): Void;
	public function SetCustomPrimitiveDataFloat(DataIndex: cpp.Int32, Value: cpp.Float32): Void;
	public function SetCustomDepthStencilWriteMask(WriteMaskBit: ERendererStencilMask): Void;
	public function SetCustomDepthStencilValue(Value: cpp.Int32): Void;
	public function SetCullDistance(NewCullDistance: cpp.Float32): Void;
	public function SetConstraintMode(ConstraintMode: EDOFMode): Void;
	public function SetCollisionResponseToChannel(Channel: ECollisionChannel, NewResponse: ECollisionResponse): Void;
	public function SetCollisionResponseToAllChannels(NewResponse: ECollisionResponse): Void;
	public function SetCollisionProfileName(InCollisionProfileName: FName, bUpdateOverlaps: Bool): Void;
	public function SetCollisionObjectType(Channel: ECollisionChannel): Void;
	public function SetCollisionEnabled(NewType: ECollisionEnabled): Void;
	public function SetCenterOfMass(CenterOfMassOffset: FVector, BoneName: FName): Void;
	public function SetCastShadow(NewCastShadow: Bool): Void;
	public function SetCastInsetShadow(bInCastInsetShadow: Bool): Void;
	public function SetCastHiddenShadow(NewCastHiddenShadow: Bool): Void;
	public function SetCastContactShadow(bInCastContactShadow: Bool): Void;
	public function SetBoundsScale(NewBoundsScale: cpp.Float32): Void;
	public function SetAngularDamping(InDamping: cpp.Float32): Void;
	public function SetAllUseCCD(InUseCCD: Bool): Void;
	public function SetAllPhysicsLinearVelocity(NewVel: FVector, bAddToCurrent: Bool): Void;
	public function SetAllPhysicsAngularVelocityInRadians(NewAngVel: FVector, bAddToCurrent: Bool): Void;
	public function SetAllPhysicsAngularVelocityInDegrees(NewAngVel: FVector, bAddToCurrent: Bool): Void;
	public function SetAllMassScale(InMassScale: cpp.Float32): Void;
	public function ScaleByMomentOfInertia(InputVector: FVector, BoneName: FName): FVector;
	public function PutRigidBodyToSleep(BoneName: FName): Void;
	public function K2_SphereTraceComponent(TraceStart: FVector, TraceEnd: FVector, SphereRadius: cpp.Float32, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: FVector, HitNormal: FVector, BoneName: cpp.Reference<FName>, OutHit: FHitResult): Bool;
	public function K2_SphereOverlapComponent(InSphereCentre: FVector, InSphereRadius: cpp.Float32, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: FVector, HitNormal: FVector, BoneName: cpp.Reference<FName>, OutHit: FHitResult): Bool;
	public function K2_LineTraceComponent(TraceStart: FVector, TraceEnd: FVector, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: FVector, HitNormal: FVector, BoneName: cpp.Reference<FName>, OutHit: FHitResult): Bool;
	public function K2_IsQueryCollisionEnabled(): Bool;
	public function K2_IsPhysicsCollisionEnabled(): Bool;
	public function K2_IsCollisionEnabled(): Bool;
	public function K2_BoxOverlapComponent(InBoxCentre: FVector, InBox: FBox, bTraceComplex: Bool, bShowTrace: Bool, bPersistentShowTrace: Bool, HitLocation: FVector, HitNormal: FVector, BoneName: cpp.Reference<FName>, OutHit: FHitResult): Bool;
	public function IsOverlappingComponent(OtherComp: cpp.Star<UPrimitiveComponent>): Bool;
	public function IsOverlappingActor(Other: cpp.Star<AActor>): Bool;
	public function IsGravityEnabled(): Bool;
	public function IsAnyRigidBodyAwake(): Bool;
	public function IgnoreComponentWhenMoving(Component: cpp.Star<UPrimitiveComponent>, bShouldIgnore: Bool): Void;
	public function IgnoreActorWhenMoving(Actor: cpp.Star<AActor>, bShouldIgnore: Bool): Void;
	public function GetWalkableSlopeOverride(): FWalkableSlopeOverride;
	public function GetPhysicsLinearVelocityAtPoint(Point: FVector, BoneName: FName): FVector;
	public function GetPhysicsLinearVelocity(BoneName: FName): FVector;
	public function GetPhysicsAngularVelocityInRadians(BoneName: FName): FVector;
	public function GetPhysicsAngularVelocityInDegrees(BoneName: FName): FVector;
	public function GetOverlappingComponents(OutOverlappingComponents: TArray<cpp.Star<UPrimitiveComponent>>): Void;
	public function GetOverlappingActors(OverlappingActors: TArray<cpp.Star<AActor>>, ClassFilter: TSubclassOf<AActor>): Void;
	public function GetNumMaterials(): cpp.Int32;
	public function GetMaterialFromCollisionFaceIndex(FaceIndex: cpp.Int32, SectionIndex: cpp.Reference<cpp.Int32>): cpp.Star<UMaterialInterface>;
	public function GetMaterial(ElementIndex: cpp.Int32): cpp.Star<UMaterialInterface>;
	public function GetMassScale(BoneName: FName): cpp.Float32;
	public function GetMass(): cpp.Float32;
	public function GetLinearDamping(): cpp.Float32;
	public function GetInertiaTensor(BoneName: FName): FVector;
	public function GetGenerateOverlapEvents(): Bool;
	public function GetCustomPrimitiveDataIndexForVectorParameter(ParameterName: FName): cpp.Int32;
	public function GetCustomPrimitiveDataIndexForScalarParameter(ParameterName: FName): cpp.Int32;
	public function GetCollisionResponseToChannel(Channel: ECollisionChannel): ECollisionResponse;
	public function GetCollisionProfileName(): FName;
	public function GetCollisionObjectType(): ECollisionChannel;
	public function GetCollisionEnabled(): ECollisionEnabled;
	public function GetClosestPointOnCollision(Point: FVector, OutPointOnBody: FVector, BoneName: FName): cpp.Float32;
	public function GetCenterOfMass(BoneName: FName): FVector;
	public function GetAngularDamping(): cpp.Float32;
	public function CreateDynamicMaterialInstance(ElementIndex: cpp.Int32, SourceMaterial: cpp.Star<UMaterialInterface>, OptionalName: FName): cpp.Star<UMaterialInstanceDynamic>;
	public function CreateAndSetMaterialInstanceDynamicFromMaterial(ElementIndex: cpp.Int32, Parent: cpp.Star<UMaterialInterface>): cpp.Star<UMaterialInstanceDynamic>;
	public function CreateAndSetMaterialInstanceDynamic(ElementIndex: cpp.Int32): cpp.Star<UMaterialInstanceDynamic>;
	public function CopyArrayOfMoveIgnoreComponents(): TArray<cpp.Star<UPrimitiveComponent>>;
	public function CopyArrayOfMoveIgnoreActors(): TArray<cpp.Star<AActor>>;
	public function ClearMoveIgnoreComponents(): Void;
	public function ClearMoveIgnoreActors(): Void;
	public function CanCharacterStepUp(Pawn: cpp.Star<APawn>): Bool;
	public function AddVelocityChangeImpulseAtLocation(Impulse: FVector, Location: FVector, BoneName: FName): Void;
	public function AddTorqueInRadians(Torque: FVector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddTorqueInDegrees(Torque: FVector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddRadialImpulse(Origin: FVector, Radius: cpp.Float32, Strength: cpp.Float32, Falloff: ERadialImpulseFalloff, bVelChange: Bool): Void;
	public function AddRadialForce(Origin: FVector, Radius: cpp.Float32, Strength: cpp.Float32, Falloff: ERadialImpulseFalloff, bAccelChange: Bool): Void;
	public function AddImpulseAtLocation(Impulse: FVector, Location: FVector, BoneName: FName): Void;
	public function AddImpulse(Impulse: FVector, BoneName: FName, bVelChange: Bool): Void;
	public function AddForceAtLocationLocal(Force: FVector, Location: FVector, BoneName: FName): Void;
	public function AddForceAtLocation(Force: FVector, Location: FVector, BoneName: FName): Void;
	public function AddForce(Force: FVector, BoneName: FName, bAccelChange: Bool): Void;
	public function AddAngularImpulseInRadians(Impulse: FVector, BoneName: FName, bVelChange: Bool): Void;
	public function AddAngularImpulseInDegrees(Impulse: FVector, BoneName: FName, bVelChange: Bool): Void;
}
