// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UTextureFactory")
@:include("Factories/TextureFactory.h")
@:structAccess
extern class TextureFactory extends Factory {
	public var NoCompression: Bool;
	public var NoAlpha: Bool;
	public var bDeferCompression: Bool;
	public var CompressionSettings: TextureCompressionSettings;
	public var bCreateMaterial: Bool;
	public var bRGBToBaseColor: Bool;
	public var bRGBToEmissive: Bool;
	public var bAlphaToRoughness: Bool;
	public var bAlphaToEmissive: Bool;
	public var bAlphaToOpacity: Bool;
	public var bAlphaToOpacityMask: Bool;
	public var bTwoSided: Bool;
	public var Blending: EBlendMode;
	public var ShadingModel: EMaterialShadingModel;
	public var MipGenSettings: TextureMipGenSettings;
	public var LODGroup: TextureGroup;
	public var bDitherMipMapAlpha: Bool;
	public var bDoScaleMipsForAlphaCoverage: Bool;
	public var AlphaCoverageThresholds: Vector4;
	public var bPreserveBorder: Bool;
	public var bFlipNormalMapGreenChannel: Bool;
	public var bUsingExistingSettings: Bool;
	public var bUseHashAsGuid: Bool;
	public var UdimRegexPattern: FString;
	public var ColorSpaceMode: ETextureSourceColorSpace;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstTextureFactory(TextureFactory) from TextureFactory {
	public extern var NoCompression(get, never): Bool;
	public inline extern function get_NoCompression(): Bool return this.NoCompression;
	public extern var NoAlpha(get, never): Bool;
	public inline extern function get_NoAlpha(): Bool return this.NoAlpha;
	public extern var bDeferCompression(get, never): Bool;
	public inline extern function get_bDeferCompression(): Bool return this.bDeferCompression;
	public extern var CompressionSettings(get, never): TextureCompressionSettings;
	public inline extern function get_CompressionSettings(): TextureCompressionSettings return this.CompressionSettings;
	public extern var bCreateMaterial(get, never): Bool;
	public inline extern function get_bCreateMaterial(): Bool return this.bCreateMaterial;
	public extern var bRGBToBaseColor(get, never): Bool;
	public inline extern function get_bRGBToBaseColor(): Bool return this.bRGBToBaseColor;
	public extern var bRGBToEmissive(get, never): Bool;
	public inline extern function get_bRGBToEmissive(): Bool return this.bRGBToEmissive;
	public extern var bAlphaToRoughness(get, never): Bool;
	public inline extern function get_bAlphaToRoughness(): Bool return this.bAlphaToRoughness;
	public extern var bAlphaToEmissive(get, never): Bool;
	public inline extern function get_bAlphaToEmissive(): Bool return this.bAlphaToEmissive;
	public extern var bAlphaToOpacity(get, never): Bool;
	public inline extern function get_bAlphaToOpacity(): Bool return this.bAlphaToOpacity;
	public extern var bAlphaToOpacityMask(get, never): Bool;
	public inline extern function get_bAlphaToOpacityMask(): Bool return this.bAlphaToOpacityMask;
	public extern var bTwoSided(get, never): Bool;
	public inline extern function get_bTwoSided(): Bool return this.bTwoSided;
	public extern var Blending(get, never): EBlendMode;
	public inline extern function get_Blending(): EBlendMode return this.Blending;
	public extern var ShadingModel(get, never): EMaterialShadingModel;
	public inline extern function get_ShadingModel(): EMaterialShadingModel return this.ShadingModel;
	public extern var MipGenSettings(get, never): TextureMipGenSettings;
	public inline extern function get_MipGenSettings(): TextureMipGenSettings return this.MipGenSettings;
	public extern var LODGroup(get, never): TextureGroup;
	public inline extern function get_LODGroup(): TextureGroup return this.LODGroup;
	public extern var bDitherMipMapAlpha(get, never): Bool;
	public inline extern function get_bDitherMipMapAlpha(): Bool return this.bDitherMipMapAlpha;
	public extern var bDoScaleMipsForAlphaCoverage(get, never): Bool;
	public inline extern function get_bDoScaleMipsForAlphaCoverage(): Bool return this.bDoScaleMipsForAlphaCoverage;
	public extern var AlphaCoverageThresholds(get, never): Vector4;
	public inline extern function get_AlphaCoverageThresholds(): Vector4 return this.AlphaCoverageThresholds;
	public extern var bPreserveBorder(get, never): Bool;
	public inline extern function get_bPreserveBorder(): Bool return this.bPreserveBorder;
	public extern var bFlipNormalMapGreenChannel(get, never): Bool;
	public inline extern function get_bFlipNormalMapGreenChannel(): Bool return this.bFlipNormalMapGreenChannel;
	public extern var bUsingExistingSettings(get, never): Bool;
	public inline extern function get_bUsingExistingSettings(): Bool return this.bUsingExistingSettings;
	public extern var bUseHashAsGuid(get, never): Bool;
	public inline extern function get_bUseHashAsGuid(): Bool return this.bUseHashAsGuid;
	public extern var UdimRegexPattern(get, never): FString;
	public inline extern function get_UdimRegexPattern(): FString return this.UdimRegexPattern;
	public extern var ColorSpaceMode(get, never): ETextureSourceColorSpace;
	public inline extern function get_ColorSpaceMode(): ETextureSourceColorSpace return this.ColorSpaceMode;
}

@:forward
@:nativeGen
@:native("TextureFactory*")
abstract TextureFactoryPtr(cpp.Star<TextureFactory>) from cpp.Star<TextureFactory> to cpp.Star<TextureFactory>{
	@:from
	public static extern inline function fromValue(v: TextureFactory): TextureFactoryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): TextureFactory {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}