// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditableText")
@:include("Components/EditableText.h")
extern class UEditableText extends UWidget {
	public var Text: FText;
	public var TextDelegate: HaxeDelegateProperty<() -> Void>;
	public var HintText: FText;
	public var HintTextDelegate: HaxeDelegateProperty<() -> Void>;
	public var WidgetStyle: FEditableTextStyle;
	public var Style_DEPRECATED: TObjectPtr<USlateWidgetStyleAsset>;
	public var BackgroundImageSelected_DEPRECATED: TObjectPtr<USlateBrushAsset>;
	public var BackgroundImageComposing_DEPRECATED: TObjectPtr<USlateBrushAsset>;
	public var CaretImage_DEPRECATED: TObjectPtr<USlateBrushAsset>;
	public var Font_DEPRECATED: FSlateFontInfo;
	public var ColorAndOpacity_DEPRECATED: FSlateColor;
	public var IsReadOnly: Bool;
	public var IsPassword: Bool;
	public var MinimumDesiredWidth: cpp.Float32;
	public var IsCaretMovedWhenGainFocus: Bool;
	public var SelectAllTextWhenFocused: Bool;
	public var RevertTextOnEscape: Bool;
	public var ClearKeyboardFocusOnCommit: Bool;
	public var SelectAllTextOnCommit: Bool;
	public var AllowContextMenu: Bool;
	public var KeyboardType: EVirtualKeyboardType;
	public var VirtualKeyboardOptions: FVirtualKeyboardOptions;
	public var VirtualKeyboardTrigger: EVirtualKeyboardTrigger;
	public var VirtualKeyboardDismissAction: EVirtualKeyboardDismissAction;
	public var Justification: ETextJustify;
	public var OverflowPolicy: ETextOverflowPolicy;
	public var ShapedTextOptions: FShapedTextOptions;
	public var OnTextChanged: HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>) -> Void>;
	public var OnTextCommitted: HaxeMulticastSparseDelegateProperty<(cpp.Reference<FText>, ETextCommit) -> Void>;

	public function SetTextOverflowPolicy(InOverflowPolicy: ETextOverflowPolicy): Void;
	public function SetText(InText: FText): Void;
	public function SetJustification(InJustification: ETextJustify): Void;
	public function SetIsReadOnly(InbIsReadyOnly: Bool): Void;
	public function SetIsPassword(InbIsPassword: Bool): Void;
	public function SetHintText(InHintText: FText): Void;
	public function OnEditableTextCommittedEvent__DelegateSignature(Text: cpp.Reference<FText>, CommitMethod: ETextCommit): Void;
	public function OnEditableTextChangedEvent__DelegateSignature(Text: cpp.Reference<FText>): Void;
	public function GetText(): FText;
}
