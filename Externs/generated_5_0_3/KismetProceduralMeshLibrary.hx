// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetProceduralMeshLibrary")
@:include("KismetProceduralMeshLibrary.h")
@:structAccess
extern class KismetProceduralMeshLibrary extends BlueprintFunctionLibrary {
	public function SliceProceduralMesh(InProcMesh: cpp.Star<ProceduralMeshComp>, PlanePosition: Vector, PlaneNormal: Vector, bCreateOtherHalf: Bool, OutOtherHalfProcMesh: cpp.Reference<cpp.Star<ProceduralMeshComp>>, CapOption: EProcMeshSliceCapOption, CapMaterial: cpp.Star<MaterialInterface>): Void;
	public function GetSectionFromStaticMesh(InMesh: cpp.Star<StaticMesh>, LODIndex: cpp.Int32, SectionIndex: cpp.Int32, Vertices: cpp.Reference<TArray<Vector>>, Triangles: cpp.Reference<TArray<cpp.Int32>>, Normals: cpp.Reference<TArray<Vector>>, UVs: cpp.Reference<TArray<Vector2D>>, Tangents: cpp.Reference<TArray<ProcMeshTangent>>): Void;
	public function GetSectionFromProceduralMesh(InProcMesh: cpp.Star<ProceduralMeshComp>, SectionIndex: cpp.Int32, Vertices: cpp.Reference<TArray<Vector>>, Triangles: cpp.Reference<TArray<cpp.Int32>>, Normals: cpp.Reference<TArray<Vector>>, UVs: cpp.Reference<TArray<Vector2D>>, Tangents: cpp.Reference<TArray<ProcMeshTangent>>): Void;
	public function GenerateBoxMesh(BoxRadius: Vector, Vertices: cpp.Reference<TArray<Vector>>, Triangles: cpp.Reference<TArray<cpp.Int32>>, Normals: cpp.Reference<TArray<Vector>>, UVs: cpp.Reference<TArray<Vector2D>>, Tangents: cpp.Reference<TArray<ProcMeshTangent>>): Void;
	public function CreateGridMeshWelded(NumX: cpp.Int32, NumY: cpp.Int32, Triangles: cpp.Reference<TArray<cpp.Int32>>, Vertices: cpp.Reference<TArray<Vector>>, UVs: cpp.Reference<TArray<Vector2D>>, GridSpacing: cpp.Float32): Void;
	public function CreateGridMeshTriangles(NumX: cpp.Int32, NumY: cpp.Int32, bWinding: Bool, Triangles: cpp.Reference<TArray<cpp.Int32>>): Void;
	public function CreateGridMeshSplit(NumX: cpp.Int32, NumY: cpp.Int32, Triangles: cpp.Reference<TArray<cpp.Int32>>, Vertices: cpp.Reference<TArray<Vector>>, UVs: cpp.Reference<TArray<Vector2D>>, UV1s: cpp.Reference<TArray<Vector2D>>, GridSpacing: cpp.Float32): Void;
	public function CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: cpp.Star<StaticMeshComp>, LODIndex: cpp.Int32, ProcMeshComponent: cpp.Star<ProceduralMeshComp>, bCreateCollision: Bool): Void;
	public function ConvertQuadToTriangles(Triangles: cpp.Reference<TArray<cpp.Int32>>, Vert0: cpp.Int32, Vert1: cpp.Int32, Vert2: cpp.Int32, Vert3: cpp.Int32): Void;
	public function CalculateTangentsForMesh(Vertices: cpp.Reference<TArray<Vector>>, Triangles: cpp.Reference<TArray<cpp.Int32>>, UVs: cpp.Reference<TArray<Vector2D>>, Normals: cpp.Reference<TArray<Vector>>, Tangents: cpp.Reference<TArray<ProcMeshTangent>>): Void;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstKismetProceduralMeshLibrary(KismetProceduralMeshLibrary) from KismetProceduralMeshLibrary {
}

@:forward
@:nativeGen
@:native("KismetProceduralMeshLibrary*")
abstract KismetProceduralMeshLibraryPtr(cpp.Star<KismetProceduralMeshLibrary>) from cpp.Star<KismetProceduralMeshLibrary> to cpp.Star<KismetProceduralMeshLibrary>{
	@:from
	public static extern inline function fromValue(v: KismetProceduralMeshLibrary): KismetProceduralMeshLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): KismetProceduralMeshLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}