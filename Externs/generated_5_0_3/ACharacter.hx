// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("ACharacter")
@:include("GameFramework/Character.h")
extern class ACharacter extends APawn {
	public var Mesh: TObjectPtr<USkeletalMeshComponent>;
	public var CharacterMovement: TObjectPtr<UCharacterMovementComponent>;
	public var CapsuleComponent: TObjectPtr<UCapsuleComponent>;
	public var ArrowComponent: TObjectPtr<UArrowComponent>;
	public var BasedMovement: FBasedMovementInfo;
	public var ReplicatedBasedMovement: FBasedMovementInfo;
	public var AnimRootMotionTranslationScale: cpp.Float32;
	public var BaseTranslationOffset: FVector;
	public var BaseRotationOffset: FQuat;
	public var ReplicatedServerLastTransformUpdateTimeStamp: cpp.Float32;
	public var ReplayLastTransformUpdateTimeStamp: cpp.Float32;
	public var ReplicatedMovementMode: cpp.UInt8;
	public var bInBaseReplication: Bool;
	public var CrouchedEyeHeight: cpp.Float32;
	public var bIsCrouched: Bool;
	public var bProxyIsJumpForceApplied: Bool;
	public var bPressedJump: Bool;
	public var bClientUpdating: Bool;
	public var bClientWasFalling: Bool;
	public var bClientResimulateRootMotion: Bool;
	public var bClientResimulateRootMotionSources: Bool;
	public var bSimGravityDisabled: Bool;
	public var bClientCheckEncroachmentOnNetUpdate: Bool;
	public var bServerMoveIgnoreRootMotion: Bool;
	public var bWasJumping: Bool;
	public var JumpKeyHoldTime: cpp.Float32;
	public var JumpForceTimeRemaining: cpp.Float32;
	public var ProxyJumpForceStartedTime: cpp.Float32;
	public var JumpMaxHoldTime: cpp.Float32;
	public var JumpMaxCount: cpp.Int32;
	public var JumpCurrentCount: cpp.Int32;
	public var JumpCurrentCountPreJump: cpp.Int32;
	public var OnReachedJumpApex: HaxeMulticastSparseDelegateProperty<() -> Void>;
	public var MovementModeChangedDelegate: HaxeMulticastSparseDelegateProperty<(cpp.Star<ACharacter>, EMovementMode, cpp.UInt8) -> Void>;
	public var OnCharacterMovementUpdated: HaxeMulticastSparseDelegateProperty<(cpp.Float32, FVector, FVector) -> Void>;
	public var SavedRootMotion: FRootMotionSourceGroup;
	public var ClientRootMotionParams: FRootMotionMovementParams;
	public var RootMotionRepMoves: TArray<FSimulatedRootMotionReplicatedMove>;
	public var RepRootMotion: FRepRootMotionMontage;

	public function UnCrouch(bClientSimulation: Bool): Void;
	public function StopJumping(): Void;
	public function StopAnimMontage(AnimMontage: cpp.Star<UAnimMontage>): Void;
	public function ServerMovePacked(PackedBits: FCharacterServerMovePackedBits): Void;
	public function ServerMoveOld(OldTimeStamp: cpp.Float32, OldAccel: FVector_NetQuantize10, OldMoveFlags: cpp.UInt8): Void;
	public function ServerMoveNoBase(TimeStamp: cpp.Float32, InAccel: FVector_NetQuantize10, ClientLoc: FVector_NetQuantize100, CompressedMoveFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementMode: cpp.UInt8): Void;
	public function ServerMoveDualNoBase(TimeStamp0: cpp.Float32, InAccel0: FVector_NetQuantize10, PendingFlags: cpp.UInt8, View0: cpp.UInt32, TimeStamp: cpp.Float32, InAccel: FVector_NetQuantize10, ClientLoc: FVector_NetQuantize100, NewFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementMode: cpp.UInt8): Void;
	public function ServerMoveDualHybridRootMotion(TimeStamp0: cpp.Float32, InAccel0: FVector_NetQuantize10, PendingFlags: cpp.UInt8, View0: cpp.UInt32, TimeStamp: cpp.Float32, InAccel: FVector_NetQuantize10, ClientLoc: FVector_NetQuantize100, NewFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementBase: cpp.Star<UPrimitiveComponent>, ClientBaseBoneName: FName, ClientMovementMode: cpp.UInt8): Void;
	public function ServerMoveDual(TimeStamp0: cpp.Float32, InAccel0: FVector_NetQuantize10, PendingFlags: cpp.UInt8, View0: cpp.UInt32, TimeStamp: cpp.Float32, InAccel: FVector_NetQuantize10, ClientLoc: FVector_NetQuantize100, NewFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementBase: cpp.Star<UPrimitiveComponent>, ClientBaseBoneName: FName, ClientMovementMode: cpp.UInt8): Void;
	public function ServerMove(TimeStamp: cpp.Float32, InAccel: FVector_NetQuantize10, ClientLoc: FVector_NetQuantize100, CompressedMoveFlags: cpp.UInt8, ClientRoll: cpp.UInt8, View: cpp.UInt32, ClientMovementBase: cpp.Star<UPrimitiveComponent>, ClientBaseBoneName: FName, ClientMovementMode: cpp.UInt8): Void;
	public function RootMotionDebugClientPrintOnScreen(InString: FString): Void;
	public function PlayAnimMontage(AnimMontage: cpp.Star<UAnimMontage>, InPlayRate: cpp.Float32, StartSectionName: FName): cpp.Float32;
	public function OnWalkingOffLedge(PreviousFloorImpactNormal: FVector, PreviousFloorContactNormal: FVector, PreviousLocation: FVector, TimeDelta: cpp.Float32): Void;
	public function OnRep_RootMotion(): Void;
	public function OnRep_ReplicatedBasedMovement(): Void;
	public function OnRep_ReplayLastTransformUpdateTimeStamp(): Void;
	public function OnRep_IsCrouched(): Void;
	public function OnLaunched(LaunchVelocity: FVector, bXYOverride: Bool, bZOverride: Bool): Void;
	public function OnLanded(Hit: FHitResult): Void;
	public function OnJumped(): Void;
	public function LaunchCharacter(LaunchVelocity: FVector, bXYOverride: Bool, bZOverride: Bool): Void;
	public function K2_UpdateCustomMovement(DeltaTime: cpp.Float32): Void;
	public function K2_OnStartCrouch(HalfHeightAdjust: cpp.Float32, ScaledHalfHeightAdjust: cpp.Float32): Void;
	public function K2_OnMovementModeChanged(PrevMovementMode: EMovementMode, NewMovementMode: EMovementMode, PrevCustomMode: cpp.UInt8, NewCustomMode: cpp.UInt8): Void;
	public function K2_OnEndCrouch(HalfHeightAdjust: cpp.Float32, ScaledHalfHeightAdjust: cpp.Float32): Void;
	public function Jump(): Void;
	public function IsPlayingRootMotion(): Bool;
	public function IsPlayingNetworkedRootMotionMontage(): Bool;
	public function IsJumpProvidingForce(): Bool;
	public function HasAnyRootMotion(): Bool;
	public function GetCurrentMontage(): cpp.Star<UAnimMontage>;
	public function GetBaseTranslationOffset(): FVector;
	public function GetBaseRotationOffsetRotator(): FRotator;
	public function GetAnimRootMotionTranslationScale(): cpp.Float32;
	public function Crouch(bClientSimulation: Bool): Void;
	public function ClientVeryShortAdjustPosition(TimeStamp: cpp.Float32, NewLoc: FVector, NewBase: cpp.Star<UPrimitiveComponent>, NewBaseBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: cpp.UInt8): Void;
	public function ClientMoveResponsePacked(PackedBits: FCharacterMoveResponsePackedBits): Void;
	public function ClientCheatWalk(): Void;
	public function ClientCheatGhost(): Void;
	public function ClientCheatFly(): Void;
	public function ClientAdjustRootMotionSourcePosition(TimeStamp: cpp.Float32, ServerRootMotion: FRootMotionSourceGroup, bHasAnimRootMotion: Bool, ServerMontageTrackPosition: cpp.Float32, ServerLoc: FVector, ServerRotation: FVector_NetQuantizeNormal, ServerVelZ: cpp.Float32, ServerBase: cpp.Star<UPrimitiveComponent>, ServerBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: cpp.UInt8): Void;
	public function ClientAdjustRootMotionPosition(TimeStamp: cpp.Float32, ServerMontageTrackPosition: cpp.Float32, ServerLoc: FVector, ServerRotation: FVector_NetQuantizeNormal, ServerVelZ: cpp.Float32, ServerBase: cpp.Star<UPrimitiveComponent>, ServerBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: cpp.UInt8): Void;
	public function ClientAdjustPosition(TimeStamp: cpp.Float32, NewLoc: FVector, NewVel: FVector, NewBase: cpp.Star<UPrimitiveComponent>, NewBaseBoneName: FName, bHasBase: Bool, bBaseRelativePosition: Bool, ServerMovementMode: cpp.UInt8): Void;
	public function ClientAckGoodMove(TimeStamp: cpp.Float32): Void;
	public function CanJumpInternal(): Bool;
	public function CanJump(): Bool;
	public function CanCrouch(): Bool;
	public function CacheInitialMeshOffset(MeshRelativeLocation: FVector, MeshRelativeRotation: FRotator): Void;
}
