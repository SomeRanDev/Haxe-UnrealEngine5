// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetAnimationLibrary")
@:include("KismetAnimationLibrary.h")
extern class UKismetAnimationLibrary extends UBlueprintFunctionLibrary {

	public function K2_TwoBoneIK(RootPos: FVector, JointPos: FVector, EndPos: FVector, JointTarget: FVector, Effector: FVector, OutJointPos: FVector, OutEndPos: FVector, bAllowStretching: Bool, StartStretchRatio: cpp.Float32, MaxStretchScale: cpp.Float32): Void;
	public function K2_StartProfilingTimer(): Void;
	public function K2_MakePerlinNoiseVectorAndRemap(X: cpp.Float32, Y: cpp.Float32, Z: cpp.Float32, RangeOutMinX: cpp.Float32, RangeOutMaxX: cpp.Float32, RangeOutMinY: cpp.Float32, RangeOutMaxY: cpp.Float32, RangeOutMinZ: cpp.Float32, RangeOutMaxZ: cpp.Float32): FVector;
	public function K2_MakePerlinNoiseAndRemap(Value: cpp.Float32, RangeOutMin: cpp.Float32, RangeOutMax: cpp.Float32): cpp.Float32;
	public function K2_LookAt(CurrentTransform: FTransform, TargetPosition: FVector, LookAtVector: FVector, bUseUpVector: Bool, UpVector: FVector, ClampConeInDegree: cpp.Float32): FTransform;
	public function K2_EndProfilingTimer(bLog: Bool, LogPrefix: FString): cpp.Float32;
	public function K2_DistanceBetweenTwoSocketsAndMapRange(Component: cpp.Star<USkeletalMeshComponent>, SocketOrBoneNameA: FName, SocketSpaceA: ERelativeTransformSpace, SocketOrBoneNameB: FName, SocketSpaceB: ERelativeTransformSpace, bRemapRange: Bool, InRangeMin: cpp.Float32, InRangeMax: cpp.Float32, OutRangeMin: cpp.Float32, OutRangeMax: cpp.Float32): cpp.Float32;
	public function K2_DirectionBetweenSockets(Component: cpp.Star<USkeletalMeshComponent>, SocketOrBoneNameFrom: FName, SocketOrBoneNameTo: FName): FVector;
	public function K2_CalculateVelocityFromSockets(DeltaSeconds: cpp.Float32, Component: cpp.Star<USkeletalMeshComponent>, SocketOrBoneName: FName, ReferenceSocketOrBone: FName, SocketSpace: ERelativeTransformSpace, OffsetInBoneSpace: FVector, History: FPositionHistory, NumberOfSamples: cpp.Int32, VelocityMin: cpp.Float32, VelocityMax: cpp.Float32, EasingType: EEasingFuncType, CustomCurve: FRuntimeFloatCurve): cpp.Float32;
	public function K2_CalculateVelocityFromPositionHistory(DeltaSeconds: cpp.Float32, Position: FVector, History: FPositionHistory, NumberOfSamples: cpp.Int32, VelocityMin: cpp.Float32, VelocityMax: cpp.Float32): cpp.Float32;
	public function CalculateDirection(Velocity: FVector, BaseRotation: FRotator): cpp.Float32;
}
