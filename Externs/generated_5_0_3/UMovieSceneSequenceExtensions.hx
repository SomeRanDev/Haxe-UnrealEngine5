// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMovieSceneSequenceExtensions")
@:include("ExtensionLibraries/MovieSceneSequenceExtensions.h")
extern class UMovieSceneSequenceExtensions extends UBlueprintFunctionLibrary {

	public function SortMarkedFrames(Sequence: cpp.Star<UMovieSceneSequence>): Void;
	public function SetWorkRangeStart(InSequence: cpp.Star<UMovieSceneSequence>, StartTimeInSeconds: cpp.Float32): Void;
	public function SetWorkRangeEnd(InSequence: cpp.Star<UMovieSceneSequence>, EndTimeInSeconds: cpp.Float32): Void;
	public function SetViewRangeStart(InSequence: cpp.Star<UMovieSceneSequence>, StartTimeInSeconds: cpp.Float32): Void;
	public function SetViewRangeEnd(InSequence: cpp.Star<UMovieSceneSequence>, EndTimeInSeconds: cpp.Float32): Void;
	public function SetTickResolutionDirectly(Sequence: cpp.Star<UMovieSceneSequence>, TickResolution: FFrameRate): Void;
	public function SetTickResolution(Sequence: cpp.Star<UMovieSceneSequence>, TickResolution: FFrameRate): Void;
	public function SetReadOnly(Sequence: cpp.Star<UMovieSceneSequence>, bInReadOnly: Bool): Void;
	public function SetPlaybackStartSeconds(Sequence: cpp.Star<UMovieSceneSequence>, StartTime: cpp.Float32): Void;
	public function SetPlaybackStart(Sequence: cpp.Star<UMovieSceneSequence>, StartFrame: cpp.Int32): Void;
	public function SetPlaybackEndSeconds(Sequence: cpp.Star<UMovieSceneSequence>, EndTime: cpp.Float32): Void;
	public function SetPlaybackEnd(Sequence: cpp.Star<UMovieSceneSequence>, EndFrame: cpp.Int32): Void;
	public function SetMarkedFrame(Sequence: cpp.Star<UMovieSceneSequence>, InMarkIndex: cpp.Int32, InFrameNumber: FFrameNumber): Void;
	public function SetEvaluationType(InSequence: cpp.Star<UMovieSceneSequence>, InEvaluationType: EMovieSceneEvaluationType): Void;
	public function SetDisplayRate(Sequence: cpp.Star<UMovieSceneSequence>, DisplayRate: FFrameRate): Void;
	public function SetClockSource(InSequence: cpp.Star<UMovieSceneSequence>, InClockSource: EUpdateClockSource): Void;
	public function ResolveBindingID(MasterSequence: cpp.Star<UMovieSceneSequence>, InObjectBindingID: FMovieSceneObjectBindingID): FSequencerBindingProxy;
	public function RemoveMasterTrack(Sequence: cpp.Star<UMovieSceneSequence>, MasterTrack: cpp.Star<UMovieSceneTrack>): Bool;
	public function MakeRangeSeconds(Sequence: cpp.Star<UMovieSceneSequence>, StartTime: cpp.Float32, Duration: cpp.Float32): FSequencerScriptingRange;
	public function MakeRange(Sequence: cpp.Star<UMovieSceneSequence>, StartFrame: cpp.Int32, Duration: cpp.Int32): FSequencerScriptingRange;
	public function MakeBindingID(MasterSequence: cpp.Star<UMovieSceneSequence>, InBinding: FSequencerBindingProxy, Space: EMovieSceneObjectBindingSpace): FMovieSceneObjectBindingID;
	public function LocateBoundObjects(Sequence: cpp.Star<UMovieSceneSequence>, InBinding: FSequencerBindingProxy, Context: cpp.Star<UObject>): TArray<cpp.Star<UObject>>;
	public function IsReadOnly(Sequence: cpp.Star<UMovieSceneSequence>): Bool;
	public function GetWorkRangeStart(InSequence: cpp.Star<UMovieSceneSequence>): cpp.Float32;
	public function GetWorkRangeEnd(InSequence: cpp.Star<UMovieSceneSequence>): cpp.Float32;
	public function GetViewRangeStart(InSequence: cpp.Star<UMovieSceneSequence>): cpp.Float32;
	public function GetViewRangeEnd(InSequence: cpp.Star<UMovieSceneSequence>): cpp.Float32;
	public function GetTimecodeSource(Sequence: cpp.Star<UMovieSceneSequence>): FTimecode;
	public function GetTickResolution(Sequence: cpp.Star<UMovieSceneSequence>): FFrameRate;
	public function GetSpawnables(Sequence: cpp.Star<UMovieSceneSequence>): TArray<FSequencerBindingProxy>;
	public function GetRootFoldersInSequence(Sequence: cpp.Star<UMovieSceneSequence>): TArray<cpp.Star<UMovieSceneFolder>>;
	public function GetPossessables(Sequence: cpp.Star<UMovieSceneSequence>): TArray<FSequencerBindingProxy>;
	public function GetPortableBindingID(MasterSequence: cpp.Star<UMovieSceneSequence>, DestinationSequence: cpp.Star<UMovieSceneSequence>, InBinding: FSequencerBindingProxy): FMovieSceneObjectBindingID;
	public function GetPlaybackStartSeconds(Sequence: cpp.Star<UMovieSceneSequence>): cpp.Float32;
	public function GetPlaybackStart(Sequence: cpp.Star<UMovieSceneSequence>): cpp.Int32;
	public function GetPlaybackRange(Sequence: cpp.Star<UMovieSceneSequence>): FSequencerScriptingRange;
	public function GetPlaybackEndSeconds(Sequence: cpp.Star<UMovieSceneSequence>): cpp.Float32;
	public function GetPlaybackEnd(Sequence: cpp.Star<UMovieSceneSequence>): cpp.Int32;
	public function GetMovieScene(Sequence: cpp.Star<UMovieSceneSequence>): cpp.Star<UMovieScene>;
	public function GetMasterTracks(Sequence: cpp.Star<UMovieSceneSequence>): TArray<cpp.Star<UMovieSceneTrack>>;
	public function GetMarkedFrames(Sequence: cpp.Star<UMovieSceneSequence>): TArray<FMovieSceneMarkedFrame>;
	public function GetEvaluationType(InSequence: cpp.Star<UMovieSceneSequence>): EMovieSceneEvaluationType;
	public function GetDisplayRate(Sequence: cpp.Star<UMovieSceneSequence>): FFrameRate;
	public function GetClockSource(InSequence: cpp.Star<UMovieSceneSequence>): EUpdateClockSource;
	public function GetBindings(Sequence: cpp.Star<UMovieSceneSequence>): TArray<FSequencerBindingProxy>;
	public function GetBindingID(InBinding: FSequencerBindingProxy): FMovieSceneObjectBindingID;
	public function FindNextMarkedFrame(Sequence: cpp.Star<UMovieSceneSequence>, InFrameNumber: FFrameNumber, bForward: Bool): cpp.Int32;
	public function FindMasterTracksByType(Sequence: cpp.Star<UMovieSceneSequence>, TrackType: TSubclassOf<UMovieSceneTrack>): TArray<cpp.Star<UMovieSceneTrack>>;
	public function FindMasterTracksByExactType(Sequence: cpp.Star<UMovieSceneSequence>, TrackType: TSubclassOf<UMovieSceneTrack>): TArray<cpp.Star<UMovieSceneTrack>>;
	public function FindMarkedFrameByLabel(Sequence: cpp.Star<UMovieSceneSequence>, InLabel: FString): cpp.Int32;
	public function FindMarkedFrameByFrameNumber(Sequence: cpp.Star<UMovieSceneSequence>, InFrameNumber: FFrameNumber): cpp.Int32;
	public function FindBindingByName(Sequence: cpp.Star<UMovieSceneSequence>, Name: FString): FSequencerBindingProxy;
	public function FindBindingById(Sequence: cpp.Star<UMovieSceneSequence>, BindingId: FGuid): FSequencerBindingProxy;
	public function DeleteMarkedFrames(Sequence: cpp.Star<UMovieSceneSequence>): Void;
	public function DeleteMarkedFrame(Sequence: cpp.Star<UMovieSceneSequence>, DeleteIndex: cpp.Int32): Void;
	public function AddSpawnableFromInstance(Sequence: cpp.Star<UMovieSceneSequence>, ObjectToSpawn: cpp.Star<UObject>): FSequencerBindingProxy;
	public function AddSpawnableFromClass(Sequence: cpp.Star<UMovieSceneSequence>, ClassToSpawn: cpp.Star<UClass>): FSequencerBindingProxy;
	public function AddRootFolderToSequence(Sequence: cpp.Star<UMovieSceneSequence>, NewFolderName: FString): cpp.Star<UMovieSceneFolder>;
	public function AddPossessable(Sequence: cpp.Star<UMovieSceneSequence>, ObjectToPossess: cpp.Star<UObject>): FSequencerBindingProxy;
	public function AddMasterTrack(Sequence: cpp.Star<UMovieSceneSequence>, TrackType: TSubclassOf<UMovieSceneTrack>): cpp.Star<UMovieSceneTrack>;
	public function AddMarkedFrame(Sequence: cpp.Star<UMovieSceneSequence>, InMarkedFrame: FMovieSceneMarkedFrame): cpp.Int32;
}
