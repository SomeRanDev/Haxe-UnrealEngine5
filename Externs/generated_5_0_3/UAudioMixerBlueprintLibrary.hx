// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAudioMixerBlueprintLibrary")
@:include("AudioMixerBlueprintLibrary.h")
extern class UAudioMixerBlueprintLibrary extends UBlueprintFunctionLibrary {

	public function TrimAudioCache(InMegabytesToFree: cpp.Float32): cpp.Float32;
	public function SwapAudioOutputDevice(WorldContextObject: cpp.Star<UObject>, NewDeviceId: FString, OnCompletedDeviceSwap: HaxeDelegateProperty<(FSwapAudioOutputResult) -> Void>): Void;
	public function StopRecordingOutput(WorldContextObject: cpp.Star<UObject>, ExportType: EAudioRecordingExportType, Name: FString, Path: FString, SubmixToRecord: cpp.Star<USoundSubmix>, ExistingSoundWaveToOverwrite: cpp.Star<USoundWave>): cpp.Star<USoundWave>;
	public function StopAudioBus(WorldContextObject: cpp.Star<UObject>, AudioBus: cpp.Star<UAudioBus>): Void;
	public function StopAnalyzingOutput(WorldContextObject: cpp.Star<UObject>, SubmixToStopAnalyzing: cpp.Star<USoundSubmix>): Void;
	public function StartRecordingOutput(WorldContextObject: cpp.Star<UObject>, ExpectedDuration: cpp.Float32, SubmixToRecord: cpp.Star<USoundSubmix>): Void;
	public function StartAudioBus(WorldContextObject: cpp.Star<UObject>, AudioBus: cpp.Star<UAudioBus>): Void;
	public function StartAnalyzingOutput(WorldContextObject: cpp.Star<UObject>, SubmixToAnalyze: cpp.Star<USoundSubmix>, FFTSize: EFFTSize, InterpolationMethod: EFFTPeakInterpolationMethod, WindowType: EFFTWindowType, HopSize: cpp.Float32, SpectrumType: EAudioSpectrumType): Void;
	public function SetSubmixEffectChainOverride(WorldContextObject: cpp.Star<UObject>, SoundSubmix: cpp.Star<USoundSubmix>, SubmixEffectPresetChain: TArray<cpp.Star<USoundEffectSubmixPreset>>, FadeTimeSec: cpp.Float32): Void;
	public function SetBypassSourceEffectChainEntry(WorldContextObject: cpp.Star<UObject>, PresetChain: cpp.Star<USoundEffectSourcePresetChain>, EntryIndex: cpp.Int32, bBypassed: Bool): Void;
	public function ResumeRecordingOutput(WorldContextObject: cpp.Star<UObject>, SubmixToPause: cpp.Star<USoundSubmix>): Void;
	public function ReplaceSubmixEffect(WorldContextObject: cpp.Star<UObject>, InSoundSubmix: cpp.Star<USoundSubmix>, SubmixChainIndex: cpp.Int32, SubmixEffectPreset: cpp.Star<USoundEffectSubmixPreset>): Void;
	public function ReplaceSoundEffectSubmix(WorldContextObject: cpp.Star<UObject>, InSoundSubmix: cpp.Star<USoundSubmix>, SubmixChainIndex: cpp.Int32, SubmixEffectPreset: cpp.Star<USoundEffectSubmixPreset>): Void;
	public function RemoveSubmixEffectPresetAtIndex(WorldContextObject: cpp.Star<UObject>, SoundSubmix: cpp.Star<USoundSubmix>, SubmixChainIndex: cpp.Int32): Void;
	public function RemoveSubmixEffectPreset(WorldContextObject: cpp.Star<UObject>, SoundSubmix: cpp.Star<USoundSubmix>, SubmixEffectPreset: cpp.Star<USoundEffectSubmixPreset>): Void;
	public function RemoveSubmixEffectAtIndex(WorldContextObject: cpp.Star<UObject>, SoundSubmix: cpp.Star<USoundSubmix>, SubmixChainIndex: cpp.Int32): Void;
	public function RemoveSubmixEffect(WorldContextObject: cpp.Star<UObject>, SoundSubmix: cpp.Star<USoundSubmix>, SubmixEffectPreset: cpp.Star<USoundEffectSubmixPreset>): Void;
	public function RemoveSourceEffectFromPresetChain(WorldContextObject: cpp.Star<UObject>, PresetChain: cpp.Star<USoundEffectSourcePresetChain>, EntryIndex: cpp.Int32): Void;
	public function RemoveMasterSubmixEffect(WorldContextObject: cpp.Star<UObject>, SubmixEffectPreset: cpp.Star<USoundEffectSubmixPreset>): Void;
	public function PrimeSoundForPlayback(SoundWave: cpp.Star<USoundWave>, OnLoadCompletion: HaxeDelegateProperty<(cpp.Star<USoundWave>, Bool) -> Void>): Void;
	public function PrimeSoundCueForPlayback(SoundCue: cpp.Star<USoundCue>): Void;
	public function PauseRecordingOutput(WorldContextObject: cpp.Star<UObject>, SubmixToPause: cpp.Star<USoundSubmix>): Void;
	public function MakePresetSpectralAnalysisBandSettings(InBandPresetType: EAudioSpectrumBandPresetType, InNumBands: cpp.Int32, InAttackTimeMsec: cpp.Int32, InReleaseTimeMsec: cpp.Int32): TArray<FSoundSubmixSpectralAnalysisBandSettings>;
	public function MakeMusicalSpectralAnalysisBandSettings(InNumSemitones: cpp.Int32, InStartingMusicalNote: EMusicalNoteName, InStartingOctave: cpp.Int32, InAttackTimeMsec: cpp.Int32, InReleaseTimeMsec: cpp.Int32): TArray<FSoundSubmixSpectralAnalysisBandSettings>;
	public function MakeFullSpectrumSpectralAnalysisBandSettings(InNumBands: cpp.Int32, InMinimumFrequency: cpp.Float32, InMaximumFrequency: cpp.Float32, InAttackTimeMsec: cpp.Int32, InReleaseTimeMsec: cpp.Int32): TArray<FSoundSubmixSpectralAnalysisBandSettings>;
	public function IsAudioBusActive(WorldContextObject: cpp.Star<UObject>, AudioBus: cpp.Star<UAudioBus>): Bool;
	public function GetPhaseForFrequencies(WorldContextObject: cpp.Star<UObject>, Frequencies: TArray<cpp.Float32>, Phases: TArray<cpp.Float32>, SubmixToAnalyze: cpp.Star<USoundSubmix>): Void;
	public function GetNumberOfEntriesInSourceEffectChain(WorldContextObject: cpp.Star<UObject>, PresetChain: cpp.Star<USoundEffectSourcePresetChain>): cpp.Int32;
	public function GetMagnitudeForFrequencies(WorldContextObject: cpp.Star<UObject>, Frequencies: TArray<cpp.Float32>, Magnitudes: TArray<cpp.Float32>, SubmixToAnalyze: cpp.Star<USoundSubmix>): Void;
	public function GetCurrentAudioOutputDeviceName(WorldContextObject: cpp.Star<UObject>, OnObtainCurrentDeviceEvent: HaxeDelegateProperty<(FString) -> Void>): Void;
	public function GetAvailableAudioOutputDevices(WorldContextObject: cpp.Star<UObject>, OnObtainDevicesEvent: HaxeDelegateProperty<(TArray<FAudioOutputDeviceInfo>) -> Void>): Void;
	public function Conv_AudioOutputDeviceInfoToString(Info: FAudioOutputDeviceInfo): FString;
	public function ClearSubmixEffects(WorldContextObject: cpp.Star<UObject>, SoundSubmix: cpp.Star<USoundSubmix>): Void;
	public function ClearSubmixEffectChainOverride(WorldContextObject: cpp.Star<UObject>, SoundSubmix: cpp.Star<USoundSubmix>, FadeTimeSec: cpp.Float32): Void;
	public function ClearMasterSubmixEffects(WorldContextObject: cpp.Star<UObject>): Void;
	public function AddSubmixEffect(WorldContextObject: cpp.Star<UObject>, SoundSubmix: cpp.Star<USoundSubmix>, SubmixEffectPreset: cpp.Star<USoundEffectSubmixPreset>): cpp.Int32;
	public function AddSourceEffectToPresetChain(WorldContextObject: cpp.Star<UObject>, PresetChain: cpp.Star<USoundEffectSourcePresetChain>, Entry: FSourceEffectChainEntry): Void;
	public function AddMasterSubmixEffect(WorldContextObject: cpp.Star<UObject>, SubmixEffectPreset: cpp.Star<USoundEffectSubmixPreset>): Void;
}
