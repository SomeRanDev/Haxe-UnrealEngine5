// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UStaticMesh")
@:include("Engine/StaticMesh.h")
extern class UStaticMesh extends UStreamableRenderAsset {
	public var SourceModels: TArray<FStaticMeshSourceModel>;
	public var HiResSourceModel: FStaticMeshSourceModel;
	public var SectionInfoMap: FMeshSectionInfoMap;
	public var OriginalSectionInfoMap: FMeshSectionInfoMap;
	public var LODGroup: FName;
	public var NumStreamedLODs: FPerPlatformInt;
	public var ImportVersion: cpp.Int32;
	public var MaterialRemapIndexPerImportVersion: TArray<FMaterialRemapIndex>;
	public var LightmapUVVersion: cpp.Int32;
	public var bAutoComputeLODScreenSize: Bool;
	public var Materials_DEPRECATED: TArray<TObjectPtr<UMaterialInterface>>;
	public var NaniteSettings: FMeshNaniteSettings;
	public var MinQualityLevelLOD: FPerQualityLevelInt;
	public var MinLOD: FPerPlatformInt;
	public var StaticMaterials: TArray<FStaticMaterial>;
	public var LightmapUVDensity: cpp.Float32;
	public var LightMapResolution: cpp.Int32;
	public var LightMapCoordinateIndex: cpp.Int32;
	public var DistanceFieldSelfShadowBias: cpp.Float32;
	public var BodySetup: TObjectPtr<UBodySetup>;
	public var LODForCollision: cpp.Int32;
	public var bGenerateMeshDistanceField: Bool;
	public var bStripComplexCollisionForConsole_DEPRECATED: Bool;
	public var bHasNavigationData: Bool;
	public var bSupportUniformlyDistributedSampling: Bool;
	public var bSupportPhysicalMaterialMasks: Bool;
	public var bSupportRayTracing: Bool;
	public var bDoFastBuild: Bool;
	public var bIsBuiltAtRuntime_DEPRECATED: Bool;
	public var bAllowCPUAccess: Bool;
	public var bSupportGpuUniformlyDistributedSampling: Bool;
	public var AssetImportData: TObjectPtr<UAssetImportData>;
	public var SourceFilePath_DEPRECATED: FString;
	public var SourceFileTimestamp_DEPRECATED: FString;
	public var ThumbnailInfo: TObjectPtr<UThumbnailInfo>;
	public var EditorCameraPosition: FAssetEditorOrbitCameraPosition;
	public var bCustomizedCollision: Bool;
	public var Sockets: TArray<TObjectPtr<UStaticMeshSocket>>;
	public var PositiveBoundsExtension: FVector;
	public var NegativeBoundsExtension: FVector;
	public var ExtendedBounds: FBoxSphereBounds;
	public var ElementToIgnoreForTexFactor: cpp.Int32;
	public var AssetUserData: TArray<TObjectPtr<UAssetUserData>>;
	public var EditableMesh_DEPRECATED: TObjectPtr<UObject>;
	public var ComplexCollisionMesh: TObjectPtr<UStaticMesh>;
	public var NavCollision: TObjectPtr<UNavCollisionBase>;

	public function SetStaticMaterials(InStaticMaterials: TArray<FStaticMaterial>): Void;
	public function SetNumSourceModels(Num: cpp.Int32): Void;
	public function SetMinimumLODForPlatforms(PlatformMinimumLODs: TMap<FName, cpp.Int32>): Void;
	public function SetMinimumLODForPlatform(PlatformName: cpp.Reference<FName>, InMinLOD: cpp.Int32): Void;
	public function SetMaterial(MaterialIndex: cpp.Int32, NewMaterial: cpp.Star<UMaterialInterface>): Void;
	public function RemoveSocket(Socket: cpp.Star<UStaticMeshSocket>): Void;
	public function GetStaticMeshDescription(LODIndex: cpp.Int32): cpp.Star<UStaticMeshDescription>;
	public function GetStaticMaterials(): TArray<FStaticMaterial>;
	public function GetNumSections(InLOD: cpp.Int32): cpp.Int32;
	public function GetNumLODs(): cpp.Int32;
	public function GetMinimumLODForQualityLevels(QualityLevelMinimumLODs: TMap<FName, cpp.Int32>): Void;
	public function GetMinimumLODForQualityLevel(QualityLevel: cpp.Reference<FName>): cpp.Int32;
	public function GetMinimumLODForPlatforms(PlatformMinimumLODs: TMap<FName, cpp.Int32>): Void;
	public function GetMinimumLODForPlatform(PlatformName: cpp.Reference<FName>): cpp.Int32;
	public function GetMaterialIndex(MaterialSlotName: FName): cpp.Int32;
	public function GetMaterial(MaterialIndex: cpp.Int32): cpp.Star<UMaterialInterface>;
	public function GetBounds(): FBoxSphereBounds;
	public function GetBoundingBox(): FBox;
	public function FindSocket(InSocketName: FName): cpp.Star<UStaticMeshSocket>;
	public function CreateStaticMeshDescription(Outer: cpp.Star<UObject>): cpp.Star<UStaticMeshDescription>;
	public function BuildFromStaticMeshDescriptions(StaticMeshDescriptions: TArray<cpp.Star<UStaticMeshDescription>>, bBuildSimpleCollision: Bool, bFastBuild: Bool): Void;
	public function AddSocket(Socket: cpp.Star<UStaticMeshSocket>): Void;
	public function AddMaterial(Material: cpp.Star<UMaterialInterface>): FName;
}
