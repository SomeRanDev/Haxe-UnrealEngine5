// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UQuartzSubsystem")
@:include("Quartz/QuartzSubsystem.h")
extern class UQuartzSubsystem extends UTickableWorldSubsystem {

	public function IsQuartzEnabled(): Bool;
	public function IsClockRunning(WorldContextObject: cpp.Star<UObject>, ClockName: FName): Bool;
	public function GetRoundTripMinLatency(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetRoundTripMaxLatency(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetRoundTripAverageLatency(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetHandleForClock(WorldContextObject: cpp.Star<UObject>, ClockName: FName): cpp.Star<UQuartzClockHandle>;
	public function GetGameThreadToAudioRenderThreadMinLatency(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetGameThreadToAudioRenderThreadMaxLatency(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetGameThreadToAudioRenderThreadAverageLatency(WorldContextObject: cpp.Star<UObject>): cpp.Float32;
	public function GetEstimatedClockRunTime(WorldContextObject: cpp.Star<UObject>, InClockName: cpp.Reference<FName>): cpp.Float32;
	public function GetDurationOfQuantizationTypeInSeconds(WorldContextObject: cpp.Star<UObject>, ClockName: FName, QuantizationType: EQuartzCommandQuantization, Multiplier: cpp.Float32): cpp.Float32;
	public function GetCurrentClockTimestamp(WorldContextObject: cpp.Star<UObject>, InClockName: cpp.Reference<FName>): FQuartzTransportTimeStamp;
	public function GetAudioRenderThreadToGameThreadMinLatency(): cpp.Float32;
	public function GetAudioRenderThreadToGameThreadMaxLatency(): cpp.Float32;
	public function GetAudioRenderThreadToGameThreadAverageLatency(): cpp.Float32;
	public function DoesClockExist(WorldContextObject: cpp.Star<UObject>, ClockName: FName): Bool;
	public function DeleteClockByName(WorldContextObject: cpp.Star<UObject>, ClockName: FName): Void;
	public function DeleteClockByHandle(WorldContextObject: cpp.Star<UObject>, InClockHandle: cpp.Reference<cpp.Star<UQuartzClockHandle>>): Void;
	public function CreateNewClock(WorldContextObject: cpp.Star<UObject>, ClockName: FName, InSettings: FQuartzClockSettings, bOverrideSettingsIfClockExists: Bool, bUseAudioEngineClockManager: Bool): cpp.Star<UQuartzClockHandle>;
}
