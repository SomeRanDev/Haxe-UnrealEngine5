// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UVectorFieldAnimated")
@:include("VectorField/VectorFieldAnimated.h")
@:structAccess
extern class VectorFieldAnimated extends VectorField {
	public var Texture: cpp.Star<Texture2D>;
	public var ConstructionOp: EVectorFieldConstructionOp;
	public var VolumeSizeX: cpp.Int32;
	public var VolumeSizeY: cpp.Int32;
	public var VolumeSizeZ: cpp.Int32;
	public var SubImagesX: cpp.Int32;
	public var SubImagesY: cpp.Int32;
	public var FrameCount: cpp.Int32;
	public var FramesPerSecond: cpp.Float32;
	public var bLoop: Bool;
	public var NoiseField: cpp.Star<VectorFieldStatic>;
	public var NoiseScale: cpp.Float32;
	public var NoiseMax: cpp.Float32;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstVectorFieldAnimated(VectorFieldAnimated) from VectorFieldAnimated {
	public extern var Texture(get, never): cpp.Star<Texture2D.ConstTexture2D>;
	public inline extern function get_Texture(): cpp.Star<Texture2D.ConstTexture2D> return this.Texture;
	public extern var ConstructionOp(get, never): EVectorFieldConstructionOp;
	public inline extern function get_ConstructionOp(): EVectorFieldConstructionOp return this.ConstructionOp;
	public extern var VolumeSizeX(get, never): cpp.Int32;
	public inline extern function get_VolumeSizeX(): cpp.Int32 return this.VolumeSizeX;
	public extern var VolumeSizeY(get, never): cpp.Int32;
	public inline extern function get_VolumeSizeY(): cpp.Int32 return this.VolumeSizeY;
	public extern var VolumeSizeZ(get, never): cpp.Int32;
	public inline extern function get_VolumeSizeZ(): cpp.Int32 return this.VolumeSizeZ;
	public extern var SubImagesX(get, never): cpp.Int32;
	public inline extern function get_SubImagesX(): cpp.Int32 return this.SubImagesX;
	public extern var SubImagesY(get, never): cpp.Int32;
	public inline extern function get_SubImagesY(): cpp.Int32 return this.SubImagesY;
	public extern var FrameCount(get, never): cpp.Int32;
	public inline extern function get_FrameCount(): cpp.Int32 return this.FrameCount;
	public extern var FramesPerSecond(get, never): cpp.Float32;
	public inline extern function get_FramesPerSecond(): cpp.Float32 return this.FramesPerSecond;
	public extern var bLoop(get, never): Bool;
	public inline extern function get_bLoop(): Bool return this.bLoop;
	public extern var NoiseField(get, never): cpp.Star<VectorFieldStatic.ConstVectorFieldStatic>;
	public inline extern function get_NoiseField(): cpp.Star<VectorFieldStatic.ConstVectorFieldStatic> return this.NoiseField;
	public extern var NoiseScale(get, never): cpp.Float32;
	public inline extern function get_NoiseScale(): cpp.Float32 return this.NoiseScale;
	public extern var NoiseMax(get, never): cpp.Float32;
	public inline extern function get_NoiseMax(): cpp.Float32 return this.NoiseMax;
}

@:forward
@:nativeGen
@:native("VectorFieldAnimated*")
abstract VectorFieldAnimatedPtr(cpp.Star<VectorFieldAnimated>) from cpp.Star<VectorFieldAnimated> to cpp.Star<VectorFieldAnimated>{
	@:from
	public static extern inline function fromValue(v: VectorFieldAnimated): VectorFieldAnimatedPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): VectorFieldAnimated {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}