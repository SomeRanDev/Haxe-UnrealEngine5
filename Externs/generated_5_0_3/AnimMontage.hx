// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UAnimMontage")
@:include("Animation/AnimMontage.h")
@:structAccess
extern class AnimMontage extends AnimCompositeBase {
	public var BlendModeIn: EMontageBlendMode;
	public var BlendModeOut: EMontageBlendMode;
	public var BlendIn: AlphaBlend;
	public var BlendOut: AlphaBlend;
	public var BlendOutTriggerTime: cpp.Float32;
	public var SyncGroup: FName;
	public var SyncSlotIndex: cpp.Int32;
	public var MarkerData: MarkerSyncData;
	public var CompositeSections: TArray<CompositeSection>;
	public var SlotAnimTracks: TArray<SlotAnimationTrack>;
	public var bEnableRootMotionTranslation: Bool;
	public var bEnableRootMotionRotation: Bool;
	public var bEnableAutoBlendOut: Bool;
	public var BlendProfileIn: cpp.Star<BlendProfile>;
	public var BlendProfileOut: cpp.Star<BlendProfile>;
	public var RootMotionRootLock: TEnumAsByte<ERootMotionRootLock>;
	private var BranchingPointMarkers: TArray<BranchingPointMarker>;
	public var BranchingPointStateNotifyIndices: TArray<cpp.Int32>;
	public var TimeStretchCurve: TimeStretchCurve;
	public var TimeStretchCurveName: FName;

	public function IsValidSectionName(InSectionName: FName): Bool;
	public function GetDefaultBlendOutTime(): cpp.Float32;
	public function GetDefaultBlendInTime(): cpp.Float32;
	public function GetBlendOutArgs(): AlphaBlendArgs;
	public function GetBlendInArgs(): AlphaBlendArgs;
	public function CreateSlotAnimationAsDynamicMontage_WithBlendSettings(Asset: cpp.Star<AnimSequenceBase>, SlotNodeName: FName, BlendInSettings: cpp.Reference<MontageBlendSettings>, BlendOutSettings: cpp.Reference<MontageBlendSettings>, InPlayRate: cpp.Float32, LoopCount: cpp.Int32, InBlendOutTriggerTime: cpp.Float32): cpp.Star<AnimMontage>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(IsValidSectionName, GetDefaultBlendOutTime, GetDefaultBlendInTime, GetBlendOutArgs, GetBlendInArgs)
@:nativeGen
abstract ConstAnimMontage(AnimMontage) from AnimMontage {
	public extern var BlendModeIn(get, never): EMontageBlendMode;
	public inline extern function get_BlendModeIn(): EMontageBlendMode return this.BlendModeIn;
	public extern var BlendModeOut(get, never): EMontageBlendMode;
	public inline extern function get_BlendModeOut(): EMontageBlendMode return this.BlendModeOut;
	public extern var BlendIn(get, never): AlphaBlend;
	public inline extern function get_BlendIn(): AlphaBlend return this.BlendIn;
	public extern var BlendOut(get, never): AlphaBlend;
	public inline extern function get_BlendOut(): AlphaBlend return this.BlendOut;
	public extern var BlendOutTriggerTime(get, never): cpp.Float32;
	public inline extern function get_BlendOutTriggerTime(): cpp.Float32 return this.BlendOutTriggerTime;
	public extern var SyncGroup(get, never): FName;
	public inline extern function get_SyncGroup(): FName return this.SyncGroup;
	public extern var SyncSlotIndex(get, never): cpp.Int32;
	public inline extern function get_SyncSlotIndex(): cpp.Int32 return this.SyncSlotIndex;
	public extern var MarkerData(get, never): MarkerSyncData;
	public inline extern function get_MarkerData(): MarkerSyncData return this.MarkerData;
	public extern var CompositeSections(get, never): TArray<CompositeSection>;
	public inline extern function get_CompositeSections(): TArray<CompositeSection> return this.CompositeSections;
	public extern var SlotAnimTracks(get, never): TArray<SlotAnimationTrack>;
	public inline extern function get_SlotAnimTracks(): TArray<SlotAnimationTrack> return this.SlotAnimTracks;
	public extern var bEnableRootMotionTranslation(get, never): Bool;
	public inline extern function get_bEnableRootMotionTranslation(): Bool return this.bEnableRootMotionTranslation;
	public extern var bEnableRootMotionRotation(get, never): Bool;
	public inline extern function get_bEnableRootMotionRotation(): Bool return this.bEnableRootMotionRotation;
	public extern var bEnableAutoBlendOut(get, never): Bool;
	public inline extern function get_bEnableAutoBlendOut(): Bool return this.bEnableAutoBlendOut;
	public extern var BlendProfileIn(get, never): cpp.Star<BlendProfile.ConstBlendProfile>;
	public inline extern function get_BlendProfileIn(): cpp.Star<BlendProfile.ConstBlendProfile> return this.BlendProfileIn;
	public extern var BlendProfileOut(get, never): cpp.Star<BlendProfile.ConstBlendProfile>;
	public inline extern function get_BlendProfileOut(): cpp.Star<BlendProfile.ConstBlendProfile> return this.BlendProfileOut;
	public extern var RootMotionRootLock(get, never): TEnumAsByte<ERootMotionRootLock>;
	public inline extern function get_RootMotionRootLock(): TEnumAsByte<ERootMotionRootLock> return this.RootMotionRootLock;
	public extern var BranchingPointStateNotifyIndices(get, never): TArray<cpp.Int32>;
	public inline extern function get_BranchingPointStateNotifyIndices(): TArray<cpp.Int32> return this.BranchingPointStateNotifyIndices;
	public extern var TimeStretchCurve(get, never): TimeStretchCurve;
	public inline extern function get_TimeStretchCurve(): TimeStretchCurve return this.TimeStretchCurve;
	public extern var TimeStretchCurveName(get, never): FName;
	public inline extern function get_TimeStretchCurveName(): FName return this.TimeStretchCurveName;
}

@:forward
@:nativeGen
@:native("AnimMontage*")
abstract AnimMontagePtr(cpp.Star<AnimMontage>) from cpp.Star<AnimMontage> to cpp.Star<AnimMontage>{
	@:from
	public static extern inline function fromValue(v: AnimMontage): AnimMontagePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): AnimMontage {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}