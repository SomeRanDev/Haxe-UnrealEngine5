// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UMeshDescriptionBase")
@:include("MeshDescriptionBase.h")
extern class UMeshDescriptionBase extends UObject {

	public function SetVertexPosition(VertexID: FVertexID, Position: FVector): Void;
	public function SetPolygonVertexInstances(PolygonID: FPolygonID, VertexInstanceIDs: TArray<FVertexInstanceID>): Void;
	public function SetPolygonPolygonGroup(PolygonID: FPolygonID, PolygonGroupID: FPolygonGroupID): Void;
	public function ReversePolygonFacing(PolygonID: FPolygonID): Void;
	public function ReserveNewVertices(NumberOfNewVertices: cpp.Int32): Void;
	public function ReserveNewVertexInstances(NumberOfNewVertexInstances: cpp.Int32): Void;
	public function ReserveNewTriangles(NumberOfNewTriangles: cpp.Int32): Void;
	public function ReserveNewPolygons(NumberOfNewPolygons: cpp.Int32): Void;
	public function ReserveNewPolygonGroups(NumberOfNewPolygonGroups: cpp.Int32): Void;
	public function ReserveNewEdges(NumberOfNewEdges: cpp.Int32): Void;
	public function IsVertexValid(VertexID: FVertexID): Bool;
	public function IsVertexOrphaned(VertexID: FVertexID): Bool;
	public function IsVertexInstanceValid(VertexInstanceID: FVertexInstanceID): Bool;
	public function IsTriangleValid(TriangleID: FTriangleID): Bool;
	public function IsTrianglePartOfNgon(TriangleID: FTriangleID): Bool;
	public function IsPolygonValid(PolygonID: FPolygonID): Bool;
	public function IsPolygonGroupValid(PolygonGroupID: FPolygonGroupID): Bool;
	public function IsEmpty(): Bool;
	public function IsEdgeValid(EdgeID: FEdgeID): Bool;
	public function IsEdgeInternalToPolygon(EdgeID: FEdgeID, PolygonID: FPolygonID): Bool;
	public function IsEdgeInternal(EdgeID: FEdgeID): Bool;
	public function GetVertexVertexInstances(VertexID: FVertexID, OutVertexInstanceIDs: TArray<FVertexInstanceID>): Void;
	public function GetVertexPosition(VertexID: FVertexID): FVector;
	public function GetVertexPairEdge(VertexID0: FVertexID, VertexID1: FVertexID): FEdgeID;
	public function GetVertexInstanceVertex(VertexInstanceID: FVertexInstanceID): FVertexID;
	public function GetVertexInstancePairEdge(VertexInstanceID0: FVertexInstanceID, VertexInstanceID1: FVertexInstanceID): FEdgeID;
	public function GetVertexInstanceForTriangleVertex(TriangleID: FTriangleID, VertexID: FVertexID): FVertexInstanceID;
	public function GetVertexInstanceForPolygonVertex(PolygonID: FPolygonID, VertexID: FVertexID): FVertexInstanceID;
	public function GetVertexInstanceCount(): cpp.Int32;
	public function GetVertexInstanceConnectedTriangles(VertexInstanceID: FVertexInstanceID, OutConnectedTriangleIDs: TArray<FTriangleID>): Void;
	public function GetVertexInstanceConnectedPolygons(VertexInstanceID: FVertexInstanceID, OutConnectedPolygonIDs: TArray<FPolygonID>): Void;
	public function GetVertexCount(): cpp.Int32;
	public function GetVertexConnectedTriangles(VertexID: FVertexID, OutConnectedTriangleIDs: TArray<FTriangleID>): Void;
	public function GetVertexConnectedPolygons(VertexID: FVertexID, OutConnectedPolygonIDs: TArray<FPolygonID>): Void;
	public function GetVertexConnectedEdges(VertexID: FVertexID, OutEdgeIDs: TArray<FEdgeID>): Void;
	public function GetVertexAdjacentVertices(VertexID: FVertexID, OutAdjacentVertexIDs: TArray<FVertexID>): Void;
	public function GetTriangleVertices(TriangleID: FTriangleID, OutVertexIDs: TArray<FVertexID>): Void;
	public function GetTriangleVertexInstances(TriangleID: FTriangleID, OutVertexInstanceIDs: TArray<FVertexInstanceID>): Void;
	public function GetTriangleVertexInstance(TriangleID: FTriangleID, Index: cpp.Int32): FVertexInstanceID;
	public function GetTrianglePolygonGroup(TriangleID: FTriangleID): FPolygonGroupID;
	public function GetTrianglePolygon(TriangleID: FTriangleID): FPolygonID;
	public function GetTriangleEdges(TriangleID: FTriangleID, OutEdgeIDs: TArray<FEdgeID>): Void;
	public function GetTriangleCount(): cpp.Int32;
	public function GetTriangleAdjacentTriangles(TriangleID: FTriangleID, OutTriangleIDs: TArray<FTriangleID>): Void;
	public function GetPolygonVertices(PolygonID: FPolygonID, OutVertexIDs: TArray<FVertexID>): Void;
	public function GetPolygonVertexInstances(PolygonID: FPolygonID, OutVertexInstanceIDs: TArray<FVertexInstanceID>): Void;
	public function GetPolygonTriangles(PolygonID: FPolygonID, OutTriangleIDs: TArray<FTriangleID>): Void;
	public function GetPolygonPolygonGroup(PolygonID: FPolygonID): FPolygonGroupID;
	public function GetPolygonPerimeterEdges(PolygonID: FPolygonID, OutEdgeIDs: TArray<FEdgeID>): Void;
	public function GetPolygonInternalEdges(PolygonID: FPolygonID, OutEdgeIDs: TArray<FEdgeID>): Void;
	public function GetPolygonGroupPolygons(PolygonGroupID: FPolygonGroupID, OutPolygonIDs: TArray<FPolygonID>): Void;
	public function GetPolygonGroupCount(): cpp.Int32;
	public function GetPolygonCount(): cpp.Int32;
	public function GetPolygonAdjacentPolygons(PolygonID: FPolygonID, OutPolygonIDs: TArray<FPolygonID>): Void;
	public function GetNumVertexVertexInstances(VertexID: FVertexID): cpp.Int32;
	public function GetNumVertexInstanceConnectedTriangles(VertexInstanceID: FVertexInstanceID): cpp.Int32;
	public function GetNumVertexInstanceConnectedPolygons(VertexInstanceID: FVertexInstanceID): cpp.Int32;
	public function GetNumVertexConnectedTriangles(VertexID: FVertexID): cpp.Int32;
	public function GetNumVertexConnectedPolygons(VertexID: FVertexID): cpp.Int32;
	public function GetNumVertexConnectedEdges(VertexID: FVertexID): cpp.Int32;
	public function GetNumPolygonVertices(PolygonID: FPolygonID): cpp.Int32;
	public function GetNumPolygonTriangles(PolygonID: FPolygonID): cpp.Int32;
	public function GetNumPolygonInternalEdges(PolygonID: FPolygonID): cpp.Int32;
	public function GetNumPolygonGroupPolygons(PolygonGroupID: FPolygonGroupID): cpp.Int32;
	public function GetNumEdgeConnectedTriangles(EdgeID: FEdgeID): cpp.Int32;
	public function GetNumEdgeConnectedPolygons(EdgeID: FEdgeID): cpp.Int32;
	public function GetEdgeVertices(EdgeID: FEdgeID, OutVertexIDs: TArray<FVertexID>): Void;
	public function GetEdgeVertex(EdgeID: FEdgeID, VertexNumber: cpp.Int32): FVertexID;
	public function GetEdgeCount(): cpp.Int32;
	public function GetEdgeConnectedTriangles(EdgeID: FEdgeID, OutConnectedTriangleIDs: TArray<FTriangleID>): Void;
	public function GetEdgeConnectedPolygons(EdgeID: FEdgeID, OutConnectedPolygonIDs: TArray<FPolygonID>): Void;
	public function Empty(): Void;
	public function DeleteVertexInstance(VertexInstanceID: FVertexInstanceID, OrphanedVertices: TArray<FVertexID>): Void;
	public function DeleteVertex(VertexID: FVertexID): Void;
	public function DeleteTriangle(TriangleID: FTriangleID, OrphanedEdges: TArray<FEdgeID>, OrphanedVertexInstances: TArray<FVertexInstanceID>, OrphanedPolygonGroupsPtr: TArray<FPolygonGroupID>): Void;
	public function DeletePolygonGroup(PolygonGroupID: FPolygonGroupID): Void;
	public function DeletePolygon(PolygonID: FPolygonID, OrphanedEdges: TArray<FEdgeID>, OrphanedVertexInstances: TArray<FVertexInstanceID>, OrphanedPolygonGroups: TArray<FPolygonGroupID>): Void;
	public function DeleteEdge(EdgeID: FEdgeID, OrphanedVertices: TArray<FVertexID>): Void;
	public function CreateVertexWithID(VertexID: FVertexID): Void;
	public function CreateVertexInstanceWithID(VertexInstanceID: FVertexInstanceID, VertexID: FVertexID): Void;
	public function CreateVertexInstance(VertexID: FVertexID): FVertexInstanceID;
	public function CreateVertex(): FVertexID;
	public function CreateTriangleWithID(TriangleID: FTriangleID, PolygonGroupID: FPolygonGroupID, VertexInstanceIDs: TArray<FVertexInstanceID>, NewEdgeIDs: TArray<FEdgeID>): Void;
	public function CreateTriangle(PolygonGroupID: FPolygonGroupID, VertexInstanceIDs: TArray<FVertexInstanceID>, NewEdgeIDs: TArray<FEdgeID>): FTriangleID;
	public function CreatePolygonWithID(PolygonID: FPolygonID, PolygonGroupID: FPolygonGroupID, VertexInstanceIDs: TArray<FVertexInstanceID>, NewEdgeIDs: TArray<FEdgeID>): Void;
	public function CreatePolygonGroupWithID(PolygonGroupID: FPolygonGroupID): Void;
	public function CreatePolygonGroup(): FPolygonGroupID;
	public function CreatePolygon(PolygonGroupID: FPolygonGroupID, VertexInstanceIDs: TArray<FVertexInstanceID>, NewEdgeIDs: TArray<FEdgeID>): FPolygonID;
	public function CreateEdgeWithID(EdgeID: FEdgeID, VertexID0: FVertexID, VertexID1: FVertexID): Void;
	public function CreateEdge(VertexID0: FVertexID, VertexID1: FVertexID): FEdgeID;
	public function ComputePolygonTriangulation(PolygonID: FPolygonID): Void;
}
