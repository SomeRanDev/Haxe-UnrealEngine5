// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UKismetNodeHelperLibrary")
@:include("Kismet/KismetNodeHelperLibrary.h")
@:structAccess
extern class KismetNodeHelperLibrary extends BlueprintFunctionLibrary {
	public function MarkBit(Data: cpp.Reference<cpp.Int32>, Index: cpp.Int32): Void;
	public function HasUnmarkedBit(Data: cpp.Int32, NumBits: cpp.Int32): Bool;
	public function HasMarkedBit(Data: cpp.Int32, NumBits: cpp.Int32): Bool;
	public function GetValidValue(Enum: cpp.Star<Enum.ConstEnum>, EnumeratorValue: cpp.UInt8): cpp.UInt8;
	public function GetUnmarkedBit(Data: cpp.Int32, StartIdx: cpp.Int32, NumBits: cpp.Int32, bRandom: Bool): cpp.Int32;
	public function GetRandomUnmarkedBit(Data: cpp.Int32, StartIdx: cpp.Int32, NumBits: cpp.Int32): cpp.Int32;
	public function GetFirstUnmarkedBit(Data: cpp.Int32, StartIdx: cpp.Int32, NumBits: cpp.Int32): cpp.Int32;
	public function GetEnumeratorValueFromIndex(Enum: cpp.Star<Enum.ConstEnum>, EnumeratorIndex: cpp.UInt8): cpp.UInt8;
	public function GetEnumeratorUserFriendlyName(Enum: cpp.Star<Enum.ConstEnum>, EnumeratorValue: cpp.UInt8): FString;
	public function GetEnumeratorName(Enum: cpp.Star<Enum.ConstEnum>, EnumeratorValue: cpp.UInt8): FName;
	public function ClearBit(Data: cpp.Reference<cpp.Int32>, Index: cpp.Int32): Void;
	public function ClearAllBits(Data: cpp.Reference<cpp.Int32>): Void;
	public function BitIsMarked(Data: cpp.Int32, Index: cpp.Int32): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstKismetNodeHelperLibrary(KismetNodeHelperLibrary) from KismetNodeHelperLibrary {
}

@:forward
@:nativeGen
@:native("KismetNodeHelperLibrary*")
abstract KismetNodeHelperLibraryPtr(cpp.Star<KismetNodeHelperLibrary>) from cpp.Star<KismetNodeHelperLibrary> to cpp.Star<KismetNodeHelperLibrary>{
	@:from
	public static extern inline function fromValue(v: KismetNodeHelperLibrary): KismetNodeHelperLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): KismetNodeHelperLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}