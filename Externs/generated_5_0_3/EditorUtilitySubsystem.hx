// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditorUtilitySubsystem")
@:include("EditorUtilitySubsystem.h")
@:structAccess
extern class EditorUtilitySubsystem extends EditorSubsystem {
	public var LoadedUIs: TArray<SoftObjectPath>;
	public var StartupObjects: TArray<SoftObjectPath>;
	public var OnBeginPIE: HaxeMulticastSparseDelegateProperty<(Bool) -> Void>;
	public var OnEndPIE: HaxeMulticastSparseDelegateProperty<(Bool) -> Void>;
	public var ObjectInstances: TMap<cpp.Star<Object>, cpp.Star<Object>>;
	public var ActiveTaskStack: TArray<cpp.Star<EditorUtilityTask>>;
	public var ReferencedObjects: TSet<cpp.Star<Object>>;

	public function TryRun(Asset: cpp.Star<Object>): cpp.Reference<Bool>;
	public function SpawnRegisteredTabByID(NewTabID: FName): cpp.Reference<Bool>;
	public function SpawnAndRegisterTabAndGetID(InBlueprint: cpp.Star<EditorUtilityWidgetBlueprint>, NewTabID: cpp.Reference<FName>): cpp.Reference<cpp.Star<EditorUtilityWidget>>;
	public function SpawnAndRegisterTab(InBlueprint: cpp.Star<EditorUtilityWidgetBlueprint>): cpp.Reference<cpp.Star<EditorUtilityWidget>>;
	public function ReleaseInstanceOfAsset(Asset: cpp.Star<Object>): Void;
	public function RegisterTabAndGetID(InBlueprint: cpp.Star<EditorUtilityWidgetBlueprint>, NewTabID: cpp.Reference<FName>): Void;
	public function RegisterAndExecuteTask(NewTask: cpp.Star<EditorUtilityTask>, OptionalParentTask: cpp.Star<EditorUtilityTask>): Void;
	public function FindUtilityWidgetFromBlueprint(InBlueprint: cpp.Star<EditorUtilityWidgetBlueprint>): cpp.Reference<cpp.Star<EditorUtilityWidget>>;
	public function DoesTabExist(NewTabID: FName): cpp.Reference<Bool>;
	public function CloseTabByID(NewTabID: FName): cpp.Reference<Bool>;
	public function CanRun(Asset: cpp.Star<Object>): cpp.Reference<Bool>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(CanRun)
@:nativeGen
abstract ConstEditorUtilitySubsystem(EditorUtilitySubsystem) from EditorUtilitySubsystem {
	public extern var LoadedUIs(get, never): TArray<SoftObjectPath>;
	public inline extern function get_LoadedUIs(): TArray<SoftObjectPath> return this.LoadedUIs;
	public extern var StartupObjects(get, never): TArray<SoftObjectPath>;
	public inline extern function get_StartupObjects(): TArray<SoftObjectPath> return this.StartupObjects;
	public extern var OnBeginPIE(get, never): HaxeMulticastSparseDelegateProperty<(Bool) -> Void>;
	public inline extern function get_OnBeginPIE(): HaxeMulticastSparseDelegateProperty<(Bool) -> Void> return this.OnBeginPIE;
	public extern var OnEndPIE(get, never): HaxeMulticastSparseDelegateProperty<(Bool) -> Void>;
	public inline extern function get_OnEndPIE(): HaxeMulticastSparseDelegateProperty<(Bool) -> Void> return this.OnEndPIE;
	public extern var ObjectInstances(get, never): TMap<cpp.Star<Object.ConstObject>, cpp.Star<Object.ConstObject>>;
	public inline extern function get_ObjectInstances(): TMap<cpp.Star<Object.ConstObject>, cpp.Star<Object.ConstObject>> return this.ObjectInstances;
	public extern var ActiveTaskStack(get, never): TArray<cpp.Star<EditorUtilityTask.ConstEditorUtilityTask>>;
	public inline extern function get_ActiveTaskStack(): TArray<cpp.Star<EditorUtilityTask.ConstEditorUtilityTask>> return this.ActiveTaskStack;
	public extern var ReferencedObjects(get, never): TSet<cpp.Star<Object.ConstObject>>;
	public inline extern function get_ReferencedObjects(): TSet<cpp.Star<Object.ConstObject>> return this.ReferencedObjects;
}

@:forward
@:nativeGen
@:native("EditorUtilitySubsystem*")
abstract EditorUtilitySubsystemPtr(cpp.Star<EditorUtilitySubsystem>) from cpp.Star<EditorUtilitySubsystem> to cpp.Star<EditorUtilitySubsystem>{
	@:from
	public static extern inline function fromValue(v: EditorUtilitySubsystem): EditorUtilitySubsystemPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EditorUtilitySubsystem {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}