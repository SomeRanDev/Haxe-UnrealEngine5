// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UPyTestObject")
@:include("PyTest.h")
@:structAccess
extern class PyTestObject extends Object {
	public var Bool: Bool;
	public var Int: cpp.Int32;
	public var Float: cpp.Float32;
	public var Enum: EPyTestEnum;
	public var String: FString;
	public var Name: FName;
	public var Text: FText;
	public var StringArray: TArray<FString>;
	public var StringSet: TSet<FString>;
	public var StringIntMap: TMap<FString, cpp.Int32>;
	public var Delegate: HaxeDelegateProperty<(cpp.Int32) -> Void>;
	public var MulticastDelegate: HaxeMulticastSparseDelegateProperty<(FString) -> Void>;
	public var Struct: PyTestStruct;
	public var StructArray: TArray<PyTestStruct>;
	public var ChildStruct: PyTestChildStruct;
	public var BoolInstanceOnly: Bool;
	public var BoolDefaultsOnly: Bool;

	public function ReturnSet(): cpp.Reference<TSet<cpp.Int32>>;
	public function ReturnMap(): cpp.Reference<TMap<cpp.Int32, Bool>>;
	public function ReturnArray(): cpp.Reference<TArray<cpp.Int32>>;
	public function MulticastDelegatePropertyCallback(InStr: FString): Void;
	public function LegacyFuncTakingPyTestStruct(InStruct: cpp.Reference<PyTestStruct>): Void;
	public function GetConstantValue(): cpp.Reference<cpp.Int32>;
	public function FuncTakingPyTestStructDefault(InStruct: cpp.Reference<PyTestStruct>): Void;
	public function FuncTakingPyTestStruct(InStruct: cpp.Reference<PyTestStruct>): Void;
	public function FuncTakingPyTestDelegate(InDelegate: cpp.Reference<HaxeDelegateProperty<(cpp.Int32) -> Void>>, InValue: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function FuncTakingPyTestChildStruct(InStruct: cpp.Reference<PyTestChildStruct>): Void;
	public function FuncBlueprintNativeRef(InOutStruct: cpp.Reference<PyTestStruct>): Void;
	public function FuncBlueprintNative(InValue: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function FuncBlueprintImplementable(InValue: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function EmitScriptWarning(): Void;
	public function EmitScriptError(): Void;
	public function DelegatePropertyCallback(InValue: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function CallFuncBlueprintNativeRef(InOutStruct: cpp.Reference<PyTestStruct>): Void;
	public function CallFuncBlueprintNative(InValue: cpp.Int32): cpp.Reference<cpp.Int32>;
	public function CallFuncBlueprintImplementable(InValue: cpp.Int32): cpp.Reference<cpp.Int32>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	MulticastDelegatePropertyCallback, LegacyFuncTakingPyTestStruct, FuncTakingPyTestStruct, FuncTakingPyTestDelegate, FuncTakingPyTestChildStruct,
	FuncBlueprintNativeRef, FuncBlueprintNative, FuncBlueprintImplementable, DelegatePropertyCallback, CallFuncBlueprintNativeRef,
	CallFuncBlueprintNative, CallFuncBlueprintImplementable
)
@:nativeGen
abstract ConstPyTestObject(PyTestObject) from PyTestObject {
	public extern var Bool(get, never): Bool;
	public inline extern function get_Bool(): Bool return this.Bool;
	public extern var Int(get, never): cpp.Int32;
	public inline extern function get_Int(): cpp.Int32 return this.Int;
	public extern var Float(get, never): cpp.Float32;
	public inline extern function get_Float(): cpp.Float32 return this.Float;
	public extern var Enum(get, never): EPyTestEnum;
	public inline extern function get_Enum(): EPyTestEnum return this.Enum;
	public extern var String(get, never): FString;
	public inline extern function get_String(): FString return this.String;
	public extern var Name(get, never): FName;
	public inline extern function get_Name(): FName return this.Name;
	public extern var Text(get, never): FText;
	public inline extern function get_Text(): FText return this.Text;
	public extern var StringArray(get, never): TArray<FString>;
	public inline extern function get_StringArray(): TArray<FString> return this.StringArray;
	public extern var StringSet(get, never): TSet<FString>;
	public inline extern function get_StringSet(): TSet<FString> return this.StringSet;
	public extern var StringIntMap(get, never): TMap<FString, cpp.Int32>;
	public inline extern function get_StringIntMap(): TMap<FString, cpp.Int32> return this.StringIntMap;
	public extern var Delegate(get, never): HaxeDelegateProperty<(cpp.Int32) -> Void>;
	public inline extern function get_Delegate(): HaxeDelegateProperty<(cpp.Int32) -> Void> return this.Delegate;
	public extern var MulticastDelegate(get, never): HaxeMulticastSparseDelegateProperty<(FString) -> Void>;
	public inline extern function get_MulticastDelegate(): HaxeMulticastSparseDelegateProperty<(FString) -> Void> return this.MulticastDelegate;
	public extern var Struct(get, never): PyTestStruct;
	public inline extern function get_Struct(): PyTestStruct return this.Struct;
	public extern var StructArray(get, never): TArray<PyTestStruct>;
	public inline extern function get_StructArray(): TArray<PyTestStruct> return this.StructArray;
	public extern var ChildStruct(get, never): PyTestChildStruct;
	public inline extern function get_ChildStruct(): PyTestChildStruct return this.ChildStruct;
	public extern var BoolInstanceOnly(get, never): Bool;
	public inline extern function get_BoolInstanceOnly(): Bool return this.BoolInstanceOnly;
	public extern var BoolDefaultsOnly(get, never): Bool;
	public inline extern function get_BoolDefaultsOnly(): Bool return this.BoolDefaultsOnly;
}

@:forward
@:nativeGen
@:native("PyTestObject*")
abstract PyTestObjectPtr(cpp.Star<PyTestObject>) from cpp.Star<PyTestObject> to cpp.Star<PyTestObject>{
	@:from
	public static extern inline function fromValue(v: PyTestObject): PyTestObjectPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): PyTestObject {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}