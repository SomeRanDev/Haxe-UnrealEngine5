// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UBlueprintGameplayTagLibrary")
@:include("BlueprintGameplayTagLibrary.h")
extern class UBlueprintGameplayTagLibrary extends UBlueprintFunctionLibrary {

	public function RemoveGameplayTag(TagContainer: FGameplayTagContainer, Tag: FGameplayTag): Bool;
	public function NotEqual_TagTag(A: FGameplayTag, B: FString): Bool;
	public function NotEqual_TagContainerTagContainer(A: FGameplayTagContainer, B: FString): Bool;
	public function NotEqual_GameplayTagContainer(A: FGameplayTagContainer, B: FGameplayTagContainer): Bool;
	public function NotEqual_GameplayTag(A: FGameplayTag, B: FGameplayTag): Bool;
	public function MatchesTag(TagOne: FGameplayTag, TagTwo: FGameplayTag, bExactMatch: Bool): Bool;
	public function MatchesAnyTags(TagOne: FGameplayTag, OtherContainer: FGameplayTagContainer, bExactMatch: Bool): Bool;
	public function MakeLiteralGameplayTagContainer(Value: FGameplayTagContainer): FGameplayTagContainer;
	public function MakeLiteralGameplayTag(Value: FGameplayTag): FGameplayTag;
	public function MakeGameplayTagQuery(TagQuery: FGameplayTagQuery): FGameplayTagQuery;
	public function MakeGameplayTagContainerFromTag(SingleTag: FGameplayTag): FGameplayTagContainer;
	public function MakeGameplayTagContainerFromArray(GameplayTags: TArray<FGameplayTag>): FGameplayTagContainer;
	public function IsTagQueryEmpty(TagQuery: FGameplayTagQuery): Bool;
	public function IsGameplayTagValid(GameplayTag: FGameplayTag): Bool;
	public function HasTag(TagContainer: FGameplayTagContainer, Tag: FGameplayTag, bExactMatch: Bool): Bool;
	public function HasAnyTags(TagContainer: FGameplayTagContainer, OtherContainer: FGameplayTagContainer, bExactMatch: Bool): Bool;
	public function HasAllTags(TagContainer: FGameplayTagContainer, OtherContainer: FGameplayTagContainer, bExactMatch: Bool): Bool;
	public function HasAllMatchingGameplayTags(TagContainerInterface: UGameplayTagAssetInterface, OtherContainer: FGameplayTagContainer): Bool;
	public function GetTagName(GameplayTag: FGameplayTag): FName;
	public function GetNumGameplayTagsInContainer(TagContainer: FGameplayTagContainer): cpp.Int32;
	public function GetDebugStringFromGameplayTagContainer(TagContainer: FGameplayTagContainer): FString;
	public function GetDebugStringFromGameplayTag(GameplayTag: FGameplayTag): FString;
	public function GetAllActorsOfClassMatchingTagQuery(WorldContextObject: cpp.Star<UObject>, ActorClass: TSubclassOf<AActor>, GameplayTagQuery: FGameplayTagQuery, OutActors: TArray<cpp.Star<AActor>>): Void;
	public function EqualEqual_GameplayTagContainer(A: FGameplayTagContainer, B: FGameplayTagContainer): Bool;
	public function EqualEqual_GameplayTag(A: FGameplayTag, B: FGameplayTag): Bool;
	public function DoesTagAssetInterfaceHaveTag(TagContainerInterface: UGameplayTagAssetInterface, Tag: FGameplayTag): Bool;
	public function DoesContainerMatchTagQuery(TagContainer: FGameplayTagContainer, TagQuery: FGameplayTagQuery): Bool;
	public function BreakGameplayTagContainer(GameplayTagContainer: FGameplayTagContainer, GameplayTags: TArray<FGameplayTag>): Void;
	public function AppendGameplayTagContainers(InOutTagContainer: FGameplayTagContainer, InTagContainer: FGameplayTagContainer): Void;
	public function AddGameplayTag(TagContainer: FGameplayTagContainer, Tag: FGameplayTag): Void;
}
