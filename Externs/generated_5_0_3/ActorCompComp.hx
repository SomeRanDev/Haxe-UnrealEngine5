// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UActorComponent")
@:include("Components/ActorComponent.h")
extern class ActorCompComp extends Object {
	public var PrimaryComponentTick: FActorComponentTickFunction;
	public var ComponentTags: TArray<FName>;
	public var AssetUserData: TArray<cpp.Star<AssetUserData>>;
	public var UCSSerializationIndex: cpp.Int32;
	public var bNetAddressable: Bool;
	public var bReplicates: Bool;
	public var bCreatedByConstructionScript_DEPRECATED: Bool;
	public var bInstanceComponent_DEPRECATED: Bool;
	public var bAutoActivate: Bool;
	public var bIsActive: Bool;
	public var bEditableWhenInherited: Bool;
	public var bCanEverAffectNavigation: Bool;
	public var bIsEditorOnly: Bool;
	public var bIsVisualizationComponent: Bool;
	public var bNeedsUCSSerializationIndexEvaluted: Bool;
	public var CreationMethod: EComponentCreationMethod;
	public var OnComponentActivated: HaxeMulticastSparseDelegateProperty<(cpp.Star<ActorCompComp>, Bool) -> Void>;
	public var OnComponentDeactivated: HaxeMulticastSparseDelegateProperty<(cpp.Star<ActorCompComp>) -> Void>;
	public var UCSModifiedProperties: TArray<FSimpleMemberReference>;

	public function ToggleActive(): Void;
	public function SetTickGroup(NewTickGroup: ETickingGroup): Void;
	public function SetTickableWhenPaused(bTickableWhenPaused: Bool): Void;
	public function SetIsReplicated(ShouldReplicate: Bool): Void;
	public function SetComponentTickIntervalAndCooldown(TickInterval: cpp.Float32): Void;
	public function SetComponentTickInterval(TickInterval: cpp.Float32): Void;
	public function SetComponentTickEnabled(bEnabled: Bool): Void;
	public function SetAutoActivate(bNewAutoActivate: Bool): Void;
	public function SetActive(bNewActive: Bool, bReset: Bool): Void;
	public function RemoveTickPrerequisiteComponent(PrerequisiteComponent: cpp.Star<ActorCompComp>): Void;
	public function RemoveTickPrerequisiteActor(PrerequisiteActor: cpp.Star<Actor>): Void;
	public function ReceiveTick(DeltaSeconds: cpp.Float32): Void;
	public function ReceiveEndPlay(EndPlayReason: EEndPlayReason): Void;
	public function ReceiveBeginPlay(): Void;
	public function OnRep_IsActive(): Void;
	public function K2_DestroyComponent(Object: cpp.Star<Object>): Void;
	public function IsComponentTickEnabled(): cpp.Reference<Bool>;
	public function IsBeingDestroyed(): cpp.Reference<Bool>;
	public function IsActive(): cpp.Reference<Bool>;
	public function GetOwner(): cpp.Reference<cpp.Star<Actor>>;
	public function GetComponentTickInterval(): cpp.Reference<cpp.Float32>;
	public function Deactivate(): Void;
	public function ComponentHasTag(Tag: FName): cpp.Reference<Bool>;
	public function AddTickPrerequisiteComponent(PrerequisiteComponent: cpp.Star<ActorCompComp>): Void;
	public function AddTickPrerequisiteActor(PrerequisiteActor: cpp.Star<Actor>): Void;
	public function Activate(bReset: Bool): Void;
}

@:forward(IsComponentTickEnabled, IsBeingDestroyed, IsActive, GetOwner, GetComponentTickInterval, ComponentHasTag)
abstract ConstActorCompComp(ActorCompComp) from ActorCompComp {
}