// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditorAssetLibrary")
@:include("EditorAssetLibrary.h")
extern class UEditorAssetLibrary extends UBlueprintFunctionLibrary {

	public function SyncBrowserToObjects(AssetPaths: TArray<FString>): Void;
	public function SetMetadataTag(Object: cpp.Star<UObject>, Tag: FName, Value: FString): Void;
	public function SaveLoadedAssets(AssetsToSave: TArray<cpp.Star<UObject>>, bOnlyIfIsDirty: Bool): Bool;
	public function SaveLoadedAsset(AssetToSave: cpp.Star<UObject>, bOnlyIfIsDirty: Bool): Bool;
	public function SaveDirectory(DirectoryPath: FString, bOnlyIfIsDirty: Bool, bRecursive: Bool): Bool;
	public function SaveAsset(AssetToSave: FString, bOnlyIfIsDirty: Bool): Bool;
	public function RenameLoadedAsset(SourceAsset: cpp.Star<UObject>, DestinationAssetPath: FString): Bool;
	public function RenameDirectory(SourceDirectoryPath: FString, DestinationDirectoryPath: FString): Bool;
	public function RenameAsset(SourceAssetPath: FString, DestinationAssetPath: FString): Bool;
	public function RemoveMetadataTag(Object: cpp.Star<UObject>, Tag: FName): Void;
	public function MakeDirectory(DirectoryPath: FString): Bool;
	public function LoadBlueprintClass(AssetPath: FString): cpp.Star<UClass>;
	public function LoadAsset(AssetPath: FString): cpp.Star<UObject>;
	public function ListAssets(DirectoryPath: FString, bRecursive: Bool, bIncludeFolder: Bool): TArray<FString>;
	public function ListAssetByTagValue(TagName: FName, TagValue: FString): TArray<FString>;
	public function GetTagValues(AssetPath: FString): TMap<FName, FString>;
	public function GetPathNameForLoadedAsset(LoadedAsset: cpp.Star<UObject>): FString;
	public function GetMetadataTagValues(Object: cpp.Star<UObject>): TMap<FName, FString>;
	public function GetMetadataTag(Object: cpp.Star<UObject>, Tag: FName): FString;
	public function FindPackageReferencersForAsset(AssetPath: FString, bLoadAssetsToConfirm: Bool): TArray<FString>;
	public function FindAssetData(AssetPath: FString): FAssetData;
	public function DuplicateLoadedAsset(SourceAsset: cpp.Star<UObject>, DestinationAssetPath: FString): cpp.Star<UObject>;
	public function DuplicateDirectory(SourceDirectoryPath: FString, DestinationDirectoryPath: FString): Bool;
	public function DuplicateAsset(SourceAssetPath: FString, DestinationAssetPath: FString): cpp.Star<UObject>;
	public function DoesDirectoryHaveAssets(DirectoryPath: FString, bRecursive: Bool): Bool;
	public function DoesDirectoryExist(DirectoryPath: FString): Bool;
	public function DoesAssetExist(AssetPath: FString): Bool;
	public function DoAssetsExist(AssetPaths: TArray<FString>): Bool;
	public function DeleteLoadedAssets(AssetsToDelete: TArray<cpp.Star<UObject>>): Bool;
	public function DeleteLoadedAsset(AssetToDelete: cpp.Star<UObject>): Bool;
	public function DeleteDirectory(DirectoryPath: FString): Bool;
	public function DeleteAsset(AssetPathToDelete: FString): Bool;
	public function ConsolidateAssets(AssetToConsolidateTo: cpp.Star<UObject>, AssetsToConsolidate: TArray<cpp.Star<UObject>>): Bool;
	public function CheckoutLoadedAssets(AssetsToCheckout: TArray<cpp.Star<UObject>>): Bool;
	public function CheckoutLoadedAsset(AssetToCheckout: cpp.Star<UObject>): Bool;
	public function CheckoutDirectory(DirectoryPath: FString, bRecursive: Bool): Bool;
	public function CheckoutAsset(AssetToCheckout: FString): Bool;
}
