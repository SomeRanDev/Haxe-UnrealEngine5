// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UClothLODDataCommon_Legacy")
@:include("ClothLODData_Legacy.h")
@:structAccess
extern class ClothLODDataCommon_Legacy extends Object {
	public var PhysicalMeshData_DEPRECATED: cpp.Star<ClothPhysicalMeshDataBase_Legacy>;
	public var ClothPhysicalMeshData: ClothPhysicalMeshData;
	public var CollisionData: ClothCollisionData;
	public var ParameterMasks: TArray<PointWeightMap>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstClothLODDataCommon_Legacy(ClothLODDataCommon_Legacy) from ClothLODDataCommon_Legacy {
	public extern var PhysicalMeshData_DEPRECATED(get, never): cpp.Star<ClothPhysicalMeshDataBase_Legacy.ConstClothPhysicalMeshDataBase_Legacy>;
	public inline extern function get_PhysicalMeshData_DEPRECATED(): cpp.Star<ClothPhysicalMeshDataBase_Legacy.ConstClothPhysicalMeshDataBase_Legacy> return this.PhysicalMeshData_DEPRECATED;
	public extern var ClothPhysicalMeshData(get, never): ClothPhysicalMeshData;
	public inline extern function get_ClothPhysicalMeshData(): ClothPhysicalMeshData return this.ClothPhysicalMeshData;
	public extern var CollisionData(get, never): ClothCollisionData;
	public inline extern function get_CollisionData(): ClothCollisionData return this.CollisionData;
	public extern var ParameterMasks(get, never): TArray<PointWeightMap>;
	public inline extern function get_ParameterMasks(): TArray<PointWeightMap> return this.ParameterMasks;
}

@:forward
@:nativeGen
@:native("ClothLODDataCommon_Legacy*")
abstract ClothLODDataCommon_LegacyPtr(cpp.Star<ClothLODDataCommon_Legacy>) from cpp.Star<ClothLODDataCommon_Legacy> to cpp.Star<ClothLODDataCommon_Legacy>{
	@:from
	public static extern inline function fromValue(v: ClothLODDataCommon_Legacy): ClothLODDataCommon_LegacyPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): ClothLODDataCommon_Legacy {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}