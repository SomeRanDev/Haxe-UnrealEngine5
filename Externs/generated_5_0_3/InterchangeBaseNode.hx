// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeBaseNode")
@:include("Nodes/InterchangeBaseNode.h")
@:structAccess
extern class InterchangeBaseNode extends Object {
	public var ReferenceObject: SoftObjectPath;

	public function SetParentUid(ParentUid: FString): cpp.Reference<Bool>;
	public function SetEnabled(bIsEnabled: Bool): cpp.Reference<Bool>;
	public function SetDisplayLabel(DisplayName: FString): cpp.Reference<Bool>;
	public function SetAssetName(AssetName: FString): cpp.Reference<Bool>;
	public function RemoveTargetNodeUid(AssetUid: FString): cpp.Reference<Bool>;
	public function RemoveFactoryDependencyUid(DependencyUid: FString): cpp.Reference<Bool>;
	public function RemoveAttribute(NodeAttributeKey: FString): cpp.Reference<Bool>;
	public function IsEnabled(): cpp.Reference<Bool>;
	public function InitializeNode(UniqueID: FString, DisplayLabel: FString, NodeContainerType: EInterchangeNodeContainerType): Void;
	public function GetUniqueID(): cpp.Reference<FString>;
	public function GetTargetNodeUids(OutTargetAssets: cpp.Reference<TArray<FString>>): Void;
	public function GetTargetNodeCount(): cpp.Reference<cpp.Int32>;
	public function GetStringAttribute(NodeAttributeKey: FString, OutValue: cpp.Reference<FString>): cpp.Reference<Bool>;
	public function GetParentUid(): cpp.Reference<FString>;
	public function GetNodeContainerType(): cpp.Reference<EInterchangeNodeContainerType>;
	public function GetInt32Attribute(NodeAttributeKey: FString, OutValue: cpp.Reference<cpp.Int32>): cpp.Reference<Bool>;
	public function GetFloatAttribute(NodeAttributeKey: FString, OutValue: cpp.Reference<cpp.Float32>): cpp.Reference<Bool>;
	public function GetFactoryDependency(Index: cpp.Int32, OutDependency: cpp.Reference<FString>): Void;
	public function GetFactoryDependenciesCount(): cpp.Reference<cpp.Int32>;
	public function GetFactoryDependencies(OutDependencies: cpp.Reference<TArray<FString>>): Void;
	public function GetDisplayLabel(): cpp.Reference<FString>;
	public function GetBooleanAttribute(NodeAttributeKey: FString, OutValue: cpp.Reference<Bool>): cpp.Reference<Bool>;
	public function GetAssetName(): cpp.Reference<FString>;
	public function AddTargetNodeUid(AssetUid: FString): cpp.Reference<Bool>;
	public function AddStringAttribute(NodeAttributeKey: FString, Value: FString): cpp.Reference<Bool>;
	public function AddInt32Attribute(NodeAttributeKey: FString, Value: cpp.Reference<cpp.Int32>): cpp.Reference<Bool>;
	public function AddFloatAttribute(NodeAttributeKey: FString, Value: cpp.Reference<cpp.Float32>): cpp.Reference<Bool>;
	public function AddFactoryDependencyUid(DependencyUid: FString): cpp.Reference<Bool>;
	public function AddBooleanAttribute(NodeAttributeKey: FString, Value: cpp.Reference<Bool>): cpp.Reference<Bool>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	RemoveTargetNodeUid, IsEnabled, GetUniqueID, GetTargetNodeUids, GetTargetNodeCount,
	GetParentUid, GetNodeContainerType, GetFactoryDependency, GetFactoryDependenciesCount, GetFactoryDependencies,
	GetDisplayLabel, GetAssetName, AddTargetNodeUid
)
@:nativeGen
abstract ConstInterchangeBaseNode(InterchangeBaseNode) from InterchangeBaseNode {
	public extern var ReferenceObject(get, never): SoftObjectPath;
	public inline extern function get_ReferenceObject(): SoftObjectPath return this.ReferenceObject;
}