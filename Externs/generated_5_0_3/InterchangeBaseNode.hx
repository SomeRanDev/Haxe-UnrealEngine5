// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeBaseNode")
@:include("Nodes/InterchangeBaseNode.h")
@:structAccess
extern class InterchangeBaseNode extends Object {
	public var ReferenceObject: SoftObjectPath;

	public function SetParentUid(ParentUid: FString): Bool;
	public function SetEnabled(bIsEnabled: Bool): Bool;
	public function SetDisplayLabel(DisplayName: FString): Bool;
	public function SetAssetName(AssetName: FString): Bool;
	public function RemoveTargetNodeUid(AssetUid: FString): Bool;
	public function RemoveFactoryDependencyUid(DependencyUid: FString): Bool;
	public function RemoveAttribute(NodeAttributeKey: FString): Bool;
	public function IsEnabled(): Bool;
	public function InitializeNode(UniqueID: FString, DisplayLabel: FString, NodeContainerType: EInterchangeNodeContainerType): Void;
	public function GetUniqueID(): FString;
	public function GetTargetNodeUids(OutTargetAssets: cpp.Reference<TArray<FString>>): Void;
	public function GetTargetNodeCount(): cpp.Int32;
	public function GetStringAttribute(NodeAttributeKey: FString, OutValue: cpp.Reference<FString>): Bool;
	public function GetParentUid(): FString;
	public function GetNodeContainerType(): EInterchangeNodeContainerType;
	public function GetInt32Attribute(NodeAttributeKey: FString, OutValue: cpp.Reference<cpp.Int32>): Bool;
	public function GetFloatAttribute(NodeAttributeKey: FString, OutValue: cpp.Reference<cpp.Float32>): Bool;
	public function GetFactoryDependency(Index: cpp.Int32, OutDependency: cpp.Reference<FString>): Void;
	public function GetFactoryDependenciesCount(): cpp.Int32;
	public function GetFactoryDependencies(OutDependencies: cpp.Reference<TArray<FString>>): Void;
	public function GetDisplayLabel(): FString;
	public function GetBooleanAttribute(NodeAttributeKey: FString, OutValue: cpp.Reference<Bool>): Bool;
	public function GetAssetName(): FString;
	public function AddTargetNodeUid(AssetUid: FString): Bool;
	public function AddStringAttribute(NodeAttributeKey: FString, Value: FString): Bool;
	public function AddInt32Attribute(NodeAttributeKey: FString, Value: cpp.Reference<cpp.Int32>): Bool;
	public function AddFloatAttribute(NodeAttributeKey: FString, Value: cpp.Reference<cpp.Float32>): Bool;
	public function AddFactoryDependencyUid(DependencyUid: FString): Bool;
	public function AddBooleanAttribute(NodeAttributeKey: FString, Value: cpp.Reference<Bool>): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(
	RemoveTargetNodeUid, IsEnabled, GetUniqueID, GetTargetNodeUids, GetTargetNodeCount,
	GetParentUid, GetNodeContainerType, GetFactoryDependency, GetFactoryDependenciesCount, GetFactoryDependencies,
	GetDisplayLabel, GetAssetName, AddTargetNodeUid
)
@:nativeGen
abstract ConstInterchangeBaseNode(InterchangeBaseNode) from InterchangeBaseNode {
	public extern var ReferenceObject(get, never): SoftObjectPath;
	public inline extern function get_ReferenceObject(): SoftObjectPath return this.ReferenceObject;
}

@:forward
@:nativeGen
@:native("InterchangeBaseNode*")
abstract InterchangeBaseNodePtr(cpp.Star<InterchangeBaseNode>) from cpp.Star<InterchangeBaseNode> to cpp.Star<InterchangeBaseNode>{
	@:from
	public static extern inline function fromValue(v: InterchangeBaseNode): InterchangeBaseNodePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeBaseNode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}