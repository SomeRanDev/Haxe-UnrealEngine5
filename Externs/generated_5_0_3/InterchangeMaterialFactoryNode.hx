// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UInterchangeMaterialFactoryNode")
@:include("InterchangeMaterialFactoryNode.h")
@:structAccess
extern class InterchangeMaterialFactoryNode extends InterchangeBaseNode {
	public function SetTextureDependencyUid(DependencyUid: FString): Bool;
	public function SetCustomTranslatedMaterialNodeUid(AttributeValue: FString): Bool;
	public function SetCustomMaterialUsage(AttributeValue: cpp.Reference<cpp.UInt8>, bAddApplyDelegate: Bool): Bool;
	public function SetCustomBlendMode(AttributeValue: cpp.Reference<cpp.UInt8>, bAddApplyDelegate: Bool): Bool;
	public function RemoveTextureDependencyUid(DependencyUid: FString): Bool;
	public function InitializeMaterialNode(UniqueID: FString, DisplayLabel: FString, InAssetClass: FString): Void;
	public function GetTextureDependency(Index: cpp.Int32, OutDependency: cpp.Reference<FString>): Void;
	public function GetTextureDependencies(OutDependencies: cpp.Reference<TArray<FString>>): Void;
	public function GetTextureDependeciesCount(): cpp.Int32;
	public function GetObjectClass(): cpp.Star<Class>;
	public function GetCustomTranslatedMaterialNodeUid(AttributeValue: cpp.Reference<FString>): Bool;
	public function GetCustomMaterialUsage(AttributeValue: cpp.Reference<cpp.UInt8>): Bool;
	public function GetCustomBlendMode(AttributeValue: cpp.Reference<cpp.UInt8>): Bool;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward(GetTextureDependency, GetTextureDependencies, GetTextureDependeciesCount, GetObjectClass, GetCustomTranslatedMaterialNodeUid, GetCustomMaterialUsage, GetCustomBlendMode)
@:nativeGen
abstract ConstInterchangeMaterialFactoryNode(InterchangeMaterialFactoryNode) from InterchangeMaterialFactoryNode {
}

@:forward
@:nativeGen
@:native("InterchangeMaterialFactoryNode*")
abstract InterchangeMaterialFactoryNodePtr(cpp.Star<InterchangeMaterialFactoryNode>) from cpp.Star<InterchangeMaterialFactoryNode> to cpp.Star<InterchangeMaterialFactoryNode>{
	@:from
	public static extern inline function fromValue(v: InterchangeMaterialFactoryNode): InterchangeMaterialFactoryNodePtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): InterchangeMaterialFactoryNode {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}