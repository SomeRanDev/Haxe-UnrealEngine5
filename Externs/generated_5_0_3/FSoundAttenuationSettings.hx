// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("FSoundAttenuationSettings")
@:include("Sound/SoundAttenuation.h")
extern class FSoundAttenuationSettings extends FBaseAttenuationSettings {
	public var bAttenuate: Bool;
	public var bSpatialize: Bool;
	public var bAttenuateWithLPF: Bool;
	public var bEnableListenerFocus: Bool;
	public var bEnableFocusInterpolation: Bool;
	public var bEnableOcclusion: Bool;
	public var bUseComplexCollisionForOcclusion: Bool;
	public var bEnableReverbSend: Bool;
	public var bEnablePriorityAttenuation: Bool;
	public var bApplyNormalizationToStereoSounds: Bool;
	public var bEnableLogFrequencyScaling: Bool;
	public var bEnableSubmixSends: Bool;
	public var bEnableSourceDataOverride: Bool;
	public var SpatializationAlgorithm: ESoundSpatializationAlgorithm;
	public var BinauralRadius: cpp.Float32;
	public var AbsorptionMethod: EAirAbsorptionMethod;
	public var OcclusionTraceChannel: ECollisionChannel;
	public var ReverbSendMethod: EReverbSendMethod;
	public var PriorityAttenuationMethod: EPriorityAttenuationMethod;
	public var DistanceType_DEPRECATED: ESoundDistanceCalc;
	public var OmniRadius: cpp.Float32;
	public var StereoSpread: cpp.Float32;
	public var SpatializationPluginSettings_DEPRECATED: TObjectPtr<USpatializationPluginSourceSettingsBase>;
	public var RadiusMin_DEPRECATED: cpp.Float32;
	public var RadiusMax_DEPRECATED: cpp.Float32;
	public var LPFRadiusMin: cpp.Float32;
	public var LPFRadiusMax: cpp.Float32;
	public var CustomLowpassAirAbsorptionCurve: FRuntimeFloatCurve;
	public var CustomHighpassAirAbsorptionCurve: FRuntimeFloatCurve;
	public var LPFFrequencyAtMin: cpp.Float32;
	public var LPFFrequencyAtMax: cpp.Float32;
	public var HPFFrequencyAtMin: cpp.Float32;
	public var HPFFrequencyAtMax: cpp.Float32;
	public var FocusAzimuth: cpp.Float32;
	public var NonFocusAzimuth: cpp.Float32;
	public var FocusDistanceScale: cpp.Float32;
	public var NonFocusDistanceScale: cpp.Float32;
	public var FocusPriorityScale: cpp.Float32;
	public var NonFocusPriorityScale: cpp.Float32;
	public var FocusVolumeAttenuation: cpp.Float32;
	public var NonFocusVolumeAttenuation: cpp.Float32;
	public var FocusAttackInterpSpeed: cpp.Float32;
	public var FocusReleaseInterpSpeed: cpp.Float32;
	public var OcclusionLowPassFilterFrequency: cpp.Float32;
	public var OcclusionVolumeAttenuation: cpp.Float32;
	public var OcclusionInterpolationTime: cpp.Float32;
	public var OcclusionPluginSettings_DEPRECATED: TObjectPtr<UOcclusionPluginSourceSettingsBase>;
	public var ReverbPluginSettings_DEPRECATED: TObjectPtr<UReverbPluginSourceSettingsBase>;
	public var ReverbWetLevelMin: cpp.Float32;
	public var ReverbWetLevelMax: cpp.Float32;
	public var ReverbDistanceMin: cpp.Float32;
	public var ReverbDistanceMax: cpp.Float32;
	public var ManualReverbSendLevel: cpp.Float32;
	public var CustomReverbSendCurve: FRuntimeFloatCurve;
	public var SubmixSendSettings: TArray<FAttenuationSubmixSendSettings>;
	public var PriorityAttenuationMin: cpp.Float32;
	public var PriorityAttenuationMax: cpp.Float32;
	public var PriorityAttenuationDistanceMin: cpp.Float32;
	public var PriorityAttenuationDistanceMax: cpp.Float32;
	public var ManualPriorityAttenuation: cpp.Float32;
	public var CustomPriorityAttenuationCurve: FRuntimeFloatCurve;
	public var PluginSettings: FSoundAttenuationPluginSettings;
}