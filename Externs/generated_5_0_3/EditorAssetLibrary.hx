// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UEditorAssetLibrary")
@:include("EditorAssetLibrary.h")
@:structAccess
extern class EditorAssetLibrary extends BlueprintFunctionLibrary {
	public function SyncBrowserToObjects(AssetPaths: cpp.Reference<TArray<FString>>): Void;
	public function SetMetadataTag(Object: cpp.Star<Object>, Tag: FName, Value: FString): Void;
	public function SaveLoadedAssets(AssetsToSave: cpp.Reference<TArray<cpp.Star<Object>>>, bOnlyIfIsDirty: Bool): cpp.Reference<Bool>;
	public function SaveLoadedAsset(AssetToSave: cpp.Star<Object>, bOnlyIfIsDirty: Bool): cpp.Reference<Bool>;
	public function SaveDirectory(DirectoryPath: FString, bOnlyIfIsDirty: Bool, bRecursive: Bool): cpp.Reference<Bool>;
	public function SaveAsset(AssetToSave: FString, bOnlyIfIsDirty: Bool): cpp.Reference<Bool>;
	public function RenameLoadedAsset(SourceAsset: cpp.Star<Object>, DestinationAssetPath: FString): cpp.Reference<Bool>;
	public function RenameDirectory(SourceDirectoryPath: FString, DestinationDirectoryPath: FString): cpp.Reference<Bool>;
	public function RenameAsset(SourceAssetPath: FString, DestinationAssetPath: FString): cpp.Reference<Bool>;
	public function RemoveMetadataTag(Object: cpp.Star<Object>, Tag: FName): Void;
	public function MakeDirectory(DirectoryPath: FString): cpp.Reference<Bool>;
	public function LoadBlueprintClass(AssetPath: FString): cpp.Reference<cpp.Star<Class>>;
	public function LoadAsset(AssetPath: FString): cpp.Reference<cpp.Star<Object>>;
	public function ListAssets(DirectoryPath: FString, bRecursive: Bool, bIncludeFolder: Bool): cpp.Reference<TArray<FString>>;
	public function ListAssetByTagValue(TagName: FName, TagValue: FString): cpp.Reference<TArray<FString>>;
	public function GetTagValues(AssetPath: FString): cpp.Reference<TMap<FName, FString>>;
	public function GetPathNameForLoadedAsset(LoadedAsset: cpp.Star<Object>): cpp.Reference<FString>;
	public function GetMetadataTagValues(Object: cpp.Star<Object>): cpp.Reference<TMap<FName, FString>>;
	public function GetMetadataTag(Object: cpp.Star<Object>, Tag: FName): cpp.Reference<FString>;
	public function FindPackageReferencersForAsset(AssetPath: FString, bLoadAssetsToConfirm: Bool): cpp.Reference<TArray<FString>>;
	public function FindAssetData(AssetPath: FString): cpp.Reference<AssetData>;
	public function DuplicateLoadedAsset(SourceAsset: cpp.Star<Object>, DestinationAssetPath: FString): cpp.Reference<cpp.Star<Object>>;
	public function DuplicateDirectory(SourceDirectoryPath: FString, DestinationDirectoryPath: FString): cpp.Reference<Bool>;
	public function DuplicateAsset(SourceAssetPath: FString, DestinationAssetPath: FString): cpp.Reference<cpp.Star<Object>>;
	public function DoesDirectoryHaveAssets(DirectoryPath: FString, bRecursive: Bool): cpp.Reference<Bool>;
	public function DoesDirectoryExist(DirectoryPath: FString): cpp.Reference<Bool>;
	public function DoesAssetExist(AssetPath: FString): cpp.Reference<Bool>;
	public function DoAssetsExist(AssetPaths: cpp.Reference<TArray<FString>>): cpp.Reference<Bool>;
	public function DeleteLoadedAssets(AssetsToDelete: cpp.Reference<TArray<cpp.Star<Object>>>): cpp.Reference<Bool>;
	public function DeleteLoadedAsset(AssetToDelete: cpp.Star<Object>): cpp.Reference<Bool>;
	public function DeleteDirectory(DirectoryPath: FString): cpp.Reference<Bool>;
	public function DeleteAsset(AssetPathToDelete: FString): cpp.Reference<Bool>;
	public function ConsolidateAssets(AssetToConsolidateTo: cpp.Star<Object>, AssetsToConsolidate: cpp.Reference<TArray<cpp.Star<Object>>>): cpp.Reference<Bool>;
	public function CheckoutLoadedAssets(AssetsToCheckout: cpp.Reference<TArray<cpp.Star<Object>>>): cpp.Reference<Bool>;
	public function CheckoutLoadedAsset(AssetToCheckout: cpp.Star<Object>): cpp.Reference<Bool>;
	public function CheckoutDirectory(DirectoryPath: FString, bRecursive: Bool): cpp.Reference<Bool>;
	public function CheckoutAsset(AssetToCheckout: FString): cpp.Reference<Bool>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstEditorAssetLibrary(EditorAssetLibrary) from EditorAssetLibrary {
}

@:forward
@:nativeGen
@:native("EditorAssetLibrary*")
abstract EditorAssetLibraryPtr(cpp.Star<EditorAssetLibrary>) from cpp.Star<EditorAssetLibrary> to cpp.Star<EditorAssetLibrary>{
	@:from
	public static extern inline function fromValue(v: EditorAssetLibrary): EditorAssetLibraryPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): EditorAssetLibrary {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}