// Generated by Haxe-UnrealEngine5 (https://github.com/RobertBorghese/Haxe-UnrealEngine5)
package ue;

@:native("UVREditorPlacement")
@:include("VREditorPlacement.h")
@:structAccess
extern class VREditorPlacement extends Object {
	public var VRMode: cpp.Star<VREditorMode>;
	public var ViewportWorldInteraction: cpp.Star<ViewportWorldInteraction>;
	public var FloatingUIAssetDraggedFrom: cpp.Star<WidgetComp>;
	public var PlacingMaterialOrTextureAsset: cpp.Star<Object>;

	public static function StaticClass(): cpp.Star<Class>;
}

@:forward()
@:nativeGen
abstract ConstVREditorPlacement(VREditorPlacement) from VREditorPlacement {
	public extern var VRMode(get, never): cpp.Star<VREditorMode.ConstVREditorMode>;
	public inline extern function get_VRMode(): cpp.Star<VREditorMode.ConstVREditorMode> return this.VRMode;
	public extern var ViewportWorldInteraction(get, never): cpp.Star<ViewportWorldInteraction.ConstViewportWorldInteraction>;
	public inline extern function get_ViewportWorldInteraction(): cpp.Star<ViewportWorldInteraction.ConstViewportWorldInteraction> return this.ViewportWorldInteraction;
	public extern var FloatingUIAssetDraggedFrom(get, never): cpp.Star<WidgetComp.ConstWidgetComp>;
	public inline extern function get_FloatingUIAssetDraggedFrom(): cpp.Star<WidgetComp.ConstWidgetComp> return this.FloatingUIAssetDraggedFrom;
	public extern var PlacingMaterialOrTextureAsset(get, never): cpp.Star<Object.ConstObject>;
	public inline extern function get_PlacingMaterialOrTextureAsset(): cpp.Star<Object.ConstObject> return this.PlacingMaterialOrTextureAsset;
}

@:forward
@:nativeGen
@:native("VREditorPlacement*")
abstract VREditorPlacementPtr(cpp.Star<VREditorPlacement>) from cpp.Star<VREditorPlacement> to cpp.Star<VREditorPlacement>{
	@:from
	public static extern inline function fromValue(v: VREditorPlacement): VREditorPlacementPtr {
		return untyped __cpp__("&({0})", v);
	}

	@:to
	public extern inline function asValue(): VREditorPlacement {
		return untyped __cpp__("*({0})", this);
	}

	public extern inline function delete(): Void {
		untyped __cpp__("delete ({0})", this);
	}
}